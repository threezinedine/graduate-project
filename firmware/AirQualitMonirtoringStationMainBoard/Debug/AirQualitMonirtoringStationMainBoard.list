
AirQualitMonirtoringStationMainBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d014  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000082c  0800d120  0800d120  0001d120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d94c  0800d94c  00020228  2**0
                  CONTENTS
  4 .ARM          00000000  0800d94c  0800d94c  00020228  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d94c  0800d94c  00020228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d94c  0800d94c  0001d94c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d950  0800d950  0001d950  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000228  20000000  0800d954  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014ac  20000228  0800db7c  00020228  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200016d4  0800db7c  000216d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020251  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018ead  00000000  00000000  00020294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004900  00000000  00000000  00039141  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015c0  00000000  00000000  0003da48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000107a  00000000  00000000  0003f008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d21b  00000000  00000000  00040082  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f778  00000000  00000000  0005d29d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008e002  00000000  00000000  0007ca15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006400  00000000  00000000  0010aa18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000091  00000000  00000000  00110e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000228 	.word	0x20000228
 8000128:	00000000 	.word	0x00000000
 800012c:	0800d108 	.word	0x0800d108

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000022c 	.word	0x2000022c
 8000148:	0800d108 	.word	0x0800d108

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <__aeabi_fmul>:
 8000170:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000174:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000178:	bf1e      	ittt	ne
 800017a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800017e:	ea92 0f0c 	teqne	r2, ip
 8000182:	ea93 0f0c 	teqne	r3, ip
 8000186:	d06f      	beq.n	8000268 <__aeabi_fmul+0xf8>
 8000188:	441a      	add	r2, r3
 800018a:	ea80 0c01 	eor.w	ip, r0, r1
 800018e:	0240      	lsls	r0, r0, #9
 8000190:	bf18      	it	ne
 8000192:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000196:	d01e      	beq.n	80001d6 <__aeabi_fmul+0x66>
 8000198:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800019c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80001a0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80001a4:	fba0 3101 	umull	r3, r1, r0, r1
 80001a8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80001ac:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80001b0:	bf3e      	ittt	cc
 80001b2:	0049      	lslcc	r1, r1, #1
 80001b4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001b8:	005b      	lslcc	r3, r3, #1
 80001ba:	ea40 0001 	orr.w	r0, r0, r1
 80001be:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001c2:	2afd      	cmp	r2, #253	; 0xfd
 80001c4:	d81d      	bhi.n	8000202 <__aeabi_fmul+0x92>
 80001c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001ca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ce:	bf08      	it	eq
 80001d0:	f020 0001 	biceq.w	r0, r0, #1
 80001d4:	4770      	bx	lr
 80001d6:	f090 0f00 	teq	r0, #0
 80001da:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001de:	bf08      	it	eq
 80001e0:	0249      	lsleq	r1, r1, #9
 80001e2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001e6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ea:	3a7f      	subs	r2, #127	; 0x7f
 80001ec:	bfc2      	ittt	gt
 80001ee:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001f2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001f6:	4770      	bxgt	lr
 80001f8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001fc:	f04f 0300 	mov.w	r3, #0
 8000200:	3a01      	subs	r2, #1
 8000202:	dc5d      	bgt.n	80002c0 <__aeabi_fmul+0x150>
 8000204:	f112 0f19 	cmn.w	r2, #25
 8000208:	bfdc      	itt	le
 800020a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800020e:	4770      	bxle	lr
 8000210:	f1c2 0200 	rsb	r2, r2, #0
 8000214:	0041      	lsls	r1, r0, #1
 8000216:	fa21 f102 	lsr.w	r1, r1, r2
 800021a:	f1c2 0220 	rsb	r2, r2, #32
 800021e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000222:	ea5f 0031 	movs.w	r0, r1, rrx
 8000226:	f140 0000 	adc.w	r0, r0, #0
 800022a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800022e:	bf08      	it	eq
 8000230:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000234:	4770      	bx	lr
 8000236:	f092 0f00 	teq	r2, #0
 800023a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800023e:	bf02      	ittt	eq
 8000240:	0040      	lsleq	r0, r0, #1
 8000242:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000246:	3a01      	subeq	r2, #1
 8000248:	d0f9      	beq.n	800023e <__aeabi_fmul+0xce>
 800024a:	ea40 000c 	orr.w	r0, r0, ip
 800024e:	f093 0f00 	teq	r3, #0
 8000252:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000256:	bf02      	ittt	eq
 8000258:	0049      	lsleq	r1, r1, #1
 800025a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800025e:	3b01      	subeq	r3, #1
 8000260:	d0f9      	beq.n	8000256 <__aeabi_fmul+0xe6>
 8000262:	ea41 010c 	orr.w	r1, r1, ip
 8000266:	e78f      	b.n	8000188 <__aeabi_fmul+0x18>
 8000268:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800026c:	ea92 0f0c 	teq	r2, ip
 8000270:	bf18      	it	ne
 8000272:	ea93 0f0c 	teqne	r3, ip
 8000276:	d00a      	beq.n	800028e <__aeabi_fmul+0x11e>
 8000278:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800027c:	bf18      	it	ne
 800027e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000282:	d1d8      	bne.n	8000236 <__aeabi_fmul+0xc6>
 8000284:	ea80 0001 	eor.w	r0, r0, r1
 8000288:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800028c:	4770      	bx	lr
 800028e:	f090 0f00 	teq	r0, #0
 8000292:	bf17      	itett	ne
 8000294:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000298:	4608      	moveq	r0, r1
 800029a:	f091 0f00 	teqne	r1, #0
 800029e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80002a2:	d014      	beq.n	80002ce <__aeabi_fmul+0x15e>
 80002a4:	ea92 0f0c 	teq	r2, ip
 80002a8:	d101      	bne.n	80002ae <__aeabi_fmul+0x13e>
 80002aa:	0242      	lsls	r2, r0, #9
 80002ac:	d10f      	bne.n	80002ce <__aeabi_fmul+0x15e>
 80002ae:	ea93 0f0c 	teq	r3, ip
 80002b2:	d103      	bne.n	80002bc <__aeabi_fmul+0x14c>
 80002b4:	024b      	lsls	r3, r1, #9
 80002b6:	bf18      	it	ne
 80002b8:	4608      	movne	r0, r1
 80002ba:	d108      	bne.n	80002ce <__aeabi_fmul+0x15e>
 80002bc:	ea80 0001 	eor.w	r0, r0, r1
 80002c0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002c4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002c8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002cc:	4770      	bx	lr
 80002ce:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002d2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002d6:	4770      	bx	lr

080002d8 <__aeabi_f2iz>:
 80002d8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80002dc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80002e0:	d30f      	bcc.n	8000302 <__aeabi_f2iz+0x2a>
 80002e2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80002e6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80002ea:	d90d      	bls.n	8000308 <__aeabi_f2iz+0x30>
 80002ec:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80002f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80002f4:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80002f8:	fa23 f002 	lsr.w	r0, r3, r2
 80002fc:	bf18      	it	ne
 80002fe:	4240      	negne	r0, r0
 8000300:	4770      	bx	lr
 8000302:	f04f 0000 	mov.w	r0, #0
 8000306:	4770      	bx	lr
 8000308:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800030c:	d101      	bne.n	8000312 <__aeabi_f2iz+0x3a>
 800030e:	0242      	lsls	r2, r0, #9
 8000310:	d105      	bne.n	800031e <__aeabi_f2iz+0x46>
 8000312:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000316:	bf08      	it	eq
 8000318:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800031c:	4770      	bx	lr
 800031e:	f04f 0000 	mov.w	r0, #0
 8000322:	4770      	bx	lr

08000324 <Command_Init>:
static void HelpCommandHanlderFunction(uint8_t argc, char **argv);
static void FreeCommandDefElement(HashMap_Node *sNode);
static void FreeCommandQueueElement(Queue_Node *sNode);

void Command_Init()
{
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
    m_sCommandDefsMap = HashMap_Init();
 8000328:	f008 fea0 	bl	800906c <HashMap_Init>
 800032c:	4603      	mov	r3, r0
 800032e:	4a0d      	ldr	r2, [pc, #52]	; (8000364 <Command_Init+0x40>)
 8000330:	6013      	str	r3, [r2, #0]
    m_sCommandQueue = Queue_Init();
 8000332:	f00a fcc9 	bl	800acc8 <Queue_Init>
 8000336:	4603      	mov	r3, r0
 8000338:	4a0b      	ldr	r2, [pc, #44]	; (8000368 <Command_Init+0x44>)
 800033a:	6013      	str	r3, [r2, #0]
    Queue_SetFreeElement(m_sCommandQueue, FreeCommandQueueElement);
 800033c:	4b0a      	ldr	r3, [pc, #40]	; (8000368 <Command_Init+0x44>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	490a      	ldr	r1, [pc, #40]	; (800036c <Command_Init+0x48>)
 8000342:	4618      	mov	r0, r3
 8000344:	f00a fcdc 	bl	800ad00 <Queue_SetFreeElement>
    HashMap_SetFreeElementCallback(m_sCommandDefsMap, FreeCommandDefElement);
 8000348:	4b06      	ldr	r3, [pc, #24]	; (8000364 <Command_Init+0x40>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	4908      	ldr	r1, [pc, #32]	; (8000370 <Command_Init+0x4c>)
 800034e:	4618      	mov	r0, r3
 8000350:	f008 ff23 	bl	800919a <HashMap_SetFreeElementCallback>
    Command_Register((char *)"help", HelpCommandHanlderFunction, "Manual use for all commands");
 8000354:	4a07      	ldr	r2, [pc, #28]	; (8000374 <Command_Init+0x50>)
 8000356:	4908      	ldr	r1, [pc, #32]	; (8000378 <Command_Init+0x54>)
 8000358:	4808      	ldr	r0, [pc, #32]	; (800037c <Command_Init+0x58>)
 800035a:	f000 f811 	bl	8000380 <Command_Register>
}
 800035e:	bf00      	nop
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	20000244 	.word	0x20000244
 8000368:	20000248 	.word	0x20000248
 800036c:	08000603 	.word	0x08000603
 8000370:	080005e9 	.word	0x080005e9
 8000374:	0800d120 	.word	0x0800d120
 8000378:	08000551 	.word	0x08000551
 800037c:	0800d13c 	.word	0x0800d13c

08000380 <Command_Register>:
    HashMap_Release(m_sCommandDefsMap);
    Queue_Release(m_sCommandQueue);
}

void Command_Register(char *chCommandKey, CommandHanlderFunction fCallback, const char *chCommandHelp)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b086      	sub	sp, #24
 8000384:	af00      	add	r7, sp, #0
 8000386:	60f8      	str	r0, [r7, #12]
 8000388:	60b9      	str	r1, [r7, #8]
 800038a:	607a      	str	r2, [r7, #4]
    Command_Def *sCommandDef = (Command_Def *)malloc(sizeof(Command_Def));
 800038c:	2008      	movs	r0, #8
 800038e:	f00b fb8b 	bl	800baa8 <malloc>
 8000392:	4603      	mov	r3, r0
 8000394:	617b      	str	r3, [r7, #20]
    sCommandDef->chHelp = strdup(chCommandHelp);
 8000396:	6878      	ldr	r0, [r7, #4]
 8000398:	f00b fe9a 	bl	800c0d0 <strdup>
 800039c:	4603      	mov	r3, r0
 800039e:	461a      	mov	r2, r3
 80003a0:	697b      	ldr	r3, [r7, #20]
 80003a2:	605a      	str	r2, [r3, #4]
    sCommandDef->fCallback = fCallback;
 80003a4:	697b      	ldr	r3, [r7, #20]
 80003a6:	68ba      	ldr	r2, [r7, #8]
 80003a8:	601a      	str	r2, [r3, #0]
    HashMap_Set(m_sCommandDefsMap, chCommandKey, (void *)sCommandDef);
 80003aa:	4b05      	ldr	r3, [pc, #20]	; (80003c0 <Command_Register+0x40>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	697a      	ldr	r2, [r7, #20]
 80003b0:	68f9      	ldr	r1, [r7, #12]
 80003b2:	4618      	mov	r0, r3
 80003b4:	f008 fe72 	bl	800909c <HashMap_Set>
}
 80003b8:	bf00      	nop
 80003ba:	3718      	adds	r7, #24
 80003bc:	46bd      	mov	sp, r7
 80003be:	bd80      	pop	{r7, pc}
 80003c0:	20000244 	.word	0x20000244

080003c4 <Command_ReceiveData>:

void Command_ReceiveData(char *chCommand, uint8_t u8Length)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b084      	sub	sp, #16
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
 80003cc:	460b      	mov	r3, r1
 80003ce:	70fb      	strb	r3, [r7, #3]
    Command *sCommand = (Command *)malloc(sizeof(Command));
 80003d0:	2004      	movs	r0, #4
 80003d2:	f00b fb69 	bl	800baa8 <malloc>
 80003d6:	4603      	mov	r3, r0
 80003d8:	60fb      	str	r3, [r7, #12]
    sCommand->chCommand = (char *)malloc(u8Length * sizeof(char));
 80003da:	78fb      	ldrb	r3, [r7, #3]
 80003dc:	4618      	mov	r0, r3
 80003de:	f00b fb63 	bl	800baa8 <malloc>
 80003e2:	4603      	mov	r3, r0
 80003e4:	461a      	mov	r2, r3
 80003e6:	68fb      	ldr	r3, [r7, #12]
 80003e8:	601a      	str	r2, [r3, #0]
    memcpy(sCommand->chCommand, chCommand, u8Length + 1);
 80003ea:	68fb      	ldr	r3, [r7, #12]
 80003ec:	6818      	ldr	r0, [r3, #0]
 80003ee:	78fb      	ldrb	r3, [r7, #3]
 80003f0:	3301      	adds	r3, #1
 80003f2:	461a      	mov	r2, r3
 80003f4:	6879      	ldr	r1, [r7, #4]
 80003f6:	f00b ff65 	bl	800c2c4 <memcpy>

    Queue_EnQueue(m_sCommandQueue, (void *)sCommand);
 80003fa:	4b05      	ldr	r3, [pc, #20]	; (8000410 <Command_ReceiveData+0x4c>)
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	68f9      	ldr	r1, [r7, #12]
 8000400:	4618      	mov	r0, r3
 8000402:	f00a fc9a 	bl	800ad3a <Queue_EnQueue>
}
 8000406:	bf00      	nop
 8000408:	3710      	adds	r7, #16
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	20000248 	.word	0x20000248

08000414 <Command_RegisterDefaultCallback>:

void Command_RegisterDefaultCallback(CommandHanlderFunction fCallback)
{
 8000414:	b480      	push	{r7}
 8000416:	b083      	sub	sp, #12
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
    m_fDefaultCallback = fCallback;
 800041c:	4a03      	ldr	r2, [pc, #12]	; (800042c <Command_RegisterDefaultCallback+0x18>)
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	6013      	str	r3, [r2, #0]
}
 8000422:	bf00      	nop
 8000424:	370c      	adds	r7, #12
 8000426:	46bd      	mov	sp, r7
 8000428:	bc80      	pop	{r7}
 800042a:	4770      	bx	lr
 800042c:	20000000 	.word	0x20000000

08000430 <EmptyCommandHanlder>:

void EmptyCommandHanlder(uint8_t argc, char **argv)
{
 8000430:	b480      	push	{r7}
 8000432:	b083      	sub	sp, #12
 8000434:	af00      	add	r7, sp, #0
 8000436:	4603      	mov	r3, r0
 8000438:	6039      	str	r1, [r7, #0]
 800043a:	71fb      	strb	r3, [r7, #7]
}
 800043c:	bf00      	nop
 800043e:	370c      	adds	r7, #12
 8000440:	46bd      	mov	sp, r7
 8000442:	bc80      	pop	{r7}
 8000444:	4770      	bx	lr
	...

08000448 <Command_Update>:

void Command_Update()
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b084      	sub	sp, #16
 800044c:	af00      	add	r7, sp, #0
    if (!Queue_IsEmpty(m_sCommandQueue))
 800044e:	4b24      	ldr	r3, [pc, #144]	; (80004e0 <Command_Update+0x98>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	4618      	mov	r0, r3
 8000454:	f00a fc61 	bl	800ad1a <Queue_IsEmpty>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d13b      	bne.n	80004d6 <Command_Update+0x8e>
    {
        Command *sComand = (Command *)Queue_DeQueue(m_sCommandQueue);
 800045e:	4b20      	ldr	r3, [pc, #128]	; (80004e0 <Command_Update+0x98>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	4618      	mov	r0, r3
 8000464:	f00a fc92 	bl	800ad8c <Queue_DeQueue>
 8000468:	60f8      	str	r0, [r7, #12]
        uint8_t argc = 0;
 800046a:	2300      	movs	r3, #0
 800046c:	70fb      	strb	r3, [r7, #3]

        char **argv = SplitString(sComand->chCommand, &argc);
 800046e:	68fb      	ldr	r3, [r7, #12]
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	1cfa      	adds	r2, r7, #3
 8000474:	4611      	mov	r1, r2
 8000476:	4618      	mov	r0, r3
 8000478:	f00a fdb4 	bl	800afe4 <SplitString>
 800047c:	60b8      	str	r0, [r7, #8]
        if (HashMap_Contains(m_sCommandDefsMap, argv[0]) == HASH_MAP_CONTAIN)
 800047e:	4b19      	ldr	r3, [pc, #100]	; (80004e4 <Command_Update+0x9c>)
 8000480:	681a      	ldr	r2, [r3, #0]
 8000482:	68bb      	ldr	r3, [r7, #8]
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	4619      	mov	r1, r3
 8000488:	4610      	mov	r0, r2
 800048a:	f008 fe67 	bl	800915c <HashMap_Contains>
 800048e:	4603      	mov	r3, r0
 8000490:	2b01      	cmp	r3, #1
 8000492:	d112      	bne.n	80004ba <Command_Update+0x72>
        {
            Command_Def *sNode = (Command_Def *)HashMap_Get(m_sCommandDefsMap, argv[0]);
 8000494:	4b13      	ldr	r3, [pc, #76]	; (80004e4 <Command_Update+0x9c>)
 8000496:	681a      	ldr	r2, [r3, #0]
 8000498:	68bb      	ldr	r3, [r7, #8]
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	4619      	mov	r1, r3
 800049e:	4610      	mov	r0, r2
 80004a0:	f008 fe3c 	bl	800911c <HashMap_Get>
 80004a4:	6078      	str	r0, [r7, #4]
            sNode->fCallback(argc - 1, &argv[1]);
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	78fa      	ldrb	r2, [r7, #3]
 80004ac:	3a01      	subs	r2, #1
 80004ae:	b2d0      	uxtb	r0, r2
 80004b0:	68ba      	ldr	r2, [r7, #8]
 80004b2:	3204      	adds	r2, #4
 80004b4:	4611      	mov	r1, r2
 80004b6:	4798      	blx	r3
 80004b8:	e005      	b.n	80004c6 <Command_Update+0x7e>
        }
        else
        {
            m_fDefaultCallback(argc, argv);
 80004ba:	4b0b      	ldr	r3, [pc, #44]	; (80004e8 <Command_Update+0xa0>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	78fa      	ldrb	r2, [r7, #3]
 80004c0:	68b9      	ldr	r1, [r7, #8]
 80004c2:	4610      	mov	r0, r2
 80004c4:	4798      	blx	r3
        }

        FreeCommand(sComand);
 80004c6:	68f8      	ldr	r0, [r7, #12]
 80004c8:	f000 f810 	bl	80004ec <FreeCommand>
        Free2DArray(argc, argv);
 80004cc:	78fb      	ldrb	r3, [r7, #3]
 80004ce:	68b9      	ldr	r1, [r7, #8]
 80004d0:	4618      	mov	r0, r3
 80004d2:	f00a fddf 	bl	800b094 <Free2DArray>
    }
}
 80004d6:	bf00      	nop
 80004d8:	3710      	adds	r7, #16
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	20000248 	.word	0x20000248
 80004e4:	20000244 	.word	0x20000244
 80004e8:	20000000 	.word	0x20000000

080004ec <FreeCommand>:

void FreeCommand(Command *sCommand)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
    free(sCommand->chCommand);
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4618      	mov	r0, r3
 80004fa:	f00b fadd 	bl	800bab8 <free>
    free(sCommand);
 80004fe:	6878      	ldr	r0, [r7, #4]
 8000500:	f00b fada 	bl	800bab8 <free>
}
 8000504:	bf00      	nop
 8000506:	3708      	adds	r7, #8
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}

0800050c <Command_Response>:

#ifndef JUST_FOR_TESTING
void Command_Response(char *chResponse, uint8_t u8Length)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
 8000514:	460b      	mov	r3, r1
 8000516:	70fb      	strb	r3, [r7, #3]
    // Override this to send the response to the user
	CDC_Transmit_FS((uint8_t *)chResponse, u8Length);
 8000518:	78fb      	ldrb	r3, [r7, #3]
 800051a:	b29b      	uxth	r3, r3
 800051c:	4619      	mov	r1, r3
 800051e:	6878      	ldr	r0, [r7, #4]
 8000520:	f00a fee4 	bl	800b2ec <CDC_Transmit_FS>
}
 8000524:	bf00      	nop
 8000526:	3708      	adds	r7, #8
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}

0800052c <Command_ResponseConstChar>:
#endif

void Command_ResponseConstChar(const char *chResponse)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
	CDC_Transmit_FS((uint8_t *)chResponse, strlen(chResponse));
 8000534:	6878      	ldr	r0, [r7, #4]
 8000536:	f7ff fe13 	bl	8000160 <strlen>
 800053a:	4603      	mov	r3, r0
 800053c:	b29b      	uxth	r3, r3
 800053e:	4619      	mov	r1, r3
 8000540:	6878      	ldr	r0, [r7, #4]
 8000542:	f00a fed3 	bl	800b2ec <CDC_Transmit_FS>
}
 8000546:	bf00      	nop
 8000548:	3708      	adds	r7, #8
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
	...

08000550 <HelpCommandHanlderFunction>:

void HelpCommandHanlderFunction(uint8_t argc, char **argv)
{
 8000550:	b5b0      	push	{r4, r5, r7, lr}
 8000552:	b08a      	sub	sp, #40	; 0x28
 8000554:	af00      	add	r7, sp, #0
 8000556:	4603      	mov	r3, r0
 8000558:	6039      	str	r1, [r7, #0]
 800055a:	71fb      	strb	r3, [r7, #7]
    if (HashMap_Contains(m_sCommandDefsMap, argv[0]) == HASH_MAP_CONTAIN)
 800055c:	4b20      	ldr	r3, [pc, #128]	; (80005e0 <HelpCommandHanlderFunction+0x90>)
 800055e:	681a      	ldr	r2, [r3, #0]
 8000560:	683b      	ldr	r3, [r7, #0]
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4619      	mov	r1, r3
 8000566:	4610      	mov	r0, r2
 8000568:	f008 fdf8 	bl	800915c <HashMap_Contains>
 800056c:	4603      	mov	r3, r0
 800056e:	2b01      	cmp	r3, #1
 8000570:	d116      	bne.n	80005a0 <HelpCommandHanlderFunction+0x50>
    {
        Command_Def *cmd = (Command_Def *)HashMap_Get(m_sCommandDefsMap, argv[0]);
 8000572:	4b1b      	ldr	r3, [pc, #108]	; (80005e0 <HelpCommandHanlderFunction+0x90>)
 8000574:	681a      	ldr	r2, [r3, #0]
 8000576:	683b      	ldr	r3, [r7, #0]
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4619      	mov	r1, r3
 800057c:	4610      	mov	r0, r2
 800057e:	f008 fdcd 	bl	800911c <HashMap_Get>
 8000582:	6278      	str	r0, [r7, #36]	; 0x24
        Command_Response(cmd->chHelp, strlen(cmd->chHelp));
 8000584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000586:	685c      	ldr	r4, [r3, #4]
 8000588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800058a:	685b      	ldr	r3, [r3, #4]
 800058c:	4618      	mov	r0, r3
 800058e:	f7ff fde7 	bl	8000160 <strlen>
 8000592:	4603      	mov	r3, r0
 8000594:	b2db      	uxtb	r3, r3
 8000596:	4619      	mov	r1, r3
 8000598:	4620      	mov	r0, r4
 800059a:	f7ff ffb7 	bl	800050c <Command_Response>
    else
    {
        char chResponse[] = "Command does not exist";
        Command_Response(chResponse, strlen(chResponse));
    }
}
 800059e:	e01a      	b.n	80005d6 <HelpCommandHanlderFunction+0x86>
        char chResponse[] = "Command does not exist";
 80005a0:	4b10      	ldr	r3, [pc, #64]	; (80005e4 <HelpCommandHanlderFunction+0x94>)
 80005a2:	f107 040c 	add.w	r4, r7, #12
 80005a6:	461d      	mov	r5, r3
 80005a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ac:	e895 0003 	ldmia.w	r5, {r0, r1}
 80005b0:	6020      	str	r0, [r4, #0]
 80005b2:	3404      	adds	r4, #4
 80005b4:	8021      	strh	r1, [r4, #0]
 80005b6:	3402      	adds	r4, #2
 80005b8:	0c0b      	lsrs	r3, r1, #16
 80005ba:	7023      	strb	r3, [r4, #0]
        Command_Response(chResponse, strlen(chResponse));
 80005bc:	f107 030c 	add.w	r3, r7, #12
 80005c0:	4618      	mov	r0, r3
 80005c2:	f7ff fdcd 	bl	8000160 <strlen>
 80005c6:	4603      	mov	r3, r0
 80005c8:	b2da      	uxtb	r2, r3
 80005ca:	f107 030c 	add.w	r3, r7, #12
 80005ce:	4611      	mov	r1, r2
 80005d0:	4618      	mov	r0, r3
 80005d2:	f7ff ff9b 	bl	800050c <Command_Response>
}
 80005d6:	bf00      	nop
 80005d8:	3728      	adds	r7, #40	; 0x28
 80005da:	46bd      	mov	sp, r7
 80005dc:	bdb0      	pop	{r4, r5, r7, pc}
 80005de:	bf00      	nop
 80005e0:	20000244 	.word	0x20000244
 80005e4:	0800d144 	.word	0x0800d144

080005e8 <FreeCommandDefElement>:

static void FreeCommandDefElement(HashMap_Node *sNode)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
    free((Command_Def *)(sNode->pData));
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	685b      	ldr	r3, [r3, #4]
 80005f4:	4618      	mov	r0, r3
 80005f6:	f00b fa5f 	bl	800bab8 <free>
}
 80005fa:	bf00      	nop
 80005fc:	3708      	adds	r7, #8
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}

08000602 <FreeCommandQueueElement>:

static void FreeCommandQueueElement(Queue_Node *sNode)
{
 8000602:	b580      	push	{r7, lr}
 8000604:	b082      	sub	sp, #8
 8000606:	af00      	add	r7, sp, #0
 8000608:	6078      	str	r0, [r7, #4]
    FreeCommand((Command *)sNode->pData);
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	4618      	mov	r0, r3
 8000610:	f7ff ff6c 	bl	80004ec <FreeCommand>
}
 8000614:	bf00      	nop
 8000616:	3708      	adds	r7, #8
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}

0800061c <Command_DefaultResponse>:
extern char chStationId[];
extern uint32_t u32UpdateTime;


void Command_DefaultResponse(uint8_t argc, char **argv)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	4603      	mov	r3, r0
 8000624:	6039      	str	r1, [r7, #0]
 8000626:	71fb      	strb	r3, [r7, #7]
	Command_ResponseConstChar("Unknown command");
 8000628:	4803      	ldr	r0, [pc, #12]	; (8000638 <Command_DefaultResponse+0x1c>)
 800062a:	f7ff ff7f 	bl	800052c <Command_ResponseConstChar>
}
 800062e:	bf00      	nop
 8000630:	3708      	adds	r7, #8
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	0800d15c 	.word	0x0800d15c

0800063c <Command_LCDCommandResponse>:

void Command_LCDCommandResponse(uint8_t argc, char **argv)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b094      	sub	sp, #80	; 0x50
 8000640:	af00      	add	r7, sp, #0
 8000642:	4603      	mov	r3, r0
 8000644:	6039      	str	r1, [r7, #0]
 8000646:	71fb      	strb	r3, [r7, #7]
	switch (argc)
 8000648:	79fb      	ldrb	r3, [r7, #7]
 800064a:	2b02      	cmp	r3, #2
 800064c:	d03d      	beq.n	80006ca <Command_LCDCommandResponse+0x8e>
 800064e:	2b02      	cmp	r3, #2
 8000650:	f300 808b 	bgt.w	800076a <Command_LCDCommandResponse+0x12e>
 8000654:	2b00      	cmp	r3, #0
 8000656:	d002      	beq.n	800065e <Command_LCDCommandResponse+0x22>
 8000658:	2b01      	cmp	r3, #1
 800065a:	d004      	beq.n	8000666 <Command_LCDCommandResponse+0x2a>
 800065c:	e085      	b.n	800076a <Command_LCDCommandResponse+0x12e>
	{
	case 0:
		Command_ResponseConstChar("Choose 1 action: clear, test, reset");
 800065e:	4847      	ldr	r0, [pc, #284]	; (800077c <Command_LCDCommandResponse+0x140>)
 8000660:	f7ff ff64 	bl	800052c <Command_ResponseConstChar>
		break;
 8000664:	e085      	b.n	8000772 <Command_LCDCommandResponse+0x136>
	case 1:
		if (strcmp(argv[0], "clear") == 0)
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4945      	ldr	r1, [pc, #276]	; (8000780 <Command_LCDCommandResponse+0x144>)
 800066c:	4618      	mov	r0, r3
 800066e:	f7ff fd6d 	bl	800014c <strcmp>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d105      	bne.n	8000684 <Command_LCDCommandResponse+0x48>
		{
			LCD_Clear();
 8000678:	f008 feac 	bl	80093d4 <LCD_Clear>
			Command_ResponseConstChar("Clear the LCD command is sent, check the result");
 800067c:	4841      	ldr	r0, [pc, #260]	; (8000784 <Command_LCDCommandResponse+0x148>)
 800067e:	f7ff ff55 	bl	800052c <Command_ResponseConstChar>
		}
		else
		{
			Command_ResponseConstChar("Your option must be in [clear, test, reset]");
		}
		break;
 8000682:	e076      	b.n	8000772 <Command_LCDCommandResponse+0x136>
		else if (strcmp(argv[0], "test") == 0)
 8000684:	683b      	ldr	r3, [r7, #0]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	493f      	ldr	r1, [pc, #252]	; (8000788 <Command_LCDCommandResponse+0x14c>)
 800068a:	4618      	mov	r0, r3
 800068c:	f7ff fd5e 	bl	800014c <strcmp>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d106      	bne.n	80006a4 <Command_LCDCommandResponse+0x68>
			LCD_SendString("LCD Testing");
 8000696:	483d      	ldr	r0, [pc, #244]	; (800078c <Command_LCDCommandResponse+0x150>)
 8000698:	f008 fe5e 	bl	8009358 <LCD_SendString>
			Command_ResponseConstChar("A string is sent to the LCD, check the result");
 800069c:	483c      	ldr	r0, [pc, #240]	; (8000790 <Command_LCDCommandResponse+0x154>)
 800069e:	f7ff ff45 	bl	800052c <Command_ResponseConstChar>
		break;
 80006a2:	e066      	b.n	8000772 <Command_LCDCommandResponse+0x136>
		else if (strcmp(argv[0], "reset") == 0)
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	493a      	ldr	r1, [pc, #232]	; (8000794 <Command_LCDCommandResponse+0x158>)
 80006aa:	4618      	mov	r0, r3
 80006ac:	f7ff fd4e 	bl	800014c <strcmp>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d105      	bne.n	80006c2 <Command_LCDCommandResponse+0x86>
			LCD_Init();
 80006b6:	f008 fd7d 	bl	80091b4 <LCD_Init>
			Command_ResponseConstChar("Reset the LCD command is sent, check the result");
 80006ba:	4837      	ldr	r0, [pc, #220]	; (8000798 <Command_LCDCommandResponse+0x15c>)
 80006bc:	f7ff ff36 	bl	800052c <Command_ResponseConstChar>
		break;
 80006c0:	e057      	b.n	8000772 <Command_LCDCommandResponse+0x136>
			Command_ResponseConstChar("Your option must be in [clear, test, reset]");
 80006c2:	4836      	ldr	r0, [pc, #216]	; (800079c <Command_LCDCommandResponse+0x160>)
 80006c4:	f7ff ff32 	bl	800052c <Command_ResponseConstChar>
		break;
 80006c8:	e053      	b.n	8000772 <Command_LCDCommandResponse+0x136>
	case 2:
		if (strcmp(argv[0], "data") == 0)
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	4934      	ldr	r1, [pc, #208]	; (80007a0 <Command_LCDCommandResponse+0x164>)
 80006d0:	4618      	mov	r0, r3
 80006d2:	f7ff fd3b 	bl	800014c <strcmp>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d11c      	bne.n	8000716 <Command_LCDCommandResponse+0xda>
		{
			uint8_t u8Data = ConvertHexStringToHex(argv[1]);
 80006dc:	683b      	ldr	r3, [r7, #0]
 80006de:	3304      	adds	r3, #4
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	4618      	mov	r0, r3
 80006e4:	f00a fd0a 	bl	800b0fc <ConvertHexStringToHex>
 80006e8:	4603      	mov	r3, r0
 80006ea:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
			LCD_SendData(u8Data);
 80006ee:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80006f2:	4618      	mov	r0, r3
 80006f4:	f008 fdfc 	bl	80092f0 <LCD_SendData>
			char chResponse[64];
			FormatString(chResponse, "Send data %s to the LCD, check result", argv[1]);
 80006f8:	683b      	ldr	r3, [r7, #0]
 80006fa:	3304      	adds	r3, #4
 80006fc:	681a      	ldr	r2, [r3, #0]
 80006fe:	f107 030c 	add.w	r3, r7, #12
 8000702:	4928      	ldr	r1, [pc, #160]	; (80007a4 <Command_LCDCommandResponse+0x168>)
 8000704:	4618      	mov	r0, r3
 8000706:	f00a fce3 	bl	800b0d0 <FormatString>
			Command_ResponseConstChar(chResponse);
 800070a:	f107 030c 	add.w	r3, r7, #12
 800070e:	4618      	mov	r0, r3
 8000710:	f7ff ff0c 	bl	800052c <Command_ResponseConstChar>
		}
		else
		{
			Command_ResponseConstChar("Your option must be in [data, command]");
		}
		break;
 8000714:	e02d      	b.n	8000772 <Command_LCDCommandResponse+0x136>
		else if (strcmp(argv[0], "command") == 0)
 8000716:	683b      	ldr	r3, [r7, #0]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	4923      	ldr	r1, [pc, #140]	; (80007a8 <Command_LCDCommandResponse+0x16c>)
 800071c:	4618      	mov	r0, r3
 800071e:	f7ff fd15 	bl	800014c <strcmp>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d11c      	bne.n	8000762 <Command_LCDCommandResponse+0x126>
			uint8_t u8Data = ConvertHexStringToHex(argv[1]);
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	3304      	adds	r3, #4
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	4618      	mov	r0, r3
 8000730:	f00a fce4 	bl	800b0fc <ConvertHexStringToHex>
 8000734:	4603      	mov	r3, r0
 8000736:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			LCD_SendCommand(u8Data);
 800073a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800073e:	4618      	mov	r0, r3
 8000740:	f008 fda2 	bl	8009288 <LCD_SendCommand>
			FormatString(chResponse, "Send command %s to the LCD, check result", argv[1]);
 8000744:	683b      	ldr	r3, [r7, #0]
 8000746:	3304      	adds	r3, #4
 8000748:	681a      	ldr	r2, [r3, #0]
 800074a:	f107 030c 	add.w	r3, r7, #12
 800074e:	4917      	ldr	r1, [pc, #92]	; (80007ac <Command_LCDCommandResponse+0x170>)
 8000750:	4618      	mov	r0, r3
 8000752:	f00a fcbd 	bl	800b0d0 <FormatString>
			Command_ResponseConstChar(chResponse);
 8000756:	f107 030c 	add.w	r3, r7, #12
 800075a:	4618      	mov	r0, r3
 800075c:	f7ff fee6 	bl	800052c <Command_ResponseConstChar>
		break;
 8000760:	e007      	b.n	8000772 <Command_LCDCommandResponse+0x136>
			Command_ResponseConstChar("Your option must be in [data, command]");
 8000762:	4813      	ldr	r0, [pc, #76]	; (80007b0 <Command_LCDCommandResponse+0x174>)
 8000764:	f7ff fee2 	bl	800052c <Command_ResponseConstChar>
		break;
 8000768:	e003      	b.n	8000772 <Command_LCDCommandResponse+0x136>
	default:
		Command_ResponseConstChar("Invalid Command");
 800076a:	4812      	ldr	r0, [pc, #72]	; (80007b4 <Command_LCDCommandResponse+0x178>)
 800076c:	f7ff fede 	bl	800052c <Command_ResponseConstChar>
	}
}
 8000770:	bf00      	nop
 8000772:	bf00      	nop
 8000774:	3750      	adds	r7, #80	; 0x50
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	0800d16c 	.word	0x0800d16c
 8000780:	0800d190 	.word	0x0800d190
 8000784:	0800d198 	.word	0x0800d198
 8000788:	0800d1c8 	.word	0x0800d1c8
 800078c:	0800d1d0 	.word	0x0800d1d0
 8000790:	0800d1dc 	.word	0x0800d1dc
 8000794:	0800d20c 	.word	0x0800d20c
 8000798:	0800d214 	.word	0x0800d214
 800079c:	0800d244 	.word	0x0800d244
 80007a0:	0800d270 	.word	0x0800d270
 80007a4:	0800d278 	.word	0x0800d278
 80007a8:	0800d2a0 	.word	0x0800d2a0
 80007ac:	0800d2a8 	.word	0x0800d2a8
 80007b0:	0800d2d4 	.word	0x0800d2d4
 80007b4:	0800d2fc 	.word	0x0800d2fc

080007b8 <Command_I2CCommandResponse>:

void Command_I2CCommandResponse(uint8_t argc, char **argv)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b0a0      	sub	sp, #128	; 0x80
 80007bc:	af02      	add	r7, sp, #8
 80007be:	4603      	mov	r3, r0
 80007c0:	6039      	str	r1, [r7, #0]
 80007c2:	71fb      	strb	r3, [r7, #7]
	char chLCDString[28];
	uint8_t u8Response[2];
	char commandRes[64];
	uint8_t u8Data[4];
	char hexStr[4];
	memset(u8Response, 0, 2);
 80007c4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80007c8:	2202      	movs	r2, #2
 80007ca:	2100      	movs	r1, #0
 80007cc:	4618      	mov	r0, r3
 80007ce:	f00b fc77 	bl	800c0c0 <memset>

	GoToConfig();
 80007d2:	f000 ffab 	bl	800172c <GoToConfig>

	switch(argc)
 80007d6:	79fb      	ldrb	r3, [r7, #7]
 80007d8:	2b04      	cmp	r3, #4
 80007da:	f200 82a0 	bhi.w	8000d1e <Command_I2CCommandResponse+0x566>
 80007de:	a201      	add	r2, pc, #4	; (adr r2, 80007e4 <Command_I2CCommandResponse+0x2c>)
 80007e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007e4:	080007f9 	.word	0x080007f9
 80007e8:	080007f9 	.word	0x080007f9
 80007ec:	08000807 	.word	0x08000807
 80007f0:	08000949 	.word	0x08000949
 80007f4:	08000bfd 	.word	0x08000bfd
	{
	case 0:
	case 1:
		LCD_SendString("Invalid command");
 80007f8:	48bd      	ldr	r0, [pc, #756]	; (8000af0 <Command_I2CCommandResponse+0x338>)
 80007fa:	f008 fdad 	bl	8009358 <LCD_SendString>
		Command_ResponseConstChar("Specify the address and data data to send");
 80007fe:	48bd      	ldr	r0, [pc, #756]	; (8000af4 <Command_I2CCommandResponse+0x33c>)
 8000800:	f7ff fe94 	bl	800052c <Command_ResponseConstChar>
		break;
 8000804:	e292      	b.n	8000d2c <Command_I2CCommandResponse+0x574>
	case 2:
		if (strcmp(argv[0], "get-mul") == 0)
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	49bb      	ldr	r1, [pc, #748]	; (8000af8 <Command_I2CCommandResponse+0x340>)
 800080c:	4618      	mov	r0, r3
 800080e:	f7ff fc9d 	bl	800014c <strcmp>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	f040 8090 	bne.w	800093a <Command_I2CCommandResponse+0x182>
		{
			LCD_Clear();
 800081a:	f008 fddb 	bl	80093d4 <LCD_Clear>
			u8Address = ConvertHexStringToHex(argv[1]) << 1;
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	3304      	adds	r3, #4
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4618      	mov	r0, r3
 8000826:	f00a fc69 	bl	800b0fc <ConvertHexStringToHex>
 800082a:	4603      	mov	r3, r0
 800082c:	005b      	lsls	r3, r3, #1
 800082e:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
			u8Data[0] = 4;
 8000832:	2304      	movs	r3, #4
 8000834:	733b      	strb	r3, [r7, #12]
			u8Data[1] = READ_REGISTERS_FUNCTION;
 8000836:	2303      	movs	r3, #3
 8000838:	737b      	strb	r3, [r7, #13]
			u8Data[2] = 0x00;
 800083a:	2300      	movs	r3, #0
 800083c:	73bb      	strb	r3, [r7, #14]
			u8Data[3] = 0x03;
 800083e:	2303      	movs	r3, #3
 8000840:	73fb      	strb	r3, [r7, #15]
			HAL_I2C_Master_Transmit(
 8000842:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8000846:	b299      	uxth	r1, r3
							&hi2c1, u8Address,
							u8Data, u8Data[0], 300);
 8000848:	7b3b      	ldrb	r3, [r7, #12]
			HAL_I2C_Master_Transmit(
 800084a:	b29b      	uxth	r3, r3
 800084c:	f107 020c 	add.w	r2, r7, #12
 8000850:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000854:	9000      	str	r0, [sp, #0]
 8000856:	48a9      	ldr	r0, [pc, #676]	; (8000afc <Command_I2CCommandResponse+0x344>)
 8000858:	f002 f92e 	bl	8002ab8 <HAL_I2C_Master_Transmit>
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 800085c:	bf00      	nop
 800085e:	48a7      	ldr	r0, [pc, #668]	; (8000afc <Command_I2CCommandResponse+0x344>)
 8000860:	f002 fc94 	bl	800318c <HAL_I2C_GetState>
 8000864:	4603      	mov	r3, r0
 8000866:	2b20      	cmp	r3, #32
 8000868:	d1f9      	bne.n	800085e <Command_I2CCommandResponse+0xa6>
			if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 800086a:	48a4      	ldr	r0, [pc, #656]	; (8000afc <Command_I2CCommandResponse+0x344>)
 800086c:	f002 fc9b 	bl	80031a6 <HAL_I2C_GetError>
 8000870:	4603      	mov	r3, r0
 8000872:	2b04      	cmp	r3, #4
 8000874:	d056      	beq.n	8000924 <Command_I2CCommandResponse+0x16c>
			{
				HAL_Delay(50);
 8000876:	2032      	movs	r0, #50	; 0x32
 8000878:	f001 fcea 	bl	8002250 <HAL_Delay>
				HAL_I2C_Master_Receive(&hi2c1, u8Address, u8Response, u8Data[3] + 1, 100);
 800087c:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8000880:	b299      	uxth	r1, r3
 8000882:	7bfb      	ldrb	r3, [r7, #15]
 8000884:	b29b      	uxth	r3, r3
 8000886:	3301      	adds	r3, #1
 8000888:	b29b      	uxth	r3, r3
 800088a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800088e:	2064      	movs	r0, #100	; 0x64
 8000890:	9000      	str	r0, [sp, #0]
 8000892:	489a      	ldr	r0, [pc, #616]	; (8000afc <Command_I2CCommandResponse+0x344>)
 8000894:	f002 fa0e 	bl	8002cb4 <HAL_I2C_Master_Receive>
				while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8000898:	bf00      	nop
 800089a:	4898      	ldr	r0, [pc, #608]	; (8000afc <Command_I2CCommandResponse+0x344>)
 800089c:	f002 fc76 	bl	800318c <HAL_I2C_GetState>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b20      	cmp	r3, #32
 80008a4:	d1f9      	bne.n	800089a <Command_I2CCommandResponse+0xe2>
				if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 80008a6:	4895      	ldr	r0, [pc, #596]	; (8000afc <Command_I2CCommandResponse+0x344>)
 80008a8:	f002 fc7d 	bl	80031a6 <HAL_I2C_GetError>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b04      	cmp	r3, #4
 80008b0:	d02d      	beq.n	800090e <Command_I2CCommandResponse+0x156>
				{
					LCD_SetCursor(0, 0);
 80008b2:	2100      	movs	r1, #0
 80008b4:	2000      	movs	r0, #0
 80008b6:	f008 fd65 	bl	8009384 <LCD_SetCursor>
					FormatString(chLCDString, "Status: %d", u8Response[0]);
 80008ba:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80008be:	461a      	mov	r2, r3
 80008c0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80008c4:	498e      	ldr	r1, [pc, #568]	; (8000b00 <Command_I2CCommandResponse+0x348>)
 80008c6:	4618      	mov	r0, r3
 80008c8:	f00a fc02 	bl	800b0d0 <FormatString>
					LCD_SendString(chLCDString);
 80008cc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80008d0:	4618      	mov	r0, r3
 80008d2:	f008 fd41 	bl	8009358 <LCD_SendString>
					LCD_SetCursor(1, 0);
 80008d6:	2100      	movs	r1, #0
 80008d8:	2001      	movs	r0, #1
 80008da:	f008 fd53 	bl	8009384 <LCD_SetCursor>
					FormatString(chLCDString, "%d, %d, %d", u8Response[1], u8Response[2], u8Response[3]);
 80008de:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 80008e2:	461a      	mov	r2, r3
 80008e4:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 80008e8:	4619      	mov	r1, r3
 80008ea:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80008ee:	f107 0054 	add.w	r0, r7, #84	; 0x54
 80008f2:	9300      	str	r3, [sp, #0]
 80008f4:	460b      	mov	r3, r1
 80008f6:	4983      	ldr	r1, [pc, #524]	; (8000b04 <Command_I2CCommandResponse+0x34c>)
 80008f8:	f00a fbea 	bl	800b0d0 <FormatString>
					LCD_SendString(chLCDString);
 80008fc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000900:	4618      	mov	r0, r3
 8000902:	f008 fd29 	bl	8009358 <LCD_SendString>
					Command_ResponseConstChar("Frame is sent.");
 8000906:	4880      	ldr	r0, [pc, #512]	; (8000b08 <Command_I2CCommandResponse+0x350>)
 8000908:	f7ff fe10 	bl	800052c <Command_ResponseConstChar>
		else
		{
			LCD_SendString("Invalid command");
			Command_ResponseConstChar("Invalid command");
		}
		break;
 800090c:	e20e      	b.n	8000d2c <Command_I2CCommandResponse+0x574>
					LCD_SetCursor(0, 0);
 800090e:	2100      	movs	r1, #0
 8000910:	2000      	movs	r0, #0
 8000912:	f008 fd37 	bl	8009384 <LCD_SetCursor>
					LCD_SendString("Error occurs");
 8000916:	487d      	ldr	r0, [pc, #500]	; (8000b0c <Command_I2CCommandResponse+0x354>)
 8000918:	f008 fd1e 	bl	8009358 <LCD_SendString>
					Command_ResponseConstChar("Error occurs");
 800091c:	487b      	ldr	r0, [pc, #492]	; (8000b0c <Command_I2CCommandResponse+0x354>)
 800091e:	f7ff fe05 	bl	800052c <Command_ResponseConstChar>
		break;
 8000922:	e203      	b.n	8000d2c <Command_I2CCommandResponse+0x574>
				LCD_SetCursor(0, 0);
 8000924:	2100      	movs	r1, #0
 8000926:	2000      	movs	r0, #0
 8000928:	f008 fd2c 	bl	8009384 <LCD_SetCursor>
				LCD_SendString("Error occurs");
 800092c:	4877      	ldr	r0, [pc, #476]	; (8000b0c <Command_I2CCommandResponse+0x354>)
 800092e:	f008 fd13 	bl	8009358 <LCD_SendString>
				Command_ResponseConstChar("Error occurs");
 8000932:	4876      	ldr	r0, [pc, #472]	; (8000b0c <Command_I2CCommandResponse+0x354>)
 8000934:	f7ff fdfa 	bl	800052c <Command_ResponseConstChar>
		break;
 8000938:	e1f8      	b.n	8000d2c <Command_I2CCommandResponse+0x574>
			LCD_SendString("Invalid command");
 800093a:	486d      	ldr	r0, [pc, #436]	; (8000af0 <Command_I2CCommandResponse+0x338>)
 800093c:	f008 fd0c 	bl	8009358 <LCD_SendString>
			Command_ResponseConstChar("Invalid command");
 8000940:	486b      	ldr	r0, [pc, #428]	; (8000af0 <Command_I2CCommandResponse+0x338>)
 8000942:	f7ff fdf3 	bl	800052c <Command_ResponseConstChar>
		break;
 8000946:	e1f1      	b.n	8000d2c <Command_I2CCommandResponse+0x574>
	case 3:
		LCD_Clear();
 8000948:	f008 fd44 	bl	80093d4 <LCD_Clear>
		u8Address = ConvertHexStringToHex(argv[1]) << 1;
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	3304      	adds	r3, #4
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4618      	mov	r0, r3
 8000954:	f00a fbd2 	bl	800b0fc <ConvertHexStringToHex>
 8000958:	4603      	mov	r3, r0
 800095a:	005b      	lsls	r3, r3, #1
 800095c:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

		if (strcmp(argv[0], "read") == 0)
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	496a      	ldr	r1, [pc, #424]	; (8000b10 <Command_I2CCommandResponse+0x358>)
 8000966:	4618      	mov	r0, r3
 8000968:	f7ff fbf0 	bl	800014c <strcmp>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	f040 809d 	bne.w	8000aae <Command_I2CCommandResponse+0x2f6>
		{
			u8Data[0] = 3;
 8000974:	2303      	movs	r3, #3
 8000976:	733b      	strb	r3, [r7, #12]
			u8Data[1] = READ_REGISTER_FUNCTION;
 8000978:	2301      	movs	r3, #1
 800097a:	737b      	strb	r3, [r7, #13]
			u8Data[2] = ConvertHexStringToHex(argv[2]);
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	3308      	adds	r3, #8
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4618      	mov	r0, r3
 8000984:	f00a fbba 	bl	800b0fc <ConvertHexStringToHex>
 8000988:	4603      	mov	r3, r0
 800098a:	73bb      	strb	r3, [r7, #14]
			HAL_I2C_Master_Transmit(
 800098c:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8000990:	b299      	uxth	r1, r3
							&hi2c1, u8Address,
							u8Data, u8Data[0], 300);
 8000992:	7b3b      	ldrb	r3, [r7, #12]
			HAL_I2C_Master_Transmit(
 8000994:	b29b      	uxth	r3, r3
 8000996:	f107 020c 	add.w	r2, r7, #12
 800099a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800099e:	9000      	str	r0, [sp, #0]
 80009a0:	4856      	ldr	r0, [pc, #344]	; (8000afc <Command_I2CCommandResponse+0x344>)
 80009a2:	f002 f889 	bl	8002ab8 <HAL_I2C_Master_Transmit>
			HAL_Delay(50);
 80009a6:	2032      	movs	r0, #50	; 0x32
 80009a8:	f001 fc52 	bl	8002250 <HAL_Delay>
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80009ac:	bf00      	nop
 80009ae:	4853      	ldr	r0, [pc, #332]	; (8000afc <Command_I2CCommandResponse+0x344>)
 80009b0:	f002 fbec 	bl	800318c <HAL_I2C_GetState>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b20      	cmp	r3, #32
 80009b8:	d1f9      	bne.n	80009ae <Command_I2CCommandResponse+0x1f6>

			if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 80009ba:	4850      	ldr	r0, [pc, #320]	; (8000afc <Command_I2CCommandResponse+0x344>)
 80009bc:	f002 fbf3 	bl	80031a6 <HAL_I2C_GetError>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b04      	cmp	r3, #4
 80009c4:	d065      	beq.n	8000a92 <Command_I2CCommandResponse+0x2da>
			{
				hi2c1.ErrorCode = HAL_I2C_ERROR_NONE;
 80009c6:	4b4d      	ldr	r3, [pc, #308]	; (8000afc <Command_I2CCommandResponse+0x344>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	641a      	str	r2, [r3, #64]	; 0x40
				HAL_Delay(500);
 80009cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009d0:	f001 fc3e 	bl	8002250 <HAL_Delay>
				HAL_I2C_Master_Receive(&hi2c1, u8Address, u8Response, 2, 2000);
 80009d4:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80009d8:	b299      	uxth	r1, r3
 80009da:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80009de:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80009e2:	9300      	str	r3, [sp, #0]
 80009e4:	2302      	movs	r3, #2
 80009e6:	4845      	ldr	r0, [pc, #276]	; (8000afc <Command_I2CCommandResponse+0x344>)
 80009e8:	f002 f964 	bl	8002cb4 <HAL_I2C_Master_Receive>
				while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80009ec:	bf00      	nop
 80009ee:	4843      	ldr	r0, [pc, #268]	; (8000afc <Command_I2CCommandResponse+0x344>)
 80009f0:	f002 fbcc 	bl	800318c <HAL_I2C_GetState>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b20      	cmp	r3, #32
 80009f8:	d1f9      	bne.n	80009ee <Command_I2CCommandResponse+0x236>

				if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 80009fa:	4840      	ldr	r0, [pc, #256]	; (8000afc <Command_I2CCommandResponse+0x344>)
 80009fc:	f002 fbd3 	bl	80031a6 <HAL_I2C_GetError>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b04      	cmp	r3, #4
 8000a04:	d03a      	beq.n	8000a7c <Command_I2CCommandResponse+0x2c4>
				{
					LCD_SetCursor(0, 0);
 8000a06:	2100      	movs	r1, #0
 8000a08:	2000      	movs	r0, #0
 8000a0a:	f008 fcbb 	bl	8009384 <LCD_SetCursor>
					FormatString(chLCDString, "Status: %d", u8Response[0]);
 8000a0e:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8000a12:	461a      	mov	r2, r3
 8000a14:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a18:	4939      	ldr	r1, [pc, #228]	; (8000b00 <Command_I2CCommandResponse+0x348>)
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f00a fb58 	bl	800b0d0 <FormatString>
					LCD_SendString(chLCDString);
 8000a20:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a24:	4618      	mov	r0, r3
 8000a26:	f008 fc97 	bl	8009358 <LCD_SendString>

					LCD_SetCursor(1, 0);
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	2001      	movs	r0, #1
 8000a2e:	f008 fca9 	bl	8009384 <LCD_SetCursor>
					ConvertHexToString(hexStr, u8Response[1]);
 8000a32:	f897 2051 	ldrb.w	r2, [r7, #81]	; 0x51
 8000a36:	f107 0308 	add.w	r3, r7, #8
 8000a3a:	4611      	mov	r1, r2
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f00a fb6d 	bl	800b11c <ConvertHexToString>
					FormatString(chLCDString, "Value: %s", hexStr);
 8000a42:	f107 0208 	add.w	r2, r7, #8
 8000a46:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a4a:	4932      	ldr	r1, [pc, #200]	; (8000b14 <Command_I2CCommandResponse+0x35c>)
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f00a fb3f 	bl	800b0d0 <FormatString>
					LCD_SendString(chLCDString);
 8000a52:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a56:	4618      	mov	r0, r3
 8000a58:	f008 fc7e 	bl	8009358 <LCD_SendString>

					FormatString(commandRes, "Status: %d - Value: %s", u8Response[0], hexStr);
 8000a5c:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8000a60:	461a      	mov	r2, r3
 8000a62:	f107 0308 	add.w	r3, r7, #8
 8000a66:	f107 0010 	add.w	r0, r7, #16
 8000a6a:	492b      	ldr	r1, [pc, #172]	; (8000b18 <Command_I2CCommandResponse+0x360>)
 8000a6c:	f00a fb30 	bl	800b0d0 <FormatString>

					Command_ResponseConstChar(commandRes);
 8000a70:	f107 0310 	add.w	r3, r7, #16
 8000a74:	4618      	mov	r0, r3
 8000a76:	f7ff fd59 	bl	800052c <Command_ResponseConstChar>
 8000a7a:	e014      	b.n	8000aa6 <Command_I2CCommandResponse+0x2ee>
				}
				else
				{
					LCD_SetCursor(0, 0);
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	2000      	movs	r0, #0
 8000a80:	f008 fc80 	bl	8009384 <LCD_SetCursor>
					LCD_SendString("Error occurs");
 8000a84:	4821      	ldr	r0, [pc, #132]	; (8000b0c <Command_I2CCommandResponse+0x354>)
 8000a86:	f008 fc67 	bl	8009358 <LCD_SendString>
					Command_ResponseConstChar("Error occurs");
 8000a8a:	4820      	ldr	r0, [pc, #128]	; (8000b0c <Command_I2CCommandResponse+0x354>)
 8000a8c:	f7ff fd4e 	bl	800052c <Command_ResponseConstChar>
 8000a90:	e009      	b.n	8000aa6 <Command_I2CCommandResponse+0x2ee>

				}
			}
			else {
				LCD_SetCursor(0, 0);
 8000a92:	2100      	movs	r1, #0
 8000a94:	2000      	movs	r0, #0
 8000a96:	f008 fc75 	bl	8009384 <LCD_SetCursor>
				LCD_SendString("Error occurs");
 8000a9a:	481c      	ldr	r0, [pc, #112]	; (8000b0c <Command_I2CCommandResponse+0x354>)
 8000a9c:	f008 fc5c 	bl	8009358 <LCD_SendString>
				Command_ResponseConstChar("Error occurs");
 8000aa0:	481a      	ldr	r0, [pc, #104]	; (8000b0c <Command_I2CCommandResponse+0x354>)
 8000aa2:	f7ff fd43 	bl	800052c <Command_ResponseConstChar>
			}
//
//			HAL_I2C_DeInit(&hi2c1);
//			HAL_I2C_Init(&hi2c1);

			hi2c1.ErrorCode = HAL_I2C_ERROR_NONE;
 8000aa6:	4b15      	ldr	r3, [pc, #84]	; (8000afc <Command_I2CCommandResponse+0x344>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	641a      	str	r2, [r3, #64]	; 0x40
		else
		{
			LCD_SendString("Invalid command");
			Command_ResponseConstChar("Invalid command - read");
		}
		break;
 8000aac:	e13e      	b.n	8000d2c <Command_I2CCommandResponse+0x574>
		else if (strcmp(argv[0], "write-mul") == 0)
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	491a      	ldr	r1, [pc, #104]	; (8000b1c <Command_I2CCommandResponse+0x364>)
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f7ff fb49 	bl	800014c <strcmp>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	f040 8096 	bne.w	8000bee <Command_I2CCommandResponse+0x436>
			u8Data[1] = WRITE_REGISTERS_FUNCTION;
 8000ac2:	2304      	movs	r3, #4
 8000ac4:	737b      	strb	r3, [r7, #13]
			u8Data[2] = 0x00;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	73bb      	strb	r3, [r7, #14]
			u8Data[3] = 0x03;
 8000aca:	2303      	movs	r3, #3
 8000acc:	73fb      	strb	r3, [r7, #15]
			u8Data[0] = 4 + u8Data[3];
 8000ace:	7bfb      	ldrb	r3, [r7, #15]
 8000ad0:	3304      	adds	r3, #4
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	733b      	strb	r3, [r7, #12]
			uint8_t u8NewValue = ConvertHexStringToHex(argv[2]);
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	3308      	adds	r3, #8
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4618      	mov	r0, r3
 8000ade:	f00a fb0d 	bl	800b0fc <ConvertHexStringToHex>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
			for (int i=0; i<u8Data[3]; i++)
 8000ae8:	2300      	movs	r3, #0
 8000aea:	677b      	str	r3, [r7, #116]	; 0x74
 8000aec:	e023      	b.n	8000b36 <Command_I2CCommandResponse+0x37e>
 8000aee:	bf00      	nop
 8000af0:	0800d30c 	.word	0x0800d30c
 8000af4:	0800d31c 	.word	0x0800d31c
 8000af8:	0800d348 	.word	0x0800d348
 8000afc:	20000254 	.word	0x20000254
 8000b00:	0800d350 	.word	0x0800d350
 8000b04:	0800d35c 	.word	0x0800d35c
 8000b08:	0800d368 	.word	0x0800d368
 8000b0c:	0800d378 	.word	0x0800d378
 8000b10:	0800d388 	.word	0x0800d388
 8000b14:	0800d390 	.word	0x0800d390
 8000b18:	0800d39c 	.word	0x0800d39c
 8000b1c:	0800d3b4 	.word	0x0800d3b4
				u8Data[4 + i] = u8NewValue;
 8000b20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000b22:	3304      	adds	r3, #4
 8000b24:	3378      	adds	r3, #120	; 0x78
 8000b26:	443b      	add	r3, r7
 8000b28:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 8000b2c:	f803 2c6c 	strb.w	r2, [r3, #-108]
			for (int i=0; i<u8Data[3]; i++)
 8000b30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000b32:	3301      	adds	r3, #1
 8000b34:	677b      	str	r3, [r7, #116]	; 0x74
 8000b36:	7bfb      	ldrb	r3, [r7, #15]
 8000b38:	461a      	mov	r2, r3
 8000b3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	dbef      	blt.n	8000b20 <Command_I2CCommandResponse+0x368>
			HAL_I2C_Master_Transmit(
 8000b40:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8000b44:	b299      	uxth	r1, r3
							u8Data, u8Data[0], 300);
 8000b46:	7b3b      	ldrb	r3, [r7, #12]
			HAL_I2C_Master_Transmit(
 8000b48:	b29b      	uxth	r3, r3
 8000b4a:	f107 020c 	add.w	r2, r7, #12
 8000b4e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000b52:	9000      	str	r0, [sp, #0]
 8000b54:	4877      	ldr	r0, [pc, #476]	; (8000d34 <Command_I2CCommandResponse+0x57c>)
 8000b56:	f001 ffaf 	bl	8002ab8 <HAL_I2C_Master_Transmit>
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8000b5a:	bf00      	nop
 8000b5c:	4875      	ldr	r0, [pc, #468]	; (8000d34 <Command_I2CCommandResponse+0x57c>)
 8000b5e:	f002 fb15 	bl	800318c <HAL_I2C_GetState>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b20      	cmp	r3, #32
 8000b66:	d1f9      	bne.n	8000b5c <Command_I2CCommandResponse+0x3a4>
			if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 8000b68:	4872      	ldr	r0, [pc, #456]	; (8000d34 <Command_I2CCommandResponse+0x57c>)
 8000b6a:	f002 fb1c 	bl	80031a6 <HAL_I2C_GetError>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b04      	cmp	r3, #4
 8000b72:	d031      	beq.n	8000bd8 <Command_I2CCommandResponse+0x420>
				HAL_Delay(50);
 8000b74:	2032      	movs	r0, #50	; 0x32
 8000b76:	f001 fb6b 	bl	8002250 <HAL_Delay>
				HAL_I2C_Master_Receive(&hi2c1, u8Address, u8Response, 1, 100);
 8000b7a:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8000b7e:	b299      	uxth	r1, r3
 8000b80:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000b84:	2364      	movs	r3, #100	; 0x64
 8000b86:	9300      	str	r3, [sp, #0]
 8000b88:	2301      	movs	r3, #1
 8000b8a:	486a      	ldr	r0, [pc, #424]	; (8000d34 <Command_I2CCommandResponse+0x57c>)
 8000b8c:	f002 f892 	bl	8002cb4 <HAL_I2C_Master_Receive>
				while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8000b90:	bf00      	nop
 8000b92:	4868      	ldr	r0, [pc, #416]	; (8000d34 <Command_I2CCommandResponse+0x57c>)
 8000b94:	f002 fafa 	bl	800318c <HAL_I2C_GetState>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b20      	cmp	r3, #32
 8000b9c:	d1f9      	bne.n	8000b92 <Command_I2CCommandResponse+0x3da>
				while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8000b9e:	bf00      	nop
 8000ba0:	4864      	ldr	r0, [pc, #400]	; (8000d34 <Command_I2CCommandResponse+0x57c>)
 8000ba2:	f002 fb00 	bl	80031a6 <HAL_I2C_GetError>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b04      	cmp	r3, #4
 8000baa:	d0f9      	beq.n	8000ba0 <Command_I2CCommandResponse+0x3e8>
				LCD_SetCursor(0, 0);
 8000bac:	2100      	movs	r1, #0
 8000bae:	2000      	movs	r0, #0
 8000bb0:	f008 fbe8 	bl	8009384 <LCD_SetCursor>
				FormatString(chLCDString, "Status: %d", u8Response[0]);
 8000bb4:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8000bb8:	461a      	mov	r2, r3
 8000bba:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000bbe:	495e      	ldr	r1, [pc, #376]	; (8000d38 <Command_I2CCommandResponse+0x580>)
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f00a fa85 	bl	800b0d0 <FormatString>
				LCD_SendString(chLCDString);
 8000bc6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f008 fbc4 	bl	8009358 <LCD_SendString>
				Command_ResponseConstChar("Frame is sent successfully.");
 8000bd0:	485a      	ldr	r0, [pc, #360]	; (8000d3c <Command_I2CCommandResponse+0x584>)
 8000bd2:	f7ff fcab 	bl	800052c <Command_ResponseConstChar>
		break;
 8000bd6:	e0a9      	b.n	8000d2c <Command_I2CCommandResponse+0x574>
				LCD_SetCursor(0, 0);
 8000bd8:	2100      	movs	r1, #0
 8000bda:	2000      	movs	r0, #0
 8000bdc:	f008 fbd2 	bl	8009384 <LCD_SetCursor>
				LCD_SendString("Error occurs");
 8000be0:	4857      	ldr	r0, [pc, #348]	; (8000d40 <Command_I2CCommandResponse+0x588>)
 8000be2:	f008 fbb9 	bl	8009358 <LCD_SendString>
				Command_ResponseConstChar("Error occurs");
 8000be6:	4856      	ldr	r0, [pc, #344]	; (8000d40 <Command_I2CCommandResponse+0x588>)
 8000be8:	f7ff fca0 	bl	800052c <Command_ResponseConstChar>
		break;
 8000bec:	e09e      	b.n	8000d2c <Command_I2CCommandResponse+0x574>
			LCD_SendString("Invalid command");
 8000bee:	4855      	ldr	r0, [pc, #340]	; (8000d44 <Command_I2CCommandResponse+0x58c>)
 8000bf0:	f008 fbb2 	bl	8009358 <LCD_SendString>
			Command_ResponseConstChar("Invalid command - read");
 8000bf4:	4854      	ldr	r0, [pc, #336]	; (8000d48 <Command_I2CCommandResponse+0x590>)
 8000bf6:	f7ff fc99 	bl	800052c <Command_ResponseConstChar>
		break;
 8000bfa:	e097      	b.n	8000d2c <Command_I2CCommandResponse+0x574>
	case 4:
		u8Address = ConvertHexStringToHex(argv[1]) << 1;
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	3304      	adds	r3, #4
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4618      	mov	r0, r3
 8000c04:	f00a fa7a 	bl	800b0fc <ConvertHexStringToHex>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	005b      	lsls	r3, r3, #1
 8000c0c:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
		u8Data[0] = 4;
 8000c10:	2304      	movs	r3, #4
 8000c12:	733b      	strb	r3, [r7, #12]
		u8Data[1] = WRITE_REGISTER_FUNCTION;
 8000c14:	2302      	movs	r3, #2
 8000c16:	737b      	strb	r3, [r7, #13]
		u8Data[2] = ConvertHexStringToHex(argv[2]);
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	3308      	adds	r3, #8
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f00a fa6c 	bl	800b0fc <ConvertHexStringToHex>
 8000c24:	4603      	mov	r3, r0
 8000c26:	73bb      	strb	r3, [r7, #14]
		u8Data[3] = ConvertHexStringToHex(argv[3]);
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	330c      	adds	r3, #12
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f00a fa64 	bl	800b0fc <ConvertHexStringToHex>
 8000c34:	4603      	mov	r3, r0
 8000c36:	73fb      	strb	r3, [r7, #15]
		LCD_Clear();
 8000c38:	f008 fbcc 	bl	80093d4 <LCD_Clear>

		if (strcmp(argv[0], "write") == 0)
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4942      	ldr	r1, [pc, #264]	; (8000d4c <Command_I2CCommandResponse+0x594>)
 8000c42:	4618      	mov	r0, r3
 8000c44:	f7ff fa82 	bl	800014c <strcmp>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d160      	bne.n	8000d10 <Command_I2CCommandResponse+0x558>
		{
			HAL_I2C_Master_Transmit(
 8000c4e:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8000c52:	b299      	uxth	r1, r3
							&hi2c1, u8Address,
							u8Data, u8Data[0], 300);
 8000c54:	7b3b      	ldrb	r3, [r7, #12]
			HAL_I2C_Master_Transmit(
 8000c56:	b29b      	uxth	r3, r3
 8000c58:	f107 020c 	add.w	r2, r7, #12
 8000c5c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000c60:	9000      	str	r0, [sp, #0]
 8000c62:	4834      	ldr	r0, [pc, #208]	; (8000d34 <Command_I2CCommandResponse+0x57c>)
 8000c64:	f001 ff28 	bl	8002ab8 <HAL_I2C_Master_Transmit>
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8000c68:	bf00      	nop
 8000c6a:	4832      	ldr	r0, [pc, #200]	; (8000d34 <Command_I2CCommandResponse+0x57c>)
 8000c6c:	f002 fa8e 	bl	800318c <HAL_I2C_GetState>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b20      	cmp	r3, #32
 8000c74:	d1f9      	bne.n	8000c6a <Command_I2CCommandResponse+0x4b2>
			if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 8000c76:	482f      	ldr	r0, [pc, #188]	; (8000d34 <Command_I2CCommandResponse+0x57c>)
 8000c78:	f002 fa95 	bl	80031a6 <HAL_I2C_GetError>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b04      	cmp	r3, #4
 8000c80:	d03b      	beq.n	8000cfa <Command_I2CCommandResponse+0x542>
			{
				HAL_Delay(50);
 8000c82:	2032      	movs	r0, #50	; 0x32
 8000c84:	f001 fae4 	bl	8002250 <HAL_Delay>
				HAL_I2C_Master_Receive(&hi2c1, u8Address, u8Response, 1, 100);
 8000c88:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8000c8c:	b299      	uxth	r1, r3
 8000c8e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000c92:	2364      	movs	r3, #100	; 0x64
 8000c94:	9300      	str	r3, [sp, #0]
 8000c96:	2301      	movs	r3, #1
 8000c98:	4826      	ldr	r0, [pc, #152]	; (8000d34 <Command_I2CCommandResponse+0x57c>)
 8000c9a:	f002 f80b 	bl	8002cb4 <HAL_I2C_Master_Receive>

				while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8000c9e:	bf00      	nop
 8000ca0:	4824      	ldr	r0, [pc, #144]	; (8000d34 <Command_I2CCommandResponse+0x57c>)
 8000ca2:	f002 fa73 	bl	800318c <HAL_I2C_GetState>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b20      	cmp	r3, #32
 8000caa:	d1f9      	bne.n	8000ca0 <Command_I2CCommandResponse+0x4e8>
				if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 8000cac:	4821      	ldr	r0, [pc, #132]	; (8000d34 <Command_I2CCommandResponse+0x57c>)
 8000cae:	f002 fa7a 	bl	80031a6 <HAL_I2C_GetError>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b04      	cmp	r3, #4
 8000cb6:	d015      	beq.n	8000ce4 <Command_I2CCommandResponse+0x52c>
				{
					LCD_SetCursor(0, 0);
 8000cb8:	2100      	movs	r1, #0
 8000cba:	2000      	movs	r0, #0
 8000cbc:	f008 fb62 	bl	8009384 <LCD_SetCursor>
					FormatString(chLCDString, "Status: %d", u8Response[0]);
 8000cc0:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000cca:	491b      	ldr	r1, [pc, #108]	; (8000d38 <Command_I2CCommandResponse+0x580>)
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f00a f9ff 	bl	800b0d0 <FormatString>
					LCD_SendString(chLCDString);
 8000cd2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f008 fb3e 	bl	8009358 <LCD_SendString>
					Command_ResponseConstChar("Frame is sent.");
 8000cdc:	481c      	ldr	r0, [pc, #112]	; (8000d50 <Command_I2CCommandResponse+0x598>)
 8000cde:	f7ff fc25 	bl	800052c <Command_ResponseConstChar>
		else
		{
			LCD_SendString("Invalid command");
			Command_ResponseConstChar("Invalid command - read");
		}
		break;
 8000ce2:	e023      	b.n	8000d2c <Command_I2CCommandResponse+0x574>
					LCD_SetCursor(0, 0);
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	2000      	movs	r0, #0
 8000ce8:	f008 fb4c 	bl	8009384 <LCD_SetCursor>
					LCD_SendString("Error occurs");
 8000cec:	4814      	ldr	r0, [pc, #80]	; (8000d40 <Command_I2CCommandResponse+0x588>)
 8000cee:	f008 fb33 	bl	8009358 <LCD_SendString>
					Command_ResponseConstChar("Error occurs");
 8000cf2:	4813      	ldr	r0, [pc, #76]	; (8000d40 <Command_I2CCommandResponse+0x588>)
 8000cf4:	f7ff fc1a 	bl	800052c <Command_ResponseConstChar>
		break;
 8000cf8:	e018      	b.n	8000d2c <Command_I2CCommandResponse+0x574>
				LCD_SetCursor(0, 0);
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	2000      	movs	r0, #0
 8000cfe:	f008 fb41 	bl	8009384 <LCD_SetCursor>
				LCD_SendString("Error occurs");
 8000d02:	480f      	ldr	r0, [pc, #60]	; (8000d40 <Command_I2CCommandResponse+0x588>)
 8000d04:	f008 fb28 	bl	8009358 <LCD_SendString>
				Command_ResponseConstChar("Error occurs");
 8000d08:	480d      	ldr	r0, [pc, #52]	; (8000d40 <Command_I2CCommandResponse+0x588>)
 8000d0a:	f7ff fc0f 	bl	800052c <Command_ResponseConstChar>
		break;
 8000d0e:	e00d      	b.n	8000d2c <Command_I2CCommandResponse+0x574>
			LCD_SendString("Invalid command");
 8000d10:	480c      	ldr	r0, [pc, #48]	; (8000d44 <Command_I2CCommandResponse+0x58c>)
 8000d12:	f008 fb21 	bl	8009358 <LCD_SendString>
			Command_ResponseConstChar("Invalid command - read");
 8000d16:	480c      	ldr	r0, [pc, #48]	; (8000d48 <Command_I2CCommandResponse+0x590>)
 8000d18:	f7ff fc08 	bl	800052c <Command_ResponseConstChar>
		break;
 8000d1c:	e006      	b.n	8000d2c <Command_I2CCommandResponse+0x574>
	default:
		LCD_SendString("Invalid command");
 8000d1e:	4809      	ldr	r0, [pc, #36]	; (8000d44 <Command_I2CCommandResponse+0x58c>)
 8000d20:	f008 fb1a 	bl	8009358 <LCD_SendString>
		Command_ResponseConstChar("Invalid command");
 8000d24:	4807      	ldr	r0, [pc, #28]	; (8000d44 <Command_I2CCommandResponse+0x58c>)
 8000d26:	f7ff fc01 	bl	800052c <Command_ResponseConstChar>
	}
}
 8000d2a:	bf00      	nop
 8000d2c:	bf00      	nop
 8000d2e:	3778      	adds	r7, #120	; 0x78
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	20000254 	.word	0x20000254
 8000d38:	0800d350 	.word	0x0800d350
 8000d3c:	0800d3c0 	.word	0x0800d3c0
 8000d40:	0800d378 	.word	0x0800d378
 8000d44:	0800d30c 	.word	0x0800d30c
 8000d48:	0800d3dc 	.word	0x0800d3dc
 8000d4c:	0800d3f4 	.word	0x0800d3f4
 8000d50:	0800d368 	.word	0x0800d368

08000d54 <Command_SensorsCommandResponse>:

void Command_SensorsCommandResponse(uint8_t argc, char **argv)
{
 8000d54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000d58:	b0c5      	sub	sp, #276	; 0x114
 8000d5a:	af08      	add	r7, sp, #32
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	6139      	str	r1, [r7, #16]
 8000d60:	75fb      	strb	r3, [r7, #23]
	GoToConfig();
 8000d62:	f000 fce3 	bl	800172c <GoToConfig>
	char chResponse[64];
	uint8_t u8NumSensors = Sensors_Length();
 8000d66:	f00a f88b 	bl	800ae80 <Sensors_Length>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
	LCD_Clear();
 8000d70:	f008 fb30 	bl	80093d4 <LCD_Clear>
	LCD_SetCursor(0, 0);
 8000d74:	2100      	movs	r1, #0
 8000d76:	2000      	movs	r0, #0
 8000d78:	f008 fb04 	bl	8009384 <LCD_SetCursor>

	switch(argc)
 8000d7c:	7dfb      	ldrb	r3, [r7, #23]
 8000d7e:	2b05      	cmp	r3, #5
 8000d80:	f200 817c 	bhi.w	800107c <Command_SensorsCommandResponse+0x328>
 8000d84:	a201      	add	r2, pc, #4	; (adr r2, 8000d8c <Command_SensorsCommandResponse+0x38>)
 8000d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d8a:	bf00      	nop
 8000d8c:	08000da5 	.word	0x08000da5
 8000d90:	08000db3 	.word	0x08000db3
 8000d94:	08000f65 	.word	0x08000f65
 8000d98:	0800107d 	.word	0x0800107d
 8000d9c:	0800107d 	.word	0x0800107d
 8000da0:	08000fed 	.word	0x08000fed
	{
	case 0:
		LCD_SendString("Invalid command");
 8000da4:	48bb      	ldr	r0, [pc, #748]	; (8001094 <Command_SensorsCommandResponse+0x340>)
 8000da6:	f008 fad7 	bl	8009358 <LCD_SendString>
		Command_ResponseConstChar("Invalid command");
 8000daa:	48ba      	ldr	r0, [pc, #744]	; (8001094 <Command_SensorsCommandResponse+0x340>)
 8000dac:	f7ff fbbe 	bl	800052c <Command_ResponseConstChar>
		break;
 8000db0:	e16b      	b.n	800108a <Command_SensorsCommandResponse+0x336>
	case 1:
		if (strcmp(argv[0], "count") == 0)
 8000db2:	693b      	ldr	r3, [r7, #16]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	49b8      	ldr	r1, [pc, #736]	; (8001098 <Command_SensorsCommandResponse+0x344>)
 8000db8:	4618      	mov	r0, r3
 8000dba:	f7ff f9c7 	bl	800014c <strcmp>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d112      	bne.n	8000dea <Command_SensorsCommandResponse+0x96>
		{
			FormatString(chResponse, "Count: %d", u8NumSensors);
 8000dc4:	f897 20ef 	ldrb.w	r2, [r7, #239]	; 0xef
 8000dc8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000dcc:	49b3      	ldr	r1, [pc, #716]	; (800109c <Command_SensorsCommandResponse+0x348>)
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f00a f97e 	bl	800b0d0 <FormatString>
			LCD_SendString(chResponse);
 8000dd4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f008 fabd 	bl	8009358 <LCD_SendString>
			Command_ResponseConstChar(chResponse);
 8000dde:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000de2:	4618      	mov	r0, r3
 8000de4:	f7ff fba2 	bl	800052c <Command_ResponseConstChar>
		else
		{
			LCD_SendString("Invalid command");
			Command_ResponseConstChar("Invalid command");
		}
		break;
 8000de8:	e14f      	b.n	800108a <Command_SensorsCommandResponse+0x336>
		else if (strcmp(argv[0], "clear") == 0)
 8000dea:	693b      	ldr	r3, [r7, #16]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	49ac      	ldr	r1, [pc, #688]	; (80010a0 <Command_SensorsCommandResponse+0x34c>)
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff f9ab 	bl	800014c <strcmp>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d108      	bne.n	8000e0e <Command_SensorsCommandResponse+0xba>
			Sensors_Clear();
 8000dfc:	f00a f874 	bl	800aee8 <Sensors_Clear>
			LCD_SendString("Success");
 8000e00:	48a8      	ldr	r0, [pc, #672]	; (80010a4 <Command_SensorsCommandResponse+0x350>)
 8000e02:	f008 faa9 	bl	8009358 <LCD_SendString>
			Command_ResponseConstChar("Success");
 8000e06:	48a7      	ldr	r0, [pc, #668]	; (80010a4 <Command_SensorsCommandResponse+0x350>)
 8000e08:	f7ff fb90 	bl	800052c <Command_ResponseConstChar>
		break;
 8000e0c:	e13d      	b.n	800108a <Command_SensorsCommandResponse+0x336>
		else if (strcmp(argv[0], "data") == 0)
 8000e0e:	693b      	ldr	r3, [r7, #16]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	49a5      	ldr	r1, [pc, #660]	; (80010a8 <Command_SensorsCommandResponse+0x354>)
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff f999 	bl	800014c <strcmp>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	f040 809a 	bne.w	8000f56 <Command_SensorsCommandResponse+0x202>
			uint8_t *u8Data = (uint8_t *)malloc(sizeof(uint8_t) * DATA_SIZE * u8NumSensors);
 8000e22:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8000e26:	015b      	lsls	r3, r3, #5
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f00a fe3d 	bl	800baa8 <malloc>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
			Sensors_GetData(u8Data);
 8000e34:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 8000e38:	f00a f89c 	bl	800af74 <Sensors_GetData>
			F32 res = { .value = 0 };
 8000e3c:	f04f 0300 	mov.w	r3, #0
 8000e40:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			res.buffer[0] = u8Data[0];
 8000e44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
			res.buffer[1] = u8Data[1];
 8000e4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000e52:	785b      	ldrb	r3, [r3, #1]
 8000e54:	f887 30a1 	strb.w	r3, [r7, #161]	; 0xa1
			res.buffer[2] = u8Data[2];
 8000e58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000e5c:	789b      	ldrb	r3, [r3, #2]
 8000e5e:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
			res.buffer[3] = u8Data[3];
 8000e62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000e66:	78db      	ldrb	r3, [r3, #3]
 8000e68:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
			F32 res2 = { .value = 0 };
 8000e6c:	f04f 0300 	mov.w	r3, #0
 8000e70:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			res2.buffer[0] = u8Data[4];
 8000e74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000e78:	791b      	ldrb	r3, [r3, #4]
 8000e7a:	f887 309c 	strb.w	r3, [r7, #156]	; 0x9c
			res2.buffer[1] = u8Data[5];
 8000e7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000e82:	795b      	ldrb	r3, [r3, #5]
 8000e84:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
			res2.buffer[2] = u8Data[6];
 8000e88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000e8c:	799b      	ldrb	r3, [r3, #6]
 8000e8e:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
			res2.buffer[3] = u8Data[7];
 8000e92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000e96:	79db      	ldrb	r3, [r3, #7]
 8000e98:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			LCD_SendString("Success");
 8000e9c:	4881      	ldr	r0, [pc, #516]	; (80010a4 <Command_SensorsCommandResponse+0x350>)
 8000e9e:	f008 fa5b 	bl	8009358 <LCD_SendString>
							u8Data[0], u8Data[1], u8Data[2], u8Data[3],
 8000ea2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000ea6:	781b      	ldrb	r3, [r3, #0]
			FormatString(chResponse, "%d, %d, %d, %d, %d, %d, %d, %d - Test Float: %d - Test Float: %d",
 8000ea8:	4698      	mov	r8, r3
							u8Data[0], u8Data[1], u8Data[2], u8Data[3],
 8000eaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000eae:	3301      	adds	r3, #1
 8000eb0:	781b      	ldrb	r3, [r3, #0]
			FormatString(chResponse, "%d, %d, %d, %d, %d, %d, %d, %d - Test Float: %d - Test Float: %d",
 8000eb2:	4699      	mov	r9, r3
							u8Data[0], u8Data[1], u8Data[2], u8Data[3],
 8000eb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000eb8:	3302      	adds	r3, #2
 8000eba:	781b      	ldrb	r3, [r3, #0]
			FormatString(chResponse, "%d, %d, %d, %d, %d, %d, %d, %d - Test Float: %d - Test Float: %d",
 8000ebc:	461d      	mov	r5, r3
							u8Data[0], u8Data[1], u8Data[2], u8Data[3],
 8000ebe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000ec2:	3303      	adds	r3, #3
 8000ec4:	781b      	ldrb	r3, [r3, #0]
			FormatString(chResponse, "%d, %d, %d, %d, %d, %d, %d, %d - Test Float: %d - Test Float: %d",
 8000ec6:	461e      	mov	r6, r3
							u8Data[4], u8Data[5], u8Data[6], u8Data[7],
 8000ec8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000ecc:	3304      	adds	r3, #4
 8000ece:	781b      	ldrb	r3, [r3, #0]
			FormatString(chResponse, "%d, %d, %d, %d, %d, %d, %d, %d - Test Float: %d - Test Float: %d",
 8000ed0:	60fb      	str	r3, [r7, #12]
							u8Data[4], u8Data[5], u8Data[6], u8Data[7],
 8000ed2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000ed6:	3305      	adds	r3, #5
 8000ed8:	781b      	ldrb	r3, [r3, #0]
			FormatString(chResponse, "%d, %d, %d, %d, %d, %d, %d, %d - Test Float: %d - Test Float: %d",
 8000eda:	60bb      	str	r3, [r7, #8]
							u8Data[4], u8Data[5], u8Data[6], u8Data[7],
 8000edc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000ee0:	3306      	adds	r3, #6
 8000ee2:	781b      	ldrb	r3, [r3, #0]
			FormatString(chResponse, "%d, %d, %d, %d, %d, %d, %d, %d - Test Float: %d - Test Float: %d",
 8000ee4:	607b      	str	r3, [r7, #4]
							u8Data[4], u8Data[5], u8Data[6], u8Data[7],
 8000ee6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000eea:	3307      	adds	r3, #7
 8000eec:	781b      	ldrb	r3, [r3, #0]
			FormatString(chResponse, "%d, %d, %d, %d, %d, %d, %d, %d - Test Float: %d - Test Float: %d",
 8000eee:	603b      	str	r3, [r7, #0]
							(int)(res.value * 100), (int)(res2.value * 100));
 8000ef0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000ef4:	496d      	ldr	r1, [pc, #436]	; (80010ac <Command_SensorsCommandResponse+0x358>)
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f7ff f93a 	bl	8000170 <__aeabi_fmul>
 8000efc:	4603      	mov	r3, r0
			FormatString(chResponse, "%d, %d, %d, %d, %d, %d, %d, %d - Test Float: %d - Test Float: %d",
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff f9ea 	bl	80002d8 <__aeabi_f2iz>
 8000f04:	4604      	mov	r4, r0
							(int)(res.value * 100), (int)(res2.value * 100));
 8000f06:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000f0a:	4968      	ldr	r1, [pc, #416]	; (80010ac <Command_SensorsCommandResponse+0x358>)
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff f92f 	bl	8000170 <__aeabi_fmul>
 8000f12:	4603      	mov	r3, r0
			FormatString(chResponse, "%d, %d, %d, %d, %d, %d, %d, %d - Test Float: %d - Test Float: %d",
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff f9df 	bl	80002d8 <__aeabi_f2iz>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	f107 001c 	add.w	r0, r7, #28
 8000f20:	9307      	str	r3, [sp, #28]
 8000f22:	9406      	str	r4, [sp, #24]
 8000f24:	683a      	ldr	r2, [r7, #0]
 8000f26:	9205      	str	r2, [sp, #20]
 8000f28:	687a      	ldr	r2, [r7, #4]
 8000f2a:	9204      	str	r2, [sp, #16]
 8000f2c:	68ba      	ldr	r2, [r7, #8]
 8000f2e:	9203      	str	r2, [sp, #12]
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	9302      	str	r3, [sp, #8]
 8000f34:	9601      	str	r6, [sp, #4]
 8000f36:	9500      	str	r5, [sp, #0]
 8000f38:	464b      	mov	r3, r9
 8000f3a:	4642      	mov	r2, r8
 8000f3c:	495c      	ldr	r1, [pc, #368]	; (80010b0 <Command_SensorsCommandResponse+0x35c>)
 8000f3e:	f00a f8c7 	bl	800b0d0 <FormatString>
			Command_ResponseConstChar(chResponse);
 8000f42:	f107 031c 	add.w	r3, r7, #28
 8000f46:	4618      	mov	r0, r3
 8000f48:	f7ff faf0 	bl	800052c <Command_ResponseConstChar>
			free(u8Data);
 8000f4c:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 8000f50:	f00a fdb2 	bl	800bab8 <free>
		break;
 8000f54:	e099      	b.n	800108a <Command_SensorsCommandResponse+0x336>
			LCD_SendString("Invalid command");
 8000f56:	484f      	ldr	r0, [pc, #316]	; (8001094 <Command_SensorsCommandResponse+0x340>)
 8000f58:	f008 f9fe 	bl	8009358 <LCD_SendString>
			Command_ResponseConstChar("Invalid command");
 8000f5c:	484d      	ldr	r0, [pc, #308]	; (8001094 <Command_SensorsCommandResponse+0x340>)
 8000f5e:	f7ff fae5 	bl	800052c <Command_ResponseConstChar>
		break;
 8000f62:	e092      	b.n	800108a <Command_SensorsCommandResponse+0x336>
	case 2:
		if (strcmp(argv[0], "info") == 0)
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4952      	ldr	r1, [pc, #328]	; (80010b4 <Command_SensorsCommandResponse+0x360>)
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f7ff f8ee 	bl	800014c <strcmp>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d133      	bne.n	8000fde <Command_SensorsCommandResponse+0x28a>
		{
			LCD_SendString("Sensor: ");
 8000f76:	4850      	ldr	r0, [pc, #320]	; (80010b8 <Command_SensorsCommandResponse+0x364>)
 8000f78:	f008 f9ee 	bl	8009358 <LCD_SendString>
			LCD_SetCursor(1, 0);
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	2001      	movs	r0, #1
 8000f80:	f008 fa00 	bl	8009384 <LCD_SetCursor>
			if (ConvertHexStringToHex(argv[1]) < Sensors_Length())
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	3304      	adds	r3, #4
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f00a f8b6 	bl	800b0fc <ConvertHexStringToHex>
 8000f90:	4603      	mov	r3, r0
 8000f92:	461c      	mov	r4, r3
 8000f94:	f009 ff74 	bl	800ae80 <Sensors_Length>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	429c      	cmp	r4, r3
 8000f9c:	d218      	bcs.n	8000fd0 <Command_SensorsCommandResponse+0x27c>
			{
				Sensors_ToString(ConvertHexStringToHex(argv[1]), chResponse);
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	3304      	adds	r3, #4
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f00a f8a9 	bl	800b0fc <ConvertHexStringToHex>
 8000faa:	4603      	mov	r3, r0
 8000fac:	461a      	mov	r2, r3
 8000fae:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4610      	mov	r0, r2
 8000fb6:	f009 ffbb 	bl	800af30 <Sensors_ToString>
				LCD_SendString(chResponse);
 8000fba:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f008 f9ca 	bl	8009358 <LCD_SendString>
				Command_ResponseConstChar(chResponse);
 8000fc4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff faaf 	bl	800052c <Command_ResponseConstChar>
		else
		{
			LCD_SendString("Invalid command");
			Command_ResponseConstChar("Invalid command");
		}
		break;
 8000fce:	e05c      	b.n	800108a <Command_SensorsCommandResponse+0x336>
				LCD_SendString("Out of range");
 8000fd0:	483a      	ldr	r0, [pc, #232]	; (80010bc <Command_SensorsCommandResponse+0x368>)
 8000fd2:	f008 f9c1 	bl	8009358 <LCD_SendString>
				Command_ResponseConstChar("Out of range");
 8000fd6:	4839      	ldr	r0, [pc, #228]	; (80010bc <Command_SensorsCommandResponse+0x368>)
 8000fd8:	f7ff faa8 	bl	800052c <Command_ResponseConstChar>
		break;
 8000fdc:	e055      	b.n	800108a <Command_SensorsCommandResponse+0x336>
			LCD_SendString("Invalid command");
 8000fde:	482d      	ldr	r0, [pc, #180]	; (8001094 <Command_SensorsCommandResponse+0x340>)
 8000fe0:	f008 f9ba 	bl	8009358 <LCD_SendString>
			Command_ResponseConstChar("Invalid command");
 8000fe4:	482b      	ldr	r0, [pc, #172]	; (8001094 <Command_SensorsCommandResponse+0x340>)
 8000fe6:	f7ff faa1 	bl	800052c <Command_ResponseConstChar>
		break;
 8000fea:	e04e      	b.n	800108a <Command_SensorsCommandResponse+0x336>
	case 5:
		if (strcmp(argv[0], "add") == 0)
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4933      	ldr	r1, [pc, #204]	; (80010c0 <Command_SensorsCommandResponse+0x36c>)
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f7ff f8aa 	bl	800014c <strcmp>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d137      	bne.n	800106e <Command_SensorsCommandResponse+0x31a>
		{
			Sensors_AddSensors(argv[1]);
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	3304      	adds	r3, #4
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4618      	mov	r0, r3
 8001006:	f009 ff15 	bl	800ae34 <Sensors_AddSensors>
			Sensor *sSensor = Sensors_GetSensor(Sensors_Length() - 1);
 800100a:	f009 ff39 	bl	800ae80 <Sensors_Length>
 800100e:	4603      	mov	r3, r0
 8001010:	3b01      	subs	r3, #1
 8001012:	b2db      	uxtb	r3, r3
 8001014:	4618      	mov	r0, r3
 8001016:	f009 ff77 	bl	800af08 <Sensors_GetSensor>
 800101a:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
			sSensor->u8Address = ConvertHexStringToHex(argv[2]);
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	3308      	adds	r3, #8
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4618      	mov	r0, r3
 8001026:	f00a f869 	bl	800b0fc <ConvertHexStringToHex>
 800102a:	4603      	mov	r3, r0
 800102c:	461a      	mov	r2, r3
 800102e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001032:	731a      	strb	r2, [r3, #12]
			sSensor->u8StartRegAddr = ConvertHexStringToHex(argv[3]);
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	330c      	adds	r3, #12
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4618      	mov	r0, r3
 800103c:	f00a f85e 	bl	800b0fc <ConvertHexStringToHex>
 8001040:	4603      	mov	r3, r0
 8001042:	461a      	mov	r2, r3
 8001044:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001048:	735a      	strb	r2, [r3, #13]
			sSensor->u8RegNum = ConvertHexStringToHex(argv[4]);
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	3310      	adds	r3, #16
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4618      	mov	r0, r3
 8001052:	f00a f853 	bl	800b0fc <ConvertHexStringToHex>
 8001056:	4603      	mov	r3, r0
 8001058:	461a      	mov	r2, r3
 800105a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800105e:	739a      	strb	r2, [r3, #14]
			LCD_SendString("Success");
 8001060:	4810      	ldr	r0, [pc, #64]	; (80010a4 <Command_SensorsCommandResponse+0x350>)
 8001062:	f008 f979 	bl	8009358 <LCD_SendString>
			Command_ResponseConstChar("Success");
 8001066:	480f      	ldr	r0, [pc, #60]	; (80010a4 <Command_SensorsCommandResponse+0x350>)
 8001068:	f7ff fa60 	bl	800052c <Command_ResponseConstChar>
		else
		{
			LCD_SendString("Invalid command");
			Command_ResponseConstChar("Invalid command");
		}
		break;
 800106c:	e00d      	b.n	800108a <Command_SensorsCommandResponse+0x336>
			LCD_SendString("Invalid command");
 800106e:	4809      	ldr	r0, [pc, #36]	; (8001094 <Command_SensorsCommandResponse+0x340>)
 8001070:	f008 f972 	bl	8009358 <LCD_SendString>
			Command_ResponseConstChar("Invalid command");
 8001074:	4807      	ldr	r0, [pc, #28]	; (8001094 <Command_SensorsCommandResponse+0x340>)
 8001076:	f7ff fa59 	bl	800052c <Command_ResponseConstChar>
		break;
 800107a:	e006      	b.n	800108a <Command_SensorsCommandResponse+0x336>
	default:
		LCD_SendString("Invalid command");
 800107c:	4805      	ldr	r0, [pc, #20]	; (8001094 <Command_SensorsCommandResponse+0x340>)
 800107e:	f008 f96b 	bl	8009358 <LCD_SendString>
		Command_ResponseConstChar("Invalid command");
 8001082:	4804      	ldr	r0, [pc, #16]	; (8001094 <Command_SensorsCommandResponse+0x340>)
 8001084:	f7ff fa52 	bl	800052c <Command_ResponseConstChar>
	}
}
 8001088:	bf00      	nop
 800108a:	bf00      	nop
 800108c:	37f4      	adds	r7, #244	; 0xf4
 800108e:	46bd      	mov	sp, r7
 8001090:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001094:	0800d30c 	.word	0x0800d30c
 8001098:	0800d3fc 	.word	0x0800d3fc
 800109c:	0800d404 	.word	0x0800d404
 80010a0:	0800d190 	.word	0x0800d190
 80010a4:	0800d410 	.word	0x0800d410
 80010a8:	0800d270 	.word	0x0800d270
 80010ac:	42c80000 	.word	0x42c80000
 80010b0:	0800d418 	.word	0x0800d418
 80010b4:	0800d45c 	.word	0x0800d45c
 80010b8:	0800d464 	.word	0x0800d464
 80010bc:	0800d470 	.word	0x0800d470
 80010c0:	0800d480 	.word	0x0800d480

080010c4 <Command_LoRaCommandResponse>:

void Command_LoRaCommandResponse(uint8_t argc, char **argv)
{
 80010c4:	b590      	push	{r4, r7, lr}
 80010c6:	b08d      	sub	sp, #52	; 0x34
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	6039      	str	r1, [r7, #0]
 80010ce:	71fb      	strb	r3, [r7, #7]
	char chResponse[40];
	LCD_Clear();
 80010d0:	f008 f980 	bl	80093d4 <LCD_Clear>

	switch(argc)
 80010d4:	79fb      	ldrb	r3, [r7, #7]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d002      	beq.n	80010e0 <Command_LoRaCommandResponse+0x1c>
 80010da:	2b02      	cmp	r3, #2
 80010dc:	d007      	beq.n	80010ee <Command_LoRaCommandResponse+0x2a>
 80010de:	e036      	b.n	800114e <Command_LoRaCommandResponse+0x8a>
	{
	case 0:
		LCD_SendString("Invalid command");
 80010e0:	4820      	ldr	r0, [pc, #128]	; (8001164 <Command_LoRaCommandResponse+0xa0>)
 80010e2:	f008 f939 	bl	8009358 <LCD_SendString>
		Command_ResponseConstChar("Invalid command");
 80010e6:	481f      	ldr	r0, [pc, #124]	; (8001164 <Command_LoRaCommandResponse+0xa0>)
 80010e8:	f7ff fa20 	bl	800052c <Command_ResponseConstChar>
		break;
 80010ec:	e036      	b.n	800115c <Command_LoRaCommandResponse+0x98>
	case 2:
		if (strcmp(argv[0], "send") == 0)
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	491d      	ldr	r1, [pc, #116]	; (8001168 <Command_LoRaCommandResponse+0xa4>)
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff f829 	bl	800014c <strcmp>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d11f      	bne.n	8001140 <Command_LoRaCommandResponse+0x7c>
		{
			FormatString(chResponse, "Sent");
 8001100:	f107 0308 	add.w	r3, r7, #8
 8001104:	4919      	ldr	r1, [pc, #100]	; (800116c <Command_LoRaCommandResponse+0xa8>)
 8001106:	4618      	mov	r0, r3
 8001108:	f009 ffe2 	bl	800b0d0 <FormatString>

			LoRa_Send((uint8_t*)argv[1], strlen(argv[1]));
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	3304      	adds	r3, #4
 8001110:	681c      	ldr	r4, [r3, #0]
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	3304      	adds	r3, #4
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff f821 	bl	8000160 <strlen>
 800111e:	4603      	mov	r3, r0
 8001120:	b29b      	uxth	r3, r3
 8001122:	4619      	mov	r1, r3
 8001124:	4620      	mov	r0, r4
 8001126:	f008 fa4b 	bl	80095c0 <LoRa_Send>

			Command_ResponseConstChar(chResponse);
 800112a:	f107 0308 	add.w	r3, r7, #8
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff f9fc 	bl	800052c <Command_ResponseConstChar>
			LCD_SendString(chResponse);
 8001134:	f107 0308 	add.w	r3, r7, #8
 8001138:	4618      	mov	r0, r3
 800113a:	f008 f90d 	bl	8009358 <LCD_SendString>
		else
		{
			LCD_SendString("Invalid command");
			Command_ResponseConstChar("Invalid command");
		}
		break;
 800113e:	e00d      	b.n	800115c <Command_LoRaCommandResponse+0x98>
			LCD_SendString("Invalid command");
 8001140:	4808      	ldr	r0, [pc, #32]	; (8001164 <Command_LoRaCommandResponse+0xa0>)
 8001142:	f008 f909 	bl	8009358 <LCD_SendString>
			Command_ResponseConstChar("Invalid command");
 8001146:	4807      	ldr	r0, [pc, #28]	; (8001164 <Command_LoRaCommandResponse+0xa0>)
 8001148:	f7ff f9f0 	bl	800052c <Command_ResponseConstChar>
		break;
 800114c:	e006      	b.n	800115c <Command_LoRaCommandResponse+0x98>
	default:
		LCD_SendString("Invalid command");
 800114e:	4805      	ldr	r0, [pc, #20]	; (8001164 <Command_LoRaCommandResponse+0xa0>)
 8001150:	f008 f902 	bl	8009358 <LCD_SendString>
		Command_ResponseConstChar("Invalid command");
 8001154:	4803      	ldr	r0, [pc, #12]	; (8001164 <Command_LoRaCommandResponse+0xa0>)
 8001156:	f7ff f9e9 	bl	800052c <Command_ResponseConstChar>
	}
}
 800115a:	bf00      	nop
 800115c:	bf00      	nop
 800115e:	3734      	adds	r7, #52	; 0x34
 8001160:	46bd      	mov	sp, r7
 8001162:	bd90      	pop	{r4, r7, pc}
 8001164:	0800d30c 	.word	0x0800d30c
 8001168:	0800d484 	.word	0x0800d484
 800116c:	0800d48c 	.word	0x0800d48c

08001170 <Command_SPICommandResponse>:

void Command_SPICommandResponse(uint8_t argc, char **argv)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b08c      	sub	sp, #48	; 0x30
 8001174:	af02      	add	r7, sp, #8
 8001176:	4603      	mov	r3, r0
 8001178:	6039      	str	r1, [r7, #0]
 800117a:	71fb      	strb	r3, [r7, #7]
	char chResponse[24];
	uint8_t data = 0xff;
 800117c:	23ff      	movs	r3, #255	; 0xff
 800117e:	73fb      	strb	r3, [r7, #15]
	uint8_t address;
	uint8_t newValue = 0;
 8001180:	2300      	movs	r3, #0
 8001182:	737b      	strb	r3, [r7, #13]
	LCD_Clear();
 8001184:	f008 f926 	bl	80093d4 <LCD_Clear>

	switch(argc)
 8001188:	79fb      	ldrb	r3, [r7, #7]
 800118a:	2b03      	cmp	r3, #3
 800118c:	f200 80de 	bhi.w	800134c <Command_SPICommandResponse+0x1dc>
 8001190:	a201      	add	r2, pc, #4	; (adr r2, 8001198 <Command_SPICommandResponse+0x28>)
 8001192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001196:	bf00      	nop
 8001198:	080011a9 	.word	0x080011a9
 800119c:	080011b7 	.word	0x080011b7
 80011a0:	080011e5 	.word	0x080011e5
 80011a4:	08001293 	.word	0x08001293
	{
	case 0:
		LCD_SendString("Invalid command");
 80011a8:	486e      	ldr	r0, [pc, #440]	; (8001364 <Command_SPICommandResponse+0x1f4>)
 80011aa:	f008 f8d5 	bl	8009358 <LCD_SendString>
		Command_ResponseConstChar("Invalid command");
 80011ae:	486d      	ldr	r0, [pc, #436]	; (8001364 <Command_SPICommandResponse+0x1f4>)
 80011b0:	f7ff f9bc 	bl	800052c <Command_ResponseConstChar>
		break;
 80011b4:	e0d1      	b.n	800135a <Command_SPICommandResponse+0x1ea>
	case 1:
		if (strcmp(argv[0], "off-test") == 0)
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	496b      	ldr	r1, [pc, #428]	; (8001368 <Command_SPICommandResponse+0x1f8>)
 80011bc:	4618      	mov	r0, r3
 80011be:	f7fe ffc5 	bl	800014c <strcmp>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d106      	bne.n	80011d6 <Command_SPICommandResponse+0x66>
		{
			LCD_SendString("Done");
 80011c8:	4868      	ldr	r0, [pc, #416]	; (800136c <Command_SPICommandResponse+0x1fc>)
 80011ca:	f008 f8c5 	bl	8009358 <LCD_SendString>
			Command_ResponseConstChar("Done");
 80011ce:	4867      	ldr	r0, [pc, #412]	; (800136c <Command_SPICommandResponse+0x1fc>)
 80011d0:	f7ff f9ac 	bl	800052c <Command_ResponseConstChar>
		else
		{
			LCD_SendString("Invalid command");
			Command_ResponseConstChar("Invalid command");
		}
		break;
 80011d4:	e0c1      	b.n	800135a <Command_SPICommandResponse+0x1ea>
			LCD_SendString("Invalid command");
 80011d6:	4863      	ldr	r0, [pc, #396]	; (8001364 <Command_SPICommandResponse+0x1f4>)
 80011d8:	f008 f8be 	bl	8009358 <LCD_SendString>
			Command_ResponseConstChar("Invalid command");
 80011dc:	4861      	ldr	r0, [pc, #388]	; (8001364 <Command_SPICommandResponse+0x1f4>)
 80011de:	f7ff f9a5 	bl	800052c <Command_ResponseConstChar>
		break;
 80011e2:	e0ba      	b.n	800135a <Command_SPICommandResponse+0x1ea>
	case 2:
		if (strcmp(argv[0], "read") == 0)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4961      	ldr	r1, [pc, #388]	; (8001370 <Command_SPICommandResponse+0x200>)
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7fe ffae 	bl	800014c <strcmp>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d146      	bne.n	8001284 <Command_SPICommandResponse+0x114>
		{
			address = ConvertHexStringToHex(argv[1]) & 0x7F;
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	3304      	adds	r3, #4
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4618      	mov	r0, r3
 80011fe:	f009 ff7d 	bl	800b0fc <ConvertHexStringToHex>
 8001202:	4603      	mov	r3, r0
 8001204:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001208:	b2db      	uxtb	r3, r3
 800120a:	73bb      	strb	r3, [r7, #14]
			HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_RESET);
 800120c:	2200      	movs	r2, #0
 800120e:	2101      	movs	r1, #1
 8001210:	4858      	ldr	r0, [pc, #352]	; (8001374 <Command_SPICommandResponse+0x204>)
 8001212:	f001 fad3 	bl	80027bc <HAL_GPIO_WritePin>

			HAL_SPI_Transmit(&hspi1, &address, 1, 100);
 8001216:	f107 010e 	add.w	r1, r7, #14
 800121a:	2364      	movs	r3, #100	; 0x64
 800121c:	2201      	movs	r2, #1
 800121e:	4856      	ldr	r0, [pc, #344]	; (8001378 <Command_SPICommandResponse+0x208>)
 8001220:	f004 fe0a 	bl	8005e38 <HAL_SPI_Transmit>
			while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001224:	bf00      	nop
 8001226:	4854      	ldr	r0, [pc, #336]	; (8001378 <Command_SPICommandResponse+0x208>)
 8001228:	f005 f8f9 	bl	800641e <HAL_SPI_GetState>
 800122c:	4603      	mov	r3, r0
 800122e:	2b01      	cmp	r3, #1
 8001230:	d1f9      	bne.n	8001226 <Command_SPICommandResponse+0xb6>

//			HAL_SPI_Receive(&hspi1, &data, 1, 100);
			HAL_SPI_TransmitReceive(&hspi1, &newValue, &data, 1, 100);
 8001232:	f107 020f 	add.w	r2, r7, #15
 8001236:	f107 010d 	add.w	r1, r7, #13
 800123a:	2364      	movs	r3, #100	; 0x64
 800123c:	9300      	str	r3, [sp, #0]
 800123e:	2301      	movs	r3, #1
 8001240:	484d      	ldr	r0, [pc, #308]	; (8001378 <Command_SPICommandResponse+0x208>)
 8001242:	f004 ff3c 	bl	80060be <HAL_SPI_TransmitReceive>
			while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001246:	bf00      	nop
 8001248:	484b      	ldr	r0, [pc, #300]	; (8001378 <Command_SPICommandResponse+0x208>)
 800124a:	f005 f8e8 	bl	800641e <HAL_SPI_GetState>
 800124e:	4603      	mov	r3, r0
 8001250:	2b01      	cmp	r3, #1
 8001252:	d1f9      	bne.n	8001248 <Command_SPICommandResponse+0xd8>

			HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 8001254:	2201      	movs	r2, #1
 8001256:	2101      	movs	r1, #1
 8001258:	4846      	ldr	r0, [pc, #280]	; (8001374 <Command_SPICommandResponse+0x204>)
 800125a:	f001 faaf 	bl	80027bc <HAL_GPIO_WritePin>

			FormatString(chResponse, "Result: %d", data);
 800125e:	7bfb      	ldrb	r3, [r7, #15]
 8001260:	461a      	mov	r2, r3
 8001262:	f107 0310 	add.w	r3, r7, #16
 8001266:	4945      	ldr	r1, [pc, #276]	; (800137c <Command_SPICommandResponse+0x20c>)
 8001268:	4618      	mov	r0, r3
 800126a:	f009 ff31 	bl	800b0d0 <FormatString>
			LCD_SendString(chResponse);
 800126e:	f107 0310 	add.w	r3, r7, #16
 8001272:	4618      	mov	r0, r3
 8001274:	f008 f870 	bl	8009358 <LCD_SendString>
			Command_ResponseConstChar(chResponse);
 8001278:	f107 0310 	add.w	r3, r7, #16
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff f955 	bl	800052c <Command_ResponseConstChar>
		else
		{
			LCD_SendString("Invalid command");
			Command_ResponseConstChar("Invalid command");
		}
		break;
 8001282:	e06a      	b.n	800135a <Command_SPICommandResponse+0x1ea>
			LCD_SendString("Invalid command");
 8001284:	4837      	ldr	r0, [pc, #220]	; (8001364 <Command_SPICommandResponse+0x1f4>)
 8001286:	f008 f867 	bl	8009358 <LCD_SendString>
			Command_ResponseConstChar("Invalid command");
 800128a:	4836      	ldr	r0, [pc, #216]	; (8001364 <Command_SPICommandResponse+0x1f4>)
 800128c:	f7ff f94e 	bl	800052c <Command_ResponseConstChar>
		break;
 8001290:	e063      	b.n	800135a <Command_SPICommandResponse+0x1ea>
	case 3:
		if (strcmp(argv[0], "write") == 0)
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	493a      	ldr	r1, [pc, #232]	; (8001380 <Command_SPICommandResponse+0x210>)
 8001298:	4618      	mov	r0, r3
 800129a:	f7fe ff57 	bl	800014c <strcmp>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d14c      	bne.n	800133e <Command_SPICommandResponse+0x1ce>
		{
			address = ConvertHexStringToHex(argv[1]) | 0x80;
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	3304      	adds	r3, #4
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f009 ff26 	bl	800b0fc <ConvertHexStringToHex>
 80012b0:	4603      	mov	r3, r0
 80012b2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	73bb      	strb	r3, [r7, #14]
			newValue = ConvertHexStringToHex(argv[2]);
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	3308      	adds	r3, #8
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f009 ff1b 	bl	800b0fc <ConvertHexStringToHex>
 80012c6:	4603      	mov	r3, r0
 80012c8:	737b      	strb	r3, [r7, #13]
			HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_RESET);
 80012ca:	2200      	movs	r2, #0
 80012cc:	2101      	movs	r1, #1
 80012ce:	4829      	ldr	r0, [pc, #164]	; (8001374 <Command_SPICommandResponse+0x204>)
 80012d0:	f001 fa74 	bl	80027bc <HAL_GPIO_WritePin>

			HAL_SPI_Transmit(&hspi1, &address, 1, 100);
 80012d4:	f107 010e 	add.w	r1, r7, #14
 80012d8:	2364      	movs	r3, #100	; 0x64
 80012da:	2201      	movs	r2, #1
 80012dc:	4826      	ldr	r0, [pc, #152]	; (8001378 <Command_SPICommandResponse+0x208>)
 80012de:	f004 fdab 	bl	8005e38 <HAL_SPI_Transmit>
			while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80012e2:	bf00      	nop
 80012e4:	4824      	ldr	r0, [pc, #144]	; (8001378 <Command_SPICommandResponse+0x208>)
 80012e6:	f005 f89a 	bl	800641e <HAL_SPI_GetState>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d1f9      	bne.n	80012e4 <Command_SPICommandResponse+0x174>

			HAL_SPI_TransmitReceive(&hspi1, &newValue, &data, 1, 100);
 80012f0:	f107 020f 	add.w	r2, r7, #15
 80012f4:	f107 010d 	add.w	r1, r7, #13
 80012f8:	2364      	movs	r3, #100	; 0x64
 80012fa:	9300      	str	r3, [sp, #0]
 80012fc:	2301      	movs	r3, #1
 80012fe:	481e      	ldr	r0, [pc, #120]	; (8001378 <Command_SPICommandResponse+0x208>)
 8001300:	f004 fedd 	bl	80060be <HAL_SPI_TransmitReceive>
			while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001304:	bf00      	nop
 8001306:	481c      	ldr	r0, [pc, #112]	; (8001378 <Command_SPICommandResponse+0x208>)
 8001308:	f005 f889 	bl	800641e <HAL_SPI_GetState>
 800130c:	4603      	mov	r3, r0
 800130e:	2b01      	cmp	r3, #1
 8001310:	d1f9      	bne.n	8001306 <Command_SPICommandResponse+0x196>

			HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 8001312:	2201      	movs	r2, #1
 8001314:	2101      	movs	r1, #1
 8001316:	4817      	ldr	r0, [pc, #92]	; (8001374 <Command_SPICommandResponse+0x204>)
 8001318:	f001 fa50 	bl	80027bc <HAL_GPIO_WritePin>

			FormatString(chResponse, "Done");
 800131c:	f107 0310 	add.w	r3, r7, #16
 8001320:	4912      	ldr	r1, [pc, #72]	; (800136c <Command_SPICommandResponse+0x1fc>)
 8001322:	4618      	mov	r0, r3
 8001324:	f009 fed4 	bl	800b0d0 <FormatString>
			LCD_SendString(chResponse);
 8001328:	f107 0310 	add.w	r3, r7, #16
 800132c:	4618      	mov	r0, r3
 800132e:	f008 f813 	bl	8009358 <LCD_SendString>
			Command_ResponseConstChar(chResponse);
 8001332:	f107 0310 	add.w	r3, r7, #16
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff f8f8 	bl	800052c <Command_ResponseConstChar>
		else
		{
			LCD_SendString("Invalid command");
			Command_ResponseConstChar("Invalid command");
		}
		break;
 800133c:	e00d      	b.n	800135a <Command_SPICommandResponse+0x1ea>
			LCD_SendString("Invalid command");
 800133e:	4809      	ldr	r0, [pc, #36]	; (8001364 <Command_SPICommandResponse+0x1f4>)
 8001340:	f008 f80a 	bl	8009358 <LCD_SendString>
			Command_ResponseConstChar("Invalid command");
 8001344:	4807      	ldr	r0, [pc, #28]	; (8001364 <Command_SPICommandResponse+0x1f4>)
 8001346:	f7ff f8f1 	bl	800052c <Command_ResponseConstChar>
		break;
 800134a:	e006      	b.n	800135a <Command_SPICommandResponse+0x1ea>
	default:
		LCD_SendString("Invalid command");
 800134c:	4805      	ldr	r0, [pc, #20]	; (8001364 <Command_SPICommandResponse+0x1f4>)
 800134e:	f008 f803 	bl	8009358 <LCD_SendString>
		Command_ResponseConstChar("Invalid command");
 8001352:	4804      	ldr	r0, [pc, #16]	; (8001364 <Command_SPICommandResponse+0x1f4>)
 8001354:	f7ff f8ea 	bl	800052c <Command_ResponseConstChar>
	}
}
 8001358:	bf00      	nop
 800135a:	bf00      	nop
 800135c:	3728      	adds	r7, #40	; 0x28
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	0800d30c 	.word	0x0800d30c
 8001368:	0800d494 	.word	0x0800d494
 800136c:	0800d4a0 	.word	0x0800d4a0
 8001370:	0800d388 	.word	0x0800d388
 8001374:	40010c00 	.word	0x40010c00
 8001378:	200002fc 	.word	0x200002fc
 800137c:	0800d4a8 	.word	0x0800d4a8
 8001380:	0800d3f4 	.word	0x0800d3f4

08001384 <Command_MainCommandResponse>:

void Command_MainCommandResponse(uint8_t argc, char **argv)
{
 8001384:	b590      	push	{r4, r7, lr}
 8001386:	b08b      	sub	sp, #44	; 0x2c
 8001388:	af00      	add	r7, sp, #0
 800138a:	4603      	mov	r3, r0
 800138c:	6039      	str	r1, [r7, #0]
 800138e:	71fb      	strb	r3, [r7, #7]
	char chResponse[20] = "";
 8001390:	2300      	movs	r3, #0
 8001392:	613b      	str	r3, [r7, #16]
 8001394:	f107 0314 	add.w	r3, r7, #20
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	605a      	str	r2, [r3, #4]
 800139e:	609a      	str	r2, [r3, #8]
 80013a0:	60da      	str	r2, [r3, #12]

	LCD_Clear();
 80013a2:	f008 f817 	bl	80093d4 <LCD_Clear>

	switch(argc)
 80013a6:	79fb      	ldrb	r3, [r7, #7]
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d055      	beq.n	8001458 <Command_MainCommandResponse+0xd4>
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	f300 80e3 	bgt.w	8001578 <Command_MainCommandResponse+0x1f4>
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d002      	beq.n	80013bc <Command_MainCommandResponse+0x38>
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d010      	beq.n	80013dc <Command_MainCommandResponse+0x58>
 80013ba:	e0dd      	b.n	8001578 <Command_MainCommandResponse+0x1f4>
	{
	case 0:
			GetCurrentState(chResponse);
 80013bc:	f107 0310 	add.w	r3, r7, #16
 80013c0:	4618      	mov	r0, r3
 80013c2:	f000 f9cb 	bl	800175c <GetCurrentState>
			LCD_SendString(chResponse);
 80013c6:	f107 0310 	add.w	r3, r7, #16
 80013ca:	4618      	mov	r0, r3
 80013cc:	f007 ffc4 	bl	8009358 <LCD_SendString>
			Command_ResponseConstChar(chResponse);
 80013d0:	f107 0310 	add.w	r3, r7, #16
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff f8a9 	bl	800052c <Command_ResponseConstChar>
		break;
 80013da:	e0d4      	b.n	8001586 <Command_MainCommandResponse+0x202>
	case 1:
		if (strcmp(argv[0], "id") == 0)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	496b      	ldr	r1, [pc, #428]	; (8001590 <Command_MainCommandResponse+0x20c>)
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7fe feb2 	bl	800014c <strcmp>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d111      	bne.n	8001412 <Command_MainCommandResponse+0x8e>
		{
			FormatString(chResponse, "Id: %s", chStationId);
 80013ee:	f107 0310 	add.w	r3, r7, #16
 80013f2:	4a68      	ldr	r2, [pc, #416]	; (8001594 <Command_MainCommandResponse+0x210>)
 80013f4:	4968      	ldr	r1, [pc, #416]	; (8001598 <Command_MainCommandResponse+0x214>)
 80013f6:	4618      	mov	r0, r3
 80013f8:	f009 fe6a 	bl	800b0d0 <FormatString>

			LCD_SendString(chResponse);
 80013fc:	f107 0310 	add.w	r3, r7, #16
 8001400:	4618      	mov	r0, r3
 8001402:	f007 ffa9 	bl	8009358 <LCD_SendString>
			Command_ResponseConstChar(chResponse);
 8001406:	f107 0310 	add.w	r3, r7, #16
 800140a:	4618      	mov	r0, r3
 800140c:	f7ff f88e 	bl	800052c <Command_ResponseConstChar>
		else
		{
			LCD_SendString("Invalid command");
			Command_ResponseConstChar("Invalid command");
		}
		break;
 8001410:	e0b9      	b.n	8001586 <Command_MainCommandResponse+0x202>
		else if (strcmp(argv[0], "update-time") == 0)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4961      	ldr	r1, [pc, #388]	; (800159c <Command_MainCommandResponse+0x218>)
 8001418:	4618      	mov	r0, r3
 800141a:	f7fe fe97 	bl	800014c <strcmp>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d112      	bne.n	800144a <Command_MainCommandResponse+0xc6>
			FormatString(chResponse, "Updated Time: %d seconds", u32UpdateTime);
 8001424:	4b5e      	ldr	r3, [pc, #376]	; (80015a0 <Command_MainCommandResponse+0x21c>)
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	f107 0310 	add.w	r3, r7, #16
 800142c:	495d      	ldr	r1, [pc, #372]	; (80015a4 <Command_MainCommandResponse+0x220>)
 800142e:	4618      	mov	r0, r3
 8001430:	f009 fe4e 	bl	800b0d0 <FormatString>
			LCD_SendString(chResponse);
 8001434:	f107 0310 	add.w	r3, r7, #16
 8001438:	4618      	mov	r0, r3
 800143a:	f007 ff8d 	bl	8009358 <LCD_SendString>
			Command_ResponseConstChar(chResponse);
 800143e:	f107 0310 	add.w	r3, r7, #16
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff f872 	bl	800052c <Command_ResponseConstChar>
		break;
 8001448:	e09d      	b.n	8001586 <Command_MainCommandResponse+0x202>
			LCD_SendString("Invalid command");
 800144a:	4857      	ldr	r0, [pc, #348]	; (80015a8 <Command_MainCommandResponse+0x224>)
 800144c:	f007 ff84 	bl	8009358 <LCD_SendString>
			Command_ResponseConstChar("Invalid command");
 8001450:	4855      	ldr	r0, [pc, #340]	; (80015a8 <Command_MainCommandResponse+0x224>)
 8001452:	f7ff f86b 	bl	800052c <Command_ResponseConstChar>
		break;
 8001456:	e096      	b.n	8001586 <Command_MainCommandResponse+0x202>
	case 2:
		if (strcmp(argv[0], "mode") == 0 && strcmp(argv[1], "config") == 0)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4953      	ldr	r1, [pc, #332]	; (80015ac <Command_MainCommandResponse+0x228>)
 800145e:	4618      	mov	r0, r3
 8001460:	f7fe fe74 	bl	800014c <strcmp>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d112      	bne.n	8001490 <Command_MainCommandResponse+0x10c>
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	3304      	adds	r3, #4
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	494f      	ldr	r1, [pc, #316]	; (80015b0 <Command_MainCommandResponse+0x22c>)
 8001472:	4618      	mov	r0, r3
 8001474:	f7fe fe6a 	bl	800014c <strcmp>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d108      	bne.n	8001490 <Command_MainCommandResponse+0x10c>
		{
			GoToConfig();
 800147e:	f000 f955 	bl	800172c <GoToConfig>
			LCD_SendString("To config mode");
 8001482:	484c      	ldr	r0, [pc, #304]	; (80015b4 <Command_MainCommandResponse+0x230>)
 8001484:	f007 ff68 	bl	8009358 <LCD_SendString>
			Command_ResponseConstChar("To config mode");
 8001488:	484a      	ldr	r0, [pc, #296]	; (80015b4 <Command_MainCommandResponse+0x230>)
 800148a:	f7ff f84f 	bl	800052c <Command_ResponseConstChar>
 800148e:	e072      	b.n	8001576 <Command_MainCommandResponse+0x1f2>
		}
		else if (strcmp(argv[0], "mode") == 0 && strcmp(argv[1], "running") == 0)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4945      	ldr	r1, [pc, #276]	; (80015ac <Command_MainCommandResponse+0x228>)
 8001496:	4618      	mov	r0, r3
 8001498:	f7fe fe58 	bl	800014c <strcmp>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d112      	bne.n	80014c8 <Command_MainCommandResponse+0x144>
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	3304      	adds	r3, #4
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4943      	ldr	r1, [pc, #268]	; (80015b8 <Command_MainCommandResponse+0x234>)
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7fe fe4e 	bl	800014c <strcmp>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d108      	bne.n	80014c8 <Command_MainCommandResponse+0x144>
		{
			GoToRun();
 80014b6:	f000 f945 	bl	8001744 <GoToRun>
			LCD_SendString("To running mode");
 80014ba:	4840      	ldr	r0, [pc, #256]	; (80015bc <Command_MainCommandResponse+0x238>)
 80014bc:	f007 ff4c 	bl	8009358 <LCD_SendString>
			Command_ResponseConstChar("To running mode");
 80014c0:	483e      	ldr	r0, [pc, #248]	; (80015bc <Command_MainCommandResponse+0x238>)
 80014c2:	f7ff f833 	bl	800052c <Command_ResponseConstChar>
 80014c6:	e056      	b.n	8001576 <Command_MainCommandResponse+0x1f2>
		}
		else if (strcmp(argv[0], "id") == 0)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4930      	ldr	r1, [pc, #192]	; (8001590 <Command_MainCommandResponse+0x20c>)
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7fe fe3c 	bl	800014c <strcmp>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d11a      	bne.n	8001510 <Command_MainCommandResponse+0x18c>
		{
			memset(chStationId, 0, ID_LENGTH);
 80014da:	2240      	movs	r2, #64	; 0x40
 80014dc:	2100      	movs	r1, #0
 80014de:	482d      	ldr	r0, [pc, #180]	; (8001594 <Command_MainCommandResponse+0x210>)
 80014e0:	f00a fdee 	bl	800c0c0 <memset>
			memcpy(chStationId, argv[1], strlen(argv[1]));
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	3304      	adds	r3, #4
 80014e8:	681c      	ldr	r4, [r3, #0]
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	3304      	adds	r3, #4
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7fe fe35 	bl	8000160 <strlen>
 80014f6:	4603      	mov	r3, r0
 80014f8:	461a      	mov	r2, r3
 80014fa:	4621      	mov	r1, r4
 80014fc:	4825      	ldr	r0, [pc, #148]	; (8001594 <Command_MainCommandResponse+0x210>)
 80014fe:	f00a fee1 	bl	800c2c4 <memcpy>
			LCD_SendString("Successfully");
 8001502:	482f      	ldr	r0, [pc, #188]	; (80015c0 <Command_MainCommandResponse+0x23c>)
 8001504:	f007 ff28 	bl	8009358 <LCD_SendString>
			Command_ResponseConstChar("Successfully");
 8001508:	482d      	ldr	r0, [pc, #180]	; (80015c0 <Command_MainCommandResponse+0x23c>)
 800150a:	f7ff f80f 	bl	800052c <Command_ResponseConstChar>
		else
		{
			LCD_SendString("Invalid command");
			Command_ResponseConstChar("Invalid command");
		}
		break;
 800150e:	e03a      	b.n	8001586 <Command_MainCommandResponse+0x202>
		else if (strcmp(argv[0], "update-time") == 0)
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4921      	ldr	r1, [pc, #132]	; (800159c <Command_MainCommandResponse+0x218>)
 8001516:	4618      	mov	r0, r3
 8001518:	f7fe fe18 	bl	800014c <strcmp>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d122      	bne.n	8001568 <Command_MainCommandResponse+0x1e4>
			long result = strtol(argv[1], &endptr, 10);
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	3304      	adds	r3, #4
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f107 010c 	add.w	r1, r7, #12
 800152c:	220a      	movs	r2, #10
 800152e:	4618      	mov	r0, r3
 8001530:	f00a fbf4 	bl	800bd1c <strtol>
 8001534:	6278      	str	r0, [r7, #36]	; 0x24
			if (*endptr != '\0' && *endptr != '\n') {
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d00a      	beq.n	8001554 <Command_MainCommandResponse+0x1d0>
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	2b0a      	cmp	r3, #10
 8001544:	d006      	beq.n	8001554 <Command_MainCommandResponse+0x1d0>
				LCD_SendString("Conversion error: Not a valid integer\n");
 8001546:	481f      	ldr	r0, [pc, #124]	; (80015c4 <Command_MainCommandResponse+0x240>)
 8001548:	f007 ff06 	bl	8009358 <LCD_SendString>
				Command_ResponseConstChar("Conversion error: Not a valid integer\n");
 800154c:	481d      	ldr	r0, [pc, #116]	; (80015c4 <Command_MainCommandResponse+0x240>)
 800154e:	f7fe ffed 	bl	800052c <Command_ResponseConstChar>
 8001552:	e010      	b.n	8001576 <Command_MainCommandResponse+0x1f2>
				u32UpdateTime = result;
 8001554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001556:	4a12      	ldr	r2, [pc, #72]	; (80015a0 <Command_MainCommandResponse+0x21c>)
 8001558:	6013      	str	r3, [r2, #0]
				LCD_SendString("Successfully");
 800155a:	4819      	ldr	r0, [pc, #100]	; (80015c0 <Command_MainCommandResponse+0x23c>)
 800155c:	f007 fefc 	bl	8009358 <LCD_SendString>
				Command_ResponseConstChar("Successfully");
 8001560:	4817      	ldr	r0, [pc, #92]	; (80015c0 <Command_MainCommandResponse+0x23c>)
 8001562:	f7fe ffe3 	bl	800052c <Command_ResponseConstChar>
		break;
 8001566:	e00e      	b.n	8001586 <Command_MainCommandResponse+0x202>
			LCD_SendString("Invalid command");
 8001568:	480f      	ldr	r0, [pc, #60]	; (80015a8 <Command_MainCommandResponse+0x224>)
 800156a:	f007 fef5 	bl	8009358 <LCD_SendString>
			Command_ResponseConstChar("Invalid command");
 800156e:	480e      	ldr	r0, [pc, #56]	; (80015a8 <Command_MainCommandResponse+0x224>)
 8001570:	f7fe ffdc 	bl	800052c <Command_ResponseConstChar>
		break;
 8001574:	e007      	b.n	8001586 <Command_MainCommandResponse+0x202>
 8001576:	e006      	b.n	8001586 <Command_MainCommandResponse+0x202>
	default:
		LCD_SendString("Invalid command");
 8001578:	480b      	ldr	r0, [pc, #44]	; (80015a8 <Command_MainCommandResponse+0x224>)
 800157a:	f007 feed 	bl	8009358 <LCD_SendString>
		Command_ResponseConstChar("Invalid command");
 800157e:	480a      	ldr	r0, [pc, #40]	; (80015a8 <Command_MainCommandResponse+0x224>)
 8001580:	f7fe ffd4 	bl	800052c <Command_ResponseConstChar>
	}
}
 8001584:	bf00      	nop
 8001586:	bf00      	nop
 8001588:	372c      	adds	r7, #44	; 0x2c
 800158a:	46bd      	mov	sp, r7
 800158c:	bd90      	pop	{r4, r7, pc}
 800158e:	bf00      	nop
 8001590:	0800d4b4 	.word	0x0800d4b4
 8001594:	20000004 	.word	0x20000004
 8001598:	0800d4b8 	.word	0x0800d4b8
 800159c:	0800d4c0 	.word	0x0800d4c0
 80015a0:	20000044 	.word	0x20000044
 80015a4:	0800d4cc 	.word	0x0800d4cc
 80015a8:	0800d30c 	.word	0x0800d30c
 80015ac:	0800d4e8 	.word	0x0800d4e8
 80015b0:	0800d4f0 	.word	0x0800d4f0
 80015b4:	0800d4f8 	.word	0x0800d4f8
 80015b8:	0800d508 	.word	0x0800d508
 80015bc:	0800d510 	.word	0x0800d510
 80015c0:	0800d520 	.word	0x0800d520
 80015c4:	0800d530 	.word	0x0800d530

080015c8 <I2CSendData>:
#include "LCD.h"

extern I2C_HandleTypeDef hi2c2;

void I2CSendData(uint8_t *u8Data, uint8_t u8Length)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af02      	add	r7, sp, #8
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	460b      	mov	r3, r1
 80015d2:	70fb      	strb	r3, [r7, #3]
	HAL_I2C_Master_Transmit(&hi2c2, LCD_GetAddress(), u8Data, u8Length, 50);
 80015d4:	f007 fe46 	bl	8009264 <LCD_GetAddress>
 80015d8:	4603      	mov	r3, r0
 80015da:	b299      	uxth	r1, r3
 80015dc:	78fb      	ldrb	r3, [r7, #3]
 80015de:	b29b      	uxth	r3, r3
 80015e0:	2232      	movs	r2, #50	; 0x32
 80015e2:	9200      	str	r2, [sp, #0]
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	4803      	ldr	r0, [pc, #12]	; (80015f4 <I2CSendData+0x2c>)
 80015e8:	f001 fa66 	bl	8002ab8 <HAL_I2C_Master_Transmit>
}
 80015ec:	bf00      	nop
 80015ee:	3708      	adds	r7, #8
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	200002a8 	.word	0x200002a8

080015f8 <MainProcess>:
extern char chStationId[];
extern uint32_t u32UpdateTime;


void MainProcess()
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
	switch(eCurrentState)
 80015fc:	4b07      	ldr	r3, [pc, #28]	; (800161c <MainProcess+0x24>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	2b02      	cmp	r3, #2
 8001602:	d005      	beq.n	8001610 <MainProcess+0x18>
 8001604:	2b02      	cmp	r3, #2
 8001606:	dc07      	bgt.n	8001618 <MainProcess+0x20>
 8001608:	2b00      	cmp	r3, #0
 800160a:	d004      	beq.n	8001616 <MainProcess+0x1e>
 800160c:	2b01      	cmp	r3, #1
	{
	case Initializing:
		break;
	case Config:
		break;
 800160e:	e003      	b.n	8001618 <MainProcess+0x20>
	case Running:
		RunningSection();
 8001610:	f000 f806 	bl	8001620 <RunningSection>
		break;
 8001614:	e000      	b.n	8001618 <MainProcess+0x20>
		break;
 8001616:	bf00      	nop
	}
}
 8001618:	bf00      	nop
 800161a:	bd80      	pop	{r7, pc}
 800161c:	2000024c 	.word	0x2000024c

08001620 <RunningSection>:

void RunningSection()
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b0b4      	sub	sp, #208	; 0xd0
 8001624:	af00      	add	r7, sp, #0
	uint32_t newCurrent = HAL_GetTick();
 8001626:	f000 fe09 	bl	800223c <HAL_GetTick>
 800162a:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8

	if ((newCurrent - current > u32UpdateTime * 1000) || (newCurrent < current))
 800162e:	4b30      	ldr	r3, [pc, #192]	; (80016f0 <RunningSection+0xd0>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8001636:	1ad2      	subs	r2, r2, r3
 8001638:	4b2e      	ldr	r3, [pc, #184]	; (80016f4 <RunningSection+0xd4>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001640:	fb01 f303 	mul.w	r3, r1, r3
 8001644:	429a      	cmp	r2, r3
 8001646:	d805      	bhi.n	8001654 <RunningSection+0x34>
 8001648:	4b29      	ldr	r3, [pc, #164]	; (80016f0 <RunningSection+0xd0>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8001650:	429a      	cmp	r2, r3
 8001652:	d249      	bcs.n	80016e8 <RunningSection+0xc8>
	{
		if (Sensors_Length() > 0)
 8001654:	f009 fc14 	bl	800ae80 <Sensors_Length>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d044      	beq.n	80016e8 <RunningSection+0xc8>
		{
		  Sensors_ForEach(GetDataCallback);
 800165e:	4826      	ldr	r0, [pc, #152]	; (80016f8 <RunningSection+0xd8>)
 8001660:	f009 fc1a 	bl	800ae98 <Sensors_ForEach>
		  current = newCurrent;
 8001664:	4a22      	ldr	r2, [pc, #136]	; (80016f0 <RunningSection+0xd0>)
 8001666:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800166a:	6013      	str	r3, [r2, #0]
		  char chData[128];
		  char chSensorData[64];

		  uint16_t length = Sensors_GetData((uint8_t*)chSensorData);
 800166c:	1d3b      	adds	r3, r7, #4
 800166e:	4618      	mov	r0, r3
 8001670:	f009 fc80 	bl	800af74 <Sensors_GetData>
 8001674:	4603      	mov	r3, r0
 8001676:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
		  FormatString(chData, "%s;", chStationId);
 800167a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800167e:	4a1f      	ldr	r2, [pc, #124]	; (80016fc <RunningSection+0xdc>)
 8001680:	491f      	ldr	r1, [pc, #124]	; (8001700 <RunningSection+0xe0>)
 8001682:	4618      	mov	r0, r3
 8001684:	f009 fd24 	bl	800b0d0 <FormatString>

		  // sent packet has the format
		  // stationId;<byte-array>
		  for (int i = 0; i< length; i++)
 8001688:	2300      	movs	r3, #0
 800168a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800168e:	e010      	b.n	80016b2 <RunningSection+0x92>
		  {
			  FormatString(chData, "%s %02X", chData, chSensorData[i]);
 8001690:	1d3a      	adds	r2, r7, #4
 8001692:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001696:	4413      	add	r3, r2
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800169e:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80016a2:	4918      	ldr	r1, [pc, #96]	; (8001704 <RunningSection+0xe4>)
 80016a4:	f009 fd14 	bl	800b0d0 <FormatString>
		  for (int i = 0; i< length; i++)
 80016a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80016ac:	3301      	adds	r3, #1
 80016ae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80016b2:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 80016b6:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80016ba:	429a      	cmp	r2, r3
 80016bc:	dbe8      	blt.n	8001690 <RunningSection+0x70>
		  }

		  FormatString(chData, "%s\n", chData);
 80016be:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80016c2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80016c6:	4910      	ldr	r1, [pc, #64]	; (8001708 <RunningSection+0xe8>)
 80016c8:	4618      	mov	r0, r3
 80016ca:	f009 fd01 	bl	800b0d0 <FormatString>

		  LoRa_Send((uint8_t*)chData, strlen(chData));
 80016ce:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7fe fd44 	bl	8000160 <strlen>
 80016d8:	4603      	mov	r3, r0
 80016da:	b29a      	uxth	r2, r3
 80016dc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80016e0:	4611      	mov	r1, r2
 80016e2:	4618      	mov	r0, r3
 80016e4:	f007 ff6c 	bl	80095c0 <LoRa_Send>
//		  HAL_UART_Transmit(&huart1, (uint8_t*)chData, strlen(chData), 100);
		}
	}
}
 80016e8:	bf00      	nop
 80016ea:	37d0      	adds	r7, #208	; 0xd0
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	20000250 	.word	0x20000250
 80016f4:	20000044 	.word	0x20000044
 80016f8:	080017c1 	.word	0x080017c1
 80016fc:	20000004 	.word	0x20000004
 8001700:	0800d558 	.word	0x0800d558
 8001704:	0800d55c 	.word	0x0800d55c
 8001708:	0800d564 	.word	0x0800d564

0800170c <InitializeSuccess>:


void InitializeSuccess()
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
	eCurrentState = Running;
 8001710:	4b04      	ldr	r3, [pc, #16]	; (8001724 <InitializeSuccess+0x18>)
 8001712:	2202      	movs	r2, #2
 8001714:	701a      	strb	r2, [r3, #0]
	current = HAL_GetTick();
 8001716:	f000 fd91 	bl	800223c <HAL_GetTick>
 800171a:	4603      	mov	r3, r0
 800171c:	4a02      	ldr	r2, [pc, #8]	; (8001728 <InitializeSuccess+0x1c>)
 800171e:	6013      	str	r3, [r2, #0]
}
 8001720:	bf00      	nop
 8001722:	bd80      	pop	{r7, pc}
 8001724:	2000024c 	.word	0x2000024c
 8001728:	20000250 	.word	0x20000250

0800172c <GoToConfig>:

void GoToConfig()
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
	eCurrentState = Config;
 8001730:	4b03      	ldr	r3, [pc, #12]	; (8001740 <GoToConfig+0x14>)
 8001732:	2201      	movs	r2, #1
 8001734:	701a      	strb	r2, [r3, #0]
}
 8001736:	bf00      	nop
 8001738:	46bd      	mov	sp, r7
 800173a:	bc80      	pop	{r7}
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	2000024c 	.word	0x2000024c

08001744 <GoToRun>:

void GoToRun()
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
	eCurrentState = Running;
 8001748:	4b03      	ldr	r3, [pc, #12]	; (8001758 <GoToRun+0x14>)
 800174a:	2202      	movs	r2, #2
 800174c:	701a      	strb	r2, [r3, #0]
}
 800174e:	bf00      	nop
 8001750:	46bd      	mov	sp, r7
 8001752:	bc80      	pop	{r7}
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	2000024c 	.word	0x2000024c

0800175c <GetCurrentState>:

void GetCurrentState(char* chState)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
	switch(eCurrentState)
 8001764:	4b11      	ldr	r3, [pc, #68]	; (80017ac <GetCurrentState+0x50>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	2b02      	cmp	r3, #2
 800176a:	d010      	beq.n	800178e <GetCurrentState+0x32>
 800176c:	2b02      	cmp	r3, #2
 800176e:	dc13      	bgt.n	8001798 <GetCurrentState+0x3c>
 8001770:	2b00      	cmp	r3, #0
 8001772:	d002      	beq.n	800177a <GetCurrentState+0x1e>
 8001774:	2b01      	cmp	r3, #1
 8001776:	d005      	beq.n	8001784 <GetCurrentState+0x28>
 8001778:	e00e      	b.n	8001798 <GetCurrentState+0x3c>
	{
	case Initializing:
		FormatString(chState, "State: Initialize");
 800177a:	490d      	ldr	r1, [pc, #52]	; (80017b0 <GetCurrentState+0x54>)
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f009 fca7 	bl	800b0d0 <FormatString>
		break;
 8001782:	e00e      	b.n	80017a2 <GetCurrentState+0x46>
	case Config:
		FormatString(chState, "State: Config");
 8001784:	490b      	ldr	r1, [pc, #44]	; (80017b4 <GetCurrentState+0x58>)
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f009 fca2 	bl	800b0d0 <FormatString>
		break;
 800178c:	e009      	b.n	80017a2 <GetCurrentState+0x46>
	case Running:
		FormatString(chState, "State: Running");
 800178e:	490a      	ldr	r1, [pc, #40]	; (80017b8 <GetCurrentState+0x5c>)
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f009 fc9d 	bl	800b0d0 <FormatString>
		break;
 8001796:	e004      	b.n	80017a2 <GetCurrentState+0x46>
	default:
		FormatString(chState, "Error");
 8001798:	4908      	ldr	r1, [pc, #32]	; (80017bc <GetCurrentState+0x60>)
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f009 fc98 	bl	800b0d0 <FormatString>
	}
}
 80017a0:	bf00      	nop
 80017a2:	bf00      	nop
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	2000024c 	.word	0x2000024c
 80017b0:	0800d568 	.word	0x0800d568
 80017b4:	0800d57c 	.word	0x0800d57c
 80017b8:	0800d58c 	.word	0x0800d58c
 80017bc:	0800d59c 	.word	0x0800d59c

080017c0 <GetDataCallback>:

void GetDataCallback(Sensor *sSensor)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b08e      	sub	sp, #56	; 0x38
 80017c4:	af02      	add	r7, sp, #8
 80017c6:	6078      	str	r0, [r7, #4]
	uint8_t u8Response[33];
	uint8_t u8Data[4];
	memset(u8Response, 0, 33);
 80017c8:	f107 030c 	add.w	r3, r7, #12
 80017cc:	2221      	movs	r2, #33	; 0x21
 80017ce:	2100      	movs	r1, #0
 80017d0:	4618      	mov	r0, r3
 80017d2:	f00a fc75 	bl	800c0c0 <memset>
	u8Data[0] = 4;
 80017d6:	2304      	movs	r3, #4
 80017d8:	723b      	strb	r3, [r7, #8]
	u8Data[1] = READ_REGISTERS_FUNCTION;
 80017da:	2303      	movs	r3, #3
 80017dc:	727b      	strb	r3, [r7, #9]
	u8Data[2] = sSensor->u8StartRegAddr;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	7b5b      	ldrb	r3, [r3, #13]
 80017e2:	72bb      	strb	r3, [r7, #10]
	u8Data[3] = sSensor->u8RegNum;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	7b9b      	ldrb	r3, [r3, #14]
 80017e8:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(
					&hi2c1, sSensor->u8Address << 1,
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	7b1b      	ldrb	r3, [r3, #12]
 80017ee:	b29b      	uxth	r3, r3
	HAL_I2C_Master_Transmit(
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	b299      	uxth	r1, r3
					u8Data, u8Data[0], 1000);
 80017f4:	7a3b      	ldrb	r3, [r7, #8]
	HAL_I2C_Master_Transmit(
 80017f6:	b29b      	uxth	r3, r3
 80017f8:	f107 0208 	add.w	r2, r7, #8
 80017fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001800:	9000      	str	r0, [sp, #0]
 8001802:	4820      	ldr	r0, [pc, #128]	; (8001884 <GetDataCallback+0xc4>)
 8001804:	f001 f958 	bl	8002ab8 <HAL_I2C_Master_Transmit>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8001808:	bf00      	nop
 800180a:	481e      	ldr	r0, [pc, #120]	; (8001884 <GetDataCallback+0xc4>)
 800180c:	f001 fcbe 	bl	800318c <HAL_I2C_GetState>
 8001810:	4603      	mov	r3, r0
 8001812:	2b20      	cmp	r3, #32
 8001814:	d1f9      	bne.n	800180a <GetDataCallback+0x4a>
	if(HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 8001816:	481b      	ldr	r0, [pc, #108]	; (8001884 <GetDataCallback+0xc4>)
 8001818:	f001 fcc5 	bl	80031a6 <HAL_I2C_GetError>
 800181c:	4603      	mov	r3, r0
 800181e:	2b04      	cmp	r3, #4
 8001820:	d02c      	beq.n	800187c <GetDataCallback+0xbc>
	{
		HAL_Delay(300);
 8001822:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001826:	f000 fd13 	bl	8002250 <HAL_Delay>
		HAL_I2C_Master_Receive(&hi2c1, sSensor->u8Address << 1,
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	7b1b      	ldrb	r3, [r3, #12]
 800182e:	b29b      	uxth	r3, r3
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	b299      	uxth	r1, r3
										u8Response,
										1 + sSensor->u8RegNum,
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	7b9b      	ldrb	r3, [r3, #14]
 8001838:	b29b      	uxth	r3, r3
		HAL_I2C_Master_Receive(&hi2c1, sSensor->u8Address << 1,
 800183a:	3301      	adds	r3, #1
 800183c:	b29b      	uxth	r3, r3
 800183e:	f107 020c 	add.w	r2, r7, #12
 8001842:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001846:	9000      	str	r0, [sp, #0]
 8001848:	480e      	ldr	r0, [pc, #56]	; (8001884 <GetDataCallback+0xc4>)
 800184a:	f001 fa33 	bl	8002cb4 <HAL_I2C_Master_Receive>
										2000);
		while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 800184e:	bf00      	nop
 8001850:	480c      	ldr	r0, [pc, #48]	; (8001884 <GetDataCallback+0xc4>)
 8001852:	f001 fc9b 	bl	800318c <HAL_I2C_GetState>
 8001856:	4603      	mov	r3, r0
 8001858:	2b20      	cmp	r3, #32
 800185a:	d1f9      	bne.n	8001850 <GetDataCallback+0x90>
		if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 800185c:	4809      	ldr	r0, [pc, #36]	; (8001884 <GetDataCallback+0xc4>)
 800185e:	f001 fca2 	bl	80031a6 <HAL_I2C_GetError>
 8001862:	4603      	mov	r3, r0
 8001864:	2b04      	cmp	r3, #4
 8001866:	d009      	beq.n	800187c <GetDataCallback+0xbc>
		{
			memcpy(sSensor->u8Data, u8Response + 1, 32);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f103 000f 	add.w	r0, r3, #15
 800186e:	f107 030c 	add.w	r3, r7, #12
 8001872:	3301      	adds	r3, #1
 8001874:	2220      	movs	r2, #32
 8001876:	4619      	mov	r1, r3
 8001878:	f00a fd24 	bl	800c2c4 <memcpy>
		}
	}
}
 800187c:	bf00      	nop
 800187e:	3730      	adds	r7, #48	; 0x30
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	20000254 	.word	0x20000254

08001888 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800188e:	f000 fc7d 	bl	800218c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001892:	f000 f889 	bl	80019a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001896:	f000 f99d 	bl	8001bd4 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800189a:	f009 fc59 	bl	800b150 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 800189e:	f000 f8dd 	bl	8001a5c <MX_I2C1_Init>
  MX_I2C2_Init();
 80018a2:	f000 f909 	bl	8001ab8 <MX_I2C2_Init>
  MX_SPI1_Init();
 80018a6:	f000 f935 	bl	8001b14 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80018aa:	f000 f969 	bl	8001b80 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  LCD_GlobalOff();
 80018ae:	f007 fdb3 	bl	8009418 <LCD_GlobalOff>
  LoRa_Init(&huart1, MD0_GPIO_Port, MD0_Pin, MD1_GPIO_Port, MD1_Pin);
 80018b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018b6:	9300      	str	r3, [sp, #0]
 80018b8:	4b24      	ldr	r3, [pc, #144]	; (800194c <main+0xc4>)
 80018ba:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80018be:	4924      	ldr	r1, [pc, #144]	; (8001950 <main+0xc8>)
 80018c0:	4824      	ldr	r0, [pc, #144]	; (8001954 <main+0xcc>)
 80018c2:	f007 fe5f 	bl	8009584 <LoRa_Init>

  Command_Init();
 80018c6:	f7fe fd2d 	bl	8000324 <Command_Init>
  Command_RegisterDefaultCallback(Command_DefaultResponse);
 80018ca:	4823      	ldr	r0, [pc, #140]	; (8001958 <main+0xd0>)
 80018cc:	f7fe fda2 	bl	8000414 <Command_RegisterDefaultCallback>
  Command_Register("lcd", Command_LCDCommandResponse, "Lcd command: "
 80018d0:	4a22      	ldr	r2, [pc, #136]	; (800195c <main+0xd4>)
 80018d2:	4923      	ldr	r1, [pc, #140]	; (8001960 <main+0xd8>)
 80018d4:	4823      	ldr	r0, [pc, #140]	; (8001964 <main+0xdc>)
 80018d6:	f7fe fd53 	bl	8000380 <Command_Register>
		  "Action:\n"
		  "\tClear: Clear all text in the screen\n"
		  "\tTest: Send a \"LCD Testing\""
		  "\tReset: Reset the LCD");
  Command_Register("i2c", Command_I2CCommandResponse, "I2c command: "
 80018da:	4a23      	ldr	r2, [pc, #140]	; (8001968 <main+0xe0>)
 80018dc:	4923      	ldr	r1, [pc, #140]	; (800196c <main+0xe4>)
 80018de:	4824      	ldr	r0, [pc, #144]	; (8001970 <main+0xe8>)
 80018e0:	f7fe fd4e 	bl	8000380 <Command_Register>
		  "Action:\n"
		  "\tArgument:\n"
		  "\t\tAddress: 2 characters\n"
		  "\t\tValue: string");
  Command_Register("sensors", Command_SensorsCommandResponse, "Sensors command: "
 80018e4:	4a23      	ldr	r2, [pc, #140]	; (8001974 <main+0xec>)
 80018e6:	4924      	ldr	r1, [pc, #144]	; (8001978 <main+0xf0>)
 80018e8:	4824      	ldr	r0, [pc, #144]	; (800197c <main+0xf4>)
 80018ea:	f7fe fd49 	bl	8000380 <Command_Register>
  		  "Action:\n"
  		  "\tCount\n");
  Command_Register("lora", Command_LoRaCommandResponse, "LoRa command: "
 80018ee:	4a24      	ldr	r2, [pc, #144]	; (8001980 <main+0xf8>)
 80018f0:	4924      	ldr	r1, [pc, #144]	; (8001984 <main+0xfc>)
 80018f2:	4825      	ldr	r0, [pc, #148]	; (8001988 <main+0x100>)
 80018f4:	f7fe fd44 	bl	8000380 <Command_Register>
		  "Send:\n");
  Command_Register("spi", Command_SPICommandResponse, "SPI command: read");
 80018f8:	4a24      	ldr	r2, [pc, #144]	; (800198c <main+0x104>)
 80018fa:	4925      	ldr	r1, [pc, #148]	; (8001990 <main+0x108>)
 80018fc:	4825      	ldr	r0, [pc, #148]	; (8001994 <main+0x10c>)
 80018fe:	f7fe fd3f 	bl	8000380 <Command_Register>
  Command_Register("main", Command_MainCommandResponse, "Main command");
 8001902:	4a25      	ldr	r2, [pc, #148]	; (8001998 <main+0x110>)
 8001904:	4925      	ldr	r1, [pc, #148]	; (800199c <main+0x114>)
 8001906:	4826      	ldr	r0, [pc, #152]	; (80019a0 <main+0x118>)
 8001908:	f7fe fd3a 	bl	8000380 <Command_Register>

  LCD_SetAddress(0x4e);
 800190c:	204e      	movs	r0, #78	; 0x4e
 800190e:	f007 fc93 	bl	8009238 <LCD_SetAddress>
  LCD_SetSendI2CData(I2CSendData);
 8001912:	4824      	ldr	r0, [pc, #144]	; (80019a4 <main+0x11c>)
 8001914:	f007 fc6e 	bl	80091f4 <LCD_SetSendI2CData>
  HAL_Delay(50);
 8001918:	2032      	movs	r0, #50	; 0x32
 800191a:	f000 fc99 	bl	8002250 <HAL_Delay>
  LCD_Init();
 800191e:	f007 fc49 	bl	80091b4 <LCD_Init>
  HAL_Delay(50);
 8001922:	2032      	movs	r0, #50	; 0x32
 8001924:	f000 fc94 	bl	8002250 <HAL_Delay>
  LCD_Init();
 8001928:	f007 fc44 	bl	80091b4 <LCD_Init>
  HAL_Delay(50);
 800192c:	2032      	movs	r0, #50	; 0x32
 800192e:	f000 fc8f 	bl	8002250 <HAL_Delay>
  LCD_Init();
 8001932:	f007 fc3f 	bl	80091b4 <LCD_Init>
  LCD_Clear();
 8001936:	f007 fd4d 	bl	80093d4 <LCD_Clear>


  Sensors_Init();
 800193a:	f009 fa67 	bl	800ae0c <Sensors_Init>
  InitializeSuccess();
 800193e:	f7ff fee5 	bl	800170c <InitializeSuccess>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Command_Update();
 8001942:	f7fe fd81 	bl	8000448 <Command_Update>
	  MainProcess();
 8001946:	f7ff fe57 	bl	80015f8 <MainProcess>
	  Command_Update();
 800194a:	e7fa      	b.n	8001942 <main+0xba>
 800194c:	40010800 	.word	0x40010800
 8001950:	40010c00 	.word	0x40010c00
 8001954:	20000354 	.word	0x20000354
 8001958:	0800061d 	.word	0x0800061d
 800195c:	0800d5a4 	.word	0x0800d5a4
 8001960:	0800063d 	.word	0x0800063d
 8001964:	0800d610 	.word	0x0800d610
 8001968:	0800d614 	.word	0x0800d614
 800196c:	080007b9 	.word	0x080007b9
 8001970:	0800d65c 	.word	0x0800d65c
 8001974:	0800d660 	.word	0x0800d660
 8001978:	08000d55 	.word	0x08000d55
 800197c:	0800d684 	.word	0x0800d684
 8001980:	0800d68c 	.word	0x0800d68c
 8001984:	080010c5 	.word	0x080010c5
 8001988:	0800d6a4 	.word	0x0800d6a4
 800198c:	0800d6ac 	.word	0x0800d6ac
 8001990:	08001171 	.word	0x08001171
 8001994:	0800d6c0 	.word	0x0800d6c0
 8001998:	0800d6c4 	.word	0x0800d6c4
 800199c:	08001385 	.word	0x08001385
 80019a0:	0800d6d4 	.word	0x0800d6d4
 80019a4:	080015c9 	.word	0x080015c9

080019a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b094      	sub	sp, #80	; 0x50
 80019ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019b2:	2228      	movs	r2, #40	; 0x28
 80019b4:	2100      	movs	r1, #0
 80019b6:	4618      	mov	r0, r3
 80019b8:	f00a fb82 	bl	800c0c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019bc:	f107 0314 	add.w	r3, r7, #20
 80019c0:	2200      	movs	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]
 80019c4:	605a      	str	r2, [r3, #4]
 80019c6:	609a      	str	r2, [r3, #8]
 80019c8:	60da      	str	r2, [r3, #12]
 80019ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019cc:	1d3b      	adds	r3, r7, #4
 80019ce:	2200      	movs	r2, #0
 80019d0:	601a      	str	r2, [r3, #0]
 80019d2:	605a      	str	r2, [r3, #4]
 80019d4:	609a      	str	r2, [r3, #8]
 80019d6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019d8:	2301      	movs	r3, #1
 80019da:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80019e2:	2300      	movs	r3, #0
 80019e4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019e6:	2301      	movs	r3, #1
 80019e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019ea:	2302      	movs	r3, #2
 80019ec:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80019f4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80019f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019fe:	4618      	mov	r0, r3
 8001a00:	f003 fcd0 	bl	80053a4 <HAL_RCC_OscConfig>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001a0a:	f000 f961 	bl	8001cd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a0e:	230f      	movs	r3, #15
 8001a10:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a12:	2302      	movs	r3, #2
 8001a14:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a16:	2300      	movs	r3, #0
 8001a18:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a1e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a20:	2300      	movs	r3, #0
 8001a22:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a24:	f107 0314 	add.w	r3, r7, #20
 8001a28:	2102      	movs	r1, #2
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f003 ff3c 	bl	80058a8 <HAL_RCC_ClockConfig>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001a36:	f000 f94b 	bl	8001cd0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001a3a:	2310      	movs	r3, #16
 8001a3c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a42:	1d3b      	adds	r3, r7, #4
 8001a44:	4618      	mov	r0, r3
 8001a46:	f004 f8bd 	bl	8005bc4 <HAL_RCCEx_PeriphCLKConfig>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001a50:	f000 f93e 	bl	8001cd0 <Error_Handler>
  }
}
 8001a54:	bf00      	nop
 8001a56:	3750      	adds	r7, #80	; 0x50
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a60:	4b12      	ldr	r3, [pc, #72]	; (8001aac <MX_I2C1_Init+0x50>)
 8001a62:	4a13      	ldr	r2, [pc, #76]	; (8001ab0 <MX_I2C1_Init+0x54>)
 8001a64:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001a66:	4b11      	ldr	r3, [pc, #68]	; (8001aac <MX_I2C1_Init+0x50>)
 8001a68:	4a12      	ldr	r2, [pc, #72]	; (8001ab4 <MX_I2C1_Init+0x58>)
 8001a6a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a6c:	4b0f      	ldr	r3, [pc, #60]	; (8001aac <MX_I2C1_Init+0x50>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001a72:	4b0e      	ldr	r3, [pc, #56]	; (8001aac <MX_I2C1_Init+0x50>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a78:	4b0c      	ldr	r3, [pc, #48]	; (8001aac <MX_I2C1_Init+0x50>)
 8001a7a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a7e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a80:	4b0a      	ldr	r3, [pc, #40]	; (8001aac <MX_I2C1_Init+0x50>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001a86:	4b09      	ldr	r3, [pc, #36]	; (8001aac <MX_I2C1_Init+0x50>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a8c:	4b07      	ldr	r3, [pc, #28]	; (8001aac <MX_I2C1_Init+0x50>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a92:	4b06      	ldr	r3, [pc, #24]	; (8001aac <MX_I2C1_Init+0x50>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a98:	4804      	ldr	r0, [pc, #16]	; (8001aac <MX_I2C1_Init+0x50>)
 8001a9a:	f000 fec9 	bl	8002830 <HAL_I2C_Init>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001aa4:	f000 f914 	bl	8001cd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001aa8:	bf00      	nop
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	20000254 	.word	0x20000254
 8001ab0:	40005400 	.word	0x40005400
 8001ab4:	000186a0 	.word	0x000186a0

08001ab8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001abc:	4b12      	ldr	r3, [pc, #72]	; (8001b08 <MX_I2C2_Init+0x50>)
 8001abe:	4a13      	ldr	r2, [pc, #76]	; (8001b0c <MX_I2C2_Init+0x54>)
 8001ac0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001ac2:	4b11      	ldr	r3, [pc, #68]	; (8001b08 <MX_I2C2_Init+0x50>)
 8001ac4:	4a12      	ldr	r2, [pc, #72]	; (8001b10 <MX_I2C2_Init+0x58>)
 8001ac6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ac8:	4b0f      	ldr	r3, [pc, #60]	; (8001b08 <MX_I2C2_Init+0x50>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001ace:	4b0e      	ldr	r3, [pc, #56]	; (8001b08 <MX_I2C2_Init+0x50>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ad4:	4b0c      	ldr	r3, [pc, #48]	; (8001b08 <MX_I2C2_Init+0x50>)
 8001ad6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ada:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001adc:	4b0a      	ldr	r3, [pc, #40]	; (8001b08 <MX_I2C2_Init+0x50>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001ae2:	4b09      	ldr	r3, [pc, #36]	; (8001b08 <MX_I2C2_Init+0x50>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ae8:	4b07      	ldr	r3, [pc, #28]	; (8001b08 <MX_I2C2_Init+0x50>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001aee:	4b06      	ldr	r3, [pc, #24]	; (8001b08 <MX_I2C2_Init+0x50>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001af4:	4804      	ldr	r0, [pc, #16]	; (8001b08 <MX_I2C2_Init+0x50>)
 8001af6:	f000 fe9b 	bl	8002830 <HAL_I2C_Init>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001b00:	f000 f8e6 	bl	8001cd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001b04:	bf00      	nop
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	200002a8 	.word	0x200002a8
 8001b0c:	40005800 	.word	0x40005800
 8001b10:	000186a0 	.word	0x000186a0

08001b14 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001b18:	4b17      	ldr	r3, [pc, #92]	; (8001b78 <MX_SPI1_Init+0x64>)
 8001b1a:	4a18      	ldr	r2, [pc, #96]	; (8001b7c <MX_SPI1_Init+0x68>)
 8001b1c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b1e:	4b16      	ldr	r3, [pc, #88]	; (8001b78 <MX_SPI1_Init+0x64>)
 8001b20:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b24:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b26:	4b14      	ldr	r3, [pc, #80]	; (8001b78 <MX_SPI1_Init+0x64>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b2c:	4b12      	ldr	r3, [pc, #72]	; (8001b78 <MX_SPI1_Init+0x64>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b32:	4b11      	ldr	r3, [pc, #68]	; (8001b78 <MX_SPI1_Init+0x64>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b38:	4b0f      	ldr	r3, [pc, #60]	; (8001b78 <MX_SPI1_Init+0x64>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b3e:	4b0e      	ldr	r3, [pc, #56]	; (8001b78 <MX_SPI1_Init+0x64>)
 8001b40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b44:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001b46:	4b0c      	ldr	r3, [pc, #48]	; (8001b78 <MX_SPI1_Init+0x64>)
 8001b48:	2210      	movs	r2, #16
 8001b4a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b4c:	4b0a      	ldr	r3, [pc, #40]	; (8001b78 <MX_SPI1_Init+0x64>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b52:	4b09      	ldr	r3, [pc, #36]	; (8001b78 <MX_SPI1_Init+0x64>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b58:	4b07      	ldr	r3, [pc, #28]	; (8001b78 <MX_SPI1_Init+0x64>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001b5e:	4b06      	ldr	r3, [pc, #24]	; (8001b78 <MX_SPI1_Init+0x64>)
 8001b60:	220a      	movs	r2, #10
 8001b62:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b64:	4804      	ldr	r0, [pc, #16]	; (8001b78 <MX_SPI1_Init+0x64>)
 8001b66:	f004 f8e3 	bl	8005d30 <HAL_SPI_Init>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001b70:	f000 f8ae 	bl	8001cd0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001b74:	bf00      	nop
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	200002fc 	.word	0x200002fc
 8001b7c:	40013000 	.word	0x40013000

08001b80 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b84:	4b11      	ldr	r3, [pc, #68]	; (8001bcc <MX_USART1_UART_Init+0x4c>)
 8001b86:	4a12      	ldr	r2, [pc, #72]	; (8001bd0 <MX_USART1_UART_Init+0x50>)
 8001b88:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001b8a:	4b10      	ldr	r3, [pc, #64]	; (8001bcc <MX_USART1_UART_Init+0x4c>)
 8001b8c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001b90:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b92:	4b0e      	ldr	r3, [pc, #56]	; (8001bcc <MX_USART1_UART_Init+0x4c>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b98:	4b0c      	ldr	r3, [pc, #48]	; (8001bcc <MX_USART1_UART_Init+0x4c>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b9e:	4b0b      	ldr	r3, [pc, #44]	; (8001bcc <MX_USART1_UART_Init+0x4c>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ba4:	4b09      	ldr	r3, [pc, #36]	; (8001bcc <MX_USART1_UART_Init+0x4c>)
 8001ba6:	220c      	movs	r2, #12
 8001ba8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001baa:	4b08      	ldr	r3, [pc, #32]	; (8001bcc <MX_USART1_UART_Init+0x4c>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bb0:	4b06      	ldr	r3, [pc, #24]	; (8001bcc <MX_USART1_UART_Init+0x4c>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001bb6:	4805      	ldr	r0, [pc, #20]	; (8001bcc <MX_USART1_UART_Init+0x4c>)
 8001bb8:	f004 fce4 	bl	8006584 <HAL_UART_Init>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001bc2:	f000 f885 	bl	8001cd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001bc6:	bf00      	nop
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	20000354 	.word	0x20000354
 8001bd0:	40013800 	.word	0x40013800

08001bd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b088      	sub	sp, #32
 8001bd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bda:	f107 0310 	add.w	r3, r7, #16
 8001bde:	2200      	movs	r2, #0
 8001be0:	601a      	str	r2, [r3, #0]
 8001be2:	605a      	str	r2, [r3, #4]
 8001be4:	609a      	str	r2, [r3, #8]
 8001be6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001be8:	4b35      	ldr	r3, [pc, #212]	; (8001cc0 <MX_GPIO_Init+0xec>)
 8001bea:	699b      	ldr	r3, [r3, #24]
 8001bec:	4a34      	ldr	r2, [pc, #208]	; (8001cc0 <MX_GPIO_Init+0xec>)
 8001bee:	f043 0320 	orr.w	r3, r3, #32
 8001bf2:	6193      	str	r3, [r2, #24]
 8001bf4:	4b32      	ldr	r3, [pc, #200]	; (8001cc0 <MX_GPIO_Init+0xec>)
 8001bf6:	699b      	ldr	r3, [r3, #24]
 8001bf8:	f003 0320 	and.w	r3, r3, #32
 8001bfc:	60fb      	str	r3, [r7, #12]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c00:	4b2f      	ldr	r3, [pc, #188]	; (8001cc0 <MX_GPIO_Init+0xec>)
 8001c02:	699b      	ldr	r3, [r3, #24]
 8001c04:	4a2e      	ldr	r2, [pc, #184]	; (8001cc0 <MX_GPIO_Init+0xec>)
 8001c06:	f043 0304 	orr.w	r3, r3, #4
 8001c0a:	6193      	str	r3, [r2, #24]
 8001c0c:	4b2c      	ldr	r3, [pc, #176]	; (8001cc0 <MX_GPIO_Init+0xec>)
 8001c0e:	699b      	ldr	r3, [r3, #24]
 8001c10:	f003 0304 	and.w	r3, r3, #4
 8001c14:	60bb      	str	r3, [r7, #8]
 8001c16:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c18:	4b29      	ldr	r3, [pc, #164]	; (8001cc0 <MX_GPIO_Init+0xec>)
 8001c1a:	699b      	ldr	r3, [r3, #24]
 8001c1c:	4a28      	ldr	r2, [pc, #160]	; (8001cc0 <MX_GPIO_Init+0xec>)
 8001c1e:	f043 0308 	orr.w	r3, r3, #8
 8001c22:	6193      	str	r3, [r2, #24]
 8001c24:	4b26      	ldr	r3, [pc, #152]	; (8001cc0 <MX_GPIO_Init+0xec>)
 8001c26:	699b      	ldr	r3, [r3, #24]
 8001c28:	f003 0308 	and.w	r3, r3, #8
 8001c2c:	607b      	str	r3, [r7, #4]
 8001c2e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NSS_Pin|RST_Pin, GPIO_PIN_SET);
 8001c30:	2201      	movs	r2, #1
 8001c32:	2103      	movs	r1, #3
 8001c34:	4823      	ldr	r0, [pc, #140]	; (8001cc4 <MX_GPIO_Init+0xf0>)
 8001c36:	f000 fdc1 	bl	80027bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MD0_GPIO_Port, MD0_Pin, GPIO_PIN_RESET);
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c40:	4820      	ldr	r0, [pc, #128]	; (8001cc4 <MX_GPIO_Init+0xf0>)
 8001c42:	f000 fdbb 	bl	80027bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MD1_GPIO_Port, MD1_Pin, GPIO_PIN_RESET);
 8001c46:	2200      	movs	r2, #0
 8001c48:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c4c:	481e      	ldr	r0, [pc, #120]	; (8001cc8 <MX_GPIO_Init+0xf4>)
 8001c4e:	f000 fdb5 	bl	80027bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DIO_0_Pin */
  GPIO_InitStruct.Pin = DIO_0_Pin;
 8001c52:	2310      	movs	r3, #16
 8001c54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c56:	4b1d      	ldr	r3, [pc, #116]	; (8001ccc <MX_GPIO_Init+0xf8>)
 8001c58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIO_0_GPIO_Port, &GPIO_InitStruct);
 8001c5e:	f107 0310 	add.w	r3, r7, #16
 8001c62:	4619      	mov	r1, r3
 8001c64:	4818      	ldr	r0, [pc, #96]	; (8001cc8 <MX_GPIO_Init+0xf4>)
 8001c66:	f000 fc25 	bl	80024b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : NSS_Pin RST_Pin MD0_Pin */
  GPIO_InitStruct.Pin = NSS_Pin|RST_Pin|MD0_Pin;
 8001c6a:	f248 0303 	movw	r3, #32771	; 0x8003
 8001c6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c70:	2301      	movs	r3, #1
 8001c72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c74:	2300      	movs	r3, #0
 8001c76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c78:	2302      	movs	r3, #2
 8001c7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c7c:	f107 0310 	add.w	r3, r7, #16
 8001c80:	4619      	mov	r1, r3
 8001c82:	4810      	ldr	r0, [pc, #64]	; (8001cc4 <MX_GPIO_Init+0xf0>)
 8001c84:	f000 fc16 	bl	80024b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MD1_Pin */
  GPIO_InitStruct.Pin = MD1_Pin;
 8001c88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c92:	2300      	movs	r3, #0
 8001c94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c96:	2302      	movs	r3, #2
 8001c98:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MD1_GPIO_Port, &GPIO_InitStruct);
 8001c9a:	f107 0310 	add.w	r3, r7, #16
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	4809      	ldr	r0, [pc, #36]	; (8001cc8 <MX_GPIO_Init+0xf4>)
 8001ca2:	f000 fc07 	bl	80024b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	2100      	movs	r1, #0
 8001caa:	200a      	movs	r0, #10
 8001cac:	f000 fbcb 	bl	8002446 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001cb0:	200a      	movs	r0, #10
 8001cb2:	f000 fbe4 	bl	800247e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001cb6:	bf00      	nop
 8001cb8:	3720      	adds	r7, #32
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	40021000 	.word	0x40021000
 8001cc4:	40010c00 	.word	0x40010c00
 8001cc8:	40010800 	.word	0x40010800
 8001ccc:	10110000 	.word	0x10110000

08001cd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cd4:	b672      	cpsid	i
}
 8001cd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cd8:	e7fe      	b.n	8001cd8 <Error_Handler+0x8>
	...

08001cdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b085      	sub	sp, #20
 8001ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001ce2:	4b15      	ldr	r3, [pc, #84]	; (8001d38 <HAL_MspInit+0x5c>)
 8001ce4:	699b      	ldr	r3, [r3, #24]
 8001ce6:	4a14      	ldr	r2, [pc, #80]	; (8001d38 <HAL_MspInit+0x5c>)
 8001ce8:	f043 0301 	orr.w	r3, r3, #1
 8001cec:	6193      	str	r3, [r2, #24]
 8001cee:	4b12      	ldr	r3, [pc, #72]	; (8001d38 <HAL_MspInit+0x5c>)
 8001cf0:	699b      	ldr	r3, [r3, #24]
 8001cf2:	f003 0301 	and.w	r3, r3, #1
 8001cf6:	60bb      	str	r3, [r7, #8]
 8001cf8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cfa:	4b0f      	ldr	r3, [pc, #60]	; (8001d38 <HAL_MspInit+0x5c>)
 8001cfc:	69db      	ldr	r3, [r3, #28]
 8001cfe:	4a0e      	ldr	r2, [pc, #56]	; (8001d38 <HAL_MspInit+0x5c>)
 8001d00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d04:	61d3      	str	r3, [r2, #28]
 8001d06:	4b0c      	ldr	r3, [pc, #48]	; (8001d38 <HAL_MspInit+0x5c>)
 8001d08:	69db      	ldr	r3, [r3, #28]
 8001d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d0e:	607b      	str	r3, [r7, #4]
 8001d10:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001d12:	4b0a      	ldr	r3, [pc, #40]	; (8001d3c <HAL_MspInit+0x60>)
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	60fb      	str	r3, [r7, #12]
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001d1e:	60fb      	str	r3, [r7, #12]
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d26:	60fb      	str	r3, [r7, #12]
 8001d28:	4a04      	ldr	r2, [pc, #16]	; (8001d3c <HAL_MspInit+0x60>)
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d2e:	bf00      	nop
 8001d30:	3714      	adds	r7, #20
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bc80      	pop	{r7}
 8001d36:	4770      	bx	lr
 8001d38:	40021000 	.word	0x40021000
 8001d3c:	40010000 	.word	0x40010000

08001d40 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b08a      	sub	sp, #40	; 0x28
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d48:	f107 0318 	add.w	r3, r7, #24
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	601a      	str	r2, [r3, #0]
 8001d50:	605a      	str	r2, [r3, #4]
 8001d52:	609a      	str	r2, [r3, #8]
 8001d54:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a2b      	ldr	r2, [pc, #172]	; (8001e08 <HAL_I2C_MspInit+0xc8>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d124      	bne.n	8001daa <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d60:	4b2a      	ldr	r3, [pc, #168]	; (8001e0c <HAL_I2C_MspInit+0xcc>)
 8001d62:	699b      	ldr	r3, [r3, #24]
 8001d64:	4a29      	ldr	r2, [pc, #164]	; (8001e0c <HAL_I2C_MspInit+0xcc>)
 8001d66:	f043 0308 	orr.w	r3, r3, #8
 8001d6a:	6193      	str	r3, [r2, #24]
 8001d6c:	4b27      	ldr	r3, [pc, #156]	; (8001e0c <HAL_I2C_MspInit+0xcc>)
 8001d6e:	699b      	ldr	r3, [r3, #24]
 8001d70:	f003 0308 	and.w	r3, r3, #8
 8001d74:	617b      	str	r3, [r7, #20]
 8001d76:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d78:	23c0      	movs	r3, #192	; 0xc0
 8001d7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d7c:	2312      	movs	r3, #18
 8001d7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d80:	2303      	movs	r3, #3
 8001d82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d84:	f107 0318 	add.w	r3, r7, #24
 8001d88:	4619      	mov	r1, r3
 8001d8a:	4821      	ldr	r0, [pc, #132]	; (8001e10 <HAL_I2C_MspInit+0xd0>)
 8001d8c:	f000 fb92 	bl	80024b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d90:	4b1e      	ldr	r3, [pc, #120]	; (8001e0c <HAL_I2C_MspInit+0xcc>)
 8001d92:	69db      	ldr	r3, [r3, #28]
 8001d94:	4a1d      	ldr	r2, [pc, #116]	; (8001e0c <HAL_I2C_MspInit+0xcc>)
 8001d96:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d9a:	61d3      	str	r3, [r2, #28]
 8001d9c:	4b1b      	ldr	r3, [pc, #108]	; (8001e0c <HAL_I2C_MspInit+0xcc>)
 8001d9e:	69db      	ldr	r3, [r3, #28]
 8001da0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001da4:	613b      	str	r3, [r7, #16]
 8001da6:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001da8:	e029      	b.n	8001dfe <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a19      	ldr	r2, [pc, #100]	; (8001e14 <HAL_I2C_MspInit+0xd4>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d124      	bne.n	8001dfe <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001db4:	4b15      	ldr	r3, [pc, #84]	; (8001e0c <HAL_I2C_MspInit+0xcc>)
 8001db6:	699b      	ldr	r3, [r3, #24]
 8001db8:	4a14      	ldr	r2, [pc, #80]	; (8001e0c <HAL_I2C_MspInit+0xcc>)
 8001dba:	f043 0308 	orr.w	r3, r3, #8
 8001dbe:	6193      	str	r3, [r2, #24]
 8001dc0:	4b12      	ldr	r3, [pc, #72]	; (8001e0c <HAL_I2C_MspInit+0xcc>)
 8001dc2:	699b      	ldr	r3, [r3, #24]
 8001dc4:	f003 0308 	and.w	r3, r3, #8
 8001dc8:	60fb      	str	r3, [r7, #12]
 8001dca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001dcc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001dd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dd2:	2312      	movs	r3, #18
 8001dd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dda:	f107 0318 	add.w	r3, r7, #24
 8001dde:	4619      	mov	r1, r3
 8001de0:	480b      	ldr	r0, [pc, #44]	; (8001e10 <HAL_I2C_MspInit+0xd0>)
 8001de2:	f000 fb67 	bl	80024b4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001de6:	4b09      	ldr	r3, [pc, #36]	; (8001e0c <HAL_I2C_MspInit+0xcc>)
 8001de8:	69db      	ldr	r3, [r3, #28]
 8001dea:	4a08      	ldr	r2, [pc, #32]	; (8001e0c <HAL_I2C_MspInit+0xcc>)
 8001dec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001df0:	61d3      	str	r3, [r2, #28]
 8001df2:	4b06      	ldr	r3, [pc, #24]	; (8001e0c <HAL_I2C_MspInit+0xcc>)
 8001df4:	69db      	ldr	r3, [r3, #28]
 8001df6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dfa:	60bb      	str	r3, [r7, #8]
 8001dfc:	68bb      	ldr	r3, [r7, #8]
}
 8001dfe:	bf00      	nop
 8001e00:	3728      	adds	r7, #40	; 0x28
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	40005400 	.word	0x40005400
 8001e0c:	40021000 	.word	0x40021000
 8001e10:	40010c00 	.word	0x40010c00
 8001e14:	40005800 	.word	0x40005800

08001e18 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b088      	sub	sp, #32
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e20:	f107 0310 	add.w	r3, r7, #16
 8001e24:	2200      	movs	r2, #0
 8001e26:	601a      	str	r2, [r3, #0]
 8001e28:	605a      	str	r2, [r3, #4]
 8001e2a:	609a      	str	r2, [r3, #8]
 8001e2c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a1b      	ldr	r2, [pc, #108]	; (8001ea0 <HAL_SPI_MspInit+0x88>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d12f      	bne.n	8001e98 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e38:	4b1a      	ldr	r3, [pc, #104]	; (8001ea4 <HAL_SPI_MspInit+0x8c>)
 8001e3a:	699b      	ldr	r3, [r3, #24]
 8001e3c:	4a19      	ldr	r2, [pc, #100]	; (8001ea4 <HAL_SPI_MspInit+0x8c>)
 8001e3e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e42:	6193      	str	r3, [r2, #24]
 8001e44:	4b17      	ldr	r3, [pc, #92]	; (8001ea4 <HAL_SPI_MspInit+0x8c>)
 8001e46:	699b      	ldr	r3, [r3, #24]
 8001e48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e4c:	60fb      	str	r3, [r7, #12]
 8001e4e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e50:	4b14      	ldr	r3, [pc, #80]	; (8001ea4 <HAL_SPI_MspInit+0x8c>)
 8001e52:	699b      	ldr	r3, [r3, #24]
 8001e54:	4a13      	ldr	r2, [pc, #76]	; (8001ea4 <HAL_SPI_MspInit+0x8c>)
 8001e56:	f043 0304 	orr.w	r3, r3, #4
 8001e5a:	6193      	str	r3, [r2, #24]
 8001e5c:	4b11      	ldr	r3, [pc, #68]	; (8001ea4 <HAL_SPI_MspInit+0x8c>)
 8001e5e:	699b      	ldr	r3, [r3, #24]
 8001e60:	f003 0304 	and.w	r3, r3, #4
 8001e64:	60bb      	str	r3, [r7, #8]
 8001e66:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001e68:	23a0      	movs	r3, #160	; 0xa0
 8001e6a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e70:	2303      	movs	r3, #3
 8001e72:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e74:	f107 0310 	add.w	r3, r7, #16
 8001e78:	4619      	mov	r1, r3
 8001e7a:	480b      	ldr	r0, [pc, #44]	; (8001ea8 <HAL_SPI_MspInit+0x90>)
 8001e7c:	f000 fb1a 	bl	80024b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001e80:	2340      	movs	r3, #64	; 0x40
 8001e82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e84:	2300      	movs	r3, #0
 8001e86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e8c:	f107 0310 	add.w	r3, r7, #16
 8001e90:	4619      	mov	r1, r3
 8001e92:	4805      	ldr	r0, [pc, #20]	; (8001ea8 <HAL_SPI_MspInit+0x90>)
 8001e94:	f000 fb0e 	bl	80024b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001e98:	bf00      	nop
 8001e9a:	3720      	adds	r7, #32
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	40013000 	.word	0x40013000
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	40010800 	.word	0x40010800

08001eac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b088      	sub	sp, #32
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb4:	f107 0310 	add.w	r3, r7, #16
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]
 8001ebc:	605a      	str	r2, [r3, #4]
 8001ebe:	609a      	str	r2, [r3, #8]
 8001ec0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a1c      	ldr	r2, [pc, #112]	; (8001f38 <HAL_UART_MspInit+0x8c>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d131      	bne.n	8001f30 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ecc:	4b1b      	ldr	r3, [pc, #108]	; (8001f3c <HAL_UART_MspInit+0x90>)
 8001ece:	699b      	ldr	r3, [r3, #24]
 8001ed0:	4a1a      	ldr	r2, [pc, #104]	; (8001f3c <HAL_UART_MspInit+0x90>)
 8001ed2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ed6:	6193      	str	r3, [r2, #24]
 8001ed8:	4b18      	ldr	r3, [pc, #96]	; (8001f3c <HAL_UART_MspInit+0x90>)
 8001eda:	699b      	ldr	r3, [r3, #24]
 8001edc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ee0:	60fb      	str	r3, [r7, #12]
 8001ee2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ee4:	4b15      	ldr	r3, [pc, #84]	; (8001f3c <HAL_UART_MspInit+0x90>)
 8001ee6:	699b      	ldr	r3, [r3, #24]
 8001ee8:	4a14      	ldr	r2, [pc, #80]	; (8001f3c <HAL_UART_MspInit+0x90>)
 8001eea:	f043 0304 	orr.w	r3, r3, #4
 8001eee:	6193      	str	r3, [r2, #24]
 8001ef0:	4b12      	ldr	r3, [pc, #72]	; (8001f3c <HAL_UART_MspInit+0x90>)
 8001ef2:	699b      	ldr	r3, [r3, #24]
 8001ef4:	f003 0304 	and.w	r3, r3, #4
 8001ef8:	60bb      	str	r3, [r7, #8]
 8001efa:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001efc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f00:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f02:	2302      	movs	r3, #2
 8001f04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f06:	2303      	movs	r3, #3
 8001f08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f0a:	f107 0310 	add.w	r3, r7, #16
 8001f0e:	4619      	mov	r1, r3
 8001f10:	480b      	ldr	r0, [pc, #44]	; (8001f40 <HAL_UART_MspInit+0x94>)
 8001f12:	f000 facf 	bl	80024b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001f16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f20:	2300      	movs	r3, #0
 8001f22:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f24:	f107 0310 	add.w	r3, r7, #16
 8001f28:	4619      	mov	r1, r3
 8001f2a:	4805      	ldr	r0, [pc, #20]	; (8001f40 <HAL_UART_MspInit+0x94>)
 8001f2c:	f000 fac2 	bl	80024b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001f30:	bf00      	nop
 8001f32:	3720      	adds	r7, #32
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	40013800 	.word	0x40013800
 8001f3c:	40021000 	.word	0x40021000
 8001f40:	40010800 	.word	0x40010800

08001f44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f48:	e7fe      	b.n	8001f48 <NMI_Handler+0x4>

08001f4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f4a:	b480      	push	{r7}
 8001f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f4e:	e7fe      	b.n	8001f4e <HardFault_Handler+0x4>

08001f50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f54:	e7fe      	b.n	8001f54 <MemManage_Handler+0x4>

08001f56 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f56:	b480      	push	{r7}
 8001f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f5a:	e7fe      	b.n	8001f5a <BusFault_Handler+0x4>

08001f5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f60:	e7fe      	b.n	8001f60 <UsageFault_Handler+0x4>

08001f62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f62:	b480      	push	{r7}
 8001f64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f66:	bf00      	nop
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bc80      	pop	{r7}
 8001f6c:	4770      	bx	lr

08001f6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f72:	bf00      	nop
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bc80      	pop	{r7}
 8001f78:	4770      	bx	lr

08001f7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f7e:	bf00      	nop
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bc80      	pop	{r7}
 8001f84:	4770      	bx	lr

08001f86 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f86:	b580      	push	{r7, lr}
 8001f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f8a:	f000 f945 	bl	8002218 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f8e:	bf00      	nop
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001f92:	b580      	push	{r7, lr}
 8001f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO_0_Pin);
 8001f96:	2010      	movs	r0, #16
 8001f98:	f000 fc28 	bl	80027ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001f9c:	bf00      	nop
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001fa4:	4802      	ldr	r0, [pc, #8]	; (8001fb0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001fa6:	f001 fdb3 	bl	8003b10 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001faa:	bf00      	nop
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	20001078 	.word	0x20001078

08001fb4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  return 1;
 8001fb8:	2301      	movs	r3, #1
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bc80      	pop	{r7}
 8001fc0:	4770      	bx	lr

08001fc2 <_kill>:

int _kill(int pid, int sig)
{
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	b082      	sub	sp, #8
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
 8001fca:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001fcc:	f00a f94e 	bl	800c26c <__errno>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2216      	movs	r2, #22
 8001fd4:	601a      	str	r2, [r3, #0]
  return -1;
 8001fd6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <_exit>:

void _exit (int status)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b082      	sub	sp, #8
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001fea:	f04f 31ff 	mov.w	r1, #4294967295
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f7ff ffe7 	bl	8001fc2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ff4:	e7fe      	b.n	8001ff4 <_exit+0x12>

08001ff6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	b086      	sub	sp, #24
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	60f8      	str	r0, [r7, #12]
 8001ffe:	60b9      	str	r1, [r7, #8]
 8002000:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002002:	2300      	movs	r3, #0
 8002004:	617b      	str	r3, [r7, #20]
 8002006:	e00a      	b.n	800201e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002008:	f3af 8000 	nop.w
 800200c:	4601      	mov	r1, r0
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	1c5a      	adds	r2, r3, #1
 8002012:	60ba      	str	r2, [r7, #8]
 8002014:	b2ca      	uxtb	r2, r1
 8002016:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	3301      	adds	r3, #1
 800201c:	617b      	str	r3, [r7, #20]
 800201e:	697a      	ldr	r2, [r7, #20]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	429a      	cmp	r2, r3
 8002024:	dbf0      	blt.n	8002008 <_read+0x12>
  }

  return len;
 8002026:	687b      	ldr	r3, [r7, #4]
}
 8002028:	4618      	mov	r0, r3
 800202a:	3718      	adds	r7, #24
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}

08002030 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b086      	sub	sp, #24
 8002034:	af00      	add	r7, sp, #0
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800203c:	2300      	movs	r3, #0
 800203e:	617b      	str	r3, [r7, #20]
 8002040:	e009      	b.n	8002056 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	1c5a      	adds	r2, r3, #1
 8002046:	60ba      	str	r2, [r7, #8]
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	4618      	mov	r0, r3
 800204c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	3301      	adds	r3, #1
 8002054:	617b      	str	r3, [r7, #20]
 8002056:	697a      	ldr	r2, [r7, #20]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	429a      	cmp	r2, r3
 800205c:	dbf1      	blt.n	8002042 <_write+0x12>
  }
  return len;
 800205e:	687b      	ldr	r3, [r7, #4]
}
 8002060:	4618      	mov	r0, r3
 8002062:	3718      	adds	r7, #24
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}

08002068 <_close>:

int _close(int file)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002070:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002074:	4618      	mov	r0, r3
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	bc80      	pop	{r7}
 800207c:	4770      	bx	lr

0800207e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800207e:	b480      	push	{r7}
 8002080:	b083      	sub	sp, #12
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]
 8002086:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800208e:	605a      	str	r2, [r3, #4]
  return 0;
 8002090:	2300      	movs	r3, #0
}
 8002092:	4618      	mov	r0, r3
 8002094:	370c      	adds	r7, #12
 8002096:	46bd      	mov	sp, r7
 8002098:	bc80      	pop	{r7}
 800209a:	4770      	bx	lr

0800209c <_isatty>:

int _isatty(int file)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80020a4:	2301      	movs	r3, #1
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	370c      	adds	r7, #12
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bc80      	pop	{r7}
 80020ae:	4770      	bx	lr

080020b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b085      	sub	sp, #20
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	60b9      	str	r1, [r7, #8]
 80020ba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3714      	adds	r7, #20
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bc80      	pop	{r7}
 80020c6:	4770      	bx	lr

080020c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b086      	sub	sp, #24
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020d0:	4a14      	ldr	r2, [pc, #80]	; (8002124 <_sbrk+0x5c>)
 80020d2:	4b15      	ldr	r3, [pc, #84]	; (8002128 <_sbrk+0x60>)
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020dc:	4b13      	ldr	r3, [pc, #76]	; (800212c <_sbrk+0x64>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d102      	bne.n	80020ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020e4:	4b11      	ldr	r3, [pc, #68]	; (800212c <_sbrk+0x64>)
 80020e6:	4a12      	ldr	r2, [pc, #72]	; (8002130 <_sbrk+0x68>)
 80020e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020ea:	4b10      	ldr	r3, [pc, #64]	; (800212c <_sbrk+0x64>)
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4413      	add	r3, r2
 80020f2:	693a      	ldr	r2, [r7, #16]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d207      	bcs.n	8002108 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020f8:	f00a f8b8 	bl	800c26c <__errno>
 80020fc:	4603      	mov	r3, r0
 80020fe:	220c      	movs	r2, #12
 8002100:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002102:	f04f 33ff 	mov.w	r3, #4294967295
 8002106:	e009      	b.n	800211c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002108:	4b08      	ldr	r3, [pc, #32]	; (800212c <_sbrk+0x64>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800210e:	4b07      	ldr	r3, [pc, #28]	; (800212c <_sbrk+0x64>)
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4413      	add	r3, r2
 8002116:	4a05      	ldr	r2, [pc, #20]	; (800212c <_sbrk+0x64>)
 8002118:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800211a:	68fb      	ldr	r3, [r7, #12]
}
 800211c:	4618      	mov	r0, r3
 800211e:	3718      	adds	r7, #24
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	20005000 	.word	0x20005000
 8002128:	00000400 	.word	0x00000400
 800212c:	2000039c 	.word	0x2000039c
 8002130:	200016d8 	.word	0x200016d8

08002134 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002138:	bf00      	nop
 800213a:	46bd      	mov	sp, r7
 800213c:	bc80      	pop	{r7}
 800213e:	4770      	bx	lr

08002140 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002140:	f7ff fff8 	bl	8002134 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002144:	480b      	ldr	r0, [pc, #44]	; (8002174 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002146:	490c      	ldr	r1, [pc, #48]	; (8002178 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002148:	4a0c      	ldr	r2, [pc, #48]	; (800217c <LoopFillZerobss+0x16>)
  movs r3, #0
 800214a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800214c:	e002      	b.n	8002154 <LoopCopyDataInit>

0800214e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800214e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002150:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002152:	3304      	adds	r3, #4

08002154 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002154:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002156:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002158:	d3f9      	bcc.n	800214e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800215a:	4a09      	ldr	r2, [pc, #36]	; (8002180 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800215c:	4c09      	ldr	r4, [pc, #36]	; (8002184 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800215e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002160:	e001      	b.n	8002166 <LoopFillZerobss>

08002162 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002162:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002164:	3204      	adds	r2, #4

08002166 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002166:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002168:	d3fb      	bcc.n	8002162 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800216a:	f00a f885 	bl	800c278 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800216e:	f7ff fb8b 	bl	8001888 <main>
  bx lr
 8002172:	4770      	bx	lr
  ldr r0, =_sdata
 8002174:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002178:	20000228 	.word	0x20000228
  ldr r2, =_sidata
 800217c:	0800d954 	.word	0x0800d954
  ldr r2, =_sbss
 8002180:	20000228 	.word	0x20000228
  ldr r4, =_ebss
 8002184:	200016d4 	.word	0x200016d4

08002188 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002188:	e7fe      	b.n	8002188 <ADC1_2_IRQHandler>
	...

0800218c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002190:	4b08      	ldr	r3, [pc, #32]	; (80021b4 <HAL_Init+0x28>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a07      	ldr	r2, [pc, #28]	; (80021b4 <HAL_Init+0x28>)
 8002196:	f043 0310 	orr.w	r3, r3, #16
 800219a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800219c:	2003      	movs	r0, #3
 800219e:	f000 f947 	bl	8002430 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021a2:	200f      	movs	r0, #15
 80021a4:	f000 f808 	bl	80021b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021a8:	f7ff fd98 	bl	8001cdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	40022000 	.word	0x40022000

080021b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021c0:	4b12      	ldr	r3, [pc, #72]	; (800220c <HAL_InitTick+0x54>)
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	4b12      	ldr	r3, [pc, #72]	; (8002210 <HAL_InitTick+0x58>)
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	4619      	mov	r1, r3
 80021ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80021d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021d6:	4618      	mov	r0, r3
 80021d8:	f000 f95f 	bl	800249a <HAL_SYSTICK_Config>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d001      	beq.n	80021e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e00e      	b.n	8002204 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2b0f      	cmp	r3, #15
 80021ea:	d80a      	bhi.n	8002202 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021ec:	2200      	movs	r2, #0
 80021ee:	6879      	ldr	r1, [r7, #4]
 80021f0:	f04f 30ff 	mov.w	r0, #4294967295
 80021f4:	f000 f927 	bl	8002446 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021f8:	4a06      	ldr	r2, [pc, #24]	; (8002214 <HAL_InitTick+0x5c>)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021fe:	2300      	movs	r3, #0
 8002200:	e000      	b.n	8002204 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
}
 8002204:	4618      	mov	r0, r3
 8002206:	3708      	adds	r7, #8
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	20000048 	.word	0x20000048
 8002210:	20000050 	.word	0x20000050
 8002214:	2000004c 	.word	0x2000004c

08002218 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800221c:	4b05      	ldr	r3, [pc, #20]	; (8002234 <HAL_IncTick+0x1c>)
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	461a      	mov	r2, r3
 8002222:	4b05      	ldr	r3, [pc, #20]	; (8002238 <HAL_IncTick+0x20>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4413      	add	r3, r2
 8002228:	4a03      	ldr	r2, [pc, #12]	; (8002238 <HAL_IncTick+0x20>)
 800222a:	6013      	str	r3, [r2, #0]
}
 800222c:	bf00      	nop
 800222e:	46bd      	mov	sp, r7
 8002230:	bc80      	pop	{r7}
 8002232:	4770      	bx	lr
 8002234:	20000050 	.word	0x20000050
 8002238:	200003a0 	.word	0x200003a0

0800223c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  return uwTick;
 8002240:	4b02      	ldr	r3, [pc, #8]	; (800224c <HAL_GetTick+0x10>)
 8002242:	681b      	ldr	r3, [r3, #0]
}
 8002244:	4618      	mov	r0, r3
 8002246:	46bd      	mov	sp, r7
 8002248:	bc80      	pop	{r7}
 800224a:	4770      	bx	lr
 800224c:	200003a0 	.word	0x200003a0

08002250 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002258:	f7ff fff0 	bl	800223c <HAL_GetTick>
 800225c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002268:	d005      	beq.n	8002276 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800226a:	4b0a      	ldr	r3, [pc, #40]	; (8002294 <HAL_Delay+0x44>)
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	461a      	mov	r2, r3
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	4413      	add	r3, r2
 8002274:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002276:	bf00      	nop
 8002278:	f7ff ffe0 	bl	800223c <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	68fa      	ldr	r2, [r7, #12]
 8002284:	429a      	cmp	r2, r3
 8002286:	d8f7      	bhi.n	8002278 <HAL_Delay+0x28>
  {
  }
}
 8002288:	bf00      	nop
 800228a:	bf00      	nop
 800228c:	3710      	adds	r7, #16
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	20000050 	.word	0x20000050

08002298 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002298:	b480      	push	{r7}
 800229a:	b085      	sub	sp, #20
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f003 0307 	and.w	r3, r3, #7
 80022a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022a8:	4b0c      	ldr	r3, [pc, #48]	; (80022dc <__NVIC_SetPriorityGrouping+0x44>)
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022ae:	68ba      	ldr	r2, [r7, #8]
 80022b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022b4:	4013      	ands	r3, r2
 80022b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022ca:	4a04      	ldr	r2, [pc, #16]	; (80022dc <__NVIC_SetPriorityGrouping+0x44>)
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	60d3      	str	r3, [r2, #12]
}
 80022d0:	bf00      	nop
 80022d2:	3714      	adds	r7, #20
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bc80      	pop	{r7}
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	e000ed00 	.word	0xe000ed00

080022e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022e4:	4b04      	ldr	r3, [pc, #16]	; (80022f8 <__NVIC_GetPriorityGrouping+0x18>)
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	0a1b      	lsrs	r3, r3, #8
 80022ea:	f003 0307 	and.w	r3, r3, #7
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bc80      	pop	{r7}
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	e000ed00 	.word	0xe000ed00

080022fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	4603      	mov	r3, r0
 8002304:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800230a:	2b00      	cmp	r3, #0
 800230c:	db0b      	blt.n	8002326 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800230e:	79fb      	ldrb	r3, [r7, #7]
 8002310:	f003 021f 	and.w	r2, r3, #31
 8002314:	4906      	ldr	r1, [pc, #24]	; (8002330 <__NVIC_EnableIRQ+0x34>)
 8002316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800231a:	095b      	lsrs	r3, r3, #5
 800231c:	2001      	movs	r0, #1
 800231e:	fa00 f202 	lsl.w	r2, r0, r2
 8002322:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002326:	bf00      	nop
 8002328:	370c      	adds	r7, #12
 800232a:	46bd      	mov	sp, r7
 800232c:	bc80      	pop	{r7}
 800232e:	4770      	bx	lr
 8002330:	e000e100 	.word	0xe000e100

08002334 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	4603      	mov	r3, r0
 800233c:	6039      	str	r1, [r7, #0]
 800233e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002340:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002344:	2b00      	cmp	r3, #0
 8002346:	db0a      	blt.n	800235e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	b2da      	uxtb	r2, r3
 800234c:	490c      	ldr	r1, [pc, #48]	; (8002380 <__NVIC_SetPriority+0x4c>)
 800234e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002352:	0112      	lsls	r2, r2, #4
 8002354:	b2d2      	uxtb	r2, r2
 8002356:	440b      	add	r3, r1
 8002358:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800235c:	e00a      	b.n	8002374 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	b2da      	uxtb	r2, r3
 8002362:	4908      	ldr	r1, [pc, #32]	; (8002384 <__NVIC_SetPriority+0x50>)
 8002364:	79fb      	ldrb	r3, [r7, #7]
 8002366:	f003 030f 	and.w	r3, r3, #15
 800236a:	3b04      	subs	r3, #4
 800236c:	0112      	lsls	r2, r2, #4
 800236e:	b2d2      	uxtb	r2, r2
 8002370:	440b      	add	r3, r1
 8002372:	761a      	strb	r2, [r3, #24]
}
 8002374:	bf00      	nop
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	bc80      	pop	{r7}
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	e000e100 	.word	0xe000e100
 8002384:	e000ed00 	.word	0xe000ed00

08002388 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002388:	b480      	push	{r7}
 800238a:	b089      	sub	sp, #36	; 0x24
 800238c:	af00      	add	r7, sp, #0
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	60b9      	str	r1, [r7, #8]
 8002392:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f003 0307 	and.w	r3, r3, #7
 800239a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	f1c3 0307 	rsb	r3, r3, #7
 80023a2:	2b04      	cmp	r3, #4
 80023a4:	bf28      	it	cs
 80023a6:	2304      	movcs	r3, #4
 80023a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	3304      	adds	r3, #4
 80023ae:	2b06      	cmp	r3, #6
 80023b0:	d902      	bls.n	80023b8 <NVIC_EncodePriority+0x30>
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	3b03      	subs	r3, #3
 80023b6:	e000      	b.n	80023ba <NVIC_EncodePriority+0x32>
 80023b8:	2300      	movs	r3, #0
 80023ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023bc:	f04f 32ff 	mov.w	r2, #4294967295
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	fa02 f303 	lsl.w	r3, r2, r3
 80023c6:	43da      	mvns	r2, r3
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	401a      	ands	r2, r3
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023d0:	f04f 31ff 	mov.w	r1, #4294967295
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	fa01 f303 	lsl.w	r3, r1, r3
 80023da:	43d9      	mvns	r1, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023e0:	4313      	orrs	r3, r2
         );
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3724      	adds	r7, #36	; 0x24
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bc80      	pop	{r7}
 80023ea:	4770      	bx	lr

080023ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	3b01      	subs	r3, #1
 80023f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023fc:	d301      	bcc.n	8002402 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023fe:	2301      	movs	r3, #1
 8002400:	e00f      	b.n	8002422 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002402:	4a0a      	ldr	r2, [pc, #40]	; (800242c <SysTick_Config+0x40>)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	3b01      	subs	r3, #1
 8002408:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800240a:	210f      	movs	r1, #15
 800240c:	f04f 30ff 	mov.w	r0, #4294967295
 8002410:	f7ff ff90 	bl	8002334 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002414:	4b05      	ldr	r3, [pc, #20]	; (800242c <SysTick_Config+0x40>)
 8002416:	2200      	movs	r2, #0
 8002418:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800241a:	4b04      	ldr	r3, [pc, #16]	; (800242c <SysTick_Config+0x40>)
 800241c:	2207      	movs	r2, #7
 800241e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	e000e010 	.word	0xe000e010

08002430 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f7ff ff2d 	bl	8002298 <__NVIC_SetPriorityGrouping>
}
 800243e:	bf00      	nop
 8002440:	3708      	adds	r7, #8
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}

08002446 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002446:	b580      	push	{r7, lr}
 8002448:	b086      	sub	sp, #24
 800244a:	af00      	add	r7, sp, #0
 800244c:	4603      	mov	r3, r0
 800244e:	60b9      	str	r1, [r7, #8]
 8002450:	607a      	str	r2, [r7, #4]
 8002452:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002454:	2300      	movs	r3, #0
 8002456:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002458:	f7ff ff42 	bl	80022e0 <__NVIC_GetPriorityGrouping>
 800245c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	68b9      	ldr	r1, [r7, #8]
 8002462:	6978      	ldr	r0, [r7, #20]
 8002464:	f7ff ff90 	bl	8002388 <NVIC_EncodePriority>
 8002468:	4602      	mov	r2, r0
 800246a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800246e:	4611      	mov	r1, r2
 8002470:	4618      	mov	r0, r3
 8002472:	f7ff ff5f 	bl	8002334 <__NVIC_SetPriority>
}
 8002476:	bf00      	nop
 8002478:	3718      	adds	r7, #24
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800247e:	b580      	push	{r7, lr}
 8002480:	b082      	sub	sp, #8
 8002482:	af00      	add	r7, sp, #0
 8002484:	4603      	mov	r3, r0
 8002486:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002488:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800248c:	4618      	mov	r0, r3
 800248e:	f7ff ff35 	bl	80022fc <__NVIC_EnableIRQ>
}
 8002492:	bf00      	nop
 8002494:	3708      	adds	r7, #8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}

0800249a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800249a:	b580      	push	{r7, lr}
 800249c:	b082      	sub	sp, #8
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f7ff ffa2 	bl	80023ec <SysTick_Config>
 80024a8:	4603      	mov	r3, r0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
	...

080024b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b08b      	sub	sp, #44	; 0x2c
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024be:	2300      	movs	r3, #0
 80024c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80024c2:	2300      	movs	r3, #0
 80024c4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024c6:	e169      	b.n	800279c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80024c8:	2201      	movs	r2, #1
 80024ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024cc:	fa02 f303 	lsl.w	r3, r2, r3
 80024d0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	69fa      	ldr	r2, [r7, #28]
 80024d8:	4013      	ands	r3, r2
 80024da:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	f040 8158 	bne.w	8002796 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	4a9a      	ldr	r2, [pc, #616]	; (8002754 <HAL_GPIO_Init+0x2a0>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d05e      	beq.n	80025ae <HAL_GPIO_Init+0xfa>
 80024f0:	4a98      	ldr	r2, [pc, #608]	; (8002754 <HAL_GPIO_Init+0x2a0>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d875      	bhi.n	80025e2 <HAL_GPIO_Init+0x12e>
 80024f6:	4a98      	ldr	r2, [pc, #608]	; (8002758 <HAL_GPIO_Init+0x2a4>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d058      	beq.n	80025ae <HAL_GPIO_Init+0xfa>
 80024fc:	4a96      	ldr	r2, [pc, #600]	; (8002758 <HAL_GPIO_Init+0x2a4>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d86f      	bhi.n	80025e2 <HAL_GPIO_Init+0x12e>
 8002502:	4a96      	ldr	r2, [pc, #600]	; (800275c <HAL_GPIO_Init+0x2a8>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d052      	beq.n	80025ae <HAL_GPIO_Init+0xfa>
 8002508:	4a94      	ldr	r2, [pc, #592]	; (800275c <HAL_GPIO_Init+0x2a8>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d869      	bhi.n	80025e2 <HAL_GPIO_Init+0x12e>
 800250e:	4a94      	ldr	r2, [pc, #592]	; (8002760 <HAL_GPIO_Init+0x2ac>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d04c      	beq.n	80025ae <HAL_GPIO_Init+0xfa>
 8002514:	4a92      	ldr	r2, [pc, #584]	; (8002760 <HAL_GPIO_Init+0x2ac>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d863      	bhi.n	80025e2 <HAL_GPIO_Init+0x12e>
 800251a:	4a92      	ldr	r2, [pc, #584]	; (8002764 <HAL_GPIO_Init+0x2b0>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d046      	beq.n	80025ae <HAL_GPIO_Init+0xfa>
 8002520:	4a90      	ldr	r2, [pc, #576]	; (8002764 <HAL_GPIO_Init+0x2b0>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d85d      	bhi.n	80025e2 <HAL_GPIO_Init+0x12e>
 8002526:	2b12      	cmp	r3, #18
 8002528:	d82a      	bhi.n	8002580 <HAL_GPIO_Init+0xcc>
 800252a:	2b12      	cmp	r3, #18
 800252c:	d859      	bhi.n	80025e2 <HAL_GPIO_Init+0x12e>
 800252e:	a201      	add	r2, pc, #4	; (adr r2, 8002534 <HAL_GPIO_Init+0x80>)
 8002530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002534:	080025af 	.word	0x080025af
 8002538:	08002589 	.word	0x08002589
 800253c:	0800259b 	.word	0x0800259b
 8002540:	080025dd 	.word	0x080025dd
 8002544:	080025e3 	.word	0x080025e3
 8002548:	080025e3 	.word	0x080025e3
 800254c:	080025e3 	.word	0x080025e3
 8002550:	080025e3 	.word	0x080025e3
 8002554:	080025e3 	.word	0x080025e3
 8002558:	080025e3 	.word	0x080025e3
 800255c:	080025e3 	.word	0x080025e3
 8002560:	080025e3 	.word	0x080025e3
 8002564:	080025e3 	.word	0x080025e3
 8002568:	080025e3 	.word	0x080025e3
 800256c:	080025e3 	.word	0x080025e3
 8002570:	080025e3 	.word	0x080025e3
 8002574:	080025e3 	.word	0x080025e3
 8002578:	08002591 	.word	0x08002591
 800257c:	080025a5 	.word	0x080025a5
 8002580:	4a79      	ldr	r2, [pc, #484]	; (8002768 <HAL_GPIO_Init+0x2b4>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d013      	beq.n	80025ae <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002586:	e02c      	b.n	80025e2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	623b      	str	r3, [r7, #32]
          break;
 800258e:	e029      	b.n	80025e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	3304      	adds	r3, #4
 8002596:	623b      	str	r3, [r7, #32]
          break;
 8002598:	e024      	b.n	80025e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	3308      	adds	r3, #8
 80025a0:	623b      	str	r3, [r7, #32]
          break;
 80025a2:	e01f      	b.n	80025e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	330c      	adds	r3, #12
 80025aa:	623b      	str	r3, [r7, #32]
          break;
 80025ac:	e01a      	b.n	80025e4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d102      	bne.n	80025bc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80025b6:	2304      	movs	r3, #4
 80025b8:	623b      	str	r3, [r7, #32]
          break;
 80025ba:	e013      	b.n	80025e4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d105      	bne.n	80025d0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80025c4:	2308      	movs	r3, #8
 80025c6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	69fa      	ldr	r2, [r7, #28]
 80025cc:	611a      	str	r2, [r3, #16]
          break;
 80025ce:	e009      	b.n	80025e4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80025d0:	2308      	movs	r3, #8
 80025d2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	69fa      	ldr	r2, [r7, #28]
 80025d8:	615a      	str	r2, [r3, #20]
          break;
 80025da:	e003      	b.n	80025e4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80025dc:	2300      	movs	r3, #0
 80025de:	623b      	str	r3, [r7, #32]
          break;
 80025e0:	e000      	b.n	80025e4 <HAL_GPIO_Init+0x130>
          break;
 80025e2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	2bff      	cmp	r3, #255	; 0xff
 80025e8:	d801      	bhi.n	80025ee <HAL_GPIO_Init+0x13a>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	e001      	b.n	80025f2 <HAL_GPIO_Init+0x13e>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	3304      	adds	r3, #4
 80025f2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	2bff      	cmp	r3, #255	; 0xff
 80025f8:	d802      	bhi.n	8002600 <HAL_GPIO_Init+0x14c>
 80025fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	e002      	b.n	8002606 <HAL_GPIO_Init+0x152>
 8002600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002602:	3b08      	subs	r3, #8
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	210f      	movs	r1, #15
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	fa01 f303 	lsl.w	r3, r1, r3
 8002614:	43db      	mvns	r3, r3
 8002616:	401a      	ands	r2, r3
 8002618:	6a39      	ldr	r1, [r7, #32]
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	fa01 f303 	lsl.w	r3, r1, r3
 8002620:	431a      	orrs	r2, r3
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800262e:	2b00      	cmp	r3, #0
 8002630:	f000 80b1 	beq.w	8002796 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002634:	4b4d      	ldr	r3, [pc, #308]	; (800276c <HAL_GPIO_Init+0x2b8>)
 8002636:	699b      	ldr	r3, [r3, #24]
 8002638:	4a4c      	ldr	r2, [pc, #304]	; (800276c <HAL_GPIO_Init+0x2b8>)
 800263a:	f043 0301 	orr.w	r3, r3, #1
 800263e:	6193      	str	r3, [r2, #24]
 8002640:	4b4a      	ldr	r3, [pc, #296]	; (800276c <HAL_GPIO_Init+0x2b8>)
 8002642:	699b      	ldr	r3, [r3, #24]
 8002644:	f003 0301 	and.w	r3, r3, #1
 8002648:	60bb      	str	r3, [r7, #8]
 800264a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800264c:	4a48      	ldr	r2, [pc, #288]	; (8002770 <HAL_GPIO_Init+0x2bc>)
 800264e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002650:	089b      	lsrs	r3, r3, #2
 8002652:	3302      	adds	r3, #2
 8002654:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002658:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800265a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265c:	f003 0303 	and.w	r3, r3, #3
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	220f      	movs	r2, #15
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	43db      	mvns	r3, r3
 800266a:	68fa      	ldr	r2, [r7, #12]
 800266c:	4013      	ands	r3, r2
 800266e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	4a40      	ldr	r2, [pc, #256]	; (8002774 <HAL_GPIO_Init+0x2c0>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d013      	beq.n	80026a0 <HAL_GPIO_Init+0x1ec>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	4a3f      	ldr	r2, [pc, #252]	; (8002778 <HAL_GPIO_Init+0x2c4>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d00d      	beq.n	800269c <HAL_GPIO_Init+0x1e8>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	4a3e      	ldr	r2, [pc, #248]	; (800277c <HAL_GPIO_Init+0x2c8>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d007      	beq.n	8002698 <HAL_GPIO_Init+0x1e4>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	4a3d      	ldr	r2, [pc, #244]	; (8002780 <HAL_GPIO_Init+0x2cc>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d101      	bne.n	8002694 <HAL_GPIO_Init+0x1e0>
 8002690:	2303      	movs	r3, #3
 8002692:	e006      	b.n	80026a2 <HAL_GPIO_Init+0x1ee>
 8002694:	2304      	movs	r3, #4
 8002696:	e004      	b.n	80026a2 <HAL_GPIO_Init+0x1ee>
 8002698:	2302      	movs	r3, #2
 800269a:	e002      	b.n	80026a2 <HAL_GPIO_Init+0x1ee>
 800269c:	2301      	movs	r3, #1
 800269e:	e000      	b.n	80026a2 <HAL_GPIO_Init+0x1ee>
 80026a0:	2300      	movs	r3, #0
 80026a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026a4:	f002 0203 	and.w	r2, r2, #3
 80026a8:	0092      	lsls	r2, r2, #2
 80026aa:	4093      	lsls	r3, r2
 80026ac:	68fa      	ldr	r2, [r7, #12]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80026b2:	492f      	ldr	r1, [pc, #188]	; (8002770 <HAL_GPIO_Init+0x2bc>)
 80026b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b6:	089b      	lsrs	r3, r3, #2
 80026b8:	3302      	adds	r3, #2
 80026ba:	68fa      	ldr	r2, [r7, #12]
 80026bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d006      	beq.n	80026da <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80026cc:	4b2d      	ldr	r3, [pc, #180]	; (8002784 <HAL_GPIO_Init+0x2d0>)
 80026ce:	689a      	ldr	r2, [r3, #8]
 80026d0:	492c      	ldr	r1, [pc, #176]	; (8002784 <HAL_GPIO_Init+0x2d0>)
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	608b      	str	r3, [r1, #8]
 80026d8:	e006      	b.n	80026e8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80026da:	4b2a      	ldr	r3, [pc, #168]	; (8002784 <HAL_GPIO_Init+0x2d0>)
 80026dc:	689a      	ldr	r2, [r3, #8]
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	43db      	mvns	r3, r3
 80026e2:	4928      	ldr	r1, [pc, #160]	; (8002784 <HAL_GPIO_Init+0x2d0>)
 80026e4:	4013      	ands	r3, r2
 80026e6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d006      	beq.n	8002702 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80026f4:	4b23      	ldr	r3, [pc, #140]	; (8002784 <HAL_GPIO_Init+0x2d0>)
 80026f6:	68da      	ldr	r2, [r3, #12]
 80026f8:	4922      	ldr	r1, [pc, #136]	; (8002784 <HAL_GPIO_Init+0x2d0>)
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	60cb      	str	r3, [r1, #12]
 8002700:	e006      	b.n	8002710 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002702:	4b20      	ldr	r3, [pc, #128]	; (8002784 <HAL_GPIO_Init+0x2d0>)
 8002704:	68da      	ldr	r2, [r3, #12]
 8002706:	69bb      	ldr	r3, [r7, #24]
 8002708:	43db      	mvns	r3, r3
 800270a:	491e      	ldr	r1, [pc, #120]	; (8002784 <HAL_GPIO_Init+0x2d0>)
 800270c:	4013      	ands	r3, r2
 800270e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d006      	beq.n	800272a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800271c:	4b19      	ldr	r3, [pc, #100]	; (8002784 <HAL_GPIO_Init+0x2d0>)
 800271e:	685a      	ldr	r2, [r3, #4]
 8002720:	4918      	ldr	r1, [pc, #96]	; (8002784 <HAL_GPIO_Init+0x2d0>)
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	4313      	orrs	r3, r2
 8002726:	604b      	str	r3, [r1, #4]
 8002728:	e006      	b.n	8002738 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800272a:	4b16      	ldr	r3, [pc, #88]	; (8002784 <HAL_GPIO_Init+0x2d0>)
 800272c:	685a      	ldr	r2, [r3, #4]
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	43db      	mvns	r3, r3
 8002732:	4914      	ldr	r1, [pc, #80]	; (8002784 <HAL_GPIO_Init+0x2d0>)
 8002734:	4013      	ands	r3, r2
 8002736:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d021      	beq.n	8002788 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002744:	4b0f      	ldr	r3, [pc, #60]	; (8002784 <HAL_GPIO_Init+0x2d0>)
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	490e      	ldr	r1, [pc, #56]	; (8002784 <HAL_GPIO_Init+0x2d0>)
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	4313      	orrs	r3, r2
 800274e:	600b      	str	r3, [r1, #0]
 8002750:	e021      	b.n	8002796 <HAL_GPIO_Init+0x2e2>
 8002752:	bf00      	nop
 8002754:	10320000 	.word	0x10320000
 8002758:	10310000 	.word	0x10310000
 800275c:	10220000 	.word	0x10220000
 8002760:	10210000 	.word	0x10210000
 8002764:	10120000 	.word	0x10120000
 8002768:	10110000 	.word	0x10110000
 800276c:	40021000 	.word	0x40021000
 8002770:	40010000 	.word	0x40010000
 8002774:	40010800 	.word	0x40010800
 8002778:	40010c00 	.word	0x40010c00
 800277c:	40011000 	.word	0x40011000
 8002780:	40011400 	.word	0x40011400
 8002784:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002788:	4b0b      	ldr	r3, [pc, #44]	; (80027b8 <HAL_GPIO_Init+0x304>)
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	43db      	mvns	r3, r3
 8002790:	4909      	ldr	r1, [pc, #36]	; (80027b8 <HAL_GPIO_Init+0x304>)
 8002792:	4013      	ands	r3, r2
 8002794:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002798:	3301      	adds	r3, #1
 800279a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a2:	fa22 f303 	lsr.w	r3, r2, r3
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	f47f ae8e 	bne.w	80024c8 <HAL_GPIO_Init+0x14>
  }
}
 80027ac:	bf00      	nop
 80027ae:	bf00      	nop
 80027b0:	372c      	adds	r7, #44	; 0x2c
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bc80      	pop	{r7}
 80027b6:	4770      	bx	lr
 80027b8:	40010400 	.word	0x40010400

080027bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	460b      	mov	r3, r1
 80027c6:	807b      	strh	r3, [r7, #2]
 80027c8:	4613      	mov	r3, r2
 80027ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027cc:	787b      	ldrb	r3, [r7, #1]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d003      	beq.n	80027da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027d2:	887a      	ldrh	r2, [r7, #2]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80027d8:	e003      	b.n	80027e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80027da:	887b      	ldrh	r3, [r7, #2]
 80027dc:	041a      	lsls	r2, r3, #16
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	611a      	str	r2, [r3, #16]
}
 80027e2:	bf00      	nop
 80027e4:	370c      	adds	r7, #12
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bc80      	pop	{r7}
 80027ea:	4770      	bx	lr

080027ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	4603      	mov	r3, r0
 80027f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80027f6:	4b08      	ldr	r3, [pc, #32]	; (8002818 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027f8:	695a      	ldr	r2, [r3, #20]
 80027fa:	88fb      	ldrh	r3, [r7, #6]
 80027fc:	4013      	ands	r3, r2
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d006      	beq.n	8002810 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002802:	4a05      	ldr	r2, [pc, #20]	; (8002818 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002804:	88fb      	ldrh	r3, [r7, #6]
 8002806:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002808:	88fb      	ldrh	r3, [r7, #6]
 800280a:	4618      	mov	r0, r3
 800280c:	f000 f806 	bl	800281c <HAL_GPIO_EXTI_Callback>
  }
}
 8002810:	bf00      	nop
 8002812:	3708      	adds	r7, #8
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	40010400 	.word	0x40010400

0800281c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	4603      	mov	r3, r0
 8002824:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002826:	bf00      	nop
 8002828:	370c      	adds	r7, #12
 800282a:	46bd      	mov	sp, r7
 800282c:	bc80      	pop	{r7}
 800282e:	4770      	bx	lr

08002830 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d101      	bne.n	8002842 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e12b      	b.n	8002a9a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002848:	b2db      	uxtb	r3, r3
 800284a:	2b00      	cmp	r3, #0
 800284c:	d106      	bne.n	800285c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f7ff fa72 	bl	8001d40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2224      	movs	r2, #36	; 0x24
 8002860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f022 0201 	bic.w	r2, r2, #1
 8002872:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002882:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002892:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002894:	f003 f950 	bl	8005b38 <HAL_RCC_GetPCLK1Freq>
 8002898:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	4a81      	ldr	r2, [pc, #516]	; (8002aa4 <HAL_I2C_Init+0x274>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d807      	bhi.n	80028b4 <HAL_I2C_Init+0x84>
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	4a80      	ldr	r2, [pc, #512]	; (8002aa8 <HAL_I2C_Init+0x278>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	bf94      	ite	ls
 80028ac:	2301      	movls	r3, #1
 80028ae:	2300      	movhi	r3, #0
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	e006      	b.n	80028c2 <HAL_I2C_Init+0x92>
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	4a7d      	ldr	r2, [pc, #500]	; (8002aac <HAL_I2C_Init+0x27c>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	bf94      	ite	ls
 80028bc:	2301      	movls	r3, #1
 80028be:	2300      	movhi	r3, #0
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d001      	beq.n	80028ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e0e7      	b.n	8002a9a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	4a78      	ldr	r2, [pc, #480]	; (8002ab0 <HAL_I2C_Init+0x280>)
 80028ce:	fba2 2303 	umull	r2, r3, r2, r3
 80028d2:	0c9b      	lsrs	r3, r3, #18
 80028d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	68ba      	ldr	r2, [r7, #8]
 80028e6:	430a      	orrs	r2, r1
 80028e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	6a1b      	ldr	r3, [r3, #32]
 80028f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	4a6a      	ldr	r2, [pc, #424]	; (8002aa4 <HAL_I2C_Init+0x274>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d802      	bhi.n	8002904 <HAL_I2C_Init+0xd4>
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	3301      	adds	r3, #1
 8002902:	e009      	b.n	8002918 <HAL_I2C_Init+0xe8>
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800290a:	fb02 f303 	mul.w	r3, r2, r3
 800290e:	4a69      	ldr	r2, [pc, #420]	; (8002ab4 <HAL_I2C_Init+0x284>)
 8002910:	fba2 2303 	umull	r2, r3, r2, r3
 8002914:	099b      	lsrs	r3, r3, #6
 8002916:	3301      	adds	r3, #1
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	6812      	ldr	r2, [r2, #0]
 800291c:	430b      	orrs	r3, r1
 800291e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	69db      	ldr	r3, [r3, #28]
 8002926:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800292a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	495c      	ldr	r1, [pc, #368]	; (8002aa4 <HAL_I2C_Init+0x274>)
 8002934:	428b      	cmp	r3, r1
 8002936:	d819      	bhi.n	800296c <HAL_I2C_Init+0x13c>
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	1e59      	subs	r1, r3, #1
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	005b      	lsls	r3, r3, #1
 8002942:	fbb1 f3f3 	udiv	r3, r1, r3
 8002946:	1c59      	adds	r1, r3, #1
 8002948:	f640 73fc 	movw	r3, #4092	; 0xffc
 800294c:	400b      	ands	r3, r1
 800294e:	2b00      	cmp	r3, #0
 8002950:	d00a      	beq.n	8002968 <HAL_I2C_Init+0x138>
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	1e59      	subs	r1, r3, #1
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	005b      	lsls	r3, r3, #1
 800295c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002960:	3301      	adds	r3, #1
 8002962:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002966:	e051      	b.n	8002a0c <HAL_I2C_Init+0x1dc>
 8002968:	2304      	movs	r3, #4
 800296a:	e04f      	b.n	8002a0c <HAL_I2C_Init+0x1dc>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d111      	bne.n	8002998 <HAL_I2C_Init+0x168>
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	1e58      	subs	r0, r3, #1
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6859      	ldr	r1, [r3, #4]
 800297c:	460b      	mov	r3, r1
 800297e:	005b      	lsls	r3, r3, #1
 8002980:	440b      	add	r3, r1
 8002982:	fbb0 f3f3 	udiv	r3, r0, r3
 8002986:	3301      	adds	r3, #1
 8002988:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800298c:	2b00      	cmp	r3, #0
 800298e:	bf0c      	ite	eq
 8002990:	2301      	moveq	r3, #1
 8002992:	2300      	movne	r3, #0
 8002994:	b2db      	uxtb	r3, r3
 8002996:	e012      	b.n	80029be <HAL_I2C_Init+0x18e>
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	1e58      	subs	r0, r3, #1
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6859      	ldr	r1, [r3, #4]
 80029a0:	460b      	mov	r3, r1
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	440b      	add	r3, r1
 80029a6:	0099      	lsls	r1, r3, #2
 80029a8:	440b      	add	r3, r1
 80029aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80029ae:	3301      	adds	r3, #1
 80029b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	bf0c      	ite	eq
 80029b8:	2301      	moveq	r3, #1
 80029ba:	2300      	movne	r3, #0
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d001      	beq.n	80029c6 <HAL_I2C_Init+0x196>
 80029c2:	2301      	movs	r3, #1
 80029c4:	e022      	b.n	8002a0c <HAL_I2C_Init+0x1dc>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d10e      	bne.n	80029ec <HAL_I2C_Init+0x1bc>
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	1e58      	subs	r0, r3, #1
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6859      	ldr	r1, [r3, #4]
 80029d6:	460b      	mov	r3, r1
 80029d8:	005b      	lsls	r3, r3, #1
 80029da:	440b      	add	r3, r1
 80029dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80029e0:	3301      	adds	r3, #1
 80029e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029ea:	e00f      	b.n	8002a0c <HAL_I2C_Init+0x1dc>
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	1e58      	subs	r0, r3, #1
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6859      	ldr	r1, [r3, #4]
 80029f4:	460b      	mov	r3, r1
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	440b      	add	r3, r1
 80029fa:	0099      	lsls	r1, r3, #2
 80029fc:	440b      	add	r3, r1
 80029fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a02:	3301      	adds	r3, #1
 8002a04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a0c:	6879      	ldr	r1, [r7, #4]
 8002a0e:	6809      	ldr	r1, [r1, #0]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	69da      	ldr	r2, [r3, #28]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6a1b      	ldr	r3, [r3, #32]
 8002a26:	431a      	orrs	r2, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	430a      	orrs	r2, r1
 8002a2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002a3a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	6911      	ldr	r1, [r2, #16]
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	68d2      	ldr	r2, [r2, #12]
 8002a46:	4311      	orrs	r1, r2
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	6812      	ldr	r2, [r2, #0]
 8002a4c:	430b      	orrs	r3, r1
 8002a4e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	695a      	ldr	r2, [r3, #20]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	699b      	ldr	r3, [r3, #24]
 8002a62:	431a      	orrs	r2, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	430a      	orrs	r2, r1
 8002a6a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f042 0201 	orr.w	r2, r2, #1
 8002a7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2220      	movs	r2, #32
 8002a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3710      	adds	r7, #16
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	000186a0 	.word	0x000186a0
 8002aa8:	001e847f 	.word	0x001e847f
 8002aac:	003d08ff 	.word	0x003d08ff
 8002ab0:	431bde83 	.word	0x431bde83
 8002ab4:	10624dd3 	.word	0x10624dd3

08002ab8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b088      	sub	sp, #32
 8002abc:	af02      	add	r7, sp, #8
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	607a      	str	r2, [r7, #4]
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	817b      	strh	r3, [r7, #10]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002acc:	f7ff fbb6 	bl	800223c <HAL_GetTick>
 8002ad0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	2b20      	cmp	r3, #32
 8002adc:	f040 80e0 	bne.w	8002ca0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	9300      	str	r3, [sp, #0]
 8002ae4:	2319      	movs	r3, #25
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	4970      	ldr	r1, [pc, #448]	; (8002cac <HAL_I2C_Master_Transmit+0x1f4>)
 8002aea:	68f8      	ldr	r0, [r7, #12]
 8002aec:	f000 fcb6 	bl	800345c <I2C_WaitOnFlagUntilTimeout>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d001      	beq.n	8002afa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002af6:	2302      	movs	r3, #2
 8002af8:	e0d3      	b.n	8002ca2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d101      	bne.n	8002b08 <HAL_I2C_Master_Transmit+0x50>
 8002b04:	2302      	movs	r3, #2
 8002b06:	e0cc      	b.n	8002ca2 <HAL_I2C_Master_Transmit+0x1ea>
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0301 	and.w	r3, r3, #1
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d007      	beq.n	8002b2e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f042 0201 	orr.w	r2, r2, #1
 8002b2c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b3c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2221      	movs	r2, #33	; 0x21
 8002b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2210      	movs	r2, #16
 8002b4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2200      	movs	r2, #0
 8002b52:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	893a      	ldrh	r2, [r7, #8]
 8002b5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b64:	b29a      	uxth	r2, r3
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	4a50      	ldr	r2, [pc, #320]	; (8002cb0 <HAL_I2C_Master_Transmit+0x1f8>)
 8002b6e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002b70:	8979      	ldrh	r1, [r7, #10]
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	6a3a      	ldr	r2, [r7, #32]
 8002b76:	68f8      	ldr	r0, [r7, #12]
 8002b78:	f000 fb20 	bl	80031bc <I2C_MasterRequestWrite>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d001      	beq.n	8002b86 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e08d      	b.n	8002ca2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b86:	2300      	movs	r3, #0
 8002b88:	613b      	str	r3, [r7, #16]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	695b      	ldr	r3, [r3, #20]
 8002b90:	613b      	str	r3, [r7, #16]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	699b      	ldr	r3, [r3, #24]
 8002b98:	613b      	str	r3, [r7, #16]
 8002b9a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002b9c:	e066      	b.n	8002c6c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b9e:	697a      	ldr	r2, [r7, #20]
 8002ba0:	6a39      	ldr	r1, [r7, #32]
 8002ba2:	68f8      	ldr	r0, [r7, #12]
 8002ba4:	f000 fd74 	bl	8003690 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d00d      	beq.n	8002bca <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb2:	2b04      	cmp	r3, #4
 8002bb4:	d107      	bne.n	8002bc6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bc4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e06b      	b.n	8002ca2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bce:	781a      	ldrb	r2, [r3, #0]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bda:	1c5a      	adds	r2, r3, #1
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	3b01      	subs	r3, #1
 8002be8:	b29a      	uxth	r2, r3
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bf2:	3b01      	subs	r3, #1
 8002bf4:	b29a      	uxth	r2, r3
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	695b      	ldr	r3, [r3, #20]
 8002c00:	f003 0304 	and.w	r3, r3, #4
 8002c04:	2b04      	cmp	r3, #4
 8002c06:	d11b      	bne.n	8002c40 <HAL_I2C_Master_Transmit+0x188>
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d017      	beq.n	8002c40 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c14:	781a      	ldrb	r2, [r3, #0]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c20:	1c5a      	adds	r2, r3, #1
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	3b01      	subs	r3, #1
 8002c2e:	b29a      	uxth	r2, r3
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c38:	3b01      	subs	r3, #1
 8002c3a:	b29a      	uxth	r2, r3
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c40:	697a      	ldr	r2, [r7, #20]
 8002c42:	6a39      	ldr	r1, [r7, #32]
 8002c44:	68f8      	ldr	r0, [r7, #12]
 8002c46:	f000 fd6b 	bl	8003720 <I2C_WaitOnBTFFlagUntilTimeout>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d00d      	beq.n	8002c6c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c54:	2b04      	cmp	r3, #4
 8002c56:	d107      	bne.n	8002c68 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c66:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e01a      	b.n	8002ca2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d194      	bne.n	8002b9e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2220      	movs	r2, #32
 8002c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2200      	movs	r2, #0
 8002c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	e000      	b.n	8002ca2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002ca0:	2302      	movs	r3, #2
  }
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3718      	adds	r7, #24
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	00100002 	.word	0x00100002
 8002cb0:	ffff0000 	.word	0xffff0000

08002cb4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b08c      	sub	sp, #48	; 0x30
 8002cb8:	af02      	add	r7, sp, #8
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	607a      	str	r2, [r7, #4]
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	817b      	strh	r3, [r7, #10]
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ccc:	f7ff fab6 	bl	800223c <HAL_GetTick>
 8002cd0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	2b20      	cmp	r3, #32
 8002cdc:	f040 824b 	bne.w	8003176 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce2:	9300      	str	r3, [sp, #0]
 8002ce4:	2319      	movs	r3, #25
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	497f      	ldr	r1, [pc, #508]	; (8002ee8 <HAL_I2C_Master_Receive+0x234>)
 8002cea:	68f8      	ldr	r0, [r7, #12]
 8002cec:	f000 fbb6 	bl	800345c <I2C_WaitOnFlagUntilTimeout>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d001      	beq.n	8002cfa <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8002cf6:	2302      	movs	r3, #2
 8002cf8:	e23e      	b.n	8003178 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d101      	bne.n	8002d08 <HAL_I2C_Master_Receive+0x54>
 8002d04:	2302      	movs	r3, #2
 8002d06:	e237      	b.n	8003178 <HAL_I2C_Master_Receive+0x4c4>
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d007      	beq.n	8002d2e <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f042 0201 	orr.w	r2, r2, #1
 8002d2c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d3c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2222      	movs	r2, #34	; 0x22
 8002d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2210      	movs	r2, #16
 8002d4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2200      	movs	r2, #0
 8002d52:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	893a      	ldrh	r2, [r7, #8]
 8002d5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d64:	b29a      	uxth	r2, r3
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	4a5f      	ldr	r2, [pc, #380]	; (8002eec <HAL_I2C_Master_Receive+0x238>)
 8002d6e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002d70:	8979      	ldrh	r1, [r7, #10]
 8002d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d76:	68f8      	ldr	r0, [r7, #12]
 8002d78:	f000 faa2 	bl	80032c0 <I2C_MasterRequestRead>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d001      	beq.n	8002d86 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e1f8      	b.n	8003178 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d113      	bne.n	8002db6 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d8e:	2300      	movs	r3, #0
 8002d90:	61fb      	str	r3, [r7, #28]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	695b      	ldr	r3, [r3, #20]
 8002d98:	61fb      	str	r3, [r7, #28]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	699b      	ldr	r3, [r3, #24]
 8002da0:	61fb      	str	r3, [r7, #28]
 8002da2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002db2:	601a      	str	r2, [r3, #0]
 8002db4:	e1cc      	b.n	8003150 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d11e      	bne.n	8002dfc <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dcc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002dce:	b672      	cpsid	i
}
 8002dd0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	61bb      	str	r3, [r7, #24]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	695b      	ldr	r3, [r3, #20]
 8002ddc:	61bb      	str	r3, [r7, #24]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	699b      	ldr	r3, [r3, #24]
 8002de4:	61bb      	str	r3, [r7, #24]
 8002de6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002df6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002df8:	b662      	cpsie	i
}
 8002dfa:	e035      	b.n	8002e68 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d11e      	bne.n	8002e42 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e12:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002e14:	b672      	cpsid	i
}
 8002e16:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e18:	2300      	movs	r3, #0
 8002e1a:	617b      	str	r3, [r7, #20]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	695b      	ldr	r3, [r3, #20]
 8002e22:	617b      	str	r3, [r7, #20]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	699b      	ldr	r3, [r3, #24]
 8002e2a:	617b      	str	r3, [r7, #20]
 8002e2c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e3c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002e3e:	b662      	cpsie	i
}
 8002e40:	e012      	b.n	8002e68 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e50:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e52:	2300      	movs	r3, #0
 8002e54:	613b      	str	r3, [r7, #16]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	695b      	ldr	r3, [r3, #20]
 8002e5c:	613b      	str	r3, [r7, #16]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	699b      	ldr	r3, [r3, #24]
 8002e64:	613b      	str	r3, [r7, #16]
 8002e66:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002e68:	e172      	b.n	8003150 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e6e:	2b03      	cmp	r3, #3
 8002e70:	f200 811f 	bhi.w	80030b2 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d123      	bne.n	8002ec4 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e7e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e80:	68f8      	ldr	r0, [r7, #12]
 8002e82:	f000 fc95 	bl	80037b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d001      	beq.n	8002e90 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e173      	b.n	8003178 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	691a      	ldr	r2, [r3, #16]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9a:	b2d2      	uxtb	r2, r2
 8002e9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea2:	1c5a      	adds	r2, r3, #1
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eac:	3b01      	subs	r3, #1
 8002eae:	b29a      	uxth	r2, r3
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	b29a      	uxth	r2, r3
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002ec2:	e145      	b.n	8003150 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d152      	bne.n	8002f72 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ece:	9300      	str	r3, [sp, #0]
 8002ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	4906      	ldr	r1, [pc, #24]	; (8002ef0 <HAL_I2C_Master_Receive+0x23c>)
 8002ed6:	68f8      	ldr	r0, [r7, #12]
 8002ed8:	f000 fac0 	bl	800345c <I2C_WaitOnFlagUntilTimeout>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d008      	beq.n	8002ef4 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e148      	b.n	8003178 <HAL_I2C_Master_Receive+0x4c4>
 8002ee6:	bf00      	nop
 8002ee8:	00100002 	.word	0x00100002
 8002eec:	ffff0000 	.word	0xffff0000
 8002ef0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002ef4:	b672      	cpsid	i
}
 8002ef6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f06:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	691a      	ldr	r2, [r3, #16]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f12:	b2d2      	uxtb	r2, r2
 8002f14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1a:	1c5a      	adds	r2, r3, #1
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f24:	3b01      	subs	r3, #1
 8002f26:	b29a      	uxth	r2, r3
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	3b01      	subs	r3, #1
 8002f34:	b29a      	uxth	r2, r3
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002f3a:	b662      	cpsie	i
}
 8002f3c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	691a      	ldr	r2, [r3, #16]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f48:	b2d2      	uxtb	r2, r2
 8002f4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f50:	1c5a      	adds	r2, r3, #1
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	b29a      	uxth	r2, r3
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	3b01      	subs	r3, #1
 8002f6a:	b29a      	uxth	r2, r3
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f70:	e0ee      	b.n	8003150 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f74:	9300      	str	r3, [sp, #0]
 8002f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f78:	2200      	movs	r2, #0
 8002f7a:	4981      	ldr	r1, [pc, #516]	; (8003180 <HAL_I2C_Master_Receive+0x4cc>)
 8002f7c:	68f8      	ldr	r0, [r7, #12]
 8002f7e:	f000 fa6d 	bl	800345c <I2C_WaitOnFlagUntilTimeout>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d001      	beq.n	8002f8c <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e0f5      	b.n	8003178 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f9a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002f9c:	b672      	cpsid	i
}
 8002f9e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	691a      	ldr	r2, [r3, #16]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002faa:	b2d2      	uxtb	r2, r2
 8002fac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb2:	1c5a      	adds	r2, r3, #1
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fbc:	3b01      	subs	r3, #1
 8002fbe:	b29a      	uxth	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	3b01      	subs	r3, #1
 8002fcc:	b29a      	uxth	r2, r3
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002fd2:	4b6c      	ldr	r3, [pc, #432]	; (8003184 <HAL_I2C_Master_Receive+0x4d0>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	08db      	lsrs	r3, r3, #3
 8002fd8:	4a6b      	ldr	r2, [pc, #428]	; (8003188 <HAL_I2C_Master_Receive+0x4d4>)
 8002fda:	fba2 2303 	umull	r2, r3, r2, r3
 8002fde:	0a1a      	lsrs	r2, r3, #8
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	4413      	add	r3, r2
 8002fe6:	00da      	lsls	r2, r3, #3
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002fec:	6a3b      	ldr	r3, [r7, #32]
 8002fee:	3b01      	subs	r3, #1
 8002ff0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002ff2:	6a3b      	ldr	r3, [r7, #32]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d118      	bne.n	800302a <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2220      	movs	r2, #32
 8003002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003012:	f043 0220 	orr.w	r2, r3, #32
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800301a:	b662      	cpsie	i
}
 800301c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e0a6      	b.n	8003178 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	695b      	ldr	r3, [r3, #20]
 8003030:	f003 0304 	and.w	r3, r3, #4
 8003034:	2b04      	cmp	r3, #4
 8003036:	d1d9      	bne.n	8002fec <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003046:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	691a      	ldr	r2, [r3, #16]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003052:	b2d2      	uxtb	r2, r2
 8003054:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305a:	1c5a      	adds	r2, r3, #1
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003064:	3b01      	subs	r3, #1
 8003066:	b29a      	uxth	r2, r3
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003070:	b29b      	uxth	r3, r3
 8003072:	3b01      	subs	r3, #1
 8003074:	b29a      	uxth	r2, r3
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800307a:	b662      	cpsie	i
}
 800307c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	691a      	ldr	r2, [r3, #16]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003088:	b2d2      	uxtb	r2, r2
 800308a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003090:	1c5a      	adds	r2, r3, #1
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800309a:	3b01      	subs	r3, #1
 800309c:	b29a      	uxth	r2, r3
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	3b01      	subs	r3, #1
 80030aa:	b29a      	uxth	r2, r3
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	855a      	strh	r2, [r3, #42]	; 0x2a
 80030b0:	e04e      	b.n	8003150 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80030b6:	68f8      	ldr	r0, [r7, #12]
 80030b8:	f000 fb7a 	bl	80037b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d001      	beq.n	80030c6 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e058      	b.n	8003178 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	691a      	ldr	r2, [r3, #16]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d0:	b2d2      	uxtb	r2, r2
 80030d2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d8:	1c5a      	adds	r2, r3, #1
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030e2:	3b01      	subs	r3, #1
 80030e4:	b29a      	uxth	r2, r3
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	3b01      	subs	r3, #1
 80030f2:	b29a      	uxth	r2, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	695b      	ldr	r3, [r3, #20]
 80030fe:	f003 0304 	and.w	r3, r3, #4
 8003102:	2b04      	cmp	r3, #4
 8003104:	d124      	bne.n	8003150 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800310a:	2b03      	cmp	r3, #3
 800310c:	d107      	bne.n	800311e <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800311c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	691a      	ldr	r2, [r3, #16]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003128:	b2d2      	uxtb	r2, r2
 800312a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003130:	1c5a      	adds	r2, r3, #1
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800313a:	3b01      	subs	r3, #1
 800313c:	b29a      	uxth	r2, r3
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003146:	b29b      	uxth	r3, r3
 8003148:	3b01      	subs	r3, #1
 800314a:	b29a      	uxth	r2, r3
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003154:	2b00      	cmp	r3, #0
 8003156:	f47f ae88 	bne.w	8002e6a <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2220      	movs	r2, #32
 800315e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2200      	movs	r2, #0
 8003166:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2200      	movs	r2, #0
 800316e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003172:	2300      	movs	r3, #0
 8003174:	e000      	b.n	8003178 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8003176:	2302      	movs	r3, #2
  }
}
 8003178:	4618      	mov	r0, r3
 800317a:	3728      	adds	r7, #40	; 0x28
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}
 8003180:	00010004 	.word	0x00010004
 8003184:	20000048 	.word	0x20000048
 8003188:	14f8b589 	.word	0x14f8b589

0800318c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800319a:	b2db      	uxtb	r3, r3
}
 800319c:	4618      	mov	r0, r3
 800319e:	370c      	adds	r7, #12
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bc80      	pop	{r7}
 80031a4:	4770      	bx	lr

080031a6 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80031a6:	b480      	push	{r7}
 80031a8:	b083      	sub	sp, #12
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	370c      	adds	r7, #12
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bc80      	pop	{r7}
 80031ba:	4770      	bx	lr

080031bc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b088      	sub	sp, #32
 80031c0:	af02      	add	r7, sp, #8
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	607a      	str	r2, [r7, #4]
 80031c6:	603b      	str	r3, [r7, #0]
 80031c8:	460b      	mov	r3, r1
 80031ca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	2b08      	cmp	r3, #8
 80031d6:	d006      	beq.n	80031e6 <I2C_MasterRequestWrite+0x2a>
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d003      	beq.n	80031e6 <I2C_MasterRequestWrite+0x2a>
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80031e4:	d108      	bne.n	80031f8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031f4:	601a      	str	r2, [r3, #0]
 80031f6:	e00b      	b.n	8003210 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fc:	2b12      	cmp	r3, #18
 80031fe:	d107      	bne.n	8003210 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800320e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	9300      	str	r3, [sp, #0]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800321c:	68f8      	ldr	r0, [r7, #12]
 800321e:	f000 f91d 	bl	800345c <I2C_WaitOnFlagUntilTimeout>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d00d      	beq.n	8003244 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003232:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003236:	d103      	bne.n	8003240 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800323e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	e035      	b.n	80032b0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	691b      	ldr	r3, [r3, #16]
 8003248:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800324c:	d108      	bne.n	8003260 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800324e:	897b      	ldrh	r3, [r7, #10]
 8003250:	b2db      	uxtb	r3, r3
 8003252:	461a      	mov	r2, r3
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800325c:	611a      	str	r2, [r3, #16]
 800325e:	e01b      	b.n	8003298 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003260:	897b      	ldrh	r3, [r7, #10]
 8003262:	11db      	asrs	r3, r3, #7
 8003264:	b2db      	uxtb	r3, r3
 8003266:	f003 0306 	and.w	r3, r3, #6
 800326a:	b2db      	uxtb	r3, r3
 800326c:	f063 030f 	orn	r3, r3, #15
 8003270:	b2da      	uxtb	r2, r3
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	490e      	ldr	r1, [pc, #56]	; (80032b8 <I2C_MasterRequestWrite+0xfc>)
 800327e:	68f8      	ldr	r0, [r7, #12]
 8003280:	f000 f966 	bl	8003550 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d001      	beq.n	800328e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e010      	b.n	80032b0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800328e:	897b      	ldrh	r3, [r7, #10]
 8003290:	b2da      	uxtb	r2, r3
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	4907      	ldr	r1, [pc, #28]	; (80032bc <I2C_MasterRequestWrite+0x100>)
 800329e:	68f8      	ldr	r0, [r7, #12]
 80032a0:	f000 f956 	bl	8003550 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d001      	beq.n	80032ae <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e000      	b.n	80032b0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80032ae:	2300      	movs	r3, #0
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3718      	adds	r7, #24
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	00010008 	.word	0x00010008
 80032bc:	00010002 	.word	0x00010002

080032c0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b088      	sub	sp, #32
 80032c4:	af02      	add	r7, sp, #8
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	607a      	str	r2, [r7, #4]
 80032ca:	603b      	str	r3, [r7, #0]
 80032cc:	460b      	mov	r3, r1
 80032ce:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80032e4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	2b08      	cmp	r3, #8
 80032ea:	d006      	beq.n	80032fa <I2C_MasterRequestRead+0x3a>
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d003      	beq.n	80032fa <I2C_MasterRequestRead+0x3a>
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80032f8:	d108      	bne.n	800330c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003308:	601a      	str	r2, [r3, #0]
 800330a:	e00b      	b.n	8003324 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003310:	2b11      	cmp	r3, #17
 8003312:	d107      	bne.n	8003324 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003322:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	9300      	str	r3, [sp, #0]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2200      	movs	r2, #0
 800332c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003330:	68f8      	ldr	r0, [r7, #12]
 8003332:	f000 f893 	bl	800345c <I2C_WaitOnFlagUntilTimeout>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d00d      	beq.n	8003358 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003346:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800334a:	d103      	bne.n	8003354 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003352:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	e079      	b.n	800344c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003360:	d108      	bne.n	8003374 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003362:	897b      	ldrh	r3, [r7, #10]
 8003364:	b2db      	uxtb	r3, r3
 8003366:	f043 0301 	orr.w	r3, r3, #1
 800336a:	b2da      	uxtb	r2, r3
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	611a      	str	r2, [r3, #16]
 8003372:	e05f      	b.n	8003434 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003374:	897b      	ldrh	r3, [r7, #10]
 8003376:	11db      	asrs	r3, r3, #7
 8003378:	b2db      	uxtb	r3, r3
 800337a:	f003 0306 	and.w	r3, r3, #6
 800337e:	b2db      	uxtb	r3, r3
 8003380:	f063 030f 	orn	r3, r3, #15
 8003384:	b2da      	uxtb	r2, r3
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	4930      	ldr	r1, [pc, #192]	; (8003454 <I2C_MasterRequestRead+0x194>)
 8003392:	68f8      	ldr	r0, [r7, #12]
 8003394:	f000 f8dc 	bl	8003550 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d001      	beq.n	80033a2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e054      	b.n	800344c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80033a2:	897b      	ldrh	r3, [r7, #10]
 80033a4:	b2da      	uxtb	r2, r3
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	4929      	ldr	r1, [pc, #164]	; (8003458 <I2C_MasterRequestRead+0x198>)
 80033b2:	68f8      	ldr	r0, [r7, #12]
 80033b4:	f000 f8cc 	bl	8003550 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d001      	beq.n	80033c2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e044      	b.n	800344c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033c2:	2300      	movs	r3, #0
 80033c4:	613b      	str	r3, [r7, #16]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	695b      	ldr	r3, [r3, #20]
 80033cc:	613b      	str	r3, [r7, #16]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	699b      	ldr	r3, [r3, #24]
 80033d4:	613b      	str	r3, [r7, #16]
 80033d6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033e6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	9300      	str	r3, [sp, #0]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80033f4:	68f8      	ldr	r0, [r7, #12]
 80033f6:	f000 f831 	bl	800345c <I2C_WaitOnFlagUntilTimeout>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d00d      	beq.n	800341c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800340a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800340e:	d103      	bne.n	8003418 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003416:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	e017      	b.n	800344c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800341c:	897b      	ldrh	r3, [r7, #10]
 800341e:	11db      	asrs	r3, r3, #7
 8003420:	b2db      	uxtb	r3, r3
 8003422:	f003 0306 	and.w	r3, r3, #6
 8003426:	b2db      	uxtb	r3, r3
 8003428:	f063 030e 	orn	r3, r3, #14
 800342c:	b2da      	uxtb	r2, r3
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	4907      	ldr	r1, [pc, #28]	; (8003458 <I2C_MasterRequestRead+0x198>)
 800343a:	68f8      	ldr	r0, [r7, #12]
 800343c:	f000 f888 	bl	8003550 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d001      	beq.n	800344a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e000      	b.n	800344c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800344a:	2300      	movs	r3, #0
}
 800344c:	4618      	mov	r0, r3
 800344e:	3718      	adds	r7, #24
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}
 8003454:	00010008 	.word	0x00010008
 8003458:	00010002 	.word	0x00010002

0800345c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	603b      	str	r3, [r7, #0]
 8003468:	4613      	mov	r3, r2
 800346a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800346c:	e048      	b.n	8003500 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003474:	d044      	beq.n	8003500 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003476:	f7fe fee1 	bl	800223c <HAL_GetTick>
 800347a:	4602      	mov	r2, r0
 800347c:	69bb      	ldr	r3, [r7, #24]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	683a      	ldr	r2, [r7, #0]
 8003482:	429a      	cmp	r2, r3
 8003484:	d302      	bcc.n	800348c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d139      	bne.n	8003500 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	0c1b      	lsrs	r3, r3, #16
 8003490:	b2db      	uxtb	r3, r3
 8003492:	2b01      	cmp	r3, #1
 8003494:	d10d      	bne.n	80034b2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	695b      	ldr	r3, [r3, #20]
 800349c:	43da      	mvns	r2, r3
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	4013      	ands	r3, r2
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	bf0c      	ite	eq
 80034a8:	2301      	moveq	r3, #1
 80034aa:	2300      	movne	r3, #0
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	461a      	mov	r2, r3
 80034b0:	e00c      	b.n	80034cc <I2C_WaitOnFlagUntilTimeout+0x70>
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	699b      	ldr	r3, [r3, #24]
 80034b8:	43da      	mvns	r2, r3
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	4013      	ands	r3, r2
 80034be:	b29b      	uxth	r3, r3
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	bf0c      	ite	eq
 80034c4:	2301      	moveq	r3, #1
 80034c6:	2300      	movne	r3, #0
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	461a      	mov	r2, r3
 80034cc:	79fb      	ldrb	r3, [r7, #7]
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d116      	bne.n	8003500 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2200      	movs	r2, #0
 80034d6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2220      	movs	r2, #32
 80034dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2200      	movs	r2, #0
 80034e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ec:	f043 0220 	orr.w	r2, r3, #32
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e023      	b.n	8003548 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	0c1b      	lsrs	r3, r3, #16
 8003504:	b2db      	uxtb	r3, r3
 8003506:	2b01      	cmp	r3, #1
 8003508:	d10d      	bne.n	8003526 <I2C_WaitOnFlagUntilTimeout+0xca>
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	695b      	ldr	r3, [r3, #20]
 8003510:	43da      	mvns	r2, r3
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	4013      	ands	r3, r2
 8003516:	b29b      	uxth	r3, r3
 8003518:	2b00      	cmp	r3, #0
 800351a:	bf0c      	ite	eq
 800351c:	2301      	moveq	r3, #1
 800351e:	2300      	movne	r3, #0
 8003520:	b2db      	uxtb	r3, r3
 8003522:	461a      	mov	r2, r3
 8003524:	e00c      	b.n	8003540 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	699b      	ldr	r3, [r3, #24]
 800352c:	43da      	mvns	r2, r3
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	4013      	ands	r3, r2
 8003532:	b29b      	uxth	r3, r3
 8003534:	2b00      	cmp	r3, #0
 8003536:	bf0c      	ite	eq
 8003538:	2301      	moveq	r3, #1
 800353a:	2300      	movne	r3, #0
 800353c:	b2db      	uxtb	r3, r3
 800353e:	461a      	mov	r2, r3
 8003540:	79fb      	ldrb	r3, [r7, #7]
 8003542:	429a      	cmp	r2, r3
 8003544:	d093      	beq.n	800346e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003546:	2300      	movs	r3, #0
}
 8003548:	4618      	mov	r0, r3
 800354a:	3710      	adds	r7, #16
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}

08003550 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	607a      	str	r2, [r7, #4]
 800355c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800355e:	e071      	b.n	8003644 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	695b      	ldr	r3, [r3, #20]
 8003566:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800356a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800356e:	d123      	bne.n	80035b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800357e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003588:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2200      	movs	r2, #0
 800358e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2220      	movs	r2, #32
 8003594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2200      	movs	r2, #0
 800359c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a4:	f043 0204 	orr.w	r2, r3, #4
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e067      	b.n	8003688 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035be:	d041      	beq.n	8003644 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035c0:	f7fe fe3c 	bl	800223c <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d302      	bcc.n	80035d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d136      	bne.n	8003644 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	0c1b      	lsrs	r3, r3, #16
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d10c      	bne.n	80035fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	695b      	ldr	r3, [r3, #20]
 80035e6:	43da      	mvns	r2, r3
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	4013      	ands	r3, r2
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	bf14      	ite	ne
 80035f2:	2301      	movne	r3, #1
 80035f4:	2300      	moveq	r3, #0
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	e00b      	b.n	8003612 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	699b      	ldr	r3, [r3, #24]
 8003600:	43da      	mvns	r2, r3
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	4013      	ands	r3, r2
 8003606:	b29b      	uxth	r3, r3
 8003608:	2b00      	cmp	r3, #0
 800360a:	bf14      	ite	ne
 800360c:	2301      	movne	r3, #1
 800360e:	2300      	moveq	r3, #0
 8003610:	b2db      	uxtb	r3, r3
 8003612:	2b00      	cmp	r3, #0
 8003614:	d016      	beq.n	8003644 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2200      	movs	r2, #0
 800361a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2220      	movs	r2, #32
 8003620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2200      	movs	r2, #0
 8003628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003630:	f043 0220 	orr.w	r2, r3, #32
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2200      	movs	r2, #0
 800363c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e021      	b.n	8003688 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	0c1b      	lsrs	r3, r3, #16
 8003648:	b2db      	uxtb	r3, r3
 800364a:	2b01      	cmp	r3, #1
 800364c:	d10c      	bne.n	8003668 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	695b      	ldr	r3, [r3, #20]
 8003654:	43da      	mvns	r2, r3
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	4013      	ands	r3, r2
 800365a:	b29b      	uxth	r3, r3
 800365c:	2b00      	cmp	r3, #0
 800365e:	bf14      	ite	ne
 8003660:	2301      	movne	r3, #1
 8003662:	2300      	moveq	r3, #0
 8003664:	b2db      	uxtb	r3, r3
 8003666:	e00b      	b.n	8003680 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	699b      	ldr	r3, [r3, #24]
 800366e:	43da      	mvns	r2, r3
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	4013      	ands	r3, r2
 8003674:	b29b      	uxth	r3, r3
 8003676:	2b00      	cmp	r3, #0
 8003678:	bf14      	ite	ne
 800367a:	2301      	movne	r3, #1
 800367c:	2300      	moveq	r3, #0
 800367e:	b2db      	uxtb	r3, r3
 8003680:	2b00      	cmp	r3, #0
 8003682:	f47f af6d 	bne.w	8003560 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003686:	2300      	movs	r3, #0
}
 8003688:	4618      	mov	r0, r3
 800368a:	3710      	adds	r7, #16
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	60b9      	str	r1, [r7, #8]
 800369a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800369c:	e034      	b.n	8003708 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800369e:	68f8      	ldr	r0, [r7, #12]
 80036a0:	f000 f8e3 	bl	800386a <I2C_IsAcknowledgeFailed>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d001      	beq.n	80036ae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e034      	b.n	8003718 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036b4:	d028      	beq.n	8003708 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036b6:	f7fe fdc1 	bl	800223c <HAL_GetTick>
 80036ba:	4602      	mov	r2, r0
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	68ba      	ldr	r2, [r7, #8]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d302      	bcc.n	80036cc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d11d      	bne.n	8003708 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	695b      	ldr	r3, [r3, #20]
 80036d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036d6:	2b80      	cmp	r3, #128	; 0x80
 80036d8:	d016      	beq.n	8003708 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2200      	movs	r2, #0
 80036de:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2220      	movs	r2, #32
 80036e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f4:	f043 0220 	orr.w	r2, r3, #32
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e007      	b.n	8003718 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	695b      	ldr	r3, [r3, #20]
 800370e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003712:	2b80      	cmp	r3, #128	; 0x80
 8003714:	d1c3      	bne.n	800369e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003716:	2300      	movs	r3, #0
}
 8003718:	4618      	mov	r0, r3
 800371a:	3710      	adds	r7, #16
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}

08003720 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	60b9      	str	r1, [r7, #8]
 800372a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800372c:	e034      	b.n	8003798 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800372e:	68f8      	ldr	r0, [r7, #12]
 8003730:	f000 f89b 	bl	800386a <I2C_IsAcknowledgeFailed>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d001      	beq.n	800373e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e034      	b.n	80037a8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003744:	d028      	beq.n	8003798 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003746:	f7fe fd79 	bl	800223c <HAL_GetTick>
 800374a:	4602      	mov	r2, r0
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	68ba      	ldr	r2, [r7, #8]
 8003752:	429a      	cmp	r2, r3
 8003754:	d302      	bcc.n	800375c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d11d      	bne.n	8003798 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	695b      	ldr	r3, [r3, #20]
 8003762:	f003 0304 	and.w	r3, r3, #4
 8003766:	2b04      	cmp	r3, #4
 8003768:	d016      	beq.n	8003798 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2200      	movs	r2, #0
 800376e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2220      	movs	r2, #32
 8003774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2200      	movs	r2, #0
 800377c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003784:	f043 0220 	orr.w	r2, r3, #32
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2200      	movs	r2, #0
 8003790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e007      	b.n	80037a8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	695b      	ldr	r3, [r3, #20]
 800379e:	f003 0304 	and.w	r3, r3, #4
 80037a2:	2b04      	cmp	r3, #4
 80037a4:	d1c3      	bne.n	800372e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80037a6:	2300      	movs	r3, #0
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3710      	adds	r7, #16
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	60b9      	str	r1, [r7, #8]
 80037ba:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80037bc:	e049      	b.n	8003852 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	695b      	ldr	r3, [r3, #20]
 80037c4:	f003 0310 	and.w	r3, r3, #16
 80037c8:	2b10      	cmp	r3, #16
 80037ca:	d119      	bne.n	8003800 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f06f 0210 	mvn.w	r2, #16
 80037d4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2200      	movs	r2, #0
 80037da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2220      	movs	r2, #32
 80037e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2200      	movs	r2, #0
 80037f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e030      	b.n	8003862 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003800:	f7fe fd1c 	bl	800223c <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	68ba      	ldr	r2, [r7, #8]
 800380c:	429a      	cmp	r2, r3
 800380e:	d302      	bcc.n	8003816 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d11d      	bne.n	8003852 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	695b      	ldr	r3, [r3, #20]
 800381c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003820:	2b40      	cmp	r3, #64	; 0x40
 8003822:	d016      	beq.n	8003852 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2200      	movs	r2, #0
 8003828:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2220      	movs	r2, #32
 800382e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2200      	movs	r2, #0
 8003836:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383e:	f043 0220 	orr.w	r2, r3, #32
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e007      	b.n	8003862 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	695b      	ldr	r3, [r3, #20]
 8003858:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800385c:	2b40      	cmp	r3, #64	; 0x40
 800385e:	d1ae      	bne.n	80037be <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	3710      	adds	r7, #16
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}

0800386a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800386a:	b480      	push	{r7}
 800386c:	b083      	sub	sp, #12
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	695b      	ldr	r3, [r3, #20]
 8003878:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800387c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003880:	d11b      	bne.n	80038ba <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800388a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2220      	movs	r2, #32
 8003896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a6:	f043 0204 	orr.w	r2, r3, #4
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e000      	b.n	80038bc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80038ba:	2300      	movs	r3, #0
}
 80038bc:	4618      	mov	r0, r3
 80038be:	370c      	adds	r7, #12
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bc80      	pop	{r7}
 80038c4:	4770      	bx	lr

080038c6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80038c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038c8:	b08b      	sub	sp, #44	; 0x2c
 80038ca:	af06      	add	r7, sp, #24
 80038cc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d101      	bne.n	80038d8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e0f1      	b.n	8003abc <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d106      	bne.n	80038f2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f007 fe31 	bl	800b554 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2203      	movs	r2, #3
 80038f6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4618      	mov	r0, r3
 8003900:	f003 f836 	bl	8006970 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	603b      	str	r3, [r7, #0]
 800390a:	687e      	ldr	r6, [r7, #4]
 800390c:	466d      	mov	r5, sp
 800390e:	f106 0410 	add.w	r4, r6, #16
 8003912:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003914:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003916:	6823      	ldr	r3, [r4, #0]
 8003918:	602b      	str	r3, [r5, #0]
 800391a:	1d33      	adds	r3, r6, #4
 800391c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800391e:	6838      	ldr	r0, [r7, #0]
 8003920:	f003 f800 	bl	8006924 <USB_CoreInit>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d005      	beq.n	8003936 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2202      	movs	r2, #2
 800392e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e0c2      	b.n	8003abc <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	2100      	movs	r1, #0
 800393c:	4618      	mov	r0, r3
 800393e:	f003 f831 	bl	80069a4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003942:	2300      	movs	r3, #0
 8003944:	73fb      	strb	r3, [r7, #15]
 8003946:	e040      	b.n	80039ca <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003948:	7bfb      	ldrb	r3, [r7, #15]
 800394a:	6879      	ldr	r1, [r7, #4]
 800394c:	1c5a      	adds	r2, r3, #1
 800394e:	4613      	mov	r3, r2
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	4413      	add	r3, r2
 8003954:	00db      	lsls	r3, r3, #3
 8003956:	440b      	add	r3, r1
 8003958:	3301      	adds	r3, #1
 800395a:	2201      	movs	r2, #1
 800395c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800395e:	7bfb      	ldrb	r3, [r7, #15]
 8003960:	6879      	ldr	r1, [r7, #4]
 8003962:	1c5a      	adds	r2, r3, #1
 8003964:	4613      	mov	r3, r2
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	4413      	add	r3, r2
 800396a:	00db      	lsls	r3, r3, #3
 800396c:	440b      	add	r3, r1
 800396e:	7bfa      	ldrb	r2, [r7, #15]
 8003970:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003972:	7bfb      	ldrb	r3, [r7, #15]
 8003974:	6879      	ldr	r1, [r7, #4]
 8003976:	1c5a      	adds	r2, r3, #1
 8003978:	4613      	mov	r3, r2
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	4413      	add	r3, r2
 800397e:	00db      	lsls	r3, r3, #3
 8003980:	440b      	add	r3, r1
 8003982:	3303      	adds	r3, #3
 8003984:	2200      	movs	r2, #0
 8003986:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003988:	7bfa      	ldrb	r2, [r7, #15]
 800398a:	6879      	ldr	r1, [r7, #4]
 800398c:	4613      	mov	r3, r2
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	4413      	add	r3, r2
 8003992:	00db      	lsls	r3, r3, #3
 8003994:	440b      	add	r3, r1
 8003996:	3338      	adds	r3, #56	; 0x38
 8003998:	2200      	movs	r2, #0
 800399a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800399c:	7bfa      	ldrb	r2, [r7, #15]
 800399e:	6879      	ldr	r1, [r7, #4]
 80039a0:	4613      	mov	r3, r2
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	4413      	add	r3, r2
 80039a6:	00db      	lsls	r3, r3, #3
 80039a8:	440b      	add	r3, r1
 80039aa:	333c      	adds	r3, #60	; 0x3c
 80039ac:	2200      	movs	r2, #0
 80039ae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80039b0:	7bfa      	ldrb	r2, [r7, #15]
 80039b2:	6879      	ldr	r1, [r7, #4]
 80039b4:	4613      	mov	r3, r2
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	4413      	add	r3, r2
 80039ba:	00db      	lsls	r3, r3, #3
 80039bc:	440b      	add	r3, r1
 80039be:	3340      	adds	r3, #64	; 0x40
 80039c0:	2200      	movs	r2, #0
 80039c2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039c4:	7bfb      	ldrb	r3, [r7, #15]
 80039c6:	3301      	adds	r3, #1
 80039c8:	73fb      	strb	r3, [r7, #15]
 80039ca:	7bfa      	ldrb	r2, [r7, #15]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d3b9      	bcc.n	8003948 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039d4:	2300      	movs	r3, #0
 80039d6:	73fb      	strb	r3, [r7, #15]
 80039d8:	e044      	b.n	8003a64 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80039da:	7bfa      	ldrb	r2, [r7, #15]
 80039dc:	6879      	ldr	r1, [r7, #4]
 80039de:	4613      	mov	r3, r2
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	4413      	add	r3, r2
 80039e4:	00db      	lsls	r3, r3, #3
 80039e6:	440b      	add	r3, r1
 80039e8:	f203 1369 	addw	r3, r3, #361	; 0x169
 80039ec:	2200      	movs	r2, #0
 80039ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80039f0:	7bfa      	ldrb	r2, [r7, #15]
 80039f2:	6879      	ldr	r1, [r7, #4]
 80039f4:	4613      	mov	r3, r2
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	4413      	add	r3, r2
 80039fa:	00db      	lsls	r3, r3, #3
 80039fc:	440b      	add	r3, r1
 80039fe:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003a02:	7bfa      	ldrb	r2, [r7, #15]
 8003a04:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003a06:	7bfa      	ldrb	r2, [r7, #15]
 8003a08:	6879      	ldr	r1, [r7, #4]
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	4413      	add	r3, r2
 8003a10:	00db      	lsls	r3, r3, #3
 8003a12:	440b      	add	r3, r1
 8003a14:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003a18:	2200      	movs	r2, #0
 8003a1a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003a1c:	7bfa      	ldrb	r2, [r7, #15]
 8003a1e:	6879      	ldr	r1, [r7, #4]
 8003a20:	4613      	mov	r3, r2
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	4413      	add	r3, r2
 8003a26:	00db      	lsls	r3, r3, #3
 8003a28:	440b      	add	r3, r1
 8003a2a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003a2e:	2200      	movs	r2, #0
 8003a30:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003a32:	7bfa      	ldrb	r2, [r7, #15]
 8003a34:	6879      	ldr	r1, [r7, #4]
 8003a36:	4613      	mov	r3, r2
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	4413      	add	r3, r2
 8003a3c:	00db      	lsls	r3, r3, #3
 8003a3e:	440b      	add	r3, r1
 8003a40:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003a44:	2200      	movs	r2, #0
 8003a46:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003a48:	7bfa      	ldrb	r2, [r7, #15]
 8003a4a:	6879      	ldr	r1, [r7, #4]
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	4413      	add	r3, r2
 8003a52:	00db      	lsls	r3, r3, #3
 8003a54:	440b      	add	r3, r1
 8003a56:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a5e:	7bfb      	ldrb	r3, [r7, #15]
 8003a60:	3301      	adds	r3, #1
 8003a62:	73fb      	strb	r3, [r7, #15]
 8003a64:	7bfa      	ldrb	r2, [r7, #15]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d3b5      	bcc.n	80039da <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	603b      	str	r3, [r7, #0]
 8003a74:	687e      	ldr	r6, [r7, #4]
 8003a76:	466d      	mov	r5, sp
 8003a78:	f106 0410 	add.w	r4, r6, #16
 8003a7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a80:	6823      	ldr	r3, [r4, #0]
 8003a82:	602b      	str	r3, [r5, #0]
 8003a84:	1d33      	adds	r3, r6, #4
 8003a86:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a88:	6838      	ldr	r0, [r7, #0]
 8003a8a:	f002 ff97 	bl	80069bc <USB_DevInit>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d005      	beq.n	8003aa0 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2202      	movs	r2, #2
 8003a98:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e00d      	b.n	8003abc <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f005 fa18 	bl	8008eea <USB_DevDisconnect>

  return HAL_OK;
 8003aba:	2300      	movs	r3, #0
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3714      	adds	r7, #20
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003ac4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b082      	sub	sp, #8
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d101      	bne.n	8003ada <HAL_PCD_Start+0x16>
 8003ad6:	2302      	movs	r3, #2
 8003ad8:	e016      	b.n	8003b08 <HAL_PCD_Start+0x44>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2201      	movs	r2, #1
 8003ade:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f002 ff2c 	bl	8006944 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8003aec:	2101      	movs	r1, #1
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f007 ffa3 	bl	800ba3a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4618      	mov	r0, r3
 8003afa:	f005 f9ec 	bl	8008ed6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003b06:	2300      	movs	r3, #0
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3708      	adds	r7, #8
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b088      	sub	sp, #32
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f005 f9ee 	bl	8008efe <USB_ReadInterrupts>
 8003b22:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d003      	beq.n	8003b36 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f000 fb1b 	bl	800416a <PCD_EP_ISR_Handler>

    return;
 8003b34:	e119      	b.n	8003d6a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003b36:	69bb      	ldr	r3, [r7, #24]
 8003b38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d013      	beq.n	8003b68 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003b48:	b29a      	uxth	r2, r3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b52:	b292      	uxth	r2, r2
 8003b54:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f007 fd76 	bl	800b64a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003b5e:	2100      	movs	r1, #0
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f000 f905 	bl	8003d70 <HAL_PCD_SetAddress>

    return;
 8003b66:	e100      	b.n	8003d6a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003b68:	69bb      	ldr	r3, [r7, #24]
 8003b6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d00c      	beq.n	8003b8c <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003b7a:	b29a      	uxth	r2, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003b84:	b292      	uxth	r2, r2
 8003b86:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003b8a:	e0ee      	b.n	8003d6a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003b8c:	69bb      	ldr	r3, [r7, #24]
 8003b8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00c      	beq.n	8003bb0 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003b9e:	b29a      	uxth	r2, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ba8:	b292      	uxth	r2, r2
 8003baa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003bae:	e0dc      	b.n	8003d6a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003bb0:	69bb      	ldr	r3, [r7, #24]
 8003bb2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d027      	beq.n	8003c0a <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003bc2:	b29a      	uxth	r2, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f022 0204 	bic.w	r2, r2, #4
 8003bcc:	b292      	uxth	r2, r2
 8003bce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003bda:	b29a      	uxth	r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f022 0208 	bic.w	r2, r2, #8
 8003be4:	b292      	uxth	r2, r2
 8003be6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f007 fd66 	bl	800b6bc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003bf8:	b29a      	uxth	r2, r3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003c02:	b292      	uxth	r2, r2
 8003c04:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003c08:	e0af      	b.n	8003d6a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	f000 8083 	beq.w	8003d1c <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8003c16:	2300      	movs	r3, #0
 8003c18:	77fb      	strb	r3, [r7, #31]
 8003c1a:	e010      	b.n	8003c3e <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	461a      	mov	r2, r3
 8003c22:	7ffb      	ldrb	r3, [r7, #31]
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	441a      	add	r2, r3
 8003c28:	7ffb      	ldrb	r3, [r7, #31]
 8003c2a:	8812      	ldrh	r2, [r2, #0]
 8003c2c:	b292      	uxth	r2, r2
 8003c2e:	005b      	lsls	r3, r3, #1
 8003c30:	3320      	adds	r3, #32
 8003c32:	443b      	add	r3, r7
 8003c34:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8003c38:	7ffb      	ldrb	r3, [r7, #31]
 8003c3a:	3301      	adds	r3, #1
 8003c3c:	77fb      	strb	r3, [r7, #31]
 8003c3e:	7ffb      	ldrb	r3, [r7, #31]
 8003c40:	2b07      	cmp	r3, #7
 8003c42:	d9eb      	bls.n	8003c1c <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003c4c:	b29a      	uxth	r2, r3
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f042 0201 	orr.w	r2, r2, #1
 8003c56:	b292      	uxth	r2, r2
 8003c58:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003c64:	b29a      	uxth	r2, r3
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f022 0201 	bic.w	r2, r2, #1
 8003c6e:	b292      	uxth	r2, r2
 8003c70:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8003c74:	bf00      	nop
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d0f6      	beq.n	8003c76 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003c90:	b29a      	uxth	r2, r3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c9a:	b292      	uxth	r2, r2
 8003c9c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	77fb      	strb	r3, [r7, #31]
 8003ca4:	e00f      	b.n	8003cc6 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8003ca6:	7ffb      	ldrb	r3, [r7, #31]
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	6812      	ldr	r2, [r2, #0]
 8003cac:	4611      	mov	r1, r2
 8003cae:	7ffa      	ldrb	r2, [r7, #31]
 8003cb0:	0092      	lsls	r2, r2, #2
 8003cb2:	440a      	add	r2, r1
 8003cb4:	005b      	lsls	r3, r3, #1
 8003cb6:	3320      	adds	r3, #32
 8003cb8:	443b      	add	r3, r7
 8003cba:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003cbe:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8003cc0:	7ffb      	ldrb	r3, [r7, #31]
 8003cc2:	3301      	adds	r3, #1
 8003cc4:	77fb      	strb	r3, [r7, #31]
 8003cc6:	7ffb      	ldrb	r3, [r7, #31]
 8003cc8:	2b07      	cmp	r3, #7
 8003cca:	d9ec      	bls.n	8003ca6 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003cd4:	b29a      	uxth	r2, r3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f042 0208 	orr.w	r2, r2, #8
 8003cde:	b292      	uxth	r2, r2
 8003ce0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003cec:	b29a      	uxth	r2, r3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cf6:	b292      	uxth	r2, r2
 8003cf8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003d04:	b29a      	uxth	r2, r3
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f042 0204 	orr.w	r2, r2, #4
 8003d0e:	b292      	uxth	r2, r2
 8003d10:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f007 fcb7 	bl	800b688 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003d1a:	e026      	b.n	8003d6a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d00f      	beq.n	8003d46 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003d2e:	b29a      	uxth	r2, r3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003d38:	b292      	uxth	r2, r2
 8003d3a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f007 fc75 	bl	800b62e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003d44:	e011      	b.n	8003d6a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003d46:	69bb      	ldr	r3, [r7, #24]
 8003d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d00c      	beq.n	8003d6a <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003d58:	b29a      	uxth	r2, r3
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d62:	b292      	uxth	r2, r2
 8003d64:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003d68:	bf00      	nop
  }
}
 8003d6a:	3720      	adds	r7, #32
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b082      	sub	sp, #8
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	460b      	mov	r3, r1
 8003d7a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d101      	bne.n	8003d8a <HAL_PCD_SetAddress+0x1a>
 8003d86:	2302      	movs	r3, #2
 8003d88:	e013      	b.n	8003db2 <HAL_PCD_SetAddress+0x42>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	78fa      	ldrb	r2, [r7, #3]
 8003d96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	78fa      	ldrb	r2, [r7, #3]
 8003da0:	4611      	mov	r1, r2
 8003da2:	4618      	mov	r0, r3
 8003da4:	f005 f884 	bl	8008eb0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003db0:	2300      	movs	r3, #0
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3708      	adds	r7, #8
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}

08003dba <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003dba:	b580      	push	{r7, lr}
 8003dbc:	b084      	sub	sp, #16
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	6078      	str	r0, [r7, #4]
 8003dc2:	4608      	mov	r0, r1
 8003dc4:	4611      	mov	r1, r2
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	4603      	mov	r3, r0
 8003dca:	70fb      	strb	r3, [r7, #3]
 8003dcc:	460b      	mov	r3, r1
 8003dce:	803b      	strh	r3, [r7, #0]
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003dd8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	da0e      	bge.n	8003dfe <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003de0:	78fb      	ldrb	r3, [r7, #3]
 8003de2:	f003 0307 	and.w	r3, r3, #7
 8003de6:	1c5a      	adds	r2, r3, #1
 8003de8:	4613      	mov	r3, r2
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	4413      	add	r3, r2
 8003dee:	00db      	lsls	r3, r3, #3
 8003df0:	687a      	ldr	r2, [r7, #4]
 8003df2:	4413      	add	r3, r2
 8003df4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2201      	movs	r2, #1
 8003dfa:	705a      	strb	r2, [r3, #1]
 8003dfc:	e00e      	b.n	8003e1c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003dfe:	78fb      	ldrb	r3, [r7, #3]
 8003e00:	f003 0207 	and.w	r2, r3, #7
 8003e04:	4613      	mov	r3, r2
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	4413      	add	r3, r2
 8003e0a:	00db      	lsls	r3, r3, #3
 8003e0c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	4413      	add	r3, r2
 8003e14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003e1c:	78fb      	ldrb	r3, [r7, #3]
 8003e1e:	f003 0307 	and.w	r3, r3, #7
 8003e22:	b2da      	uxtb	r2, r3
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003e28:	883a      	ldrh	r2, [r7, #0]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	78ba      	ldrb	r2, [r7, #2]
 8003e32:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003e34:	78bb      	ldrb	r3, [r7, #2]
 8003e36:	2b02      	cmp	r3, #2
 8003e38:	d102      	bne.n	8003e40 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d101      	bne.n	8003e4e <HAL_PCD_EP_Open+0x94>
 8003e4a:	2302      	movs	r3, #2
 8003e4c:	e00e      	b.n	8003e6c <HAL_PCD_EP_Open+0xb2>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2201      	movs	r2, #1
 8003e52:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68f9      	ldr	r1, [r7, #12]
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f002 fdcd 	bl	80069fc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8003e6a:	7afb      	ldrb	r3, [r7, #11]
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3710      	adds	r7, #16
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	460b      	mov	r3, r1
 8003e7e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003e80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	da0e      	bge.n	8003ea6 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e88:	78fb      	ldrb	r3, [r7, #3]
 8003e8a:	f003 0307 	and.w	r3, r3, #7
 8003e8e:	1c5a      	adds	r2, r3, #1
 8003e90:	4613      	mov	r3, r2
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	4413      	add	r3, r2
 8003e96:	00db      	lsls	r3, r3, #3
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	4413      	add	r3, r2
 8003e9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	705a      	strb	r2, [r3, #1]
 8003ea4:	e00e      	b.n	8003ec4 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ea6:	78fb      	ldrb	r3, [r7, #3]
 8003ea8:	f003 0207 	and.w	r2, r3, #7
 8003eac:	4613      	mov	r3, r2
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	4413      	add	r3, r2
 8003eb2:	00db      	lsls	r3, r3, #3
 8003eb4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	4413      	add	r3, r2
 8003ebc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ec4:	78fb      	ldrb	r3, [r7, #3]
 8003ec6:	f003 0307 	and.w	r3, r3, #7
 8003eca:	b2da      	uxtb	r2, r3
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d101      	bne.n	8003ede <HAL_PCD_EP_Close+0x6a>
 8003eda:	2302      	movs	r3, #2
 8003edc:	e00e      	b.n	8003efc <HAL_PCD_EP_Close+0x88>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	68f9      	ldr	r1, [r7, #12]
 8003eec:	4618      	mov	r0, r3
 8003eee:	f003 f945 	bl	800717c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8003efa:	2300      	movs	r3, #0
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3710      	adds	r7, #16
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b086      	sub	sp, #24
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	60f8      	str	r0, [r7, #12]
 8003f0c:	607a      	str	r2, [r7, #4]
 8003f0e:	603b      	str	r3, [r7, #0]
 8003f10:	460b      	mov	r3, r1
 8003f12:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f14:	7afb      	ldrb	r3, [r7, #11]
 8003f16:	f003 0207 	and.w	r2, r3, #7
 8003f1a:	4613      	mov	r3, r2
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	4413      	add	r3, r2
 8003f20:	00db      	lsls	r3, r3, #3
 8003f22:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003f26:	68fa      	ldr	r2, [r7, #12]
 8003f28:	4413      	add	r3, r2
 8003f2a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	683a      	ldr	r2, [r7, #0]
 8003f36:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	2200      	movs	r2, #0
 8003f42:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f44:	7afb      	ldrb	r3, [r7, #11]
 8003f46:	f003 0307 	and.w	r3, r3, #7
 8003f4a:	b2da      	uxtb	r2, r3
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	6979      	ldr	r1, [r7, #20]
 8003f56:	4618      	mov	r0, r3
 8003f58:	f003 fafc 	bl	8007554 <USB_EPStartXfer>

  return HAL_OK;
 8003f5c:	2300      	movs	r3, #0
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3718      	adds	r7, #24
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}

08003f66 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003f66:	b480      	push	{r7}
 8003f68:	b083      	sub	sp, #12
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	6078      	str	r0, [r7, #4]
 8003f6e:	460b      	mov	r3, r1
 8003f70:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003f72:	78fb      	ldrb	r3, [r7, #3]
 8003f74:	f003 0207 	and.w	r2, r3, #7
 8003f78:	6879      	ldr	r1, [r7, #4]
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	4413      	add	r3, r2
 8003f80:	00db      	lsls	r3, r3, #3
 8003f82:	440b      	add	r3, r1
 8003f84:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8003f88:	681b      	ldr	r3, [r3, #0]
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	370c      	adds	r7, #12
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bc80      	pop	{r7}
 8003f92:	4770      	bx	lr

08003f94 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b086      	sub	sp, #24
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	607a      	str	r2, [r7, #4]
 8003f9e:	603b      	str	r3, [r7, #0]
 8003fa0:	460b      	mov	r3, r1
 8003fa2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fa4:	7afb      	ldrb	r3, [r7, #11]
 8003fa6:	f003 0307 	and.w	r3, r3, #7
 8003faa:	1c5a      	adds	r2, r3, #1
 8003fac:	4613      	mov	r3, r2
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	4413      	add	r3, r2
 8003fb2:	00db      	lsls	r3, r3, #3
 8003fb4:	68fa      	ldr	r2, [r7, #12]
 8003fb6:	4413      	add	r3, r2
 8003fb8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	683a      	ldr	r2, [r7, #0]
 8003fc4:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	683a      	ldr	r2, [r7, #0]
 8003fd2:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	2201      	movs	r2, #1
 8003fde:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003fe0:	7afb      	ldrb	r3, [r7, #11]
 8003fe2:	f003 0307 	and.w	r3, r3, #7
 8003fe6:	b2da      	uxtb	r2, r3
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	6979      	ldr	r1, [r7, #20]
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f003 faae 	bl	8007554 <USB_EPStartXfer>

  return HAL_OK;
 8003ff8:	2300      	movs	r3, #0
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3718      	adds	r7, #24
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}

08004002 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004002:	b580      	push	{r7, lr}
 8004004:	b084      	sub	sp, #16
 8004006:	af00      	add	r7, sp, #0
 8004008:	6078      	str	r0, [r7, #4]
 800400a:	460b      	mov	r3, r1
 800400c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800400e:	78fb      	ldrb	r3, [r7, #3]
 8004010:	f003 0207 	and.w	r2, r3, #7
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	429a      	cmp	r2, r3
 800401a:	d901      	bls.n	8004020 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e04c      	b.n	80040ba <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004020:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004024:	2b00      	cmp	r3, #0
 8004026:	da0e      	bge.n	8004046 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004028:	78fb      	ldrb	r3, [r7, #3]
 800402a:	f003 0307 	and.w	r3, r3, #7
 800402e:	1c5a      	adds	r2, r3, #1
 8004030:	4613      	mov	r3, r2
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	4413      	add	r3, r2
 8004036:	00db      	lsls	r3, r3, #3
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	4413      	add	r3, r2
 800403c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2201      	movs	r2, #1
 8004042:	705a      	strb	r2, [r3, #1]
 8004044:	e00c      	b.n	8004060 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004046:	78fa      	ldrb	r2, [r7, #3]
 8004048:	4613      	mov	r3, r2
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	4413      	add	r3, r2
 800404e:	00db      	lsls	r3, r3, #3
 8004050:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	4413      	add	r3, r2
 8004058:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2200      	movs	r2, #0
 800405e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2201      	movs	r2, #1
 8004064:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004066:	78fb      	ldrb	r3, [r7, #3]
 8004068:	f003 0307 	and.w	r3, r3, #7
 800406c:	b2da      	uxtb	r2, r3
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004078:	2b01      	cmp	r3, #1
 800407a:	d101      	bne.n	8004080 <HAL_PCD_EP_SetStall+0x7e>
 800407c:	2302      	movs	r3, #2
 800407e:	e01c      	b.n	80040ba <HAL_PCD_EP_SetStall+0xb8>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	68f9      	ldr	r1, [r7, #12]
 800408e:	4618      	mov	r0, r3
 8004090:	f004 fe11 	bl	8008cb6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004094:	78fb      	ldrb	r3, [r7, #3]
 8004096:	f003 0307 	and.w	r3, r3, #7
 800409a:	2b00      	cmp	r3, #0
 800409c:	d108      	bne.n	80040b0 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80040a8:	4619      	mov	r1, r3
 80040aa:	4610      	mov	r0, r2
 80040ac:	f004 ff36 	bl	8008f1c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80040b8:	2300      	movs	r3, #0
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3710      	adds	r7, #16
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}

080040c2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040c2:	b580      	push	{r7, lr}
 80040c4:	b084      	sub	sp, #16
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
 80040ca:	460b      	mov	r3, r1
 80040cc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80040ce:	78fb      	ldrb	r3, [r7, #3]
 80040d0:	f003 020f 	and.w	r2, r3, #15
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	429a      	cmp	r2, r3
 80040da:	d901      	bls.n	80040e0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e040      	b.n	8004162 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80040e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	da0e      	bge.n	8004106 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040e8:	78fb      	ldrb	r3, [r7, #3]
 80040ea:	f003 0307 	and.w	r3, r3, #7
 80040ee:	1c5a      	adds	r2, r3, #1
 80040f0:	4613      	mov	r3, r2
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	4413      	add	r3, r2
 80040f6:	00db      	lsls	r3, r3, #3
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	4413      	add	r3, r2
 80040fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2201      	movs	r2, #1
 8004102:	705a      	strb	r2, [r3, #1]
 8004104:	e00e      	b.n	8004124 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004106:	78fb      	ldrb	r3, [r7, #3]
 8004108:	f003 0207 	and.w	r2, r3, #7
 800410c:	4613      	mov	r3, r2
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	4413      	add	r3, r2
 8004112:	00db      	lsls	r3, r3, #3
 8004114:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	4413      	add	r3, r2
 800411c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2200      	movs	r2, #0
 8004122:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2200      	movs	r2, #0
 8004128:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800412a:	78fb      	ldrb	r3, [r7, #3]
 800412c:	f003 0307 	and.w	r3, r3, #7
 8004130:	b2da      	uxtb	r2, r3
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800413c:	2b01      	cmp	r3, #1
 800413e:	d101      	bne.n	8004144 <HAL_PCD_EP_ClrStall+0x82>
 8004140:	2302      	movs	r3, #2
 8004142:	e00e      	b.n	8004162 <HAL_PCD_EP_ClrStall+0xa0>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2201      	movs	r2, #1
 8004148:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	68f9      	ldr	r1, [r7, #12]
 8004152:	4618      	mov	r0, r3
 8004154:	f004 fdff 	bl	8008d56 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2200      	movs	r2, #0
 800415c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004160:	2300      	movs	r3, #0
}
 8004162:	4618      	mov	r0, r3
 8004164:	3710      	adds	r7, #16
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}

0800416a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800416a:	b580      	push	{r7, lr}
 800416c:	b096      	sub	sp, #88	; 0x58
 800416e:	af00      	add	r7, sp, #0
 8004170:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004172:	e3bf      	b.n	80048f4 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800417c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004180:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004184:	b2db      	uxtb	r3, r3
 8004186:	f003 030f 	and.w	r3, r3, #15
 800418a:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 800418e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004192:	2b00      	cmp	r3, #0
 8004194:	f040 8179 	bne.w	800448a <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004198:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800419c:	f003 0310 	and.w	r3, r3, #16
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d152      	bne.n	800424a <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	881b      	ldrh	r3, [r3, #0]
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80041b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041b4:	81fb      	strh	r3, [r7, #14]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	89fb      	ldrh	r3, [r7, #14]
 80041bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	3328      	adds	r3, #40	; 0x28
 80041cc:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	461a      	mov	r2, r3
 80041da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041dc:	781b      	ldrb	r3, [r3, #0]
 80041de:	00db      	lsls	r3, r3, #3
 80041e0:	4413      	add	r3, r2
 80041e2:	3302      	adds	r3, #2
 80041e4:	005b      	lsls	r3, r3, #1
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	6812      	ldr	r2, [r2, #0]
 80041ea:	4413      	add	r3, r2
 80041ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80041f0:	881b      	ldrh	r3, [r3, #0]
 80041f2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80041f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041f8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80041fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041fc:	695a      	ldr	r2, [r3, #20]
 80041fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004200:	69db      	ldr	r3, [r3, #28]
 8004202:	441a      	add	r2, r3
 8004204:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004206:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004208:	2100      	movs	r1, #0
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f007 f9f5 	bl	800b5fa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004216:	b2db      	uxtb	r3, r3
 8004218:	2b00      	cmp	r3, #0
 800421a:	f000 836b 	beq.w	80048f4 <PCD_EP_ISR_Handler+0x78a>
 800421e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004220:	699b      	ldr	r3, [r3, #24]
 8004222:	2b00      	cmp	r3, #0
 8004224:	f040 8366 	bne.w	80048f4 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800422e:	b2db      	uxtb	r3, r3
 8004230:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004234:	b2da      	uxtb	r2, r3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	b292      	uxth	r2, r2
 800423c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004248:	e354      	b.n	80048f4 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004250:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	881b      	ldrh	r3, [r3, #0]
 8004258:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800425c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004260:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004264:	2b00      	cmp	r3, #0
 8004266:	d034      	beq.n	80042d2 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004270:	b29b      	uxth	r3, r3
 8004272:	461a      	mov	r2, r3
 8004274:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	00db      	lsls	r3, r3, #3
 800427a:	4413      	add	r3, r2
 800427c:	3306      	adds	r3, #6
 800427e:	005b      	lsls	r3, r3, #1
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	6812      	ldr	r2, [r2, #0]
 8004284:	4413      	add	r3, r2
 8004286:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800428a:	881b      	ldrh	r3, [r3, #0]
 800428c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004290:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004292:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6818      	ldr	r0, [r3, #0]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800429e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042a0:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80042a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042a4:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	f004 fe88 	bl	8008fbc <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	881b      	ldrh	r3, [r3, #0]
 80042b2:	b29a      	uxth	r2, r3
 80042b4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80042b8:	4013      	ands	r3, r2
 80042ba:	823b      	strh	r3, [r7, #16]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	8a3a      	ldrh	r2, [r7, #16]
 80042c2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80042c6:	b292      	uxth	r2, r2
 80042c8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f007 f968 	bl	800b5a0 <HAL_PCD_SetupStageCallback>
 80042d0:	e310      	b.n	80048f4 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80042d2:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	f280 830c 	bge.w	80048f4 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	881b      	ldrh	r3, [r3, #0]
 80042e2:	b29a      	uxth	r2, r3
 80042e4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80042e8:	4013      	ands	r3, r2
 80042ea:	83fb      	strh	r3, [r7, #30]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	8bfa      	ldrh	r2, [r7, #30]
 80042f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80042f6:	b292      	uxth	r2, r2
 80042f8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004302:	b29b      	uxth	r3, r3
 8004304:	461a      	mov	r2, r3
 8004306:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004308:	781b      	ldrb	r3, [r3, #0]
 800430a:	00db      	lsls	r3, r3, #3
 800430c:	4413      	add	r3, r2
 800430e:	3306      	adds	r3, #6
 8004310:	005b      	lsls	r3, r3, #1
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	6812      	ldr	r2, [r2, #0]
 8004316:	4413      	add	r3, r2
 8004318:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800431c:	881b      	ldrh	r3, [r3, #0]
 800431e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004322:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004324:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004326:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004328:	69db      	ldr	r3, [r3, #28]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d019      	beq.n	8004362 <PCD_EP_ISR_Handler+0x1f8>
 800432e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004330:	695b      	ldr	r3, [r3, #20]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d015      	beq.n	8004362 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6818      	ldr	r0, [r3, #0]
 800433a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800433c:	6959      	ldr	r1, [r3, #20]
 800433e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004340:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004342:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004344:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004346:	b29b      	uxth	r3, r3
 8004348:	f004 fe38 	bl	8008fbc <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800434c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800434e:	695a      	ldr	r2, [r3, #20]
 8004350:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004352:	69db      	ldr	r3, [r3, #28]
 8004354:	441a      	add	r2, r3
 8004356:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004358:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800435a:	2100      	movs	r1, #0
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f007 f931 	bl	800b5c4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	881b      	ldrh	r3, [r3, #0]
 8004368:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800436c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004370:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004374:	2b00      	cmp	r3, #0
 8004376:	f040 82bd 	bne.w	80048f4 <PCD_EP_ISR_Handler+0x78a>
 800437a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800437e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004382:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004386:	f000 82b5 	beq.w	80048f4 <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	61bb      	str	r3, [r7, #24]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004398:	b29b      	uxth	r3, r3
 800439a:	461a      	mov	r2, r3
 800439c:	69bb      	ldr	r3, [r7, #24]
 800439e:	4413      	add	r3, r2
 80043a0:	61bb      	str	r3, [r7, #24]
 80043a2:	69bb      	ldr	r3, [r7, #24]
 80043a4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80043a8:	617b      	str	r3, [r7, #20]
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	881b      	ldrh	r3, [r3, #0]
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043b4:	b29a      	uxth	r2, r3
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	801a      	strh	r2, [r3, #0]
 80043ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043bc:	691b      	ldr	r3, [r3, #16]
 80043be:	2b3e      	cmp	r3, #62	; 0x3e
 80043c0:	d91d      	bls.n	80043fe <PCD_EP_ISR_Handler+0x294>
 80043c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043c4:	691b      	ldr	r3, [r3, #16]
 80043c6:	095b      	lsrs	r3, r3, #5
 80043c8:	647b      	str	r3, [r7, #68]	; 0x44
 80043ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043cc:	691b      	ldr	r3, [r3, #16]
 80043ce:	f003 031f 	and.w	r3, r3, #31
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d102      	bne.n	80043dc <PCD_EP_ISR_Handler+0x272>
 80043d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043d8:	3b01      	subs	r3, #1
 80043da:	647b      	str	r3, [r7, #68]	; 0x44
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	881b      	ldrh	r3, [r3, #0]
 80043e0:	b29a      	uxth	r2, r3
 80043e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	029b      	lsls	r3, r3, #10
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	4313      	orrs	r3, r2
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043f6:	b29a      	uxth	r2, r3
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	801a      	strh	r2, [r3, #0]
 80043fc:	e026      	b.n	800444c <PCD_EP_ISR_Handler+0x2e2>
 80043fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d10a      	bne.n	800441c <PCD_EP_ISR_Handler+0x2b2>
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	881b      	ldrh	r3, [r3, #0]
 800440a:	b29b      	uxth	r3, r3
 800440c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004410:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004414:	b29a      	uxth	r2, r3
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	801a      	strh	r2, [r3, #0]
 800441a:	e017      	b.n	800444c <PCD_EP_ISR_Handler+0x2e2>
 800441c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800441e:	691b      	ldr	r3, [r3, #16]
 8004420:	085b      	lsrs	r3, r3, #1
 8004422:	647b      	str	r3, [r7, #68]	; 0x44
 8004424:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004426:	691b      	ldr	r3, [r3, #16]
 8004428:	f003 0301 	and.w	r3, r3, #1
 800442c:	2b00      	cmp	r3, #0
 800442e:	d002      	beq.n	8004436 <PCD_EP_ISR_Handler+0x2cc>
 8004430:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004432:	3301      	adds	r3, #1
 8004434:	647b      	str	r3, [r7, #68]	; 0x44
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	881b      	ldrh	r3, [r3, #0]
 800443a:	b29a      	uxth	r2, r3
 800443c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800443e:	b29b      	uxth	r3, r3
 8004440:	029b      	lsls	r3, r3, #10
 8004442:	b29b      	uxth	r3, r3
 8004444:	4313      	orrs	r3, r2
 8004446:	b29a      	uxth	r2, r3
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	881b      	ldrh	r3, [r3, #0]
 8004452:	b29b      	uxth	r3, r3
 8004454:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004458:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800445c:	827b      	strh	r3, [r7, #18]
 800445e:	8a7b      	ldrh	r3, [r7, #18]
 8004460:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004464:	827b      	strh	r3, [r7, #18]
 8004466:	8a7b      	ldrh	r3, [r7, #18]
 8004468:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800446c:	827b      	strh	r3, [r7, #18]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	8a7b      	ldrh	r3, [r7, #18]
 8004474:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004478:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800447c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004480:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004484:	b29b      	uxth	r3, r3
 8004486:	8013      	strh	r3, [r2, #0]
 8004488:	e234      	b.n	80048f4 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	461a      	mov	r2, r3
 8004490:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	4413      	add	r3, r2
 8004498:	881b      	ldrh	r3, [r3, #0]
 800449a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800449e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	f280 80fc 	bge.w	80046a0 <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	461a      	mov	r2, r3
 80044ae:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	4413      	add	r3, r2
 80044b6:	881b      	ldrh	r3, [r3, #0]
 80044b8:	b29a      	uxth	r2, r3
 80044ba:	f640 738f 	movw	r3, #3983	; 0xf8f
 80044be:	4013      	ands	r3, r2
 80044c0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	461a      	mov	r2, r3
 80044ca:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	4413      	add	r3, r2
 80044d2:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80044d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80044da:	b292      	uxth	r2, r2
 80044dc:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80044de:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80044e2:	4613      	mov	r3, r2
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	4413      	add	r3, r2
 80044e8:	00db      	lsls	r3, r3, #3
 80044ea:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	4413      	add	r3, r2
 80044f2:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80044f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044f6:	7b1b      	ldrb	r3, [r3, #12]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d125      	bne.n	8004548 <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004504:	b29b      	uxth	r3, r3
 8004506:	461a      	mov	r2, r3
 8004508:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	00db      	lsls	r3, r3, #3
 800450e:	4413      	add	r3, r2
 8004510:	3306      	adds	r3, #6
 8004512:	005b      	lsls	r3, r3, #1
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	6812      	ldr	r2, [r2, #0]
 8004518:	4413      	add	r3, r2
 800451a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800451e:	881b      	ldrh	r3, [r3, #0]
 8004520:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004524:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8004528:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800452c:	2b00      	cmp	r3, #0
 800452e:	f000 8092 	beq.w	8004656 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6818      	ldr	r0, [r3, #0]
 8004536:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004538:	6959      	ldr	r1, [r3, #20]
 800453a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800453c:	88da      	ldrh	r2, [r3, #6]
 800453e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004542:	f004 fd3b 	bl	8008fbc <USB_ReadPMA>
 8004546:	e086      	b.n	8004656 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004548:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800454a:	78db      	ldrb	r3, [r3, #3]
 800454c:	2b02      	cmp	r3, #2
 800454e:	d10a      	bne.n	8004566 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004550:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004554:	461a      	mov	r2, r3
 8004556:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f000 f9d9 	bl	8004910 <HAL_PCD_EP_DB_Receive>
 800455e:	4603      	mov	r3, r0
 8004560:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8004564:	e077      	b.n	8004656 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	461a      	mov	r2, r3
 800456c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	4413      	add	r3, r2
 8004574:	881b      	ldrh	r3, [r3, #0]
 8004576:	b29b      	uxth	r3, r3
 8004578:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800457c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004580:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	461a      	mov	r2, r3
 800458a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	441a      	add	r2, r3
 8004592:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8004596:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800459a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800459e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045a2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	461a      	mov	r2, r3
 80045b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045b2:	781b      	ldrb	r3, [r3, #0]
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	4413      	add	r3, r2
 80045b8:	881b      	ldrh	r3, [r3, #0]
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d024      	beq.n	800460e <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	461a      	mov	r2, r3
 80045d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	00db      	lsls	r3, r3, #3
 80045d6:	4413      	add	r3, r2
 80045d8:	3302      	adds	r3, #2
 80045da:	005b      	lsls	r3, r3, #1
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	6812      	ldr	r2, [r2, #0]
 80045e0:	4413      	add	r3, r2
 80045e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80045e6:	881b      	ldrh	r3, [r3, #0]
 80045e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045ec:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80045f0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d02e      	beq.n	8004656 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6818      	ldr	r0, [r3, #0]
 80045fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045fe:	6959      	ldr	r1, [r3, #20]
 8004600:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004602:	891a      	ldrh	r2, [r3, #8]
 8004604:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004608:	f004 fcd8 	bl	8008fbc <USB_ReadPMA>
 800460c:	e023      	b.n	8004656 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004616:	b29b      	uxth	r3, r3
 8004618:	461a      	mov	r2, r3
 800461a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800461c:	781b      	ldrb	r3, [r3, #0]
 800461e:	00db      	lsls	r3, r3, #3
 8004620:	4413      	add	r3, r2
 8004622:	3306      	adds	r3, #6
 8004624:	005b      	lsls	r3, r3, #1
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	6812      	ldr	r2, [r2, #0]
 800462a:	4413      	add	r3, r2
 800462c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004630:	881b      	ldrh	r3, [r3, #0]
 8004632:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004636:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800463a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800463e:	2b00      	cmp	r3, #0
 8004640:	d009      	beq.n	8004656 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6818      	ldr	r0, [r3, #0]
 8004646:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004648:	6959      	ldr	r1, [r3, #20]
 800464a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800464c:	895a      	ldrh	r2, [r3, #10]
 800464e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004652:	f004 fcb3 	bl	8008fbc <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004656:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004658:	69da      	ldr	r2, [r3, #28]
 800465a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800465e:	441a      	add	r2, r3
 8004660:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004662:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004664:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004666:	695a      	ldr	r2, [r3, #20]
 8004668:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800466c:	441a      	add	r2, r3
 800466e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004670:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004672:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004674:	699b      	ldr	r3, [r3, #24]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d005      	beq.n	8004686 <PCD_EP_ISR_Handler+0x51c>
 800467a:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800467e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	429a      	cmp	r2, r3
 8004684:	d206      	bcs.n	8004694 <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004686:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004688:	781b      	ldrb	r3, [r3, #0]
 800468a:	4619      	mov	r1, r3
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f006 ff99 	bl	800b5c4 <HAL_PCD_DataOutStageCallback>
 8004692:	e005      	b.n	80046a0 <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800469a:	4618      	mov	r0, r3
 800469c:	f002 ff5a 	bl	8007554 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80046a0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80046a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	f000 8123 	beq.w	80048f4 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 80046ae:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80046b2:	1c5a      	adds	r2, r3, #1
 80046b4:	4613      	mov	r3, r2
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	4413      	add	r3, r2
 80046ba:	00db      	lsls	r3, r3, #3
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	4413      	add	r3, r2
 80046c0:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	461a      	mov	r2, r3
 80046c8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	4413      	add	r3, r2
 80046d0:	881b      	ldrh	r3, [r3, #0]
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80046d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046dc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	461a      	mov	r2, r3
 80046e6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	441a      	add	r2, r3
 80046ee:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80046f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80046fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004700:	78db      	ldrb	r3, [r3, #3]
 8004702:	2b01      	cmp	r3, #1
 8004704:	f040 80a2 	bne.w	800484c <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 8004708:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800470a:	2200      	movs	r2, #0
 800470c:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800470e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004710:	7b1b      	ldrb	r3, [r3, #12]
 8004712:	2b00      	cmp	r3, #0
 8004714:	f000 8093 	beq.w	800483e <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004718:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800471c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004720:	2b00      	cmp	r3, #0
 8004722:	d046      	beq.n	80047b2 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004724:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004726:	785b      	ldrb	r3, [r3, #1]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d126      	bne.n	800477a <PCD_EP_ISR_Handler+0x610>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	627b      	str	r3, [r7, #36]	; 0x24
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800473a:	b29b      	uxth	r3, r3
 800473c:	461a      	mov	r2, r3
 800473e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004740:	4413      	add	r3, r2
 8004742:	627b      	str	r3, [r7, #36]	; 0x24
 8004744:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004746:	781b      	ldrb	r3, [r3, #0]
 8004748:	011a      	lsls	r2, r3, #4
 800474a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474c:	4413      	add	r3, r2
 800474e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004752:	623b      	str	r3, [r7, #32]
 8004754:	6a3b      	ldr	r3, [r7, #32]
 8004756:	881b      	ldrh	r3, [r3, #0]
 8004758:	b29b      	uxth	r3, r3
 800475a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800475e:	b29a      	uxth	r2, r3
 8004760:	6a3b      	ldr	r3, [r7, #32]
 8004762:	801a      	strh	r2, [r3, #0]
 8004764:	6a3b      	ldr	r3, [r7, #32]
 8004766:	881b      	ldrh	r3, [r3, #0]
 8004768:	b29b      	uxth	r3, r3
 800476a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800476e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004772:	b29a      	uxth	r2, r3
 8004774:	6a3b      	ldr	r3, [r7, #32]
 8004776:	801a      	strh	r2, [r3, #0]
 8004778:	e061      	b.n	800483e <PCD_EP_ISR_Handler+0x6d4>
 800477a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800477c:	785b      	ldrb	r3, [r3, #1]
 800477e:	2b01      	cmp	r3, #1
 8004780:	d15d      	bne.n	800483e <PCD_EP_ISR_Handler+0x6d4>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004790:	b29b      	uxth	r3, r3
 8004792:	461a      	mov	r2, r3
 8004794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004796:	4413      	add	r3, r2
 8004798:	62fb      	str	r3, [r7, #44]	; 0x2c
 800479a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	011a      	lsls	r2, r3, #4
 80047a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047a2:	4413      	add	r3, r2
 80047a4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80047a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80047aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ac:	2200      	movs	r2, #0
 80047ae:	801a      	strh	r2, [r3, #0]
 80047b0:	e045      	b.n	800483e <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047ba:	785b      	ldrb	r3, [r3, #1]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d126      	bne.n	800480e <PCD_EP_ISR_Handler+0x6a4>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	637b      	str	r3, [r7, #52]	; 0x34
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	461a      	mov	r2, r3
 80047d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047d4:	4413      	add	r3, r2
 80047d6:	637b      	str	r3, [r7, #52]	; 0x34
 80047d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047da:	781b      	ldrb	r3, [r3, #0]
 80047dc:	011a      	lsls	r2, r3, #4
 80047de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047e0:	4413      	add	r3, r2
 80047e2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80047e6:	633b      	str	r3, [r7, #48]	; 0x30
 80047e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ea:	881b      	ldrh	r3, [r3, #0]
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047f2:	b29a      	uxth	r2, r3
 80047f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f6:	801a      	strh	r2, [r3, #0]
 80047f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047fa:	881b      	ldrh	r3, [r3, #0]
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004802:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004806:	b29a      	uxth	r2, r3
 8004808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800480a:	801a      	strh	r2, [r3, #0]
 800480c:	e017      	b.n	800483e <PCD_EP_ISR_Handler+0x6d4>
 800480e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004810:	785b      	ldrb	r3, [r3, #1]
 8004812:	2b01      	cmp	r3, #1
 8004814:	d113      	bne.n	800483e <PCD_EP_ISR_Handler+0x6d4>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800481e:	b29b      	uxth	r3, r3
 8004820:	461a      	mov	r2, r3
 8004822:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004824:	4413      	add	r3, r2
 8004826:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004828:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800482a:	781b      	ldrb	r3, [r3, #0]
 800482c:	011a      	lsls	r2, r3, #4
 800482e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004830:	4413      	add	r3, r2
 8004832:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004836:	63bb      	str	r3, [r7, #56]	; 0x38
 8004838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800483a:	2200      	movs	r2, #0
 800483c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800483e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004840:	781b      	ldrb	r3, [r3, #0]
 8004842:	4619      	mov	r1, r3
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f006 fed8 	bl	800b5fa <HAL_PCD_DataInStageCallback>
 800484a:	e053      	b.n	80048f4 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800484c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004854:	2b00      	cmp	r3, #0
 8004856:	d146      	bne.n	80048e6 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004860:	b29b      	uxth	r3, r3
 8004862:	461a      	mov	r2, r3
 8004864:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004866:	781b      	ldrb	r3, [r3, #0]
 8004868:	00db      	lsls	r3, r3, #3
 800486a:	4413      	add	r3, r2
 800486c:	3302      	adds	r3, #2
 800486e:	005b      	lsls	r3, r3, #1
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	6812      	ldr	r2, [r2, #0]
 8004874:	4413      	add	r3, r2
 8004876:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800487a:	881b      	ldrh	r3, [r3, #0]
 800487c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004880:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8004884:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004886:	699a      	ldr	r2, [r3, #24]
 8004888:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800488c:	429a      	cmp	r2, r3
 800488e:	d907      	bls.n	80048a0 <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 8004890:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004892:	699a      	ldr	r2, [r3, #24]
 8004894:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004898:	1ad2      	subs	r2, r2, r3
 800489a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800489c:	619a      	str	r2, [r3, #24]
 800489e:	e002      	b.n	80048a6 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 80048a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048a2:	2200      	movs	r2, #0
 80048a4:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80048a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048a8:	699b      	ldr	r3, [r3, #24]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d106      	bne.n	80048bc <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80048ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048b0:	781b      	ldrb	r3, [r3, #0]
 80048b2:	4619      	mov	r1, r3
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f006 fea0 	bl	800b5fa <HAL_PCD_DataInStageCallback>
 80048ba:	e01b      	b.n	80048f4 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80048bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048be:	695a      	ldr	r2, [r3, #20]
 80048c0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80048c4:	441a      	add	r2, r3
 80048c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048c8:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80048ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048cc:	69da      	ldr	r2, [r3, #28]
 80048ce:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80048d2:	441a      	add	r2, r3
 80048d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048d6:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80048de:	4618      	mov	r0, r3
 80048e0:	f002 fe38 	bl	8007554 <USB_EPStartXfer>
 80048e4:	e006      	b.n	80048f4 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80048e6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80048ea:	461a      	mov	r2, r3
 80048ec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 f91b 	bl	8004b2a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	b21b      	sxth	r3, r3
 8004900:	2b00      	cmp	r3, #0
 8004902:	f6ff ac37 	blt.w	8004174 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004906:	2300      	movs	r3, #0
}
 8004908:	4618      	mov	r0, r3
 800490a:	3758      	adds	r7, #88	; 0x58
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}

08004910 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b088      	sub	sp, #32
 8004914:	af00      	add	r7, sp, #0
 8004916:	60f8      	str	r0, [r7, #12]
 8004918:	60b9      	str	r1, [r7, #8]
 800491a:	4613      	mov	r3, r2
 800491c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800491e:	88fb      	ldrh	r3, [r7, #6]
 8004920:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004924:	2b00      	cmp	r3, #0
 8004926:	d07e      	beq.n	8004a26 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004930:	b29b      	uxth	r3, r3
 8004932:	461a      	mov	r2, r3
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	781b      	ldrb	r3, [r3, #0]
 8004938:	00db      	lsls	r3, r3, #3
 800493a:	4413      	add	r3, r2
 800493c:	3302      	adds	r3, #2
 800493e:	005b      	lsls	r3, r3, #1
 8004940:	68fa      	ldr	r2, [r7, #12]
 8004942:	6812      	ldr	r2, [r2, #0]
 8004944:	4413      	add	r3, r2
 8004946:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800494a:	881b      	ldrh	r3, [r3, #0]
 800494c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004950:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	699a      	ldr	r2, [r3, #24]
 8004956:	8b7b      	ldrh	r3, [r7, #26]
 8004958:	429a      	cmp	r2, r3
 800495a:	d306      	bcc.n	800496a <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	699a      	ldr	r2, [r3, #24]
 8004960:	8b7b      	ldrh	r3, [r7, #26]
 8004962:	1ad2      	subs	r2, r2, r3
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	619a      	str	r2, [r3, #24]
 8004968:	e002      	b.n	8004970 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	2200      	movs	r2, #0
 800496e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	699b      	ldr	r3, [r3, #24]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d123      	bne.n	80049c0 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	461a      	mov	r2, r3
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	781b      	ldrb	r3, [r3, #0]
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	4413      	add	r3, r2
 8004986:	881b      	ldrh	r3, [r3, #0]
 8004988:	b29b      	uxth	r3, r3
 800498a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800498e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004992:	833b      	strh	r3, [r7, #24]
 8004994:	8b3b      	ldrh	r3, [r7, #24]
 8004996:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800499a:	833b      	strh	r3, [r7, #24]
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	461a      	mov	r2, r3
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	781b      	ldrb	r3, [r3, #0]
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	441a      	add	r2, r3
 80049aa:	8b3b      	ldrh	r3, [r7, #24]
 80049ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049bc:	b29b      	uxth	r3, r3
 80049be:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80049c0:	88fb      	ldrh	r3, [r7, #6]
 80049c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d01f      	beq.n	8004a0a <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	461a      	mov	r2, r3
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	781b      	ldrb	r3, [r3, #0]
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	4413      	add	r3, r2
 80049d8:	881b      	ldrh	r3, [r3, #0]
 80049da:	b29b      	uxth	r3, r3
 80049dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049e4:	82fb      	strh	r3, [r7, #22]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	461a      	mov	r2, r3
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	781b      	ldrb	r3, [r3, #0]
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	441a      	add	r2, r3
 80049f4:	8afb      	ldrh	r3, [r7, #22]
 80049f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a02:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004a0a:	8b7b      	ldrh	r3, [r7, #26]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	f000 8087 	beq.w	8004b20 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	6818      	ldr	r0, [r3, #0]
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	6959      	ldr	r1, [r3, #20]
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	891a      	ldrh	r2, [r3, #8]
 8004a1e:	8b7b      	ldrh	r3, [r7, #26]
 8004a20:	f004 facc 	bl	8008fbc <USB_ReadPMA>
 8004a24:	e07c      	b.n	8004b20 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	461a      	mov	r2, r3
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	781b      	ldrb	r3, [r3, #0]
 8004a36:	00db      	lsls	r3, r3, #3
 8004a38:	4413      	add	r3, r2
 8004a3a:	3306      	adds	r3, #6
 8004a3c:	005b      	lsls	r3, r3, #1
 8004a3e:	68fa      	ldr	r2, [r7, #12]
 8004a40:	6812      	ldr	r2, [r2, #0]
 8004a42:	4413      	add	r3, r2
 8004a44:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a48:	881b      	ldrh	r3, [r3, #0]
 8004a4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a4e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	699a      	ldr	r2, [r3, #24]
 8004a54:	8b7b      	ldrh	r3, [r7, #26]
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d306      	bcc.n	8004a68 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	699a      	ldr	r2, [r3, #24]
 8004a5e:	8b7b      	ldrh	r3, [r7, #26]
 8004a60:	1ad2      	subs	r2, r2, r3
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	619a      	str	r2, [r3, #24]
 8004a66:	e002      	b.n	8004a6e <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	699b      	ldr	r3, [r3, #24]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d123      	bne.n	8004abe <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	781b      	ldrb	r3, [r3, #0]
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	4413      	add	r3, r2
 8004a84:	881b      	ldrh	r3, [r3, #0]
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a90:	83fb      	strh	r3, [r7, #30]
 8004a92:	8bfb      	ldrh	r3, [r7, #30]
 8004a94:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004a98:	83fb      	strh	r3, [r7, #30]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	781b      	ldrb	r3, [r3, #0]
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	441a      	add	r2, r3
 8004aa8:	8bfb      	ldrh	r3, [r7, #30]
 8004aaa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004aae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ab2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ab6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004abe:	88fb      	ldrh	r3, [r7, #6]
 8004ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d11f      	bne.n	8004b08 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	461a      	mov	r2, r3
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	781b      	ldrb	r3, [r3, #0]
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	4413      	add	r3, r2
 8004ad6:	881b      	ldrh	r3, [r3, #0]
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ae2:	83bb      	strh	r3, [r7, #28]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	461a      	mov	r2, r3
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	781b      	ldrb	r3, [r3, #0]
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	441a      	add	r2, r3
 8004af2:	8bbb      	ldrh	r3, [r7, #28]
 8004af4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004af8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004afc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b00:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b04:	b29b      	uxth	r3, r3
 8004b06:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004b08:	8b7b      	ldrh	r3, [r7, #26]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d008      	beq.n	8004b20 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	6818      	ldr	r0, [r3, #0]
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	6959      	ldr	r1, [r3, #20]
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	895a      	ldrh	r2, [r3, #10]
 8004b1a:	8b7b      	ldrh	r3, [r7, #26]
 8004b1c:	f004 fa4e 	bl	8008fbc <USB_ReadPMA>
    }
  }

  return count;
 8004b20:	8b7b      	ldrh	r3, [r7, #26]
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3720      	adds	r7, #32
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}

08004b2a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004b2a:	b580      	push	{r7, lr}
 8004b2c:	b0a4      	sub	sp, #144	; 0x90
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	60f8      	str	r0, [r7, #12]
 8004b32:	60b9      	str	r1, [r7, #8]
 8004b34:	4613      	mov	r3, r2
 8004b36:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004b38:	88fb      	ldrh	r3, [r7, #6]
 8004b3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	f000 81dd 	beq.w	8004efe <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	461a      	mov	r2, r3
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	00db      	lsls	r3, r3, #3
 8004b56:	4413      	add	r3, r2
 8004b58:	3302      	adds	r3, #2
 8004b5a:	005b      	lsls	r3, r3, #1
 8004b5c:	68fa      	ldr	r2, [r7, #12]
 8004b5e:	6812      	ldr	r2, [r2, #0]
 8004b60:	4413      	add	r3, r2
 8004b62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b66:	881b      	ldrh	r3, [r3, #0]
 8004b68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b6c:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	699a      	ldr	r2, [r3, #24]
 8004b74:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d907      	bls.n	8004b8c <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	699a      	ldr	r2, [r3, #24]
 8004b80:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004b84:	1ad2      	subs	r2, r2, r3
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	619a      	str	r2, [r3, #24]
 8004b8a:	e002      	b.n	8004b92 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	699b      	ldr	r3, [r3, #24]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	f040 80b9 	bne.w	8004d0e <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	785b      	ldrb	r3, [r3, #1]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d126      	bne.n	8004bf2 <HAL_PCD_EP_DB_Transmit+0xc8>
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bb8:	4413      	add	r3, r2
 8004bba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	781b      	ldrb	r3, [r3, #0]
 8004bc0:	011a      	lsls	r2, r3, #4
 8004bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bc4:	4413      	add	r3, r2
 8004bc6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004bca:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bce:	881b      	ldrh	r3, [r3, #0]
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004bd6:	b29a      	uxth	r2, r3
 8004bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bda:	801a      	strh	r2, [r3, #0]
 8004bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bde:	881b      	ldrh	r3, [r3, #0]
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004be6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bea:	b29a      	uxth	r2, r3
 8004bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bee:	801a      	strh	r2, [r3, #0]
 8004bf0:	e01a      	b.n	8004c28 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	785b      	ldrb	r3, [r3, #1]
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d116      	bne.n	8004c28 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	637b      	str	r3, [r7, #52]	; 0x34
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c0e:	4413      	add	r3, r2
 8004c10:	637b      	str	r3, [r7, #52]	; 0x34
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	781b      	ldrb	r3, [r3, #0]
 8004c16:	011a      	lsls	r2, r3, #4
 8004c18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c1a:	4413      	add	r3, r2
 8004c1c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004c20:	633b      	str	r3, [r7, #48]	; 0x30
 8004c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c24:	2200      	movs	r2, #0
 8004c26:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	627b      	str	r3, [r7, #36]	; 0x24
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	785b      	ldrb	r3, [r3, #1]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d126      	bne.n	8004c84 <HAL_PCD_EP_DB_Transmit+0x15a>
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	61fb      	str	r3, [r7, #28]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c44:	b29b      	uxth	r3, r3
 8004c46:	461a      	mov	r2, r3
 8004c48:	69fb      	ldr	r3, [r7, #28]
 8004c4a:	4413      	add	r3, r2
 8004c4c:	61fb      	str	r3, [r7, #28]
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	781b      	ldrb	r3, [r3, #0]
 8004c52:	011a      	lsls	r2, r3, #4
 8004c54:	69fb      	ldr	r3, [r7, #28]
 8004c56:	4413      	add	r3, r2
 8004c58:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004c5c:	61bb      	str	r3, [r7, #24]
 8004c5e:	69bb      	ldr	r3, [r7, #24]
 8004c60:	881b      	ldrh	r3, [r3, #0]
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c68:	b29a      	uxth	r2, r3
 8004c6a:	69bb      	ldr	r3, [r7, #24]
 8004c6c:	801a      	strh	r2, [r3, #0]
 8004c6e:	69bb      	ldr	r3, [r7, #24]
 8004c70:	881b      	ldrh	r3, [r3, #0]
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c7c:	b29a      	uxth	r2, r3
 8004c7e:	69bb      	ldr	r3, [r7, #24]
 8004c80:	801a      	strh	r2, [r3, #0]
 8004c82:	e017      	b.n	8004cb4 <HAL_PCD_EP_DB_Transmit+0x18a>
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	785b      	ldrb	r3, [r3, #1]
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d113      	bne.n	8004cb4 <HAL_PCD_EP_DB_Transmit+0x18a>
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	461a      	mov	r2, r3
 8004c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9a:	4413      	add	r3, r2
 8004c9c:	627b      	str	r3, [r7, #36]	; 0x24
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	781b      	ldrb	r3, [r3, #0]
 8004ca2:	011a      	lsls	r2, r3, #4
 8004ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca6:	4413      	add	r3, r2
 8004ca8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004cac:	623b      	str	r3, [r7, #32]
 8004cae:	6a3b      	ldr	r3, [r7, #32]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	781b      	ldrb	r3, [r3, #0]
 8004cb8:	4619      	mov	r1, r3
 8004cba:	68f8      	ldr	r0, [r7, #12]
 8004cbc:	f006 fc9d 	bl	800b5fa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004cc0:	88fb      	ldrh	r3, [r7, #6]
 8004cc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	f000 82fc 	beq.w	80052c4 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	461a      	mov	r2, r3
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	781b      	ldrb	r3, [r3, #0]
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	4413      	add	r3, r2
 8004cda:	881b      	ldrh	r3, [r3, #0]
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ce2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ce6:	82fb      	strh	r3, [r7, #22]
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	461a      	mov	r2, r3
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	441a      	add	r2, r3
 8004cf6:	8afb      	ldrh	r3, [r7, #22]
 8004cf8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cfc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d00:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	8013      	strh	r3, [r2, #0]
 8004d0c:	e2da      	b.n	80052c4 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004d0e:	88fb      	ldrh	r3, [r7, #6]
 8004d10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d021      	beq.n	8004d5c <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	781b      	ldrb	r3, [r3, #0]
 8004d22:	009b      	lsls	r3, r3, #2
 8004d24:	4413      	add	r3, r2
 8004d26:	881b      	ldrh	r3, [r3, #0]
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d32:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	441a      	add	r2, r3
 8004d44:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004d48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	f040 82ae 	bne.w	80052c4 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	695a      	ldr	r2, [r3, #20]
 8004d6c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004d70:	441a      	add	r2, r3
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	69da      	ldr	r2, [r3, #28]
 8004d7a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004d7e:	441a      	add	r2, r3
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	6a1a      	ldr	r2, [r3, #32]
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	691b      	ldr	r3, [r3, #16]
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d30b      	bcc.n	8004da8 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	691b      	ldr	r3, [r3, #16]
 8004d94:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	6a1a      	ldr	r2, [r3, #32]
 8004d9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004da0:	1ad2      	subs	r2, r2, r3
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	621a      	str	r2, [r3, #32]
 8004da6:	e017      	b.n	8004dd8 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	6a1b      	ldr	r3, [r3, #32]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d108      	bne.n	8004dc2 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8004db0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004db4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004dc0:	e00a      	b.n	8004dd8 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	6a1b      	ldr	r3, [r3, #32]
 8004dce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	785b      	ldrb	r3, [r3, #1]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d165      	bne.n	8004eac <HAL_PCD_EP_DB_Transmit+0x382>
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	461a      	mov	r2, r3
 8004df2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004df4:	4413      	add	r3, r2
 8004df6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	781b      	ldrb	r3, [r3, #0]
 8004dfc:	011a      	lsls	r2, r3, #4
 8004dfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e00:	4413      	add	r3, r2
 8004e02:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004e06:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e0a:	881b      	ldrh	r3, [r3, #0]
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e12:	b29a      	uxth	r2, r3
 8004e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e16:	801a      	strh	r2, [r3, #0]
 8004e18:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e1c:	2b3e      	cmp	r3, #62	; 0x3e
 8004e1e:	d91d      	bls.n	8004e5c <HAL_PCD_EP_DB_Transmit+0x332>
 8004e20:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e24:	095b      	lsrs	r3, r3, #5
 8004e26:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e28:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e2c:	f003 031f 	and.w	r3, r3, #31
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d102      	bne.n	8004e3a <HAL_PCD_EP_DB_Transmit+0x310>
 8004e34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e36:	3b01      	subs	r3, #1
 8004e38:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e3c:	881b      	ldrh	r3, [r3, #0]
 8004e3e:	b29a      	uxth	r2, r3
 8004e40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	029b      	lsls	r3, r3, #10
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e54:	b29a      	uxth	r2, r3
 8004e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e58:	801a      	strh	r2, [r3, #0]
 8004e5a:	e044      	b.n	8004ee6 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004e5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d10a      	bne.n	8004e7a <HAL_PCD_EP_DB_Transmit+0x350>
 8004e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e66:	881b      	ldrh	r3, [r3, #0]
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e72:	b29a      	uxth	r2, r3
 8004e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e76:	801a      	strh	r2, [r3, #0]
 8004e78:	e035      	b.n	8004ee6 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004e7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e7e:	085b      	lsrs	r3, r3, #1
 8004e80:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e82:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e86:	f003 0301 	and.w	r3, r3, #1
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d002      	beq.n	8004e94 <HAL_PCD_EP_DB_Transmit+0x36a>
 8004e8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e90:	3301      	adds	r3, #1
 8004e92:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e96:	881b      	ldrh	r3, [r3, #0]
 8004e98:	b29a      	uxth	r2, r3
 8004e9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	029b      	lsls	r3, r3, #10
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	b29a      	uxth	r2, r3
 8004ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ea8:	801a      	strh	r2, [r3, #0]
 8004eaa:	e01c      	b.n	8004ee6 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	785b      	ldrb	r3, [r3, #1]
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d118      	bne.n	8004ee6 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	647b      	str	r3, [r7, #68]	; 0x44
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ec8:	4413      	add	r3, r2
 8004eca:	647b      	str	r3, [r7, #68]	; 0x44
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	011a      	lsls	r2, r3, #4
 8004ed2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ed4:	4413      	add	r3, r2
 8004ed6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004eda:	643b      	str	r3, [r7, #64]	; 0x40
 8004edc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ee0:	b29a      	uxth	r2, r3
 8004ee2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ee4:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	6818      	ldr	r0, [r3, #0]
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	6959      	ldr	r1, [r3, #20]
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	891a      	ldrh	r2, [r3, #8]
 8004ef2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	f004 f81b 	bl	8008f32 <USB_WritePMA>
 8004efc:	e1e2      	b.n	80052c4 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	461a      	mov	r2, r3
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	781b      	ldrb	r3, [r3, #0]
 8004f0e:	00db      	lsls	r3, r3, #3
 8004f10:	4413      	add	r3, r2
 8004f12:	3306      	adds	r3, #6
 8004f14:	005b      	lsls	r3, r3, #1
 8004f16:	68fa      	ldr	r2, [r7, #12]
 8004f18:	6812      	ldr	r2, [r2, #0]
 8004f1a:	4413      	add	r3, r2
 8004f1c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f20:	881b      	ldrh	r3, [r3, #0]
 8004f22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f26:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	699a      	ldr	r2, [r3, #24]
 8004f2e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d307      	bcc.n	8004f46 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	699a      	ldr	r2, [r3, #24]
 8004f3a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004f3e:	1ad2      	subs	r2, r2, r3
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	619a      	str	r2, [r3, #24]
 8004f44:	e002      	b.n	8004f4c <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	699b      	ldr	r3, [r3, #24]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	f040 80c0 	bne.w	80050d6 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	785b      	ldrb	r3, [r3, #1]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d126      	bne.n	8004fac <HAL_PCD_EP_DB_Transmit+0x482>
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	461a      	mov	r2, r3
 8004f70:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004f72:	4413      	add	r3, r2
 8004f74:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	781b      	ldrb	r3, [r3, #0]
 8004f7a:	011a      	lsls	r2, r3, #4
 8004f7c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004f7e:	4413      	add	r3, r2
 8004f80:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004f84:	67bb      	str	r3, [r7, #120]	; 0x78
 8004f86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f88:	881b      	ldrh	r3, [r3, #0]
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f90:	b29a      	uxth	r2, r3
 8004f92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f94:	801a      	strh	r2, [r3, #0]
 8004f96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f98:	881b      	ldrh	r3, [r3, #0]
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fa0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fa4:	b29a      	uxth	r2, r3
 8004fa6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fa8:	801a      	strh	r2, [r3, #0]
 8004faa:	e01a      	b.n	8004fe2 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	785b      	ldrb	r3, [r3, #1]
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d116      	bne.n	8004fe2 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	667b      	str	r3, [r7, #100]	; 0x64
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004fc8:	4413      	add	r3, r2
 8004fca:	667b      	str	r3, [r7, #100]	; 0x64
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	781b      	ldrb	r3, [r3, #0]
 8004fd0:	011a      	lsls	r2, r3, #4
 8004fd2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004fd4:	4413      	add	r3, r2
 8004fd6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004fda:	663b      	str	r3, [r7, #96]	; 0x60
 8004fdc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004fde:	2200      	movs	r2, #0
 8004fe0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	677b      	str	r3, [r7, #116]	; 0x74
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	785b      	ldrb	r3, [r3, #1]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d12b      	bne.n	8005048 <HAL_PCD_EP_DB_Transmit+0x51e>
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	461a      	mov	r2, r3
 8005002:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005004:	4413      	add	r3, r2
 8005006:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	011a      	lsls	r2, r3, #4
 800500e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005010:	4413      	add	r3, r2
 8005012:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005016:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800501a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800501e:	881b      	ldrh	r3, [r3, #0]
 8005020:	b29b      	uxth	r3, r3
 8005022:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005026:	b29a      	uxth	r2, r3
 8005028:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800502c:	801a      	strh	r2, [r3, #0]
 800502e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005032:	881b      	ldrh	r3, [r3, #0]
 8005034:	b29b      	uxth	r3, r3
 8005036:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800503a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800503e:	b29a      	uxth	r2, r3
 8005040:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005044:	801a      	strh	r2, [r3, #0]
 8005046:	e017      	b.n	8005078 <HAL_PCD_EP_DB_Transmit+0x54e>
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	785b      	ldrb	r3, [r3, #1]
 800504c:	2b01      	cmp	r3, #1
 800504e:	d113      	bne.n	8005078 <HAL_PCD_EP_DB_Transmit+0x54e>
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005058:	b29b      	uxth	r3, r3
 800505a:	461a      	mov	r2, r3
 800505c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800505e:	4413      	add	r3, r2
 8005060:	677b      	str	r3, [r7, #116]	; 0x74
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	011a      	lsls	r2, r3, #4
 8005068:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800506a:	4413      	add	r3, r2
 800506c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005070:	673b      	str	r3, [r7, #112]	; 0x70
 8005072:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005074:	2200      	movs	r2, #0
 8005076:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	781b      	ldrb	r3, [r3, #0]
 800507c:	4619      	mov	r1, r3
 800507e:	68f8      	ldr	r0, [r7, #12]
 8005080:	f006 fabb 	bl	800b5fa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005084:	88fb      	ldrh	r3, [r7, #6]
 8005086:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800508a:	2b00      	cmp	r3, #0
 800508c:	f040 811a 	bne.w	80052c4 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	461a      	mov	r2, r3
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	781b      	ldrb	r3, [r3, #0]
 800509a:	009b      	lsls	r3, r3, #2
 800509c:	4413      	add	r3, r2
 800509e:	881b      	ldrh	r3, [r3, #0]
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050aa:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	461a      	mov	r2, r3
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	441a      	add	r2, r3
 80050bc:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80050c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80050cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	8013      	strh	r3, [r2, #0]
 80050d4:	e0f6      	b.n	80052c4 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80050d6:	88fb      	ldrh	r3, [r7, #6]
 80050d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d121      	bne.n	8005124 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	461a      	mov	r2, r3
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	781b      	ldrb	r3, [r3, #0]
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	4413      	add	r3, r2
 80050ee:	881b      	ldrh	r3, [r3, #0]
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050fa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	461a      	mov	r2, r3
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	781b      	ldrb	r3, [r3, #0]
 8005108:	009b      	lsls	r3, r3, #2
 800510a:	441a      	add	r2, r3
 800510c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005110:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005114:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005118:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800511c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005120:	b29b      	uxth	r3, r3
 8005122:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800512a:	2b01      	cmp	r3, #1
 800512c:	f040 80ca 	bne.w	80052c4 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	695a      	ldr	r2, [r3, #20]
 8005134:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005138:	441a      	add	r2, r3
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	69da      	ldr	r2, [r3, #28]
 8005142:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005146:	441a      	add	r2, r3
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	6a1a      	ldr	r2, [r3, #32]
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	691b      	ldr	r3, [r3, #16]
 8005154:	429a      	cmp	r2, r3
 8005156:	d30b      	bcc.n	8005170 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	691b      	ldr	r3, [r3, #16]
 800515c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	6a1a      	ldr	r2, [r3, #32]
 8005164:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005168:	1ad2      	subs	r2, r2, r3
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	621a      	str	r2, [r3, #32]
 800516e:	e017      	b.n	80051a0 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	6a1b      	ldr	r3, [r3, #32]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d108      	bne.n	800518a <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8005178:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800517c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	2200      	movs	r2, #0
 8005184:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005188:	e00a      	b.n	80051a0 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	6a1b      	ldr	r3, [r3, #32]
 800518e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	2200      	movs	r2, #0
 8005196:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	2200      	movs	r2, #0
 800519c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	657b      	str	r3, [r7, #84]	; 0x54
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	785b      	ldrb	r3, [r3, #1]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d165      	bne.n	800527a <HAL_PCD_EP_DB_Transmit+0x750>
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051bc:	b29b      	uxth	r3, r3
 80051be:	461a      	mov	r2, r3
 80051c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051c2:	4413      	add	r3, r2
 80051c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	781b      	ldrb	r3, [r3, #0]
 80051ca:	011a      	lsls	r2, r3, #4
 80051cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051ce:	4413      	add	r3, r2
 80051d0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80051d4:	65bb      	str	r3, [r7, #88]	; 0x58
 80051d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80051d8:	881b      	ldrh	r3, [r3, #0]
 80051da:	b29b      	uxth	r3, r3
 80051dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051e0:	b29a      	uxth	r2, r3
 80051e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80051e4:	801a      	strh	r2, [r3, #0]
 80051e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80051ea:	2b3e      	cmp	r3, #62	; 0x3e
 80051ec:	d91d      	bls.n	800522a <HAL_PCD_EP_DB_Transmit+0x700>
 80051ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80051f2:	095b      	lsrs	r3, r3, #5
 80051f4:	66bb      	str	r3, [r7, #104]	; 0x68
 80051f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80051fa:	f003 031f 	and.w	r3, r3, #31
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d102      	bne.n	8005208 <HAL_PCD_EP_DB_Transmit+0x6de>
 8005202:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005204:	3b01      	subs	r3, #1
 8005206:	66bb      	str	r3, [r7, #104]	; 0x68
 8005208:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800520a:	881b      	ldrh	r3, [r3, #0]
 800520c:	b29a      	uxth	r2, r3
 800520e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005210:	b29b      	uxth	r3, r3
 8005212:	029b      	lsls	r3, r3, #10
 8005214:	b29b      	uxth	r3, r3
 8005216:	4313      	orrs	r3, r2
 8005218:	b29b      	uxth	r3, r3
 800521a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800521e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005222:	b29a      	uxth	r2, r3
 8005224:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005226:	801a      	strh	r2, [r3, #0]
 8005228:	e041      	b.n	80052ae <HAL_PCD_EP_DB_Transmit+0x784>
 800522a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800522e:	2b00      	cmp	r3, #0
 8005230:	d10a      	bne.n	8005248 <HAL_PCD_EP_DB_Transmit+0x71e>
 8005232:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005234:	881b      	ldrh	r3, [r3, #0]
 8005236:	b29b      	uxth	r3, r3
 8005238:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800523c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005240:	b29a      	uxth	r2, r3
 8005242:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005244:	801a      	strh	r2, [r3, #0]
 8005246:	e032      	b.n	80052ae <HAL_PCD_EP_DB_Transmit+0x784>
 8005248:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800524c:	085b      	lsrs	r3, r3, #1
 800524e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005250:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005254:	f003 0301 	and.w	r3, r3, #1
 8005258:	2b00      	cmp	r3, #0
 800525a:	d002      	beq.n	8005262 <HAL_PCD_EP_DB_Transmit+0x738>
 800525c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800525e:	3301      	adds	r3, #1
 8005260:	66bb      	str	r3, [r7, #104]	; 0x68
 8005262:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005264:	881b      	ldrh	r3, [r3, #0]
 8005266:	b29a      	uxth	r2, r3
 8005268:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800526a:	b29b      	uxth	r3, r3
 800526c:	029b      	lsls	r3, r3, #10
 800526e:	b29b      	uxth	r3, r3
 8005270:	4313      	orrs	r3, r2
 8005272:	b29a      	uxth	r2, r3
 8005274:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005276:	801a      	strh	r2, [r3, #0]
 8005278:	e019      	b.n	80052ae <HAL_PCD_EP_DB_Transmit+0x784>
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	785b      	ldrb	r3, [r3, #1]
 800527e:	2b01      	cmp	r3, #1
 8005280:	d115      	bne.n	80052ae <HAL_PCD_EP_DB_Transmit+0x784>
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800528a:	b29b      	uxth	r3, r3
 800528c:	461a      	mov	r2, r3
 800528e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005290:	4413      	add	r3, r2
 8005292:	657b      	str	r3, [r7, #84]	; 0x54
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	781b      	ldrb	r3, [r3, #0]
 8005298:	011a      	lsls	r2, r3, #4
 800529a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800529c:	4413      	add	r3, r2
 800529e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80052a2:	653b      	str	r3, [r7, #80]	; 0x50
 80052a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80052a8:	b29a      	uxth	r2, r3
 80052aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052ac:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	6818      	ldr	r0, [r3, #0]
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	6959      	ldr	r1, [r3, #20]
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	895a      	ldrh	r2, [r3, #10]
 80052ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80052be:	b29b      	uxth	r3, r3
 80052c0:	f003 fe37 	bl	8008f32 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	461a      	mov	r2, r3
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	781b      	ldrb	r3, [r3, #0]
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	4413      	add	r3, r2
 80052d2:	881b      	ldrh	r3, [r3, #0]
 80052d4:	b29b      	uxth	r3, r3
 80052d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052de:	82bb      	strh	r3, [r7, #20]
 80052e0:	8abb      	ldrh	r3, [r7, #20]
 80052e2:	f083 0310 	eor.w	r3, r3, #16
 80052e6:	82bb      	strh	r3, [r7, #20]
 80052e8:	8abb      	ldrh	r3, [r7, #20]
 80052ea:	f083 0320 	eor.w	r3, r3, #32
 80052ee:	82bb      	strh	r3, [r7, #20]
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	461a      	mov	r2, r3
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	781b      	ldrb	r3, [r3, #0]
 80052fa:	009b      	lsls	r3, r3, #2
 80052fc:	441a      	add	r2, r3
 80052fe:	8abb      	ldrh	r3, [r7, #20]
 8005300:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005304:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005308:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800530c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005310:	b29b      	uxth	r3, r3
 8005312:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005314:	2300      	movs	r3, #0
}
 8005316:	4618      	mov	r0, r3
 8005318:	3790      	adds	r7, #144	; 0x90
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}

0800531e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800531e:	b480      	push	{r7}
 8005320:	b087      	sub	sp, #28
 8005322:	af00      	add	r7, sp, #0
 8005324:	60f8      	str	r0, [r7, #12]
 8005326:	607b      	str	r3, [r7, #4]
 8005328:	460b      	mov	r3, r1
 800532a:	817b      	strh	r3, [r7, #10]
 800532c:	4613      	mov	r3, r2
 800532e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005330:	897b      	ldrh	r3, [r7, #10]
 8005332:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005336:	b29b      	uxth	r3, r3
 8005338:	2b00      	cmp	r3, #0
 800533a:	d00b      	beq.n	8005354 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800533c:	897b      	ldrh	r3, [r7, #10]
 800533e:	f003 0307 	and.w	r3, r3, #7
 8005342:	1c5a      	adds	r2, r3, #1
 8005344:	4613      	mov	r3, r2
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	4413      	add	r3, r2
 800534a:	00db      	lsls	r3, r3, #3
 800534c:	68fa      	ldr	r2, [r7, #12]
 800534e:	4413      	add	r3, r2
 8005350:	617b      	str	r3, [r7, #20]
 8005352:	e009      	b.n	8005368 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005354:	897a      	ldrh	r2, [r7, #10]
 8005356:	4613      	mov	r3, r2
 8005358:	009b      	lsls	r3, r3, #2
 800535a:	4413      	add	r3, r2
 800535c:	00db      	lsls	r3, r3, #3
 800535e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005362:	68fa      	ldr	r2, [r7, #12]
 8005364:	4413      	add	r3, r2
 8005366:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005368:	893b      	ldrh	r3, [r7, #8]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d107      	bne.n	800537e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	2200      	movs	r2, #0
 8005372:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	b29a      	uxth	r2, r3
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	80da      	strh	r2, [r3, #6]
 800537c:	e00b      	b.n	8005396 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	2201      	movs	r2, #1
 8005382:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	b29a      	uxth	r2, r3
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	0c1b      	lsrs	r3, r3, #16
 8005390:	b29a      	uxth	r2, r3
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005396:	2300      	movs	r3, #0
}
 8005398:	4618      	mov	r0, r3
 800539a:	371c      	adds	r7, #28
 800539c:	46bd      	mov	sp, r7
 800539e:	bc80      	pop	{r7}
 80053a0:	4770      	bx	lr
	...

080053a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b086      	sub	sp, #24
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d101      	bne.n	80053b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	e272      	b.n	800589c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f003 0301 	and.w	r3, r3, #1
 80053be:	2b00      	cmp	r3, #0
 80053c0:	f000 8087 	beq.w	80054d2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80053c4:	4b92      	ldr	r3, [pc, #584]	; (8005610 <HAL_RCC_OscConfig+0x26c>)
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	f003 030c 	and.w	r3, r3, #12
 80053cc:	2b04      	cmp	r3, #4
 80053ce:	d00c      	beq.n	80053ea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80053d0:	4b8f      	ldr	r3, [pc, #572]	; (8005610 <HAL_RCC_OscConfig+0x26c>)
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	f003 030c 	and.w	r3, r3, #12
 80053d8:	2b08      	cmp	r3, #8
 80053da:	d112      	bne.n	8005402 <HAL_RCC_OscConfig+0x5e>
 80053dc:	4b8c      	ldr	r3, [pc, #560]	; (8005610 <HAL_RCC_OscConfig+0x26c>)
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053e8:	d10b      	bne.n	8005402 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053ea:	4b89      	ldr	r3, [pc, #548]	; (8005610 <HAL_RCC_OscConfig+0x26c>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d06c      	beq.n	80054d0 <HAL_RCC_OscConfig+0x12c>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d168      	bne.n	80054d0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	e24c      	b.n	800589c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800540a:	d106      	bne.n	800541a <HAL_RCC_OscConfig+0x76>
 800540c:	4b80      	ldr	r3, [pc, #512]	; (8005610 <HAL_RCC_OscConfig+0x26c>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a7f      	ldr	r2, [pc, #508]	; (8005610 <HAL_RCC_OscConfig+0x26c>)
 8005412:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005416:	6013      	str	r3, [r2, #0]
 8005418:	e02e      	b.n	8005478 <HAL_RCC_OscConfig+0xd4>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d10c      	bne.n	800543c <HAL_RCC_OscConfig+0x98>
 8005422:	4b7b      	ldr	r3, [pc, #492]	; (8005610 <HAL_RCC_OscConfig+0x26c>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a7a      	ldr	r2, [pc, #488]	; (8005610 <HAL_RCC_OscConfig+0x26c>)
 8005428:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800542c:	6013      	str	r3, [r2, #0]
 800542e:	4b78      	ldr	r3, [pc, #480]	; (8005610 <HAL_RCC_OscConfig+0x26c>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a77      	ldr	r2, [pc, #476]	; (8005610 <HAL_RCC_OscConfig+0x26c>)
 8005434:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005438:	6013      	str	r3, [r2, #0]
 800543a:	e01d      	b.n	8005478 <HAL_RCC_OscConfig+0xd4>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005444:	d10c      	bne.n	8005460 <HAL_RCC_OscConfig+0xbc>
 8005446:	4b72      	ldr	r3, [pc, #456]	; (8005610 <HAL_RCC_OscConfig+0x26c>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a71      	ldr	r2, [pc, #452]	; (8005610 <HAL_RCC_OscConfig+0x26c>)
 800544c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005450:	6013      	str	r3, [r2, #0]
 8005452:	4b6f      	ldr	r3, [pc, #444]	; (8005610 <HAL_RCC_OscConfig+0x26c>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a6e      	ldr	r2, [pc, #440]	; (8005610 <HAL_RCC_OscConfig+0x26c>)
 8005458:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800545c:	6013      	str	r3, [r2, #0]
 800545e:	e00b      	b.n	8005478 <HAL_RCC_OscConfig+0xd4>
 8005460:	4b6b      	ldr	r3, [pc, #428]	; (8005610 <HAL_RCC_OscConfig+0x26c>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a6a      	ldr	r2, [pc, #424]	; (8005610 <HAL_RCC_OscConfig+0x26c>)
 8005466:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800546a:	6013      	str	r3, [r2, #0]
 800546c:	4b68      	ldr	r3, [pc, #416]	; (8005610 <HAL_RCC_OscConfig+0x26c>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a67      	ldr	r2, [pc, #412]	; (8005610 <HAL_RCC_OscConfig+0x26c>)
 8005472:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005476:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d013      	beq.n	80054a8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005480:	f7fc fedc 	bl	800223c <HAL_GetTick>
 8005484:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005486:	e008      	b.n	800549a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005488:	f7fc fed8 	bl	800223c <HAL_GetTick>
 800548c:	4602      	mov	r2, r0
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	1ad3      	subs	r3, r2, r3
 8005492:	2b64      	cmp	r3, #100	; 0x64
 8005494:	d901      	bls.n	800549a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005496:	2303      	movs	r3, #3
 8005498:	e200      	b.n	800589c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800549a:	4b5d      	ldr	r3, [pc, #372]	; (8005610 <HAL_RCC_OscConfig+0x26c>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d0f0      	beq.n	8005488 <HAL_RCC_OscConfig+0xe4>
 80054a6:	e014      	b.n	80054d2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054a8:	f7fc fec8 	bl	800223c <HAL_GetTick>
 80054ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054ae:	e008      	b.n	80054c2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054b0:	f7fc fec4 	bl	800223c <HAL_GetTick>
 80054b4:	4602      	mov	r2, r0
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	1ad3      	subs	r3, r2, r3
 80054ba:	2b64      	cmp	r3, #100	; 0x64
 80054bc:	d901      	bls.n	80054c2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80054be:	2303      	movs	r3, #3
 80054c0:	e1ec      	b.n	800589c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054c2:	4b53      	ldr	r3, [pc, #332]	; (8005610 <HAL_RCC_OscConfig+0x26c>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d1f0      	bne.n	80054b0 <HAL_RCC_OscConfig+0x10c>
 80054ce:	e000      	b.n	80054d2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f003 0302 	and.w	r3, r3, #2
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d063      	beq.n	80055a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80054de:	4b4c      	ldr	r3, [pc, #304]	; (8005610 <HAL_RCC_OscConfig+0x26c>)
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	f003 030c 	and.w	r3, r3, #12
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d00b      	beq.n	8005502 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80054ea:	4b49      	ldr	r3, [pc, #292]	; (8005610 <HAL_RCC_OscConfig+0x26c>)
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	f003 030c 	and.w	r3, r3, #12
 80054f2:	2b08      	cmp	r3, #8
 80054f4:	d11c      	bne.n	8005530 <HAL_RCC_OscConfig+0x18c>
 80054f6:	4b46      	ldr	r3, [pc, #280]	; (8005610 <HAL_RCC_OscConfig+0x26c>)
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d116      	bne.n	8005530 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005502:	4b43      	ldr	r3, [pc, #268]	; (8005610 <HAL_RCC_OscConfig+0x26c>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f003 0302 	and.w	r3, r3, #2
 800550a:	2b00      	cmp	r3, #0
 800550c:	d005      	beq.n	800551a <HAL_RCC_OscConfig+0x176>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	691b      	ldr	r3, [r3, #16]
 8005512:	2b01      	cmp	r3, #1
 8005514:	d001      	beq.n	800551a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	e1c0      	b.n	800589c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800551a:	4b3d      	ldr	r3, [pc, #244]	; (8005610 <HAL_RCC_OscConfig+0x26c>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	695b      	ldr	r3, [r3, #20]
 8005526:	00db      	lsls	r3, r3, #3
 8005528:	4939      	ldr	r1, [pc, #228]	; (8005610 <HAL_RCC_OscConfig+0x26c>)
 800552a:	4313      	orrs	r3, r2
 800552c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800552e:	e03a      	b.n	80055a6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	691b      	ldr	r3, [r3, #16]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d020      	beq.n	800557a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005538:	4b36      	ldr	r3, [pc, #216]	; (8005614 <HAL_RCC_OscConfig+0x270>)
 800553a:	2201      	movs	r2, #1
 800553c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800553e:	f7fc fe7d 	bl	800223c <HAL_GetTick>
 8005542:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005544:	e008      	b.n	8005558 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005546:	f7fc fe79 	bl	800223c <HAL_GetTick>
 800554a:	4602      	mov	r2, r0
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	1ad3      	subs	r3, r2, r3
 8005550:	2b02      	cmp	r3, #2
 8005552:	d901      	bls.n	8005558 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005554:	2303      	movs	r3, #3
 8005556:	e1a1      	b.n	800589c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005558:	4b2d      	ldr	r3, [pc, #180]	; (8005610 <HAL_RCC_OscConfig+0x26c>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f003 0302 	and.w	r3, r3, #2
 8005560:	2b00      	cmp	r3, #0
 8005562:	d0f0      	beq.n	8005546 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005564:	4b2a      	ldr	r3, [pc, #168]	; (8005610 <HAL_RCC_OscConfig+0x26c>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	695b      	ldr	r3, [r3, #20]
 8005570:	00db      	lsls	r3, r3, #3
 8005572:	4927      	ldr	r1, [pc, #156]	; (8005610 <HAL_RCC_OscConfig+0x26c>)
 8005574:	4313      	orrs	r3, r2
 8005576:	600b      	str	r3, [r1, #0]
 8005578:	e015      	b.n	80055a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800557a:	4b26      	ldr	r3, [pc, #152]	; (8005614 <HAL_RCC_OscConfig+0x270>)
 800557c:	2200      	movs	r2, #0
 800557e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005580:	f7fc fe5c 	bl	800223c <HAL_GetTick>
 8005584:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005586:	e008      	b.n	800559a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005588:	f7fc fe58 	bl	800223c <HAL_GetTick>
 800558c:	4602      	mov	r2, r0
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	1ad3      	subs	r3, r2, r3
 8005592:	2b02      	cmp	r3, #2
 8005594:	d901      	bls.n	800559a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005596:	2303      	movs	r3, #3
 8005598:	e180      	b.n	800589c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800559a:	4b1d      	ldr	r3, [pc, #116]	; (8005610 <HAL_RCC_OscConfig+0x26c>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f003 0302 	and.w	r3, r3, #2
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d1f0      	bne.n	8005588 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f003 0308 	and.w	r3, r3, #8
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d03a      	beq.n	8005628 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	699b      	ldr	r3, [r3, #24]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d019      	beq.n	80055ee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055ba:	4b17      	ldr	r3, [pc, #92]	; (8005618 <HAL_RCC_OscConfig+0x274>)
 80055bc:	2201      	movs	r2, #1
 80055be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055c0:	f7fc fe3c 	bl	800223c <HAL_GetTick>
 80055c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055c6:	e008      	b.n	80055da <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055c8:	f7fc fe38 	bl	800223c <HAL_GetTick>
 80055cc:	4602      	mov	r2, r0
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	1ad3      	subs	r3, r2, r3
 80055d2:	2b02      	cmp	r3, #2
 80055d4:	d901      	bls.n	80055da <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80055d6:	2303      	movs	r3, #3
 80055d8:	e160      	b.n	800589c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055da:	4b0d      	ldr	r3, [pc, #52]	; (8005610 <HAL_RCC_OscConfig+0x26c>)
 80055dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055de:	f003 0302 	and.w	r3, r3, #2
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d0f0      	beq.n	80055c8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80055e6:	2001      	movs	r0, #1
 80055e8:	f000 face 	bl	8005b88 <RCC_Delay>
 80055ec:	e01c      	b.n	8005628 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055ee:	4b0a      	ldr	r3, [pc, #40]	; (8005618 <HAL_RCC_OscConfig+0x274>)
 80055f0:	2200      	movs	r2, #0
 80055f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055f4:	f7fc fe22 	bl	800223c <HAL_GetTick>
 80055f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055fa:	e00f      	b.n	800561c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055fc:	f7fc fe1e 	bl	800223c <HAL_GetTick>
 8005600:	4602      	mov	r2, r0
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	1ad3      	subs	r3, r2, r3
 8005606:	2b02      	cmp	r3, #2
 8005608:	d908      	bls.n	800561c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800560a:	2303      	movs	r3, #3
 800560c:	e146      	b.n	800589c <HAL_RCC_OscConfig+0x4f8>
 800560e:	bf00      	nop
 8005610:	40021000 	.word	0x40021000
 8005614:	42420000 	.word	0x42420000
 8005618:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800561c:	4b92      	ldr	r3, [pc, #584]	; (8005868 <HAL_RCC_OscConfig+0x4c4>)
 800561e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005620:	f003 0302 	and.w	r3, r3, #2
 8005624:	2b00      	cmp	r3, #0
 8005626:	d1e9      	bne.n	80055fc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f003 0304 	and.w	r3, r3, #4
 8005630:	2b00      	cmp	r3, #0
 8005632:	f000 80a6 	beq.w	8005782 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005636:	2300      	movs	r3, #0
 8005638:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800563a:	4b8b      	ldr	r3, [pc, #556]	; (8005868 <HAL_RCC_OscConfig+0x4c4>)
 800563c:	69db      	ldr	r3, [r3, #28]
 800563e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005642:	2b00      	cmp	r3, #0
 8005644:	d10d      	bne.n	8005662 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005646:	4b88      	ldr	r3, [pc, #544]	; (8005868 <HAL_RCC_OscConfig+0x4c4>)
 8005648:	69db      	ldr	r3, [r3, #28]
 800564a:	4a87      	ldr	r2, [pc, #540]	; (8005868 <HAL_RCC_OscConfig+0x4c4>)
 800564c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005650:	61d3      	str	r3, [r2, #28]
 8005652:	4b85      	ldr	r3, [pc, #532]	; (8005868 <HAL_RCC_OscConfig+0x4c4>)
 8005654:	69db      	ldr	r3, [r3, #28]
 8005656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800565a:	60bb      	str	r3, [r7, #8]
 800565c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800565e:	2301      	movs	r3, #1
 8005660:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005662:	4b82      	ldr	r3, [pc, #520]	; (800586c <HAL_RCC_OscConfig+0x4c8>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800566a:	2b00      	cmp	r3, #0
 800566c:	d118      	bne.n	80056a0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800566e:	4b7f      	ldr	r3, [pc, #508]	; (800586c <HAL_RCC_OscConfig+0x4c8>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a7e      	ldr	r2, [pc, #504]	; (800586c <HAL_RCC_OscConfig+0x4c8>)
 8005674:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005678:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800567a:	f7fc fddf 	bl	800223c <HAL_GetTick>
 800567e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005680:	e008      	b.n	8005694 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005682:	f7fc fddb 	bl	800223c <HAL_GetTick>
 8005686:	4602      	mov	r2, r0
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	1ad3      	subs	r3, r2, r3
 800568c:	2b64      	cmp	r3, #100	; 0x64
 800568e:	d901      	bls.n	8005694 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005690:	2303      	movs	r3, #3
 8005692:	e103      	b.n	800589c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005694:	4b75      	ldr	r3, [pc, #468]	; (800586c <HAL_RCC_OscConfig+0x4c8>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800569c:	2b00      	cmp	r3, #0
 800569e:	d0f0      	beq.n	8005682 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d106      	bne.n	80056b6 <HAL_RCC_OscConfig+0x312>
 80056a8:	4b6f      	ldr	r3, [pc, #444]	; (8005868 <HAL_RCC_OscConfig+0x4c4>)
 80056aa:	6a1b      	ldr	r3, [r3, #32]
 80056ac:	4a6e      	ldr	r2, [pc, #440]	; (8005868 <HAL_RCC_OscConfig+0x4c4>)
 80056ae:	f043 0301 	orr.w	r3, r3, #1
 80056b2:	6213      	str	r3, [r2, #32]
 80056b4:	e02d      	b.n	8005712 <HAL_RCC_OscConfig+0x36e>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	68db      	ldr	r3, [r3, #12]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d10c      	bne.n	80056d8 <HAL_RCC_OscConfig+0x334>
 80056be:	4b6a      	ldr	r3, [pc, #424]	; (8005868 <HAL_RCC_OscConfig+0x4c4>)
 80056c0:	6a1b      	ldr	r3, [r3, #32]
 80056c2:	4a69      	ldr	r2, [pc, #420]	; (8005868 <HAL_RCC_OscConfig+0x4c4>)
 80056c4:	f023 0301 	bic.w	r3, r3, #1
 80056c8:	6213      	str	r3, [r2, #32]
 80056ca:	4b67      	ldr	r3, [pc, #412]	; (8005868 <HAL_RCC_OscConfig+0x4c4>)
 80056cc:	6a1b      	ldr	r3, [r3, #32]
 80056ce:	4a66      	ldr	r2, [pc, #408]	; (8005868 <HAL_RCC_OscConfig+0x4c4>)
 80056d0:	f023 0304 	bic.w	r3, r3, #4
 80056d4:	6213      	str	r3, [r2, #32]
 80056d6:	e01c      	b.n	8005712 <HAL_RCC_OscConfig+0x36e>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	68db      	ldr	r3, [r3, #12]
 80056dc:	2b05      	cmp	r3, #5
 80056de:	d10c      	bne.n	80056fa <HAL_RCC_OscConfig+0x356>
 80056e0:	4b61      	ldr	r3, [pc, #388]	; (8005868 <HAL_RCC_OscConfig+0x4c4>)
 80056e2:	6a1b      	ldr	r3, [r3, #32]
 80056e4:	4a60      	ldr	r2, [pc, #384]	; (8005868 <HAL_RCC_OscConfig+0x4c4>)
 80056e6:	f043 0304 	orr.w	r3, r3, #4
 80056ea:	6213      	str	r3, [r2, #32]
 80056ec:	4b5e      	ldr	r3, [pc, #376]	; (8005868 <HAL_RCC_OscConfig+0x4c4>)
 80056ee:	6a1b      	ldr	r3, [r3, #32]
 80056f0:	4a5d      	ldr	r2, [pc, #372]	; (8005868 <HAL_RCC_OscConfig+0x4c4>)
 80056f2:	f043 0301 	orr.w	r3, r3, #1
 80056f6:	6213      	str	r3, [r2, #32]
 80056f8:	e00b      	b.n	8005712 <HAL_RCC_OscConfig+0x36e>
 80056fa:	4b5b      	ldr	r3, [pc, #364]	; (8005868 <HAL_RCC_OscConfig+0x4c4>)
 80056fc:	6a1b      	ldr	r3, [r3, #32]
 80056fe:	4a5a      	ldr	r2, [pc, #360]	; (8005868 <HAL_RCC_OscConfig+0x4c4>)
 8005700:	f023 0301 	bic.w	r3, r3, #1
 8005704:	6213      	str	r3, [r2, #32]
 8005706:	4b58      	ldr	r3, [pc, #352]	; (8005868 <HAL_RCC_OscConfig+0x4c4>)
 8005708:	6a1b      	ldr	r3, [r3, #32]
 800570a:	4a57      	ldr	r2, [pc, #348]	; (8005868 <HAL_RCC_OscConfig+0x4c4>)
 800570c:	f023 0304 	bic.w	r3, r3, #4
 8005710:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	68db      	ldr	r3, [r3, #12]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d015      	beq.n	8005746 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800571a:	f7fc fd8f 	bl	800223c <HAL_GetTick>
 800571e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005720:	e00a      	b.n	8005738 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005722:	f7fc fd8b 	bl	800223c <HAL_GetTick>
 8005726:	4602      	mov	r2, r0
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	1ad3      	subs	r3, r2, r3
 800572c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005730:	4293      	cmp	r3, r2
 8005732:	d901      	bls.n	8005738 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005734:	2303      	movs	r3, #3
 8005736:	e0b1      	b.n	800589c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005738:	4b4b      	ldr	r3, [pc, #300]	; (8005868 <HAL_RCC_OscConfig+0x4c4>)
 800573a:	6a1b      	ldr	r3, [r3, #32]
 800573c:	f003 0302 	and.w	r3, r3, #2
 8005740:	2b00      	cmp	r3, #0
 8005742:	d0ee      	beq.n	8005722 <HAL_RCC_OscConfig+0x37e>
 8005744:	e014      	b.n	8005770 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005746:	f7fc fd79 	bl	800223c <HAL_GetTick>
 800574a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800574c:	e00a      	b.n	8005764 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800574e:	f7fc fd75 	bl	800223c <HAL_GetTick>
 8005752:	4602      	mov	r2, r0
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	1ad3      	subs	r3, r2, r3
 8005758:	f241 3288 	movw	r2, #5000	; 0x1388
 800575c:	4293      	cmp	r3, r2
 800575e:	d901      	bls.n	8005764 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005760:	2303      	movs	r3, #3
 8005762:	e09b      	b.n	800589c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005764:	4b40      	ldr	r3, [pc, #256]	; (8005868 <HAL_RCC_OscConfig+0x4c4>)
 8005766:	6a1b      	ldr	r3, [r3, #32]
 8005768:	f003 0302 	and.w	r3, r3, #2
 800576c:	2b00      	cmp	r3, #0
 800576e:	d1ee      	bne.n	800574e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005770:	7dfb      	ldrb	r3, [r7, #23]
 8005772:	2b01      	cmp	r3, #1
 8005774:	d105      	bne.n	8005782 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005776:	4b3c      	ldr	r3, [pc, #240]	; (8005868 <HAL_RCC_OscConfig+0x4c4>)
 8005778:	69db      	ldr	r3, [r3, #28]
 800577a:	4a3b      	ldr	r2, [pc, #236]	; (8005868 <HAL_RCC_OscConfig+0x4c4>)
 800577c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005780:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	69db      	ldr	r3, [r3, #28]
 8005786:	2b00      	cmp	r3, #0
 8005788:	f000 8087 	beq.w	800589a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800578c:	4b36      	ldr	r3, [pc, #216]	; (8005868 <HAL_RCC_OscConfig+0x4c4>)
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	f003 030c 	and.w	r3, r3, #12
 8005794:	2b08      	cmp	r3, #8
 8005796:	d061      	beq.n	800585c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	69db      	ldr	r3, [r3, #28]
 800579c:	2b02      	cmp	r3, #2
 800579e:	d146      	bne.n	800582e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057a0:	4b33      	ldr	r3, [pc, #204]	; (8005870 <HAL_RCC_OscConfig+0x4cc>)
 80057a2:	2200      	movs	r2, #0
 80057a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057a6:	f7fc fd49 	bl	800223c <HAL_GetTick>
 80057aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80057ac:	e008      	b.n	80057c0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057ae:	f7fc fd45 	bl	800223c <HAL_GetTick>
 80057b2:	4602      	mov	r2, r0
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	1ad3      	subs	r3, r2, r3
 80057b8:	2b02      	cmp	r3, #2
 80057ba:	d901      	bls.n	80057c0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80057bc:	2303      	movs	r3, #3
 80057be:	e06d      	b.n	800589c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80057c0:	4b29      	ldr	r3, [pc, #164]	; (8005868 <HAL_RCC_OscConfig+0x4c4>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d1f0      	bne.n	80057ae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6a1b      	ldr	r3, [r3, #32]
 80057d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057d4:	d108      	bne.n	80057e8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80057d6:	4b24      	ldr	r3, [pc, #144]	; (8005868 <HAL_RCC_OscConfig+0x4c4>)
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	689b      	ldr	r3, [r3, #8]
 80057e2:	4921      	ldr	r1, [pc, #132]	; (8005868 <HAL_RCC_OscConfig+0x4c4>)
 80057e4:	4313      	orrs	r3, r2
 80057e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80057e8:	4b1f      	ldr	r3, [pc, #124]	; (8005868 <HAL_RCC_OscConfig+0x4c4>)
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6a19      	ldr	r1, [r3, #32]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f8:	430b      	orrs	r3, r1
 80057fa:	491b      	ldr	r1, [pc, #108]	; (8005868 <HAL_RCC_OscConfig+0x4c4>)
 80057fc:	4313      	orrs	r3, r2
 80057fe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005800:	4b1b      	ldr	r3, [pc, #108]	; (8005870 <HAL_RCC_OscConfig+0x4cc>)
 8005802:	2201      	movs	r2, #1
 8005804:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005806:	f7fc fd19 	bl	800223c <HAL_GetTick>
 800580a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800580c:	e008      	b.n	8005820 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800580e:	f7fc fd15 	bl	800223c <HAL_GetTick>
 8005812:	4602      	mov	r2, r0
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	1ad3      	subs	r3, r2, r3
 8005818:	2b02      	cmp	r3, #2
 800581a:	d901      	bls.n	8005820 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800581c:	2303      	movs	r3, #3
 800581e:	e03d      	b.n	800589c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005820:	4b11      	ldr	r3, [pc, #68]	; (8005868 <HAL_RCC_OscConfig+0x4c4>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005828:	2b00      	cmp	r3, #0
 800582a:	d0f0      	beq.n	800580e <HAL_RCC_OscConfig+0x46a>
 800582c:	e035      	b.n	800589a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800582e:	4b10      	ldr	r3, [pc, #64]	; (8005870 <HAL_RCC_OscConfig+0x4cc>)
 8005830:	2200      	movs	r2, #0
 8005832:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005834:	f7fc fd02 	bl	800223c <HAL_GetTick>
 8005838:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800583a:	e008      	b.n	800584e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800583c:	f7fc fcfe 	bl	800223c <HAL_GetTick>
 8005840:	4602      	mov	r2, r0
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	1ad3      	subs	r3, r2, r3
 8005846:	2b02      	cmp	r3, #2
 8005848:	d901      	bls.n	800584e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800584a:	2303      	movs	r3, #3
 800584c:	e026      	b.n	800589c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800584e:	4b06      	ldr	r3, [pc, #24]	; (8005868 <HAL_RCC_OscConfig+0x4c4>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005856:	2b00      	cmp	r3, #0
 8005858:	d1f0      	bne.n	800583c <HAL_RCC_OscConfig+0x498>
 800585a:	e01e      	b.n	800589a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	69db      	ldr	r3, [r3, #28]
 8005860:	2b01      	cmp	r3, #1
 8005862:	d107      	bne.n	8005874 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	e019      	b.n	800589c <HAL_RCC_OscConfig+0x4f8>
 8005868:	40021000 	.word	0x40021000
 800586c:	40007000 	.word	0x40007000
 8005870:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005874:	4b0b      	ldr	r3, [pc, #44]	; (80058a4 <HAL_RCC_OscConfig+0x500>)
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6a1b      	ldr	r3, [r3, #32]
 8005884:	429a      	cmp	r2, r3
 8005886:	d106      	bne.n	8005896 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005892:	429a      	cmp	r2, r3
 8005894:	d001      	beq.n	800589a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	e000      	b.n	800589c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800589a:	2300      	movs	r3, #0
}
 800589c:	4618      	mov	r0, r3
 800589e:	3718      	adds	r7, #24
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}
 80058a4:	40021000 	.word	0x40021000

080058a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b084      	sub	sp, #16
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d101      	bne.n	80058bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	e0d0      	b.n	8005a5e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80058bc:	4b6a      	ldr	r3, [pc, #424]	; (8005a68 <HAL_RCC_ClockConfig+0x1c0>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f003 0307 	and.w	r3, r3, #7
 80058c4:	683a      	ldr	r2, [r7, #0]
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d910      	bls.n	80058ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058ca:	4b67      	ldr	r3, [pc, #412]	; (8005a68 <HAL_RCC_ClockConfig+0x1c0>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f023 0207 	bic.w	r2, r3, #7
 80058d2:	4965      	ldr	r1, [pc, #404]	; (8005a68 <HAL_RCC_ClockConfig+0x1c0>)
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	4313      	orrs	r3, r2
 80058d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058da:	4b63      	ldr	r3, [pc, #396]	; (8005a68 <HAL_RCC_ClockConfig+0x1c0>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f003 0307 	and.w	r3, r3, #7
 80058e2:	683a      	ldr	r2, [r7, #0]
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d001      	beq.n	80058ec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80058e8:	2301      	movs	r3, #1
 80058ea:	e0b8      	b.n	8005a5e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f003 0302 	and.w	r3, r3, #2
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d020      	beq.n	800593a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f003 0304 	and.w	r3, r3, #4
 8005900:	2b00      	cmp	r3, #0
 8005902:	d005      	beq.n	8005910 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005904:	4b59      	ldr	r3, [pc, #356]	; (8005a6c <HAL_RCC_ClockConfig+0x1c4>)
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	4a58      	ldr	r2, [pc, #352]	; (8005a6c <HAL_RCC_ClockConfig+0x1c4>)
 800590a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800590e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 0308 	and.w	r3, r3, #8
 8005918:	2b00      	cmp	r3, #0
 800591a:	d005      	beq.n	8005928 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800591c:	4b53      	ldr	r3, [pc, #332]	; (8005a6c <HAL_RCC_ClockConfig+0x1c4>)
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	4a52      	ldr	r2, [pc, #328]	; (8005a6c <HAL_RCC_ClockConfig+0x1c4>)
 8005922:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005926:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005928:	4b50      	ldr	r3, [pc, #320]	; (8005a6c <HAL_RCC_ClockConfig+0x1c4>)
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	494d      	ldr	r1, [pc, #308]	; (8005a6c <HAL_RCC_ClockConfig+0x1c4>)
 8005936:	4313      	orrs	r3, r2
 8005938:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f003 0301 	and.w	r3, r3, #1
 8005942:	2b00      	cmp	r3, #0
 8005944:	d040      	beq.n	80059c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	2b01      	cmp	r3, #1
 800594c:	d107      	bne.n	800595e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800594e:	4b47      	ldr	r3, [pc, #284]	; (8005a6c <HAL_RCC_ClockConfig+0x1c4>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005956:	2b00      	cmp	r3, #0
 8005958:	d115      	bne.n	8005986 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	e07f      	b.n	8005a5e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	2b02      	cmp	r3, #2
 8005964:	d107      	bne.n	8005976 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005966:	4b41      	ldr	r3, [pc, #260]	; (8005a6c <HAL_RCC_ClockConfig+0x1c4>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800596e:	2b00      	cmp	r3, #0
 8005970:	d109      	bne.n	8005986 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	e073      	b.n	8005a5e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005976:	4b3d      	ldr	r3, [pc, #244]	; (8005a6c <HAL_RCC_ClockConfig+0x1c4>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f003 0302 	and.w	r3, r3, #2
 800597e:	2b00      	cmp	r3, #0
 8005980:	d101      	bne.n	8005986 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	e06b      	b.n	8005a5e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005986:	4b39      	ldr	r3, [pc, #228]	; (8005a6c <HAL_RCC_ClockConfig+0x1c4>)
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	f023 0203 	bic.w	r2, r3, #3
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	4936      	ldr	r1, [pc, #216]	; (8005a6c <HAL_RCC_ClockConfig+0x1c4>)
 8005994:	4313      	orrs	r3, r2
 8005996:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005998:	f7fc fc50 	bl	800223c <HAL_GetTick>
 800599c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800599e:	e00a      	b.n	80059b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059a0:	f7fc fc4c 	bl	800223c <HAL_GetTick>
 80059a4:	4602      	mov	r2, r0
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	1ad3      	subs	r3, r2, r3
 80059aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d901      	bls.n	80059b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80059b2:	2303      	movs	r3, #3
 80059b4:	e053      	b.n	8005a5e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059b6:	4b2d      	ldr	r3, [pc, #180]	; (8005a6c <HAL_RCC_ClockConfig+0x1c4>)
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	f003 020c 	and.w	r2, r3, #12
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	009b      	lsls	r3, r3, #2
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d1eb      	bne.n	80059a0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80059c8:	4b27      	ldr	r3, [pc, #156]	; (8005a68 <HAL_RCC_ClockConfig+0x1c0>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f003 0307 	and.w	r3, r3, #7
 80059d0:	683a      	ldr	r2, [r7, #0]
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d210      	bcs.n	80059f8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059d6:	4b24      	ldr	r3, [pc, #144]	; (8005a68 <HAL_RCC_ClockConfig+0x1c0>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f023 0207 	bic.w	r2, r3, #7
 80059de:	4922      	ldr	r1, [pc, #136]	; (8005a68 <HAL_RCC_ClockConfig+0x1c0>)
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	4313      	orrs	r3, r2
 80059e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059e6:	4b20      	ldr	r3, [pc, #128]	; (8005a68 <HAL_RCC_ClockConfig+0x1c0>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f003 0307 	and.w	r3, r3, #7
 80059ee:	683a      	ldr	r2, [r7, #0]
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d001      	beq.n	80059f8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	e032      	b.n	8005a5e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f003 0304 	and.w	r3, r3, #4
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d008      	beq.n	8005a16 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a04:	4b19      	ldr	r3, [pc, #100]	; (8005a6c <HAL_RCC_ClockConfig+0x1c4>)
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	68db      	ldr	r3, [r3, #12]
 8005a10:	4916      	ldr	r1, [pc, #88]	; (8005a6c <HAL_RCC_ClockConfig+0x1c4>)
 8005a12:	4313      	orrs	r3, r2
 8005a14:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f003 0308 	and.w	r3, r3, #8
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d009      	beq.n	8005a36 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005a22:	4b12      	ldr	r3, [pc, #72]	; (8005a6c <HAL_RCC_ClockConfig+0x1c4>)
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	691b      	ldr	r3, [r3, #16]
 8005a2e:	00db      	lsls	r3, r3, #3
 8005a30:	490e      	ldr	r1, [pc, #56]	; (8005a6c <HAL_RCC_ClockConfig+0x1c4>)
 8005a32:	4313      	orrs	r3, r2
 8005a34:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005a36:	f000 f821 	bl	8005a7c <HAL_RCC_GetSysClockFreq>
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	4b0b      	ldr	r3, [pc, #44]	; (8005a6c <HAL_RCC_ClockConfig+0x1c4>)
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	091b      	lsrs	r3, r3, #4
 8005a42:	f003 030f 	and.w	r3, r3, #15
 8005a46:	490a      	ldr	r1, [pc, #40]	; (8005a70 <HAL_RCC_ClockConfig+0x1c8>)
 8005a48:	5ccb      	ldrb	r3, [r1, r3]
 8005a4a:	fa22 f303 	lsr.w	r3, r2, r3
 8005a4e:	4a09      	ldr	r2, [pc, #36]	; (8005a74 <HAL_RCC_ClockConfig+0x1cc>)
 8005a50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005a52:	4b09      	ldr	r3, [pc, #36]	; (8005a78 <HAL_RCC_ClockConfig+0x1d0>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4618      	mov	r0, r3
 8005a58:	f7fc fbae 	bl	80021b8 <HAL_InitTick>

  return HAL_OK;
 8005a5c:	2300      	movs	r3, #0
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3710      	adds	r7, #16
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
 8005a66:	bf00      	nop
 8005a68:	40022000 	.word	0x40022000
 8005a6c:	40021000 	.word	0x40021000
 8005a70:	0800d740 	.word	0x0800d740
 8005a74:	20000048 	.word	0x20000048
 8005a78:	2000004c 	.word	0x2000004c

08005a7c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b087      	sub	sp, #28
 8005a80:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005a82:	2300      	movs	r3, #0
 8005a84:	60fb      	str	r3, [r7, #12]
 8005a86:	2300      	movs	r3, #0
 8005a88:	60bb      	str	r3, [r7, #8]
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	617b      	str	r3, [r7, #20]
 8005a8e:	2300      	movs	r3, #0
 8005a90:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005a92:	2300      	movs	r3, #0
 8005a94:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005a96:	4b1e      	ldr	r3, [pc, #120]	; (8005b10 <HAL_RCC_GetSysClockFreq+0x94>)
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f003 030c 	and.w	r3, r3, #12
 8005aa2:	2b04      	cmp	r3, #4
 8005aa4:	d002      	beq.n	8005aac <HAL_RCC_GetSysClockFreq+0x30>
 8005aa6:	2b08      	cmp	r3, #8
 8005aa8:	d003      	beq.n	8005ab2 <HAL_RCC_GetSysClockFreq+0x36>
 8005aaa:	e027      	b.n	8005afc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005aac:	4b19      	ldr	r3, [pc, #100]	; (8005b14 <HAL_RCC_GetSysClockFreq+0x98>)
 8005aae:	613b      	str	r3, [r7, #16]
      break;
 8005ab0:	e027      	b.n	8005b02 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	0c9b      	lsrs	r3, r3, #18
 8005ab6:	f003 030f 	and.w	r3, r3, #15
 8005aba:	4a17      	ldr	r2, [pc, #92]	; (8005b18 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005abc:	5cd3      	ldrb	r3, [r2, r3]
 8005abe:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d010      	beq.n	8005aec <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005aca:	4b11      	ldr	r3, [pc, #68]	; (8005b10 <HAL_RCC_GetSysClockFreq+0x94>)
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	0c5b      	lsrs	r3, r3, #17
 8005ad0:	f003 0301 	and.w	r3, r3, #1
 8005ad4:	4a11      	ldr	r2, [pc, #68]	; (8005b1c <HAL_RCC_GetSysClockFreq+0xa0>)
 8005ad6:	5cd3      	ldrb	r3, [r2, r3]
 8005ad8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	4a0d      	ldr	r2, [pc, #52]	; (8005b14 <HAL_RCC_GetSysClockFreq+0x98>)
 8005ade:	fb03 f202 	mul.w	r2, r3, r2
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ae8:	617b      	str	r3, [r7, #20]
 8005aea:	e004      	b.n	8005af6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	4a0c      	ldr	r2, [pc, #48]	; (8005b20 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005af0:	fb02 f303 	mul.w	r3, r2, r3
 8005af4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	613b      	str	r3, [r7, #16]
      break;
 8005afa:	e002      	b.n	8005b02 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005afc:	4b05      	ldr	r3, [pc, #20]	; (8005b14 <HAL_RCC_GetSysClockFreq+0x98>)
 8005afe:	613b      	str	r3, [r7, #16]
      break;
 8005b00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b02:	693b      	ldr	r3, [r7, #16]
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	371c      	adds	r7, #28
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bc80      	pop	{r7}
 8005b0c:	4770      	bx	lr
 8005b0e:	bf00      	nop
 8005b10:	40021000 	.word	0x40021000
 8005b14:	007a1200 	.word	0x007a1200
 8005b18:	0800d758 	.word	0x0800d758
 8005b1c:	0800d768 	.word	0x0800d768
 8005b20:	003d0900 	.word	0x003d0900

08005b24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b24:	b480      	push	{r7}
 8005b26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b28:	4b02      	ldr	r3, [pc, #8]	; (8005b34 <HAL_RCC_GetHCLKFreq+0x10>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bc80      	pop	{r7}
 8005b32:	4770      	bx	lr
 8005b34:	20000048 	.word	0x20000048

08005b38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005b3c:	f7ff fff2 	bl	8005b24 <HAL_RCC_GetHCLKFreq>
 8005b40:	4602      	mov	r2, r0
 8005b42:	4b05      	ldr	r3, [pc, #20]	; (8005b58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	0a1b      	lsrs	r3, r3, #8
 8005b48:	f003 0307 	and.w	r3, r3, #7
 8005b4c:	4903      	ldr	r1, [pc, #12]	; (8005b5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b4e:	5ccb      	ldrb	r3, [r1, r3]
 8005b50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	bd80      	pop	{r7, pc}
 8005b58:	40021000 	.word	0x40021000
 8005b5c:	0800d750 	.word	0x0800d750

08005b60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005b64:	f7ff ffde 	bl	8005b24 <HAL_RCC_GetHCLKFreq>
 8005b68:	4602      	mov	r2, r0
 8005b6a:	4b05      	ldr	r3, [pc, #20]	; (8005b80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	0adb      	lsrs	r3, r3, #11
 8005b70:	f003 0307 	and.w	r3, r3, #7
 8005b74:	4903      	ldr	r1, [pc, #12]	; (8005b84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b76:	5ccb      	ldrb	r3, [r1, r3]
 8005b78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	bd80      	pop	{r7, pc}
 8005b80:	40021000 	.word	0x40021000
 8005b84:	0800d750 	.word	0x0800d750

08005b88 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b085      	sub	sp, #20
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005b90:	4b0a      	ldr	r3, [pc, #40]	; (8005bbc <RCC_Delay+0x34>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a0a      	ldr	r2, [pc, #40]	; (8005bc0 <RCC_Delay+0x38>)
 8005b96:	fba2 2303 	umull	r2, r3, r2, r3
 8005b9a:	0a5b      	lsrs	r3, r3, #9
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	fb02 f303 	mul.w	r3, r2, r3
 8005ba2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005ba4:	bf00      	nop
  }
  while (Delay --);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	1e5a      	subs	r2, r3, #1
 8005baa:	60fa      	str	r2, [r7, #12]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d1f9      	bne.n	8005ba4 <RCC_Delay+0x1c>
}
 8005bb0:	bf00      	nop
 8005bb2:	bf00      	nop
 8005bb4:	3714      	adds	r7, #20
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bc80      	pop	{r7}
 8005bba:	4770      	bx	lr
 8005bbc:	20000048 	.word	0x20000048
 8005bc0:	10624dd3 	.word	0x10624dd3

08005bc4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b086      	sub	sp, #24
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	613b      	str	r3, [r7, #16]
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f003 0301 	and.w	r3, r3, #1
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d07d      	beq.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005be0:	2300      	movs	r3, #0
 8005be2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005be4:	4b4f      	ldr	r3, [pc, #316]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005be6:	69db      	ldr	r3, [r3, #28]
 8005be8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d10d      	bne.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005bf0:	4b4c      	ldr	r3, [pc, #304]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005bf2:	69db      	ldr	r3, [r3, #28]
 8005bf4:	4a4b      	ldr	r2, [pc, #300]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005bf6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bfa:	61d3      	str	r3, [r2, #28]
 8005bfc:	4b49      	ldr	r3, [pc, #292]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005bfe:	69db      	ldr	r3, [r3, #28]
 8005c00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c04:	60bb      	str	r3, [r7, #8]
 8005c06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c0c:	4b46      	ldr	r3, [pc, #280]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d118      	bne.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c18:	4b43      	ldr	r3, [pc, #268]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a42      	ldr	r2, [pc, #264]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005c1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c22:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c24:	f7fc fb0a 	bl	800223c <HAL_GetTick>
 8005c28:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c2a:	e008      	b.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c2c:	f7fc fb06 	bl	800223c <HAL_GetTick>
 8005c30:	4602      	mov	r2, r0
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	1ad3      	subs	r3, r2, r3
 8005c36:	2b64      	cmp	r3, #100	; 0x64
 8005c38:	d901      	bls.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005c3a:	2303      	movs	r3, #3
 8005c3c:	e06d      	b.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c3e:	4b3a      	ldr	r3, [pc, #232]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d0f0      	beq.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005c4a:	4b36      	ldr	r3, [pc, #216]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c4c:	6a1b      	ldr	r3, [r3, #32]
 8005c4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c52:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d02e      	beq.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c62:	68fa      	ldr	r2, [r7, #12]
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d027      	beq.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005c68:	4b2e      	ldr	r3, [pc, #184]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c6a:	6a1b      	ldr	r3, [r3, #32]
 8005c6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c70:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005c72:	4b2e      	ldr	r3, [pc, #184]	; (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005c74:	2201      	movs	r2, #1
 8005c76:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005c78:	4b2c      	ldr	r3, [pc, #176]	; (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005c7e:	4a29      	ldr	r2, [pc, #164]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f003 0301 	and.w	r3, r3, #1
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d014      	beq.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c8e:	f7fc fad5 	bl	800223c <HAL_GetTick>
 8005c92:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c94:	e00a      	b.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c96:	f7fc fad1 	bl	800223c <HAL_GetTick>
 8005c9a:	4602      	mov	r2, r0
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	1ad3      	subs	r3, r2, r3
 8005ca0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d901      	bls.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005ca8:	2303      	movs	r3, #3
 8005caa:	e036      	b.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cac:	4b1d      	ldr	r3, [pc, #116]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cae:	6a1b      	ldr	r3, [r3, #32]
 8005cb0:	f003 0302 	and.w	r3, r3, #2
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d0ee      	beq.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005cb8:	4b1a      	ldr	r3, [pc, #104]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cba:	6a1b      	ldr	r3, [r3, #32]
 8005cbc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	4917      	ldr	r1, [pc, #92]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005cca:	7dfb      	ldrb	r3, [r7, #23]
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d105      	bne.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005cd0:	4b14      	ldr	r3, [pc, #80]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cd2:	69db      	ldr	r3, [r3, #28]
 8005cd4:	4a13      	ldr	r2, [pc, #76]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cda:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f003 0302 	and.w	r3, r3, #2
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d008      	beq.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005ce8:	4b0e      	ldr	r3, [pc, #56]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	490b      	ldr	r1, [pc, #44]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f003 0310 	and.w	r3, r3, #16
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d008      	beq.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005d06:	4b07      	ldr	r3, [pc, #28]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	4904      	ldr	r1, [pc, #16]	; (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d14:	4313      	orrs	r3, r2
 8005d16:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005d18:	2300      	movs	r3, #0
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3718      	adds	r7, #24
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}
 8005d22:	bf00      	nop
 8005d24:	40021000 	.word	0x40021000
 8005d28:	40007000 	.word	0x40007000
 8005d2c:	42420440 	.word	0x42420440

08005d30 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b082      	sub	sp, #8
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d101      	bne.n	8005d42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	e076      	b.n	8005e30 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d108      	bne.n	8005d5c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d52:	d009      	beq.n	8005d68 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2200      	movs	r2, #0
 8005d58:	61da      	str	r2, [r3, #28]
 8005d5a:	e005      	b.n	8005d68 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2200      	movs	r2, #0
 8005d66:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d74:	b2db      	uxtb	r3, r3
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d106      	bne.n	8005d88 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f7fc f848 	bl	8001e18 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2202      	movs	r2, #2
 8005d8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d9e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005db0:	431a      	orrs	r2, r3
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	68db      	ldr	r3, [r3, #12]
 8005db6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005dba:	431a      	orrs	r2, r3
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	691b      	ldr	r3, [r3, #16]
 8005dc0:	f003 0302 	and.w	r3, r3, #2
 8005dc4:	431a      	orrs	r2, r3
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	695b      	ldr	r3, [r3, #20]
 8005dca:	f003 0301 	and.w	r3, r3, #1
 8005dce:	431a      	orrs	r2, r3
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	699b      	ldr	r3, [r3, #24]
 8005dd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005dd8:	431a      	orrs	r2, r3
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	69db      	ldr	r3, [r3, #28]
 8005dde:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005de2:	431a      	orrs	r2, r3
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6a1b      	ldr	r3, [r3, #32]
 8005de8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dec:	ea42 0103 	orr.w	r1, r2, r3
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005df4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	430a      	orrs	r2, r1
 8005dfe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	699b      	ldr	r3, [r3, #24]
 8005e04:	0c1a      	lsrs	r2, r3, #16
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f002 0204 	and.w	r2, r2, #4
 8005e0e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	69da      	ldr	r2, [r3, #28]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e1e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2200      	movs	r2, #0
 8005e24:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2201      	movs	r2, #1
 8005e2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005e2e:	2300      	movs	r3, #0
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3708      	adds	r7, #8
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}

08005e38 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b088      	sub	sp, #32
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	60f8      	str	r0, [r7, #12]
 8005e40:	60b9      	str	r1, [r7, #8]
 8005e42:	603b      	str	r3, [r7, #0]
 8005e44:	4613      	mov	r3, r2
 8005e46:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005e52:	2b01      	cmp	r3, #1
 8005e54:	d101      	bne.n	8005e5a <HAL_SPI_Transmit+0x22>
 8005e56:	2302      	movs	r3, #2
 8005e58:	e12d      	b.n	80060b6 <HAL_SPI_Transmit+0x27e>
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e62:	f7fc f9eb 	bl	800223c <HAL_GetTick>
 8005e66:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005e68:	88fb      	ldrh	r3, [r7, #6]
 8005e6a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e72:	b2db      	uxtb	r3, r3
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d002      	beq.n	8005e7e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005e78:	2302      	movs	r3, #2
 8005e7a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005e7c:	e116      	b.n	80060ac <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d002      	beq.n	8005e8a <HAL_SPI_Transmit+0x52>
 8005e84:	88fb      	ldrh	r3, [r7, #6]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d102      	bne.n	8005e90 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005e8e:	e10d      	b.n	80060ac <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2203      	movs	r2, #3
 8005e94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	68ba      	ldr	r2, [r7, #8]
 8005ea2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	88fa      	ldrh	r2, [r7, #6]
 8005ea8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	88fa      	ldrh	r2, [r7, #6]
 8005eae:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ed6:	d10f      	bne.n	8005ef8 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	681a      	ldr	r2, [r3, #0]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ee6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ef6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f02:	2b40      	cmp	r3, #64	; 0x40
 8005f04:	d007      	beq.n	8005f16 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	681a      	ldr	r2, [r3, #0]
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f14:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	68db      	ldr	r3, [r3, #12]
 8005f1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f1e:	d14f      	bne.n	8005fc0 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d002      	beq.n	8005f2e <HAL_SPI_Transmit+0xf6>
 8005f28:	8afb      	ldrh	r3, [r7, #22]
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d142      	bne.n	8005fb4 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f32:	881a      	ldrh	r2, [r3, #0]
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f3e:	1c9a      	adds	r2, r3, #2
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	3b01      	subs	r3, #1
 8005f4c:	b29a      	uxth	r2, r3
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005f52:	e02f      	b.n	8005fb4 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	689b      	ldr	r3, [r3, #8]
 8005f5a:	f003 0302 	and.w	r3, r3, #2
 8005f5e:	2b02      	cmp	r3, #2
 8005f60:	d112      	bne.n	8005f88 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f66:	881a      	ldrh	r2, [r3, #0]
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f72:	1c9a      	adds	r2, r3, #2
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	3b01      	subs	r3, #1
 8005f80:	b29a      	uxth	r2, r3
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	86da      	strh	r2, [r3, #54]	; 0x36
 8005f86:	e015      	b.n	8005fb4 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f88:	f7fc f958 	bl	800223c <HAL_GetTick>
 8005f8c:	4602      	mov	r2, r0
 8005f8e:	69bb      	ldr	r3, [r7, #24]
 8005f90:	1ad3      	subs	r3, r2, r3
 8005f92:	683a      	ldr	r2, [r7, #0]
 8005f94:	429a      	cmp	r2, r3
 8005f96:	d803      	bhi.n	8005fa0 <HAL_SPI_Transmit+0x168>
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f9e:	d102      	bne.n	8005fa6 <HAL_SPI_Transmit+0x16e>
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d106      	bne.n	8005fb4 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8005fa6:	2303      	movs	r3, #3
 8005fa8:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2201      	movs	r2, #1
 8005fae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005fb2:	e07b      	b.n	80060ac <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d1ca      	bne.n	8005f54 <HAL_SPI_Transmit+0x11c>
 8005fbe:	e050      	b.n	8006062 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d002      	beq.n	8005fce <HAL_SPI_Transmit+0x196>
 8005fc8:	8afb      	ldrh	r3, [r7, #22]
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	d144      	bne.n	8006058 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	330c      	adds	r3, #12
 8005fd8:	7812      	ldrb	r2, [r2, #0]
 8005fda:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fe0:	1c5a      	adds	r2, r3, #1
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	3b01      	subs	r3, #1
 8005fee:	b29a      	uxth	r2, r3
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005ff4:	e030      	b.n	8006058 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	f003 0302 	and.w	r3, r3, #2
 8006000:	2b02      	cmp	r3, #2
 8006002:	d113      	bne.n	800602c <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	330c      	adds	r3, #12
 800600e:	7812      	ldrb	r2, [r2, #0]
 8006010:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006016:	1c5a      	adds	r2, r3, #1
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006020:	b29b      	uxth	r3, r3
 8006022:	3b01      	subs	r3, #1
 8006024:	b29a      	uxth	r2, r3
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	86da      	strh	r2, [r3, #54]	; 0x36
 800602a:	e015      	b.n	8006058 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800602c:	f7fc f906 	bl	800223c <HAL_GetTick>
 8006030:	4602      	mov	r2, r0
 8006032:	69bb      	ldr	r3, [r7, #24]
 8006034:	1ad3      	subs	r3, r2, r3
 8006036:	683a      	ldr	r2, [r7, #0]
 8006038:	429a      	cmp	r2, r3
 800603a:	d803      	bhi.n	8006044 <HAL_SPI_Transmit+0x20c>
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006042:	d102      	bne.n	800604a <HAL_SPI_Transmit+0x212>
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d106      	bne.n	8006058 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800604a:	2303      	movs	r3, #3
 800604c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2201      	movs	r2, #1
 8006052:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8006056:	e029      	b.n	80060ac <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800605c:	b29b      	uxth	r3, r3
 800605e:	2b00      	cmp	r3, #0
 8006060:	d1c9      	bne.n	8005ff6 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006062:	69ba      	ldr	r2, [r7, #24]
 8006064:	6839      	ldr	r1, [r7, #0]
 8006066:	68f8      	ldr	r0, [r7, #12]
 8006068:	f000 fa6e 	bl	8006548 <SPI_EndRxTxTransaction>
 800606c:	4603      	mov	r3, r0
 800606e:	2b00      	cmp	r3, #0
 8006070:	d002      	beq.n	8006078 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2220      	movs	r2, #32
 8006076:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d10a      	bne.n	8006096 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006080:	2300      	movs	r3, #0
 8006082:	613b      	str	r3, [r7, #16]
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	68db      	ldr	r3, [r3, #12]
 800608a:	613b      	str	r3, [r7, #16]
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	613b      	str	r3, [r7, #16]
 8006094:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800609a:	2b00      	cmp	r3, #0
 800609c:	d002      	beq.n	80060a4 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800609e:	2301      	movs	r3, #1
 80060a0:	77fb      	strb	r3, [r7, #31]
 80060a2:	e003      	b.n	80060ac <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2201      	movs	r2, #1
 80060a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2200      	movs	r2, #0
 80060b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80060b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3720      	adds	r7, #32
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}

080060be <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80060be:	b580      	push	{r7, lr}
 80060c0:	b08c      	sub	sp, #48	; 0x30
 80060c2:	af00      	add	r7, sp, #0
 80060c4:	60f8      	str	r0, [r7, #12]
 80060c6:	60b9      	str	r1, [r7, #8]
 80060c8:	607a      	str	r2, [r7, #4]
 80060ca:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80060cc:	2301      	movs	r3, #1
 80060ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80060d0:	2300      	movs	r3, #0
 80060d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80060dc:	2b01      	cmp	r3, #1
 80060de:	d101      	bne.n	80060e4 <HAL_SPI_TransmitReceive+0x26>
 80060e0:	2302      	movs	r3, #2
 80060e2:	e198      	b.n	8006416 <HAL_SPI_TransmitReceive+0x358>
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2201      	movs	r2, #1
 80060e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80060ec:	f7fc f8a6 	bl	800223c <HAL_GetTick>
 80060f0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80060f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006102:	887b      	ldrh	r3, [r7, #2]
 8006104:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006106:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800610a:	2b01      	cmp	r3, #1
 800610c:	d00f      	beq.n	800612e <HAL_SPI_TransmitReceive+0x70>
 800610e:	69fb      	ldr	r3, [r7, #28]
 8006110:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006114:	d107      	bne.n	8006126 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	689b      	ldr	r3, [r3, #8]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d103      	bne.n	8006126 <HAL_SPI_TransmitReceive+0x68>
 800611e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006122:	2b04      	cmp	r3, #4
 8006124:	d003      	beq.n	800612e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006126:	2302      	movs	r3, #2
 8006128:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800612c:	e16d      	b.n	800640a <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d005      	beq.n	8006140 <HAL_SPI_TransmitReceive+0x82>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d002      	beq.n	8006140 <HAL_SPI_TransmitReceive+0x82>
 800613a:	887b      	ldrh	r3, [r7, #2]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d103      	bne.n	8006148 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006140:	2301      	movs	r3, #1
 8006142:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006146:	e160      	b.n	800640a <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800614e:	b2db      	uxtb	r3, r3
 8006150:	2b04      	cmp	r3, #4
 8006152:	d003      	beq.n	800615c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2205      	movs	r2, #5
 8006158:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2200      	movs	r2, #0
 8006160:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	687a      	ldr	r2, [r7, #4]
 8006166:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	887a      	ldrh	r2, [r7, #2]
 800616c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	887a      	ldrh	r2, [r7, #2]
 8006172:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	68ba      	ldr	r2, [r7, #8]
 8006178:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	887a      	ldrh	r2, [r7, #2]
 800617e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	887a      	ldrh	r2, [r7, #2]
 8006184:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2200      	movs	r2, #0
 800618a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2200      	movs	r2, #0
 8006190:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800619c:	2b40      	cmp	r3, #64	; 0x40
 800619e:	d007      	beq.n	80061b0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	681a      	ldr	r2, [r3, #0]
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80061ae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	68db      	ldr	r3, [r3, #12]
 80061b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061b8:	d17c      	bne.n	80062b4 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d002      	beq.n	80061c8 <HAL_SPI_TransmitReceive+0x10a>
 80061c2:	8b7b      	ldrh	r3, [r7, #26]
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	d16a      	bne.n	800629e <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061cc:	881a      	ldrh	r2, [r3, #0]
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061d8:	1c9a      	adds	r2, r3, #2
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	3b01      	subs	r3, #1
 80061e6:	b29a      	uxth	r2, r3
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80061ec:	e057      	b.n	800629e <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	f003 0302 	and.w	r3, r3, #2
 80061f8:	2b02      	cmp	r3, #2
 80061fa:	d11b      	bne.n	8006234 <HAL_SPI_TransmitReceive+0x176>
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006200:	b29b      	uxth	r3, r3
 8006202:	2b00      	cmp	r3, #0
 8006204:	d016      	beq.n	8006234 <HAL_SPI_TransmitReceive+0x176>
 8006206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006208:	2b01      	cmp	r3, #1
 800620a:	d113      	bne.n	8006234 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006210:	881a      	ldrh	r2, [r3, #0]
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800621c:	1c9a      	adds	r2, r3, #2
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006226:	b29b      	uxth	r3, r3
 8006228:	3b01      	subs	r3, #1
 800622a:	b29a      	uxth	r2, r3
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006230:	2300      	movs	r3, #0
 8006232:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	689b      	ldr	r3, [r3, #8]
 800623a:	f003 0301 	and.w	r3, r3, #1
 800623e:	2b01      	cmp	r3, #1
 8006240:	d119      	bne.n	8006276 <HAL_SPI_TransmitReceive+0x1b8>
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006246:	b29b      	uxth	r3, r3
 8006248:	2b00      	cmp	r3, #0
 800624a:	d014      	beq.n	8006276 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	68da      	ldr	r2, [r3, #12]
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006256:	b292      	uxth	r2, r2
 8006258:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800625e:	1c9a      	adds	r2, r3, #2
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006268:	b29b      	uxth	r3, r3
 800626a:	3b01      	subs	r3, #1
 800626c:	b29a      	uxth	r2, r3
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006272:	2301      	movs	r3, #1
 8006274:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006276:	f7fb ffe1 	bl	800223c <HAL_GetTick>
 800627a:	4602      	mov	r2, r0
 800627c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800627e:	1ad3      	subs	r3, r2, r3
 8006280:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006282:	429a      	cmp	r2, r3
 8006284:	d80b      	bhi.n	800629e <HAL_SPI_TransmitReceive+0x1e0>
 8006286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800628c:	d007      	beq.n	800629e <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800628e:	2303      	movs	r3, #3
 8006290:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2201      	movs	r2, #1
 8006298:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800629c:	e0b5      	b.n	800640a <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062a2:	b29b      	uxth	r3, r3
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d1a2      	bne.n	80061ee <HAL_SPI_TransmitReceive+0x130>
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062ac:	b29b      	uxth	r3, r3
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d19d      	bne.n	80061ee <HAL_SPI_TransmitReceive+0x130>
 80062b2:	e080      	b.n	80063b6 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d002      	beq.n	80062c2 <HAL_SPI_TransmitReceive+0x204>
 80062bc:	8b7b      	ldrh	r3, [r7, #26]
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d16f      	bne.n	80063a2 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	330c      	adds	r3, #12
 80062cc:	7812      	ldrb	r2, [r2, #0]
 80062ce:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062d4:	1c5a      	adds	r2, r3, #1
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062de:	b29b      	uxth	r3, r3
 80062e0:	3b01      	subs	r3, #1
 80062e2:	b29a      	uxth	r2, r3
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80062e8:	e05b      	b.n	80063a2 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	689b      	ldr	r3, [r3, #8]
 80062f0:	f003 0302 	and.w	r3, r3, #2
 80062f4:	2b02      	cmp	r3, #2
 80062f6:	d11c      	bne.n	8006332 <HAL_SPI_TransmitReceive+0x274>
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d017      	beq.n	8006332 <HAL_SPI_TransmitReceive+0x274>
 8006302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006304:	2b01      	cmp	r3, #1
 8006306:	d114      	bne.n	8006332 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	330c      	adds	r3, #12
 8006312:	7812      	ldrb	r2, [r2, #0]
 8006314:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800631a:	1c5a      	adds	r2, r3, #1
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006324:	b29b      	uxth	r3, r3
 8006326:	3b01      	subs	r3, #1
 8006328:	b29a      	uxth	r2, r3
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800632e:	2300      	movs	r3, #0
 8006330:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	f003 0301 	and.w	r3, r3, #1
 800633c:	2b01      	cmp	r3, #1
 800633e:	d119      	bne.n	8006374 <HAL_SPI_TransmitReceive+0x2b6>
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006344:	b29b      	uxth	r3, r3
 8006346:	2b00      	cmp	r3, #0
 8006348:	d014      	beq.n	8006374 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	68da      	ldr	r2, [r3, #12]
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006354:	b2d2      	uxtb	r2, r2
 8006356:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800635c:	1c5a      	adds	r2, r3, #1
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006366:	b29b      	uxth	r3, r3
 8006368:	3b01      	subs	r3, #1
 800636a:	b29a      	uxth	r2, r3
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006370:	2301      	movs	r3, #1
 8006372:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006374:	f7fb ff62 	bl	800223c <HAL_GetTick>
 8006378:	4602      	mov	r2, r0
 800637a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800637c:	1ad3      	subs	r3, r2, r3
 800637e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006380:	429a      	cmp	r2, r3
 8006382:	d803      	bhi.n	800638c <HAL_SPI_TransmitReceive+0x2ce>
 8006384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800638a:	d102      	bne.n	8006392 <HAL_SPI_TransmitReceive+0x2d4>
 800638c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800638e:	2b00      	cmp	r3, #0
 8006390:	d107      	bne.n	80063a2 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8006392:	2303      	movs	r3, #3
 8006394:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2201      	movs	r2, #1
 800639c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80063a0:	e033      	b.n	800640a <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063a6:	b29b      	uxth	r3, r3
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d19e      	bne.n	80062ea <HAL_SPI_TransmitReceive+0x22c>
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d199      	bne.n	80062ea <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80063b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063b8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80063ba:	68f8      	ldr	r0, [r7, #12]
 80063bc:	f000 f8c4 	bl	8006548 <SPI_EndRxTxTransaction>
 80063c0:	4603      	mov	r3, r0
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d006      	beq.n	80063d4 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80063c6:	2301      	movs	r3, #1
 80063c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2220      	movs	r2, #32
 80063d0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80063d2:	e01a      	b.n	800640a <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	689b      	ldr	r3, [r3, #8]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d10a      	bne.n	80063f2 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80063dc:	2300      	movs	r3, #0
 80063de:	617b      	str	r3, [r7, #20]
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	68db      	ldr	r3, [r3, #12]
 80063e6:	617b      	str	r3, [r7, #20]
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	689b      	ldr	r3, [r3, #8]
 80063ee:	617b      	str	r3, [r7, #20]
 80063f0:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d003      	beq.n	8006402 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80063fa:	2301      	movs	r3, #1
 80063fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006400:	e003      	b.n	800640a <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2201      	movs	r2, #1
 8006406:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2200      	movs	r2, #0
 800640e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006412:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006416:	4618      	mov	r0, r3
 8006418:	3730      	adds	r7, #48	; 0x30
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}

0800641e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800641e:	b480      	push	{r7}
 8006420:	b083      	sub	sp, #12
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800642c:	b2db      	uxtb	r3, r3
}
 800642e:	4618      	mov	r0, r3
 8006430:	370c      	adds	r7, #12
 8006432:	46bd      	mov	sp, r7
 8006434:	bc80      	pop	{r7}
 8006436:	4770      	bx	lr

08006438 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b088      	sub	sp, #32
 800643c:	af00      	add	r7, sp, #0
 800643e:	60f8      	str	r0, [r7, #12]
 8006440:	60b9      	str	r1, [r7, #8]
 8006442:	603b      	str	r3, [r7, #0]
 8006444:	4613      	mov	r3, r2
 8006446:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006448:	f7fb fef8 	bl	800223c <HAL_GetTick>
 800644c:	4602      	mov	r2, r0
 800644e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006450:	1a9b      	subs	r3, r3, r2
 8006452:	683a      	ldr	r2, [r7, #0]
 8006454:	4413      	add	r3, r2
 8006456:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006458:	f7fb fef0 	bl	800223c <HAL_GetTick>
 800645c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800645e:	4b39      	ldr	r3, [pc, #228]	; (8006544 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	015b      	lsls	r3, r3, #5
 8006464:	0d1b      	lsrs	r3, r3, #20
 8006466:	69fa      	ldr	r2, [r7, #28]
 8006468:	fb02 f303 	mul.w	r3, r2, r3
 800646c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800646e:	e054      	b.n	800651a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006476:	d050      	beq.n	800651a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006478:	f7fb fee0 	bl	800223c <HAL_GetTick>
 800647c:	4602      	mov	r2, r0
 800647e:	69bb      	ldr	r3, [r7, #24]
 8006480:	1ad3      	subs	r3, r2, r3
 8006482:	69fa      	ldr	r2, [r7, #28]
 8006484:	429a      	cmp	r2, r3
 8006486:	d902      	bls.n	800648e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006488:	69fb      	ldr	r3, [r7, #28]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d13d      	bne.n	800650a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	685a      	ldr	r2, [r3, #4]
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800649c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80064a6:	d111      	bne.n	80064cc <SPI_WaitFlagStateUntilTimeout+0x94>
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064b0:	d004      	beq.n	80064bc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	689b      	ldr	r3, [r3, #8]
 80064b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064ba:	d107      	bne.n	80064cc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064d4:	d10f      	bne.n	80064f6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	681a      	ldr	r2, [r3, #0]
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80064e4:	601a      	str	r2, [r3, #0]
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	681a      	ldr	r2, [r3, #0]
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80064f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2201      	movs	r2, #1
 80064fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2200      	movs	r2, #0
 8006502:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006506:	2303      	movs	r3, #3
 8006508:	e017      	b.n	800653a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d101      	bne.n	8006514 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006510:	2300      	movs	r3, #0
 8006512:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	3b01      	subs	r3, #1
 8006518:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	689a      	ldr	r2, [r3, #8]
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	4013      	ands	r3, r2
 8006524:	68ba      	ldr	r2, [r7, #8]
 8006526:	429a      	cmp	r2, r3
 8006528:	bf0c      	ite	eq
 800652a:	2301      	moveq	r3, #1
 800652c:	2300      	movne	r3, #0
 800652e:	b2db      	uxtb	r3, r3
 8006530:	461a      	mov	r2, r3
 8006532:	79fb      	ldrb	r3, [r7, #7]
 8006534:	429a      	cmp	r2, r3
 8006536:	d19b      	bne.n	8006470 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006538:	2300      	movs	r3, #0
}
 800653a:	4618      	mov	r0, r3
 800653c:	3720      	adds	r7, #32
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}
 8006542:	bf00      	nop
 8006544:	20000048 	.word	0x20000048

08006548 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b086      	sub	sp, #24
 800654c:	af02      	add	r7, sp, #8
 800654e:	60f8      	str	r0, [r7, #12]
 8006550:	60b9      	str	r1, [r7, #8]
 8006552:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	9300      	str	r3, [sp, #0]
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	2200      	movs	r2, #0
 800655c:	2180      	movs	r1, #128	; 0x80
 800655e:	68f8      	ldr	r0, [r7, #12]
 8006560:	f7ff ff6a 	bl	8006438 <SPI_WaitFlagStateUntilTimeout>
 8006564:	4603      	mov	r3, r0
 8006566:	2b00      	cmp	r3, #0
 8006568:	d007      	beq.n	800657a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800656e:	f043 0220 	orr.w	r2, r3, #32
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8006576:	2303      	movs	r3, #3
 8006578:	e000      	b.n	800657c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800657a:	2300      	movs	r3, #0
}
 800657c:	4618      	mov	r0, r3
 800657e:	3710      	adds	r7, #16
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}

08006584 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b082      	sub	sp, #8
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d101      	bne.n	8006596 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006592:	2301      	movs	r3, #1
 8006594:	e042      	b.n	800661c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800659c:	b2db      	uxtb	r3, r3
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d106      	bne.n	80065b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2200      	movs	r2, #0
 80065a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f7fb fc7e 	bl	8001eac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2224      	movs	r2, #36	; 0x24
 80065b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	68da      	ldr	r2, [r3, #12]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80065c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f000 f91d 	bl	8006808 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	691a      	ldr	r2, [r3, #16]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80065dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	695a      	ldr	r2, [r3, #20]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80065ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	68da      	ldr	r2, [r3, #12]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80065fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2200      	movs	r2, #0
 8006602:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2220      	movs	r2, #32
 8006608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2220      	movs	r2, #32
 8006610:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2200      	movs	r2, #0
 8006618:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800661a:	2300      	movs	r3, #0
}
 800661c:	4618      	mov	r0, r3
 800661e:	3708      	adds	r7, #8
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}

08006624 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b08a      	sub	sp, #40	; 0x28
 8006628:	af02      	add	r7, sp, #8
 800662a:	60f8      	str	r0, [r7, #12]
 800662c:	60b9      	str	r1, [r7, #8]
 800662e:	603b      	str	r3, [r7, #0]
 8006630:	4613      	mov	r3, r2
 8006632:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006634:	2300      	movs	r3, #0
 8006636:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800663e:	b2db      	uxtb	r3, r3
 8006640:	2b20      	cmp	r3, #32
 8006642:	d16d      	bne.n	8006720 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d002      	beq.n	8006650 <HAL_UART_Transmit+0x2c>
 800664a:	88fb      	ldrh	r3, [r7, #6]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d101      	bne.n	8006654 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006650:	2301      	movs	r3, #1
 8006652:	e066      	b.n	8006722 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2200      	movs	r2, #0
 8006658:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2221      	movs	r2, #33	; 0x21
 800665e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006662:	f7fb fdeb 	bl	800223c <HAL_GetTick>
 8006666:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	88fa      	ldrh	r2, [r7, #6]
 800666c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	88fa      	ldrh	r2, [r7, #6]
 8006672:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	689b      	ldr	r3, [r3, #8]
 8006678:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800667c:	d108      	bne.n	8006690 <HAL_UART_Transmit+0x6c>
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	691b      	ldr	r3, [r3, #16]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d104      	bne.n	8006690 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006686:	2300      	movs	r3, #0
 8006688:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	61bb      	str	r3, [r7, #24]
 800668e:	e003      	b.n	8006698 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006694:	2300      	movs	r3, #0
 8006696:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006698:	e02a      	b.n	80066f0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	9300      	str	r3, [sp, #0]
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	2200      	movs	r2, #0
 80066a2:	2180      	movs	r1, #128	; 0x80
 80066a4:	68f8      	ldr	r0, [r7, #12]
 80066a6:	f000 f840 	bl	800672a <UART_WaitOnFlagUntilTimeout>
 80066aa:	4603      	mov	r3, r0
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d001      	beq.n	80066b4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80066b0:	2303      	movs	r3, #3
 80066b2:	e036      	b.n	8006722 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80066b4:	69fb      	ldr	r3, [r7, #28]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d10b      	bne.n	80066d2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80066ba:	69bb      	ldr	r3, [r7, #24]
 80066bc:	881b      	ldrh	r3, [r3, #0]
 80066be:	461a      	mov	r2, r3
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80066c8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80066ca:	69bb      	ldr	r3, [r7, #24]
 80066cc:	3302      	adds	r3, #2
 80066ce:	61bb      	str	r3, [r7, #24]
 80066d0:	e007      	b.n	80066e2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80066d2:	69fb      	ldr	r3, [r7, #28]
 80066d4:	781a      	ldrb	r2, [r3, #0]
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80066dc:	69fb      	ldr	r3, [r7, #28]
 80066de:	3301      	adds	r3, #1
 80066e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	3b01      	subs	r3, #1
 80066ea:	b29a      	uxth	r2, r3
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80066f4:	b29b      	uxth	r3, r3
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d1cf      	bne.n	800669a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	9300      	str	r3, [sp, #0]
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	2200      	movs	r2, #0
 8006702:	2140      	movs	r1, #64	; 0x40
 8006704:	68f8      	ldr	r0, [r7, #12]
 8006706:	f000 f810 	bl	800672a <UART_WaitOnFlagUntilTimeout>
 800670a:	4603      	mov	r3, r0
 800670c:	2b00      	cmp	r3, #0
 800670e:	d001      	beq.n	8006714 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8006710:	2303      	movs	r3, #3
 8006712:	e006      	b.n	8006722 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2220      	movs	r2, #32
 8006718:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800671c:	2300      	movs	r3, #0
 800671e:	e000      	b.n	8006722 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006720:	2302      	movs	r3, #2
  }
}
 8006722:	4618      	mov	r0, r3
 8006724:	3720      	adds	r7, #32
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}

0800672a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800672a:	b580      	push	{r7, lr}
 800672c:	b090      	sub	sp, #64	; 0x40
 800672e:	af00      	add	r7, sp, #0
 8006730:	60f8      	str	r0, [r7, #12]
 8006732:	60b9      	str	r1, [r7, #8]
 8006734:	603b      	str	r3, [r7, #0]
 8006736:	4613      	mov	r3, r2
 8006738:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800673a:	e050      	b.n	80067de <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800673c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800673e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006742:	d04c      	beq.n	80067de <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006744:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006746:	2b00      	cmp	r3, #0
 8006748:	d007      	beq.n	800675a <UART_WaitOnFlagUntilTimeout+0x30>
 800674a:	f7fb fd77 	bl	800223c <HAL_GetTick>
 800674e:	4602      	mov	r2, r0
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	1ad3      	subs	r3, r2, r3
 8006754:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006756:	429a      	cmp	r2, r3
 8006758:	d241      	bcs.n	80067de <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	330c      	adds	r3, #12
 8006760:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006764:	e853 3f00 	ldrex	r3, [r3]
 8006768:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800676a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006770:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	330c      	adds	r3, #12
 8006778:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800677a:	637a      	str	r2, [r7, #52]	; 0x34
 800677c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800677e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006780:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006782:	e841 2300 	strex	r3, r2, [r1]
 8006786:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800678a:	2b00      	cmp	r3, #0
 800678c:	d1e5      	bne.n	800675a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	3314      	adds	r3, #20
 8006794:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	e853 3f00 	ldrex	r3, [r3]
 800679c:	613b      	str	r3, [r7, #16]
   return(result);
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	f023 0301 	bic.w	r3, r3, #1
 80067a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	3314      	adds	r3, #20
 80067ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80067ae:	623a      	str	r2, [r7, #32]
 80067b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067b2:	69f9      	ldr	r1, [r7, #28]
 80067b4:	6a3a      	ldr	r2, [r7, #32]
 80067b6:	e841 2300 	strex	r3, r2, [r1]
 80067ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80067bc:	69bb      	ldr	r3, [r7, #24]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d1e5      	bne.n	800678e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2220      	movs	r2, #32
 80067c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2220      	movs	r2, #32
 80067ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2200      	movs	r2, #0
 80067d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80067da:	2303      	movs	r3, #3
 80067dc:	e00f      	b.n	80067fe <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	681a      	ldr	r2, [r3, #0]
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	4013      	ands	r3, r2
 80067e8:	68ba      	ldr	r2, [r7, #8]
 80067ea:	429a      	cmp	r2, r3
 80067ec:	bf0c      	ite	eq
 80067ee:	2301      	moveq	r3, #1
 80067f0:	2300      	movne	r3, #0
 80067f2:	b2db      	uxtb	r3, r3
 80067f4:	461a      	mov	r2, r3
 80067f6:	79fb      	ldrb	r3, [r7, #7]
 80067f8:	429a      	cmp	r2, r3
 80067fa:	d09f      	beq.n	800673c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80067fc:	2300      	movs	r3, #0
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3740      	adds	r7, #64	; 0x40
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}
	...

08006808 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b084      	sub	sp, #16
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	691b      	ldr	r3, [r3, #16]
 8006816:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	68da      	ldr	r2, [r3, #12]
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	430a      	orrs	r2, r1
 8006824:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	689a      	ldr	r2, [r3, #8]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	691b      	ldr	r3, [r3, #16]
 800682e:	431a      	orrs	r2, r3
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	695b      	ldr	r3, [r3, #20]
 8006834:	4313      	orrs	r3, r2
 8006836:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	68db      	ldr	r3, [r3, #12]
 800683e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006842:	f023 030c 	bic.w	r3, r3, #12
 8006846:	687a      	ldr	r2, [r7, #4]
 8006848:	6812      	ldr	r2, [r2, #0]
 800684a:	68b9      	ldr	r1, [r7, #8]
 800684c:	430b      	orrs	r3, r1
 800684e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	695b      	ldr	r3, [r3, #20]
 8006856:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	699a      	ldr	r2, [r3, #24]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	430a      	orrs	r2, r1
 8006864:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a2c      	ldr	r2, [pc, #176]	; (800691c <UART_SetConfig+0x114>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d103      	bne.n	8006878 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006870:	f7ff f976 	bl	8005b60 <HAL_RCC_GetPCLK2Freq>
 8006874:	60f8      	str	r0, [r7, #12]
 8006876:	e002      	b.n	800687e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006878:	f7ff f95e 	bl	8005b38 <HAL_RCC_GetPCLK1Freq>
 800687c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800687e:	68fa      	ldr	r2, [r7, #12]
 8006880:	4613      	mov	r3, r2
 8006882:	009b      	lsls	r3, r3, #2
 8006884:	4413      	add	r3, r2
 8006886:	009a      	lsls	r2, r3, #2
 8006888:	441a      	add	r2, r3
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	009b      	lsls	r3, r3, #2
 8006890:	fbb2 f3f3 	udiv	r3, r2, r3
 8006894:	4a22      	ldr	r2, [pc, #136]	; (8006920 <UART_SetConfig+0x118>)
 8006896:	fba2 2303 	umull	r2, r3, r2, r3
 800689a:	095b      	lsrs	r3, r3, #5
 800689c:	0119      	lsls	r1, r3, #4
 800689e:	68fa      	ldr	r2, [r7, #12]
 80068a0:	4613      	mov	r3, r2
 80068a2:	009b      	lsls	r3, r3, #2
 80068a4:	4413      	add	r3, r2
 80068a6:	009a      	lsls	r2, r3, #2
 80068a8:	441a      	add	r2, r3
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	009b      	lsls	r3, r3, #2
 80068b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80068b4:	4b1a      	ldr	r3, [pc, #104]	; (8006920 <UART_SetConfig+0x118>)
 80068b6:	fba3 0302 	umull	r0, r3, r3, r2
 80068ba:	095b      	lsrs	r3, r3, #5
 80068bc:	2064      	movs	r0, #100	; 0x64
 80068be:	fb00 f303 	mul.w	r3, r0, r3
 80068c2:	1ad3      	subs	r3, r2, r3
 80068c4:	011b      	lsls	r3, r3, #4
 80068c6:	3332      	adds	r3, #50	; 0x32
 80068c8:	4a15      	ldr	r2, [pc, #84]	; (8006920 <UART_SetConfig+0x118>)
 80068ca:	fba2 2303 	umull	r2, r3, r2, r3
 80068ce:	095b      	lsrs	r3, r3, #5
 80068d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80068d4:	4419      	add	r1, r3
 80068d6:	68fa      	ldr	r2, [r7, #12]
 80068d8:	4613      	mov	r3, r2
 80068da:	009b      	lsls	r3, r3, #2
 80068dc:	4413      	add	r3, r2
 80068de:	009a      	lsls	r2, r3, #2
 80068e0:	441a      	add	r2, r3
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	009b      	lsls	r3, r3, #2
 80068e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80068ec:	4b0c      	ldr	r3, [pc, #48]	; (8006920 <UART_SetConfig+0x118>)
 80068ee:	fba3 0302 	umull	r0, r3, r3, r2
 80068f2:	095b      	lsrs	r3, r3, #5
 80068f4:	2064      	movs	r0, #100	; 0x64
 80068f6:	fb00 f303 	mul.w	r3, r0, r3
 80068fa:	1ad3      	subs	r3, r2, r3
 80068fc:	011b      	lsls	r3, r3, #4
 80068fe:	3332      	adds	r3, #50	; 0x32
 8006900:	4a07      	ldr	r2, [pc, #28]	; (8006920 <UART_SetConfig+0x118>)
 8006902:	fba2 2303 	umull	r2, r3, r2, r3
 8006906:	095b      	lsrs	r3, r3, #5
 8006908:	f003 020f 	and.w	r2, r3, #15
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	440a      	add	r2, r1
 8006912:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006914:	bf00      	nop
 8006916:	3710      	adds	r7, #16
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}
 800691c:	40013800 	.word	0x40013800
 8006920:	51eb851f 	.word	0x51eb851f

08006924 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006924:	b084      	sub	sp, #16
 8006926:	b480      	push	{r7}
 8006928:	b083      	sub	sp, #12
 800692a:	af00      	add	r7, sp, #0
 800692c:	6078      	str	r0, [r7, #4]
 800692e:	f107 0014 	add.w	r0, r7, #20
 8006932:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006936:	2300      	movs	r3, #0
}
 8006938:	4618      	mov	r0, r3
 800693a:	370c      	adds	r7, #12
 800693c:	46bd      	mov	sp, r7
 800693e:	bc80      	pop	{r7}
 8006940:	b004      	add	sp, #16
 8006942:	4770      	bx	lr

08006944 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006944:	b480      	push	{r7}
 8006946:	b085      	sub	sp, #20
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2200      	movs	r2, #0
 8006950:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006954:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006958:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	b29a      	uxth	r2, r3
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006964:	2300      	movs	r3, #0
}
 8006966:	4618      	mov	r0, r3
 8006968:	3714      	adds	r7, #20
 800696a:	46bd      	mov	sp, r7
 800696c:	bc80      	pop	{r7}
 800696e:	4770      	bx	lr

08006970 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006970:	b480      	push	{r7}
 8006972:	b085      	sub	sp, #20
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006978:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800697c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006984:	b29a      	uxth	r2, r3
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	b29b      	uxth	r3, r3
 800698a:	43db      	mvns	r3, r3
 800698c:	b29b      	uxth	r3, r3
 800698e:	4013      	ands	r3, r2
 8006990:	b29a      	uxth	r2, r3
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006998:	2300      	movs	r3, #0
}
 800699a:	4618      	mov	r0, r3
 800699c:	3714      	adds	r7, #20
 800699e:	46bd      	mov	sp, r7
 80069a0:	bc80      	pop	{r7}
 80069a2:	4770      	bx	lr

080069a4 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b083      	sub	sp, #12
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
 80069ac:	460b      	mov	r3, r1
 80069ae:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80069b0:	2300      	movs	r3, #0
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	370c      	adds	r7, #12
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bc80      	pop	{r7}
 80069ba:	4770      	bx	lr

080069bc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80069bc:	b084      	sub	sp, #16
 80069be:	b480      	push	{r7}
 80069c0:	b083      	sub	sp, #12
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	6078      	str	r0, [r7, #4]
 80069c6:	f107 0014 	add.w	r0, r7, #20
 80069ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2201      	movs	r2, #1
 80069d2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2200      	movs	r2, #0
 80069da:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2200      	movs	r2, #0
 80069e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2200      	movs	r2, #0
 80069ea:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80069ee:	2300      	movs	r3, #0
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	370c      	adds	r7, #12
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bc80      	pop	{r7}
 80069f8:	b004      	add	sp, #16
 80069fa:	4770      	bx	lr

080069fc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b09d      	sub	sp, #116	; 0x74
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
 8006a04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006a06:	2300      	movs	r3, #0
 8006a08:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006a0c:	687a      	ldr	r2, [r7, #4]
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	781b      	ldrb	r3, [r3, #0]
 8006a12:	009b      	lsls	r3, r3, #2
 8006a14:	4413      	add	r3, r2
 8006a16:	881b      	ldrh	r3, [r3, #0]
 8006a18:	b29b      	uxth	r3, r3
 8006a1a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8006a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a22:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	78db      	ldrb	r3, [r3, #3]
 8006a2a:	2b03      	cmp	r3, #3
 8006a2c:	d81f      	bhi.n	8006a6e <USB_ActivateEndpoint+0x72>
 8006a2e:	a201      	add	r2, pc, #4	; (adr r2, 8006a34 <USB_ActivateEndpoint+0x38>)
 8006a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a34:	08006a45 	.word	0x08006a45
 8006a38:	08006a61 	.word	0x08006a61
 8006a3c:	08006a77 	.word	0x08006a77
 8006a40:	08006a53 	.word	0x08006a53
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006a44:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006a48:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006a4c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006a50:	e012      	b.n	8006a78 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006a52:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006a56:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8006a5a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006a5e:	e00b      	b.n	8006a78 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006a60:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006a64:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006a68:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006a6c:	e004      	b.n	8006a78 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8006a74:	e000      	b.n	8006a78 <USB_ActivateEndpoint+0x7c>
      break;
 8006a76:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006a78:	687a      	ldr	r2, [r7, #4]
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	781b      	ldrb	r3, [r3, #0]
 8006a7e:	009b      	lsls	r3, r3, #2
 8006a80:	441a      	add	r2, r3
 8006a82:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006a86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a96:	b29b      	uxth	r3, r3
 8006a98:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006a9a:	687a      	ldr	r2, [r7, #4]
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	781b      	ldrb	r3, [r3, #0]
 8006aa0:	009b      	lsls	r3, r3, #2
 8006aa2:	4413      	add	r3, r2
 8006aa4:	881b      	ldrh	r3, [r3, #0]
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006aac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ab0:	b29a      	uxth	r2, r3
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	781b      	ldrb	r3, [r3, #0]
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8006abe:	687a      	ldr	r2, [r7, #4]
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	781b      	ldrb	r3, [r3, #0]
 8006ac4:	009b      	lsls	r3, r3, #2
 8006ac6:	441a      	add	r2, r3
 8006ac8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8006acc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ad0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ad4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ad8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006adc:	b29b      	uxth	r3, r3
 8006ade:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	7b1b      	ldrb	r3, [r3, #12]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	f040 8178 	bne.w	8006dda <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	785b      	ldrb	r3, [r3, #1]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	f000 8084 	beq.w	8006bfc <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	61bb      	str	r3, [r7, #24]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006afe:	b29b      	uxth	r3, r3
 8006b00:	461a      	mov	r2, r3
 8006b02:	69bb      	ldr	r3, [r7, #24]
 8006b04:	4413      	add	r3, r2
 8006b06:	61bb      	str	r3, [r7, #24]
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	781b      	ldrb	r3, [r3, #0]
 8006b0c:	011a      	lsls	r2, r3, #4
 8006b0e:	69bb      	ldr	r3, [r7, #24]
 8006b10:	4413      	add	r3, r2
 8006b12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b16:	617b      	str	r3, [r7, #20]
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	88db      	ldrh	r3, [r3, #6]
 8006b1c:	085b      	lsrs	r3, r3, #1
 8006b1e:	b29b      	uxth	r3, r3
 8006b20:	005b      	lsls	r3, r3, #1
 8006b22:	b29a      	uxth	r2, r3
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006b28:	687a      	ldr	r2, [r7, #4]
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	781b      	ldrb	r3, [r3, #0]
 8006b2e:	009b      	lsls	r3, r3, #2
 8006b30:	4413      	add	r3, r2
 8006b32:	881b      	ldrh	r3, [r3, #0]
 8006b34:	827b      	strh	r3, [r7, #18]
 8006b36:	8a7b      	ldrh	r3, [r7, #18]
 8006b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d01b      	beq.n	8006b78 <USB_ActivateEndpoint+0x17c>
 8006b40:	687a      	ldr	r2, [r7, #4]
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	009b      	lsls	r3, r3, #2
 8006b48:	4413      	add	r3, r2
 8006b4a:	881b      	ldrh	r3, [r3, #0]
 8006b4c:	b29b      	uxth	r3, r3
 8006b4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b56:	823b      	strh	r3, [r7, #16]
 8006b58:	687a      	ldr	r2, [r7, #4]
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	781b      	ldrb	r3, [r3, #0]
 8006b5e:	009b      	lsls	r3, r3, #2
 8006b60:	441a      	add	r2, r3
 8006b62:	8a3b      	ldrh	r3, [r7, #16]
 8006b64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b70:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006b74:	b29b      	uxth	r3, r3
 8006b76:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	78db      	ldrb	r3, [r3, #3]
 8006b7c:	2b01      	cmp	r3, #1
 8006b7e:	d020      	beq.n	8006bc2 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006b80:	687a      	ldr	r2, [r7, #4]
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	781b      	ldrb	r3, [r3, #0]
 8006b86:	009b      	lsls	r3, r3, #2
 8006b88:	4413      	add	r3, r2
 8006b8a:	881b      	ldrh	r3, [r3, #0]
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b96:	81bb      	strh	r3, [r7, #12]
 8006b98:	89bb      	ldrh	r3, [r7, #12]
 8006b9a:	f083 0320 	eor.w	r3, r3, #32
 8006b9e:	81bb      	strh	r3, [r7, #12]
 8006ba0:	687a      	ldr	r2, [r7, #4]
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	781b      	ldrb	r3, [r3, #0]
 8006ba6:	009b      	lsls	r3, r3, #2
 8006ba8:	441a      	add	r2, r3
 8006baa:	89bb      	ldrh	r3, [r7, #12]
 8006bac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bbc:	b29b      	uxth	r3, r3
 8006bbe:	8013      	strh	r3, [r2, #0]
 8006bc0:	e2d5      	b.n	800716e <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006bc2:	687a      	ldr	r2, [r7, #4]
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	781b      	ldrb	r3, [r3, #0]
 8006bc8:	009b      	lsls	r3, r3, #2
 8006bca:	4413      	add	r3, r2
 8006bcc:	881b      	ldrh	r3, [r3, #0]
 8006bce:	b29b      	uxth	r3, r3
 8006bd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bd8:	81fb      	strh	r3, [r7, #14]
 8006bda:	687a      	ldr	r2, [r7, #4]
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	781b      	ldrb	r3, [r3, #0]
 8006be0:	009b      	lsls	r3, r3, #2
 8006be2:	441a      	add	r2, r3
 8006be4:	89fb      	ldrh	r3, [r7, #14]
 8006be6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	8013      	strh	r3, [r2, #0]
 8006bfa:	e2b8      	b.n	800716e <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	633b      	str	r3, [r7, #48]	; 0x30
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	461a      	mov	r2, r3
 8006c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c0c:	4413      	add	r3, r2
 8006c0e:	633b      	str	r3, [r7, #48]	; 0x30
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	781b      	ldrb	r3, [r3, #0]
 8006c14:	011a      	lsls	r2, r3, #4
 8006c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c18:	4413      	add	r3, r2
 8006c1a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	88db      	ldrh	r3, [r3, #6]
 8006c24:	085b      	lsrs	r3, r3, #1
 8006c26:	b29b      	uxth	r3, r3
 8006c28:	005b      	lsls	r3, r3, #1
 8006c2a:	b29a      	uxth	r2, r3
 8006c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c2e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c3a:	b29b      	uxth	r3, r3
 8006c3c:	461a      	mov	r2, r3
 8006c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c40:	4413      	add	r3, r2
 8006c42:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	781b      	ldrb	r3, [r3, #0]
 8006c48:	011a      	lsls	r2, r3, #4
 8006c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c4c:	4413      	add	r3, r2
 8006c4e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006c52:	627b      	str	r3, [r7, #36]	; 0x24
 8006c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c56:	881b      	ldrh	r3, [r3, #0]
 8006c58:	b29b      	uxth	r3, r3
 8006c5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c5e:	b29a      	uxth	r2, r3
 8006c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c62:	801a      	strh	r2, [r3, #0]
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	691b      	ldr	r3, [r3, #16]
 8006c68:	2b3e      	cmp	r3, #62	; 0x3e
 8006c6a:	d91d      	bls.n	8006ca8 <USB_ActivateEndpoint+0x2ac>
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	691b      	ldr	r3, [r3, #16]
 8006c70:	095b      	lsrs	r3, r3, #5
 8006c72:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	691b      	ldr	r3, [r3, #16]
 8006c78:	f003 031f 	and.w	r3, r3, #31
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d102      	bne.n	8006c86 <USB_ActivateEndpoint+0x28a>
 8006c80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006c82:	3b01      	subs	r3, #1
 8006c84:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c88:	881b      	ldrh	r3, [r3, #0]
 8006c8a:	b29a      	uxth	r2, r3
 8006c8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006c8e:	b29b      	uxth	r3, r3
 8006c90:	029b      	lsls	r3, r3, #10
 8006c92:	b29b      	uxth	r3, r3
 8006c94:	4313      	orrs	r3, r2
 8006c96:	b29b      	uxth	r3, r3
 8006c98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ca0:	b29a      	uxth	r2, r3
 8006ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca4:	801a      	strh	r2, [r3, #0]
 8006ca6:	e026      	b.n	8006cf6 <USB_ActivateEndpoint+0x2fa>
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	691b      	ldr	r3, [r3, #16]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d10a      	bne.n	8006cc6 <USB_ActivateEndpoint+0x2ca>
 8006cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb2:	881b      	ldrh	r3, [r3, #0]
 8006cb4:	b29b      	uxth	r3, r3
 8006cb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cbe:	b29a      	uxth	r2, r3
 8006cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc2:	801a      	strh	r2, [r3, #0]
 8006cc4:	e017      	b.n	8006cf6 <USB_ActivateEndpoint+0x2fa>
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	691b      	ldr	r3, [r3, #16]
 8006cca:	085b      	lsrs	r3, r3, #1
 8006ccc:	66bb      	str	r3, [r7, #104]	; 0x68
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	691b      	ldr	r3, [r3, #16]
 8006cd2:	f003 0301 	and.w	r3, r3, #1
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d002      	beq.n	8006ce0 <USB_ActivateEndpoint+0x2e4>
 8006cda:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006cdc:	3301      	adds	r3, #1
 8006cde:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce2:	881b      	ldrh	r3, [r3, #0]
 8006ce4:	b29a      	uxth	r2, r3
 8006ce6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	029b      	lsls	r3, r3, #10
 8006cec:	b29b      	uxth	r3, r3
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	b29a      	uxth	r2, r3
 8006cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006cf6:	687a      	ldr	r2, [r7, #4]
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	009b      	lsls	r3, r3, #2
 8006cfe:	4413      	add	r3, r2
 8006d00:	881b      	ldrh	r3, [r3, #0]
 8006d02:	847b      	strh	r3, [r7, #34]	; 0x22
 8006d04:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006d06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d01b      	beq.n	8006d46 <USB_ActivateEndpoint+0x34a>
 8006d0e:	687a      	ldr	r2, [r7, #4]
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	781b      	ldrb	r3, [r3, #0]
 8006d14:	009b      	lsls	r3, r3, #2
 8006d16:	4413      	add	r3, r2
 8006d18:	881b      	ldrh	r3, [r3, #0]
 8006d1a:	b29b      	uxth	r3, r3
 8006d1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d24:	843b      	strh	r3, [r7, #32]
 8006d26:	687a      	ldr	r2, [r7, #4]
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	781b      	ldrb	r3, [r3, #0]
 8006d2c:	009b      	lsls	r3, r3, #2
 8006d2e:	441a      	add	r2, r3
 8006d30:	8c3b      	ldrh	r3, [r7, #32]
 8006d32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d3a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	781b      	ldrb	r3, [r3, #0]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d124      	bne.n	8006d98 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006d4e:	687a      	ldr	r2, [r7, #4]
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	781b      	ldrb	r3, [r3, #0]
 8006d54:	009b      	lsls	r3, r3, #2
 8006d56:	4413      	add	r3, r2
 8006d58:	881b      	ldrh	r3, [r3, #0]
 8006d5a:	b29b      	uxth	r3, r3
 8006d5c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d64:	83bb      	strh	r3, [r7, #28]
 8006d66:	8bbb      	ldrh	r3, [r7, #28]
 8006d68:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006d6c:	83bb      	strh	r3, [r7, #28]
 8006d6e:	8bbb      	ldrh	r3, [r7, #28]
 8006d70:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006d74:	83bb      	strh	r3, [r7, #28]
 8006d76:	687a      	ldr	r2, [r7, #4]
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	781b      	ldrb	r3, [r3, #0]
 8006d7c:	009b      	lsls	r3, r3, #2
 8006d7e:	441a      	add	r2, r3
 8006d80:	8bbb      	ldrh	r3, [r7, #28]
 8006d82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	8013      	strh	r3, [r2, #0]
 8006d96:	e1ea      	b.n	800716e <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8006d98:	687a      	ldr	r2, [r7, #4]
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	781b      	ldrb	r3, [r3, #0]
 8006d9e:	009b      	lsls	r3, r3, #2
 8006da0:	4413      	add	r3, r2
 8006da2:	881b      	ldrh	r3, [r3, #0]
 8006da4:	b29b      	uxth	r3, r3
 8006da6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006daa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dae:	83fb      	strh	r3, [r7, #30]
 8006db0:	8bfb      	ldrh	r3, [r7, #30]
 8006db2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006db6:	83fb      	strh	r3, [r7, #30]
 8006db8:	687a      	ldr	r2, [r7, #4]
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	781b      	ldrb	r3, [r3, #0]
 8006dbe:	009b      	lsls	r3, r3, #2
 8006dc0:	441a      	add	r2, r3
 8006dc2:	8bfb      	ldrh	r3, [r7, #30]
 8006dc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dd4:	b29b      	uxth	r3, r3
 8006dd6:	8013      	strh	r3, [r2, #0]
 8006dd8:	e1c9      	b.n	800716e <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	78db      	ldrb	r3, [r3, #3]
 8006dde:	2b02      	cmp	r3, #2
 8006de0:	d11e      	bne.n	8006e20 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006de2:	687a      	ldr	r2, [r7, #4]
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	781b      	ldrb	r3, [r3, #0]
 8006de8:	009b      	lsls	r3, r3, #2
 8006dea:	4413      	add	r3, r2
 8006dec:	881b      	ldrh	r3, [r3, #0]
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006df4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006df8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006dfc:	687a      	ldr	r2, [r7, #4]
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	781b      	ldrb	r3, [r3, #0]
 8006e02:	009b      	lsls	r3, r3, #2
 8006e04:	441a      	add	r2, r3
 8006e06:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006e0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e12:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006e16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e1a:	b29b      	uxth	r3, r3
 8006e1c:	8013      	strh	r3, [r2, #0]
 8006e1e:	e01d      	b.n	8006e5c <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006e20:	687a      	ldr	r2, [r7, #4]
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	781b      	ldrb	r3, [r3, #0]
 8006e26:	009b      	lsls	r3, r3, #2
 8006e28:	4413      	add	r3, r2
 8006e2a:	881b      	ldrh	r3, [r3, #0]
 8006e2c:	b29b      	uxth	r3, r3
 8006e2e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006e32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e36:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8006e3a:	687a      	ldr	r2, [r7, #4]
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	781b      	ldrb	r3, [r3, #0]
 8006e40:	009b      	lsls	r3, r3, #2
 8006e42:	441a      	add	r2, r3
 8006e44:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006e48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e58:	b29b      	uxth	r3, r3
 8006e5a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e66:	b29b      	uxth	r3, r3
 8006e68:	461a      	mov	r2, r3
 8006e6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e6c:	4413      	add	r3, r2
 8006e6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	781b      	ldrb	r3, [r3, #0]
 8006e74:	011a      	lsls	r2, r3, #4
 8006e76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e78:	4413      	add	r3, r2
 8006e7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e7e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	891b      	ldrh	r3, [r3, #8]
 8006e84:	085b      	lsrs	r3, r3, #1
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	005b      	lsls	r3, r3, #1
 8006e8a:	b29a      	uxth	r2, r3
 8006e8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006e8e:	801a      	strh	r2, [r3, #0]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	657b      	str	r3, [r7, #84]	; 0x54
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e9a:	b29b      	uxth	r3, r3
 8006e9c:	461a      	mov	r2, r3
 8006e9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ea0:	4413      	add	r3, r2
 8006ea2:	657b      	str	r3, [r7, #84]	; 0x54
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	781b      	ldrb	r3, [r3, #0]
 8006ea8:	011a      	lsls	r2, r3, #4
 8006eaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006eac:	4413      	add	r3, r2
 8006eae:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006eb2:	653b      	str	r3, [r7, #80]	; 0x50
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	895b      	ldrh	r3, [r3, #10]
 8006eb8:	085b      	lsrs	r3, r3, #1
 8006eba:	b29b      	uxth	r3, r3
 8006ebc:	005b      	lsls	r3, r3, #1
 8006ebe:	b29a      	uxth	r2, r3
 8006ec0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ec2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	785b      	ldrb	r3, [r3, #1]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	f040 8093 	bne.w	8006ff4 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006ece:	687a      	ldr	r2, [r7, #4]
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	781b      	ldrb	r3, [r3, #0]
 8006ed4:	009b      	lsls	r3, r3, #2
 8006ed6:	4413      	add	r3, r2
 8006ed8:	881b      	ldrh	r3, [r3, #0]
 8006eda:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006ede:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006ee2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d01b      	beq.n	8006f22 <USB_ActivateEndpoint+0x526>
 8006eea:	687a      	ldr	r2, [r7, #4]
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	781b      	ldrb	r3, [r3, #0]
 8006ef0:	009b      	lsls	r3, r3, #2
 8006ef2:	4413      	add	r3, r2
 8006ef4:	881b      	ldrh	r3, [r3, #0]
 8006ef6:	b29b      	uxth	r3, r3
 8006ef8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006efc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f00:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006f02:	687a      	ldr	r2, [r7, #4]
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	781b      	ldrb	r3, [r3, #0]
 8006f08:	009b      	lsls	r3, r3, #2
 8006f0a:	441a      	add	r2, r3
 8006f0c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006f0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f16:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006f1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f1e:	b29b      	uxth	r3, r3
 8006f20:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006f22:	687a      	ldr	r2, [r7, #4]
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	781b      	ldrb	r3, [r3, #0]
 8006f28:	009b      	lsls	r3, r3, #2
 8006f2a:	4413      	add	r3, r2
 8006f2c:	881b      	ldrh	r3, [r3, #0]
 8006f2e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006f30:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d01b      	beq.n	8006f72 <USB_ActivateEndpoint+0x576>
 8006f3a:	687a      	ldr	r2, [r7, #4]
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	781b      	ldrb	r3, [r3, #0]
 8006f40:	009b      	lsls	r3, r3, #2
 8006f42:	4413      	add	r3, r2
 8006f44:	881b      	ldrh	r3, [r3, #0]
 8006f46:	b29b      	uxth	r3, r3
 8006f48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f50:	877b      	strh	r3, [r7, #58]	; 0x3a
 8006f52:	687a      	ldr	r2, [r7, #4]
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	781b      	ldrb	r3, [r3, #0]
 8006f58:	009b      	lsls	r3, r3, #2
 8006f5a:	441a      	add	r2, r3
 8006f5c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006f5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f6a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006f6e:	b29b      	uxth	r3, r3
 8006f70:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006f72:	687a      	ldr	r2, [r7, #4]
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	781b      	ldrb	r3, [r3, #0]
 8006f78:	009b      	lsls	r3, r3, #2
 8006f7a:	4413      	add	r3, r2
 8006f7c:	881b      	ldrh	r3, [r3, #0]
 8006f7e:	b29b      	uxth	r3, r3
 8006f80:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f88:	873b      	strh	r3, [r7, #56]	; 0x38
 8006f8a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006f8c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006f90:	873b      	strh	r3, [r7, #56]	; 0x38
 8006f92:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006f94:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006f98:	873b      	strh	r3, [r7, #56]	; 0x38
 8006f9a:	687a      	ldr	r2, [r7, #4]
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	781b      	ldrb	r3, [r3, #0]
 8006fa0:	009b      	lsls	r3, r3, #2
 8006fa2:	441a      	add	r2, r3
 8006fa4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006fa6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006faa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fb6:	b29b      	uxth	r3, r3
 8006fb8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006fba:	687a      	ldr	r2, [r7, #4]
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	781b      	ldrb	r3, [r3, #0]
 8006fc0:	009b      	lsls	r3, r3, #2
 8006fc2:	4413      	add	r3, r2
 8006fc4:	881b      	ldrh	r3, [r3, #0]
 8006fc6:	b29b      	uxth	r3, r3
 8006fc8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fd0:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006fd2:	687a      	ldr	r2, [r7, #4]
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	781b      	ldrb	r3, [r3, #0]
 8006fd8:	009b      	lsls	r3, r3, #2
 8006fda:	441a      	add	r2, r3
 8006fdc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006fde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fe2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fe6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	8013      	strh	r3, [r2, #0]
 8006ff2:	e0bc      	b.n	800716e <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006ff4:	687a      	ldr	r2, [r7, #4]
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	781b      	ldrb	r3, [r3, #0]
 8006ffa:	009b      	lsls	r3, r3, #2
 8006ffc:	4413      	add	r3, r2
 8006ffe:	881b      	ldrh	r3, [r3, #0]
 8007000:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007004:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007008:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800700c:	2b00      	cmp	r3, #0
 800700e:	d01d      	beq.n	800704c <USB_ActivateEndpoint+0x650>
 8007010:	687a      	ldr	r2, [r7, #4]
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	781b      	ldrb	r3, [r3, #0]
 8007016:	009b      	lsls	r3, r3, #2
 8007018:	4413      	add	r3, r2
 800701a:	881b      	ldrh	r3, [r3, #0]
 800701c:	b29b      	uxth	r3, r3
 800701e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007022:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007026:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800702a:	687a      	ldr	r2, [r7, #4]
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	781b      	ldrb	r3, [r3, #0]
 8007030:	009b      	lsls	r3, r3, #2
 8007032:	441a      	add	r2, r3
 8007034:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007038:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800703c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007040:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007044:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007048:	b29b      	uxth	r3, r3
 800704a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800704c:	687a      	ldr	r2, [r7, #4]
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	781b      	ldrb	r3, [r3, #0]
 8007052:	009b      	lsls	r3, r3, #2
 8007054:	4413      	add	r3, r2
 8007056:	881b      	ldrh	r3, [r3, #0]
 8007058:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800705c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007064:	2b00      	cmp	r3, #0
 8007066:	d01d      	beq.n	80070a4 <USB_ActivateEndpoint+0x6a8>
 8007068:	687a      	ldr	r2, [r7, #4]
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	781b      	ldrb	r3, [r3, #0]
 800706e:	009b      	lsls	r3, r3, #2
 8007070:	4413      	add	r3, r2
 8007072:	881b      	ldrh	r3, [r3, #0]
 8007074:	b29b      	uxth	r3, r3
 8007076:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800707a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800707e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8007082:	687a      	ldr	r2, [r7, #4]
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	781b      	ldrb	r3, [r3, #0]
 8007088:	009b      	lsls	r3, r3, #2
 800708a:	441a      	add	r2, r3
 800708c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007090:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007094:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007098:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800709c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80070a0:	b29b      	uxth	r3, r3
 80070a2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	78db      	ldrb	r3, [r3, #3]
 80070a8:	2b01      	cmp	r3, #1
 80070aa:	d024      	beq.n	80070f6 <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80070ac:	687a      	ldr	r2, [r7, #4]
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	781b      	ldrb	r3, [r3, #0]
 80070b2:	009b      	lsls	r3, r3, #2
 80070b4:	4413      	add	r3, r2
 80070b6:	881b      	ldrh	r3, [r3, #0]
 80070b8:	b29b      	uxth	r3, r3
 80070ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070c2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80070c6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80070ca:	f083 0320 	eor.w	r3, r3, #32
 80070ce:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80070d2:	687a      	ldr	r2, [r7, #4]
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	781b      	ldrb	r3, [r3, #0]
 80070d8:	009b      	lsls	r3, r3, #2
 80070da:	441a      	add	r2, r3
 80070dc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80070e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070f0:	b29b      	uxth	r3, r3
 80070f2:	8013      	strh	r3, [r2, #0]
 80070f4:	e01d      	b.n	8007132 <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80070f6:	687a      	ldr	r2, [r7, #4]
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	781b      	ldrb	r3, [r3, #0]
 80070fc:	009b      	lsls	r3, r3, #2
 80070fe:	4413      	add	r3, r2
 8007100:	881b      	ldrh	r3, [r3, #0]
 8007102:	b29b      	uxth	r3, r3
 8007104:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007108:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800710c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007110:	687a      	ldr	r2, [r7, #4]
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	781b      	ldrb	r3, [r3, #0]
 8007116:	009b      	lsls	r3, r3, #2
 8007118:	441a      	add	r2, r3
 800711a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800711e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007122:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007126:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800712a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800712e:	b29b      	uxth	r3, r3
 8007130:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007132:	687a      	ldr	r2, [r7, #4]
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	781b      	ldrb	r3, [r3, #0]
 8007138:	009b      	lsls	r3, r3, #2
 800713a:	4413      	add	r3, r2
 800713c:	881b      	ldrh	r3, [r3, #0]
 800713e:	b29b      	uxth	r3, r3
 8007140:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007144:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007148:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800714c:	687a      	ldr	r2, [r7, #4]
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	781b      	ldrb	r3, [r3, #0]
 8007152:	009b      	lsls	r3, r3, #2
 8007154:	441a      	add	r2, r3
 8007156:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800715a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800715e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007162:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007166:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800716a:	b29b      	uxth	r3, r3
 800716c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800716e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8007172:	4618      	mov	r0, r3
 8007174:	3774      	adds	r7, #116	; 0x74
 8007176:	46bd      	mov	sp, r7
 8007178:	bc80      	pop	{r7}
 800717a:	4770      	bx	lr

0800717c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800717c:	b480      	push	{r7}
 800717e:	b08d      	sub	sp, #52	; 0x34
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
 8007184:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	7b1b      	ldrb	r3, [r3, #12]
 800718a:	2b00      	cmp	r3, #0
 800718c:	f040 808e 	bne.w	80072ac <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	785b      	ldrb	r3, [r3, #1]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d044      	beq.n	8007222 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007198:	687a      	ldr	r2, [r7, #4]
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	781b      	ldrb	r3, [r3, #0]
 800719e:	009b      	lsls	r3, r3, #2
 80071a0:	4413      	add	r3, r2
 80071a2:	881b      	ldrh	r3, [r3, #0]
 80071a4:	81bb      	strh	r3, [r7, #12]
 80071a6:	89bb      	ldrh	r3, [r7, #12]
 80071a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d01b      	beq.n	80071e8 <USB_DeactivateEndpoint+0x6c>
 80071b0:	687a      	ldr	r2, [r7, #4]
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	781b      	ldrb	r3, [r3, #0]
 80071b6:	009b      	lsls	r3, r3, #2
 80071b8:	4413      	add	r3, r2
 80071ba:	881b      	ldrh	r3, [r3, #0]
 80071bc:	b29b      	uxth	r3, r3
 80071be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071c6:	817b      	strh	r3, [r7, #10]
 80071c8:	687a      	ldr	r2, [r7, #4]
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	781b      	ldrb	r3, [r3, #0]
 80071ce:	009b      	lsls	r3, r3, #2
 80071d0:	441a      	add	r2, r3
 80071d2:	897b      	ldrh	r3, [r7, #10]
 80071d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071e0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80071e4:	b29b      	uxth	r3, r3
 80071e6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80071e8:	687a      	ldr	r2, [r7, #4]
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	781b      	ldrb	r3, [r3, #0]
 80071ee:	009b      	lsls	r3, r3, #2
 80071f0:	4413      	add	r3, r2
 80071f2:	881b      	ldrh	r3, [r3, #0]
 80071f4:	b29b      	uxth	r3, r3
 80071f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071fe:	813b      	strh	r3, [r7, #8]
 8007200:	687a      	ldr	r2, [r7, #4]
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	781b      	ldrb	r3, [r3, #0]
 8007206:	009b      	lsls	r3, r3, #2
 8007208:	441a      	add	r2, r3
 800720a:	893b      	ldrh	r3, [r7, #8]
 800720c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007210:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007214:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007218:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800721c:	b29b      	uxth	r3, r3
 800721e:	8013      	strh	r3, [r2, #0]
 8007220:	e192      	b.n	8007548 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007222:	687a      	ldr	r2, [r7, #4]
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	781b      	ldrb	r3, [r3, #0]
 8007228:	009b      	lsls	r3, r3, #2
 800722a:	4413      	add	r3, r2
 800722c:	881b      	ldrh	r3, [r3, #0]
 800722e:	827b      	strh	r3, [r7, #18]
 8007230:	8a7b      	ldrh	r3, [r7, #18]
 8007232:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007236:	2b00      	cmp	r3, #0
 8007238:	d01b      	beq.n	8007272 <USB_DeactivateEndpoint+0xf6>
 800723a:	687a      	ldr	r2, [r7, #4]
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	781b      	ldrb	r3, [r3, #0]
 8007240:	009b      	lsls	r3, r3, #2
 8007242:	4413      	add	r3, r2
 8007244:	881b      	ldrh	r3, [r3, #0]
 8007246:	b29b      	uxth	r3, r3
 8007248:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800724c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007250:	823b      	strh	r3, [r7, #16]
 8007252:	687a      	ldr	r2, [r7, #4]
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	781b      	ldrb	r3, [r3, #0]
 8007258:	009b      	lsls	r3, r3, #2
 800725a:	441a      	add	r2, r3
 800725c:	8a3b      	ldrh	r3, [r7, #16]
 800725e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007262:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007266:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800726a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800726e:	b29b      	uxth	r3, r3
 8007270:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007272:	687a      	ldr	r2, [r7, #4]
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	781b      	ldrb	r3, [r3, #0]
 8007278:	009b      	lsls	r3, r3, #2
 800727a:	4413      	add	r3, r2
 800727c:	881b      	ldrh	r3, [r3, #0]
 800727e:	b29b      	uxth	r3, r3
 8007280:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007284:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007288:	81fb      	strh	r3, [r7, #14]
 800728a:	687a      	ldr	r2, [r7, #4]
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	781b      	ldrb	r3, [r3, #0]
 8007290:	009b      	lsls	r3, r3, #2
 8007292:	441a      	add	r2, r3
 8007294:	89fb      	ldrh	r3, [r7, #14]
 8007296:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800729a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800729e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072a6:	b29b      	uxth	r3, r3
 80072a8:	8013      	strh	r3, [r2, #0]
 80072aa:	e14d      	b.n	8007548 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	785b      	ldrb	r3, [r3, #1]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	f040 80a5 	bne.w	8007400 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80072b6:	687a      	ldr	r2, [r7, #4]
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	781b      	ldrb	r3, [r3, #0]
 80072bc:	009b      	lsls	r3, r3, #2
 80072be:	4413      	add	r3, r2
 80072c0:	881b      	ldrh	r3, [r3, #0]
 80072c2:	843b      	strh	r3, [r7, #32]
 80072c4:	8c3b      	ldrh	r3, [r7, #32]
 80072c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d01b      	beq.n	8007306 <USB_DeactivateEndpoint+0x18a>
 80072ce:	687a      	ldr	r2, [r7, #4]
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	781b      	ldrb	r3, [r3, #0]
 80072d4:	009b      	lsls	r3, r3, #2
 80072d6:	4413      	add	r3, r2
 80072d8:	881b      	ldrh	r3, [r3, #0]
 80072da:	b29b      	uxth	r3, r3
 80072dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072e4:	83fb      	strh	r3, [r7, #30]
 80072e6:	687a      	ldr	r2, [r7, #4]
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	781b      	ldrb	r3, [r3, #0]
 80072ec:	009b      	lsls	r3, r3, #2
 80072ee:	441a      	add	r2, r3
 80072f0:	8bfb      	ldrh	r3, [r7, #30]
 80072f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80072fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007302:	b29b      	uxth	r3, r3
 8007304:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007306:	687a      	ldr	r2, [r7, #4]
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	781b      	ldrb	r3, [r3, #0]
 800730c:	009b      	lsls	r3, r3, #2
 800730e:	4413      	add	r3, r2
 8007310:	881b      	ldrh	r3, [r3, #0]
 8007312:	83bb      	strh	r3, [r7, #28]
 8007314:	8bbb      	ldrh	r3, [r7, #28]
 8007316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800731a:	2b00      	cmp	r3, #0
 800731c:	d01b      	beq.n	8007356 <USB_DeactivateEndpoint+0x1da>
 800731e:	687a      	ldr	r2, [r7, #4]
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	781b      	ldrb	r3, [r3, #0]
 8007324:	009b      	lsls	r3, r3, #2
 8007326:	4413      	add	r3, r2
 8007328:	881b      	ldrh	r3, [r3, #0]
 800732a:	b29b      	uxth	r3, r3
 800732c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007330:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007334:	837b      	strh	r3, [r7, #26]
 8007336:	687a      	ldr	r2, [r7, #4]
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	781b      	ldrb	r3, [r3, #0]
 800733c:	009b      	lsls	r3, r3, #2
 800733e:	441a      	add	r2, r3
 8007340:	8b7b      	ldrh	r3, [r7, #26]
 8007342:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007346:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800734a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800734e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007352:	b29b      	uxth	r3, r3
 8007354:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007356:	687a      	ldr	r2, [r7, #4]
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	781b      	ldrb	r3, [r3, #0]
 800735c:	009b      	lsls	r3, r3, #2
 800735e:	4413      	add	r3, r2
 8007360:	881b      	ldrh	r3, [r3, #0]
 8007362:	b29b      	uxth	r3, r3
 8007364:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007368:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800736c:	833b      	strh	r3, [r7, #24]
 800736e:	687a      	ldr	r2, [r7, #4]
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	781b      	ldrb	r3, [r3, #0]
 8007374:	009b      	lsls	r3, r3, #2
 8007376:	441a      	add	r2, r3
 8007378:	8b3b      	ldrh	r3, [r7, #24]
 800737a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800737e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007382:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007386:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800738a:	b29b      	uxth	r3, r3
 800738c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800738e:	687a      	ldr	r2, [r7, #4]
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	781b      	ldrb	r3, [r3, #0]
 8007394:	009b      	lsls	r3, r3, #2
 8007396:	4413      	add	r3, r2
 8007398:	881b      	ldrh	r3, [r3, #0]
 800739a:	b29b      	uxth	r3, r3
 800739c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80073a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073a4:	82fb      	strh	r3, [r7, #22]
 80073a6:	687a      	ldr	r2, [r7, #4]
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	781b      	ldrb	r3, [r3, #0]
 80073ac:	009b      	lsls	r3, r3, #2
 80073ae:	441a      	add	r2, r3
 80073b0:	8afb      	ldrh	r3, [r7, #22]
 80073b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073c2:	b29b      	uxth	r3, r3
 80073c4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80073c6:	687a      	ldr	r2, [r7, #4]
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	781b      	ldrb	r3, [r3, #0]
 80073cc:	009b      	lsls	r3, r3, #2
 80073ce:	4413      	add	r3, r2
 80073d0:	881b      	ldrh	r3, [r3, #0]
 80073d2:	b29b      	uxth	r3, r3
 80073d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073dc:	82bb      	strh	r3, [r7, #20]
 80073de:	687a      	ldr	r2, [r7, #4]
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	781b      	ldrb	r3, [r3, #0]
 80073e4:	009b      	lsls	r3, r3, #2
 80073e6:	441a      	add	r2, r3
 80073e8:	8abb      	ldrh	r3, [r7, #20]
 80073ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073fa:	b29b      	uxth	r3, r3
 80073fc:	8013      	strh	r3, [r2, #0]
 80073fe:	e0a3      	b.n	8007548 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007400:	687a      	ldr	r2, [r7, #4]
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	781b      	ldrb	r3, [r3, #0]
 8007406:	009b      	lsls	r3, r3, #2
 8007408:	4413      	add	r3, r2
 800740a:	881b      	ldrh	r3, [r3, #0]
 800740c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800740e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007410:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007414:	2b00      	cmp	r3, #0
 8007416:	d01b      	beq.n	8007450 <USB_DeactivateEndpoint+0x2d4>
 8007418:	687a      	ldr	r2, [r7, #4]
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	781b      	ldrb	r3, [r3, #0]
 800741e:	009b      	lsls	r3, r3, #2
 8007420:	4413      	add	r3, r2
 8007422:	881b      	ldrh	r3, [r3, #0]
 8007424:	b29b      	uxth	r3, r3
 8007426:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800742a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800742e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8007430:	687a      	ldr	r2, [r7, #4]
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	781b      	ldrb	r3, [r3, #0]
 8007436:	009b      	lsls	r3, r3, #2
 8007438:	441a      	add	r2, r3
 800743a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800743c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007440:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007444:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007448:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800744c:	b29b      	uxth	r3, r3
 800744e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007450:	687a      	ldr	r2, [r7, #4]
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	781b      	ldrb	r3, [r3, #0]
 8007456:	009b      	lsls	r3, r3, #2
 8007458:	4413      	add	r3, r2
 800745a:	881b      	ldrh	r3, [r3, #0]
 800745c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800745e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007464:	2b00      	cmp	r3, #0
 8007466:	d01b      	beq.n	80074a0 <USB_DeactivateEndpoint+0x324>
 8007468:	687a      	ldr	r2, [r7, #4]
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	781b      	ldrb	r3, [r3, #0]
 800746e:	009b      	lsls	r3, r3, #2
 8007470:	4413      	add	r3, r2
 8007472:	881b      	ldrh	r3, [r3, #0]
 8007474:	b29b      	uxth	r3, r3
 8007476:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800747a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800747e:	853b      	strh	r3, [r7, #40]	; 0x28
 8007480:	687a      	ldr	r2, [r7, #4]
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	781b      	ldrb	r3, [r3, #0]
 8007486:	009b      	lsls	r3, r3, #2
 8007488:	441a      	add	r2, r3
 800748a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800748c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007490:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007494:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007498:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800749c:	b29b      	uxth	r3, r3
 800749e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80074a0:	687a      	ldr	r2, [r7, #4]
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	781b      	ldrb	r3, [r3, #0]
 80074a6:	009b      	lsls	r3, r3, #2
 80074a8:	4413      	add	r3, r2
 80074aa:	881b      	ldrh	r3, [r3, #0]
 80074ac:	b29b      	uxth	r3, r3
 80074ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074b6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80074b8:	687a      	ldr	r2, [r7, #4]
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	781b      	ldrb	r3, [r3, #0]
 80074be:	009b      	lsls	r3, r3, #2
 80074c0:	441a      	add	r2, r3
 80074c2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80074c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80074d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074d4:	b29b      	uxth	r3, r3
 80074d6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80074d8:	687a      	ldr	r2, [r7, #4]
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	781b      	ldrb	r3, [r3, #0]
 80074de:	009b      	lsls	r3, r3, #2
 80074e0:	4413      	add	r3, r2
 80074e2:	881b      	ldrh	r3, [r3, #0]
 80074e4:	b29b      	uxth	r3, r3
 80074e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074ee:	84bb      	strh	r3, [r7, #36]	; 0x24
 80074f0:	687a      	ldr	r2, [r7, #4]
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	781b      	ldrb	r3, [r3, #0]
 80074f6:	009b      	lsls	r3, r3, #2
 80074f8:	441a      	add	r2, r3
 80074fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80074fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007500:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007504:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007508:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800750c:	b29b      	uxth	r3, r3
 800750e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007510:	687a      	ldr	r2, [r7, #4]
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	781b      	ldrb	r3, [r3, #0]
 8007516:	009b      	lsls	r3, r3, #2
 8007518:	4413      	add	r3, r2
 800751a:	881b      	ldrh	r3, [r3, #0]
 800751c:	b29b      	uxth	r3, r3
 800751e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007526:	847b      	strh	r3, [r7, #34]	; 0x22
 8007528:	687a      	ldr	r2, [r7, #4]
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	781b      	ldrb	r3, [r3, #0]
 800752e:	009b      	lsls	r3, r3, #2
 8007530:	441a      	add	r2, r3
 8007532:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007534:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007538:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800753c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007540:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007544:	b29b      	uxth	r3, r3
 8007546:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007548:	2300      	movs	r3, #0
}
 800754a:	4618      	mov	r0, r3
 800754c:	3734      	adds	r7, #52	; 0x34
 800754e:	46bd      	mov	sp, r7
 8007550:	bc80      	pop	{r7}
 8007552:	4770      	bx	lr

08007554 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b0c2      	sub	sp, #264	; 0x108
 8007558:	af00      	add	r7, sp, #0
 800755a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800755e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007562:	6018      	str	r0, [r3, #0]
 8007564:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007568:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800756c:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800756e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007572:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	785b      	ldrb	r3, [r3, #1]
 800757a:	2b01      	cmp	r3, #1
 800757c:	f040 86b7 	bne.w	80082ee <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007580:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007584:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	699a      	ldr	r2, [r3, #24]
 800758c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007590:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	691b      	ldr	r3, [r3, #16]
 8007598:	429a      	cmp	r2, r3
 800759a:	d908      	bls.n	80075ae <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800759c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	691b      	ldr	r3, [r3, #16]
 80075a8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80075ac:	e007      	b.n	80075be <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80075ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	699b      	ldr	r3, [r3, #24]
 80075ba:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80075be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	7b1b      	ldrb	r3, [r3, #12]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d13a      	bne.n	8007644 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80075ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	6959      	ldr	r1, [r3, #20]
 80075da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	88da      	ldrh	r2, [r3, #6]
 80075e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075ea:	b29b      	uxth	r3, r3
 80075ec:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80075f0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80075f4:	6800      	ldr	r0, [r0, #0]
 80075f6:	f001 fc9c 	bl	8008f32 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80075fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	613b      	str	r3, [r7, #16]
 8007606:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800760a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007614:	b29b      	uxth	r3, r3
 8007616:	461a      	mov	r2, r3
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	4413      	add	r3, r2
 800761c:	613b      	str	r3, [r7, #16]
 800761e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007622:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	781b      	ldrb	r3, [r3, #0]
 800762a:	011a      	lsls	r2, r3, #4
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	4413      	add	r3, r2
 8007630:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007634:	60fb      	str	r3, [r7, #12]
 8007636:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800763a:	b29a      	uxth	r2, r3
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	801a      	strh	r2, [r3, #0]
 8007640:	f000 be1f 	b.w	8008282 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007644:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007648:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	78db      	ldrb	r3, [r3, #3]
 8007650:	2b02      	cmp	r3, #2
 8007652:	f040 8462 	bne.w	8007f1a <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007656:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800765a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	6a1a      	ldr	r2, [r3, #32]
 8007662:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007666:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	691b      	ldr	r3, [r3, #16]
 800766e:	429a      	cmp	r2, r3
 8007670:	f240 83df 	bls.w	8007e32 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007674:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007678:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800767c:	681a      	ldr	r2, [r3, #0]
 800767e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007682:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	781b      	ldrb	r3, [r3, #0]
 800768a:	009b      	lsls	r3, r3, #2
 800768c:	4413      	add	r3, r2
 800768e:	881b      	ldrh	r3, [r3, #0]
 8007690:	b29b      	uxth	r3, r3
 8007692:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800769a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800769e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80076a6:	681a      	ldr	r2, [r3, #0]
 80076a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	781b      	ldrb	r3, [r3, #0]
 80076b4:	009b      	lsls	r3, r3, #2
 80076b6:	441a      	add	r2, r3
 80076b8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80076bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076c4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80076c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076cc:	b29b      	uxth	r3, r3
 80076ce:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80076d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	6a1a      	ldr	r2, [r3, #32]
 80076dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076e0:	1ad2      	subs	r2, r2, r3
 80076e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80076ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80076f6:	681a      	ldr	r2, [r3, #0]
 80076f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	781b      	ldrb	r3, [r3, #0]
 8007704:	009b      	lsls	r3, r3, #2
 8007706:	4413      	add	r3, r2
 8007708:	881b      	ldrh	r3, [r3, #0]
 800770a:	b29b      	uxth	r3, r3
 800770c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007710:	2b00      	cmp	r3, #0
 8007712:	f000 81c7 	beq.w	8007aa4 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007716:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800771a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	633b      	str	r3, [r7, #48]	; 0x30
 8007722:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007726:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	785b      	ldrb	r3, [r3, #1]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d177      	bne.n	8007822 <USB_EPStartXfer+0x2ce>
 8007732:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007736:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	62bb      	str	r3, [r7, #40]	; 0x28
 800773e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007742:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800774c:	b29b      	uxth	r3, r3
 800774e:	461a      	mov	r2, r3
 8007750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007752:	4413      	add	r3, r2
 8007754:	62bb      	str	r3, [r7, #40]	; 0x28
 8007756:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800775a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	011a      	lsls	r2, r3, #4
 8007764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007766:	4413      	add	r3, r2
 8007768:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800776c:	627b      	str	r3, [r7, #36]	; 0x24
 800776e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007770:	881b      	ldrh	r3, [r3, #0]
 8007772:	b29b      	uxth	r3, r3
 8007774:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007778:	b29a      	uxth	r2, r3
 800777a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800777c:	801a      	strh	r2, [r3, #0]
 800777e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007782:	2b3e      	cmp	r3, #62	; 0x3e
 8007784:	d921      	bls.n	80077ca <USB_EPStartXfer+0x276>
 8007786:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800778a:	095b      	lsrs	r3, r3, #5
 800778c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007790:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007794:	f003 031f 	and.w	r3, r3, #31
 8007798:	2b00      	cmp	r3, #0
 800779a:	d104      	bne.n	80077a6 <USB_EPStartXfer+0x252>
 800779c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80077a0:	3b01      	subs	r3, #1
 80077a2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80077a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a8:	881b      	ldrh	r3, [r3, #0]
 80077aa:	b29a      	uxth	r2, r3
 80077ac:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80077b0:	b29b      	uxth	r3, r3
 80077b2:	029b      	lsls	r3, r3, #10
 80077b4:	b29b      	uxth	r3, r3
 80077b6:	4313      	orrs	r3, r2
 80077b8:	b29b      	uxth	r3, r3
 80077ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077c2:	b29a      	uxth	r2, r3
 80077c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c6:	801a      	strh	r2, [r3, #0]
 80077c8:	e050      	b.n	800786c <USB_EPStartXfer+0x318>
 80077ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d10a      	bne.n	80077e8 <USB_EPStartXfer+0x294>
 80077d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077d4:	881b      	ldrh	r3, [r3, #0]
 80077d6:	b29b      	uxth	r3, r3
 80077d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077e0:	b29a      	uxth	r2, r3
 80077e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e4:	801a      	strh	r2, [r3, #0]
 80077e6:	e041      	b.n	800786c <USB_EPStartXfer+0x318>
 80077e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077ec:	085b      	lsrs	r3, r3, #1
 80077ee:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80077f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077f6:	f003 0301 	and.w	r3, r3, #1
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d004      	beq.n	8007808 <USB_EPStartXfer+0x2b4>
 80077fe:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007802:	3301      	adds	r3, #1
 8007804:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800780a:	881b      	ldrh	r3, [r3, #0]
 800780c:	b29a      	uxth	r2, r3
 800780e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007812:	b29b      	uxth	r3, r3
 8007814:	029b      	lsls	r3, r3, #10
 8007816:	b29b      	uxth	r3, r3
 8007818:	4313      	orrs	r3, r2
 800781a:	b29a      	uxth	r2, r3
 800781c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800781e:	801a      	strh	r2, [r3, #0]
 8007820:	e024      	b.n	800786c <USB_EPStartXfer+0x318>
 8007822:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007826:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	785b      	ldrb	r3, [r3, #1]
 800782e:	2b01      	cmp	r3, #1
 8007830:	d11c      	bne.n	800786c <USB_EPStartXfer+0x318>
 8007832:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007836:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007840:	b29b      	uxth	r3, r3
 8007842:	461a      	mov	r2, r3
 8007844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007846:	4413      	add	r3, r2
 8007848:	633b      	str	r3, [r7, #48]	; 0x30
 800784a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800784e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	781b      	ldrb	r3, [r3, #0]
 8007856:	011a      	lsls	r2, r3, #4
 8007858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800785a:	4413      	add	r3, r2
 800785c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007860:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007862:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007866:	b29a      	uxth	r2, r3
 8007868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800786a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800786c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007870:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	895b      	ldrh	r3, [r3, #10]
 8007878:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800787c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007880:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	6959      	ldr	r1, [r3, #20]
 8007888:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800788c:	b29b      	uxth	r3, r3
 800788e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007892:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007896:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800789a:	6800      	ldr	r0, [r0, #0]
 800789c:	f001 fb49 	bl	8008f32 <USB_WritePMA>
            ep->xfer_buff += len;
 80078a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	695a      	ldr	r2, [r3, #20]
 80078ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078b0:	441a      	add	r2, r3
 80078b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80078be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	6a1a      	ldr	r2, [r3, #32]
 80078ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	691b      	ldr	r3, [r3, #16]
 80078d6:	429a      	cmp	r2, r3
 80078d8:	d90f      	bls.n	80078fa <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80078da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	6a1a      	ldr	r2, [r3, #32]
 80078e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078ea:	1ad2      	subs	r2, r2, r3
 80078ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	621a      	str	r2, [r3, #32]
 80078f8:	e00e      	b.n	8007918 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80078fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	6a1b      	ldr	r3, [r3, #32]
 8007906:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800790a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800790e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	2200      	movs	r2, #0
 8007916:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007918:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800791c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	785b      	ldrb	r3, [r3, #1]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d177      	bne.n	8007a18 <USB_EPStartXfer+0x4c4>
 8007928:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800792c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	61bb      	str	r3, [r7, #24]
 8007934:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007938:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007942:	b29b      	uxth	r3, r3
 8007944:	461a      	mov	r2, r3
 8007946:	69bb      	ldr	r3, [r7, #24]
 8007948:	4413      	add	r3, r2
 800794a:	61bb      	str	r3, [r7, #24]
 800794c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007950:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	781b      	ldrb	r3, [r3, #0]
 8007958:	011a      	lsls	r2, r3, #4
 800795a:	69bb      	ldr	r3, [r7, #24]
 800795c:	4413      	add	r3, r2
 800795e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007962:	617b      	str	r3, [r7, #20]
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	881b      	ldrh	r3, [r3, #0]
 8007968:	b29b      	uxth	r3, r3
 800796a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800796e:	b29a      	uxth	r2, r3
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	801a      	strh	r2, [r3, #0]
 8007974:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007978:	2b3e      	cmp	r3, #62	; 0x3e
 800797a:	d921      	bls.n	80079c0 <USB_EPStartXfer+0x46c>
 800797c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007980:	095b      	lsrs	r3, r3, #5
 8007982:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007986:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800798a:	f003 031f 	and.w	r3, r3, #31
 800798e:	2b00      	cmp	r3, #0
 8007990:	d104      	bne.n	800799c <USB_EPStartXfer+0x448>
 8007992:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007996:	3b01      	subs	r3, #1
 8007998:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800799c:	697b      	ldr	r3, [r7, #20]
 800799e:	881b      	ldrh	r3, [r3, #0]
 80079a0:	b29a      	uxth	r2, r3
 80079a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80079a6:	b29b      	uxth	r3, r3
 80079a8:	029b      	lsls	r3, r3, #10
 80079aa:	b29b      	uxth	r3, r3
 80079ac:	4313      	orrs	r3, r2
 80079ae:	b29b      	uxth	r3, r3
 80079b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079b8:	b29a      	uxth	r2, r3
 80079ba:	697b      	ldr	r3, [r7, #20]
 80079bc:	801a      	strh	r2, [r3, #0]
 80079be:	e056      	b.n	8007a6e <USB_EPStartXfer+0x51a>
 80079c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d10a      	bne.n	80079de <USB_EPStartXfer+0x48a>
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	881b      	ldrh	r3, [r3, #0]
 80079cc:	b29b      	uxth	r3, r3
 80079ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079d6:	b29a      	uxth	r2, r3
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	801a      	strh	r2, [r3, #0]
 80079dc:	e047      	b.n	8007a6e <USB_EPStartXfer+0x51a>
 80079de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079e2:	085b      	lsrs	r3, r3, #1
 80079e4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80079e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079ec:	f003 0301 	and.w	r3, r3, #1
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d004      	beq.n	80079fe <USB_EPStartXfer+0x4aa>
 80079f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80079f8:	3301      	adds	r3, #1
 80079fa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	881b      	ldrh	r3, [r3, #0]
 8007a02:	b29a      	uxth	r2, r3
 8007a04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a08:	b29b      	uxth	r3, r3
 8007a0a:	029b      	lsls	r3, r3, #10
 8007a0c:	b29b      	uxth	r3, r3
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	b29a      	uxth	r2, r3
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	801a      	strh	r2, [r3, #0]
 8007a16:	e02a      	b.n	8007a6e <USB_EPStartXfer+0x51a>
 8007a18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	785b      	ldrb	r3, [r3, #1]
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	d122      	bne.n	8007a6e <USB_EPStartXfer+0x51a>
 8007a28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a2c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	623b      	str	r3, [r7, #32]
 8007a34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a38:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a42:	b29b      	uxth	r3, r3
 8007a44:	461a      	mov	r2, r3
 8007a46:	6a3b      	ldr	r3, [r7, #32]
 8007a48:	4413      	add	r3, r2
 8007a4a:	623b      	str	r3, [r7, #32]
 8007a4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	781b      	ldrb	r3, [r3, #0]
 8007a58:	011a      	lsls	r2, r3, #4
 8007a5a:	6a3b      	ldr	r3, [r7, #32]
 8007a5c:	4413      	add	r3, r2
 8007a5e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007a62:	61fb      	str	r3, [r7, #28]
 8007a64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a68:	b29a      	uxth	r2, r3
 8007a6a:	69fb      	ldr	r3, [r7, #28]
 8007a6c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007a6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	891b      	ldrh	r3, [r3, #8]
 8007a7a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007a7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	6959      	ldr	r1, [r3, #20]
 8007a8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a8e:	b29b      	uxth	r3, r3
 8007a90:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007a94:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007a98:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007a9c:	6800      	ldr	r0, [r0, #0]
 8007a9e:	f001 fa48 	bl	8008f32 <USB_WritePMA>
 8007aa2:	e3ee      	b.n	8008282 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007aa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007aa8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	785b      	ldrb	r3, [r3, #1]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d177      	bne.n	8007ba4 <USB_EPStartXfer+0x650>
 8007ab4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ab8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ac0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ac4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ace:	b29b      	uxth	r3, r3
 8007ad0:	461a      	mov	r2, r3
 8007ad2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ad4:	4413      	add	r3, r2
 8007ad6:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ad8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007adc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	781b      	ldrb	r3, [r3, #0]
 8007ae4:	011a      	lsls	r2, r3, #4
 8007ae6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ae8:	4413      	add	r3, r2
 8007aea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007aee:	647b      	str	r3, [r7, #68]	; 0x44
 8007af0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007af2:	881b      	ldrh	r3, [r3, #0]
 8007af4:	b29b      	uxth	r3, r3
 8007af6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007afa:	b29a      	uxth	r2, r3
 8007afc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007afe:	801a      	strh	r2, [r3, #0]
 8007b00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b04:	2b3e      	cmp	r3, #62	; 0x3e
 8007b06:	d921      	bls.n	8007b4c <USB_EPStartXfer+0x5f8>
 8007b08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b0c:	095b      	lsrs	r3, r3, #5
 8007b0e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007b12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b16:	f003 031f 	and.w	r3, r3, #31
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d104      	bne.n	8007b28 <USB_EPStartXfer+0x5d4>
 8007b1e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007b22:	3b01      	subs	r3, #1
 8007b24:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007b28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b2a:	881b      	ldrh	r3, [r3, #0]
 8007b2c:	b29a      	uxth	r2, r3
 8007b2e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007b32:	b29b      	uxth	r3, r3
 8007b34:	029b      	lsls	r3, r3, #10
 8007b36:	b29b      	uxth	r3, r3
 8007b38:	4313      	orrs	r3, r2
 8007b3a:	b29b      	uxth	r3, r3
 8007b3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b44:	b29a      	uxth	r2, r3
 8007b46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b48:	801a      	strh	r2, [r3, #0]
 8007b4a:	e056      	b.n	8007bfa <USB_EPStartXfer+0x6a6>
 8007b4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d10a      	bne.n	8007b6a <USB_EPStartXfer+0x616>
 8007b54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b56:	881b      	ldrh	r3, [r3, #0]
 8007b58:	b29b      	uxth	r3, r3
 8007b5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b62:	b29a      	uxth	r2, r3
 8007b64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b66:	801a      	strh	r2, [r3, #0]
 8007b68:	e047      	b.n	8007bfa <USB_EPStartXfer+0x6a6>
 8007b6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b6e:	085b      	lsrs	r3, r3, #1
 8007b70:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007b74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b78:	f003 0301 	and.w	r3, r3, #1
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d004      	beq.n	8007b8a <USB_EPStartXfer+0x636>
 8007b80:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007b84:	3301      	adds	r3, #1
 8007b86:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007b8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b8c:	881b      	ldrh	r3, [r3, #0]
 8007b8e:	b29a      	uxth	r2, r3
 8007b90:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007b94:	b29b      	uxth	r3, r3
 8007b96:	029b      	lsls	r3, r3, #10
 8007b98:	b29b      	uxth	r3, r3
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	b29a      	uxth	r2, r3
 8007b9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ba0:	801a      	strh	r2, [r3, #0]
 8007ba2:	e02a      	b.n	8007bfa <USB_EPStartXfer+0x6a6>
 8007ba4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ba8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	785b      	ldrb	r3, [r3, #1]
 8007bb0:	2b01      	cmp	r3, #1
 8007bb2:	d122      	bne.n	8007bfa <USB_EPStartXfer+0x6a6>
 8007bb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bb8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	653b      	str	r3, [r7, #80]	; 0x50
 8007bc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bc4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007bce:	b29b      	uxth	r3, r3
 8007bd0:	461a      	mov	r2, r3
 8007bd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bd4:	4413      	add	r3, r2
 8007bd6:	653b      	str	r3, [r7, #80]	; 0x50
 8007bd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	781b      	ldrb	r3, [r3, #0]
 8007be4:	011a      	lsls	r2, r3, #4
 8007be6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007be8:	4413      	add	r3, r2
 8007bea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007bee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007bf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bf4:	b29a      	uxth	r2, r3
 8007bf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bf8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007bfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bfe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	891b      	ldrh	r3, [r3, #8]
 8007c06:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007c0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	6959      	ldr	r1, [r3, #20]
 8007c16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c1a:	b29b      	uxth	r3, r3
 8007c1c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007c20:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007c24:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007c28:	6800      	ldr	r0, [r0, #0]
 8007c2a:	f001 f982 	bl	8008f32 <USB_WritePMA>
            ep->xfer_buff += len;
 8007c2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	695a      	ldr	r2, [r3, #20]
 8007c3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c3e:	441a      	add	r2, r3
 8007c40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007c4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	6a1a      	ldr	r2, [r3, #32]
 8007c58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	691b      	ldr	r3, [r3, #16]
 8007c64:	429a      	cmp	r2, r3
 8007c66:	d90f      	bls.n	8007c88 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8007c68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	6a1a      	ldr	r2, [r3, #32]
 8007c74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c78:	1ad2      	subs	r2, r2, r3
 8007c7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	621a      	str	r2, [r3, #32]
 8007c86:	e00e      	b.n	8007ca6 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8007c88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	6a1b      	ldr	r3, [r3, #32]
 8007c94:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8007c98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007ca6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007caa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	643b      	str	r3, [r7, #64]	; 0x40
 8007cb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	785b      	ldrb	r3, [r3, #1]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d177      	bne.n	8007db2 <USB_EPStartXfer+0x85e>
 8007cc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cc6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	63bb      	str	r3, [r7, #56]	; 0x38
 8007cce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cd2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007cdc:	b29b      	uxth	r3, r3
 8007cde:	461a      	mov	r2, r3
 8007ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ce2:	4413      	add	r3, r2
 8007ce4:	63bb      	str	r3, [r7, #56]	; 0x38
 8007ce6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	781b      	ldrb	r3, [r3, #0]
 8007cf2:	011a      	lsls	r2, r3, #4
 8007cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cf6:	4413      	add	r3, r2
 8007cf8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007cfc:	637b      	str	r3, [r7, #52]	; 0x34
 8007cfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d00:	881b      	ldrh	r3, [r3, #0]
 8007d02:	b29b      	uxth	r3, r3
 8007d04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d08:	b29a      	uxth	r2, r3
 8007d0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d0c:	801a      	strh	r2, [r3, #0]
 8007d0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d12:	2b3e      	cmp	r3, #62	; 0x3e
 8007d14:	d921      	bls.n	8007d5a <USB_EPStartXfer+0x806>
 8007d16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d1a:	095b      	lsrs	r3, r3, #5
 8007d1c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007d20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d24:	f003 031f 	and.w	r3, r3, #31
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d104      	bne.n	8007d36 <USB_EPStartXfer+0x7e2>
 8007d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d30:	3b01      	subs	r3, #1
 8007d32:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d38:	881b      	ldrh	r3, [r3, #0]
 8007d3a:	b29a      	uxth	r2, r3
 8007d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d40:	b29b      	uxth	r3, r3
 8007d42:	029b      	lsls	r3, r3, #10
 8007d44:	b29b      	uxth	r3, r3
 8007d46:	4313      	orrs	r3, r2
 8007d48:	b29b      	uxth	r3, r3
 8007d4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d52:	b29a      	uxth	r2, r3
 8007d54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d56:	801a      	strh	r2, [r3, #0]
 8007d58:	e050      	b.n	8007dfc <USB_EPStartXfer+0x8a8>
 8007d5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d10a      	bne.n	8007d78 <USB_EPStartXfer+0x824>
 8007d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d64:	881b      	ldrh	r3, [r3, #0]
 8007d66:	b29b      	uxth	r3, r3
 8007d68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d70:	b29a      	uxth	r2, r3
 8007d72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d74:	801a      	strh	r2, [r3, #0]
 8007d76:	e041      	b.n	8007dfc <USB_EPStartXfer+0x8a8>
 8007d78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d7c:	085b      	lsrs	r3, r3, #1
 8007d7e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007d82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d86:	f003 0301 	and.w	r3, r3, #1
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d004      	beq.n	8007d98 <USB_EPStartXfer+0x844>
 8007d8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d92:	3301      	adds	r3, #1
 8007d94:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007d98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d9a:	881b      	ldrh	r3, [r3, #0]
 8007d9c:	b29a      	uxth	r2, r3
 8007d9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007da2:	b29b      	uxth	r3, r3
 8007da4:	029b      	lsls	r3, r3, #10
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	4313      	orrs	r3, r2
 8007daa:	b29a      	uxth	r2, r3
 8007dac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dae:	801a      	strh	r2, [r3, #0]
 8007db0:	e024      	b.n	8007dfc <USB_EPStartXfer+0x8a8>
 8007db2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007db6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	785b      	ldrb	r3, [r3, #1]
 8007dbe:	2b01      	cmp	r3, #1
 8007dc0:	d11c      	bne.n	8007dfc <USB_EPStartXfer+0x8a8>
 8007dc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dc6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007dd0:	b29b      	uxth	r3, r3
 8007dd2:	461a      	mov	r2, r3
 8007dd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007dd6:	4413      	add	r3, r2
 8007dd8:	643b      	str	r3, [r7, #64]	; 0x40
 8007dda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	781b      	ldrb	r3, [r3, #0]
 8007de6:	011a      	lsls	r2, r3, #4
 8007de8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007dea:	4413      	add	r3, r2
 8007dec:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007df0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007df2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007df6:	b29a      	uxth	r2, r3
 8007df8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dfa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007dfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	895b      	ldrh	r3, [r3, #10]
 8007e08:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007e0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	6959      	ldr	r1, [r3, #20]
 8007e18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e1c:	b29b      	uxth	r3, r3
 8007e1e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007e22:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007e26:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007e2a:	6800      	ldr	r0, [r0, #0]
 8007e2c:	f001 f881 	bl	8008f32 <USB_WritePMA>
 8007e30:	e227      	b.n	8008282 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007e32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	6a1b      	ldr	r3, [r3, #32]
 8007e3e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007e42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e46:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e4a:	681a      	ldr	r2, [r3, #0]
 8007e4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	781b      	ldrb	r3, [r3, #0]
 8007e58:	009b      	lsls	r3, r3, #2
 8007e5a:	4413      	add	r3, r2
 8007e5c:	881b      	ldrh	r3, [r3, #0]
 8007e5e:	b29b      	uxth	r3, r3
 8007e60:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007e64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e68:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007e6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e70:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e74:	681a      	ldr	r2, [r3, #0]
 8007e76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	781b      	ldrb	r3, [r3, #0]
 8007e82:	009b      	lsls	r3, r3, #2
 8007e84:	441a      	add	r2, r3
 8007e86:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007e8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e9a:	b29b      	uxth	r3, r3
 8007e9c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007e9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ea2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007eaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007eae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007eb8:	b29b      	uxth	r3, r3
 8007eba:	461a      	mov	r2, r3
 8007ebc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ebe:	4413      	add	r3, r2
 8007ec0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007ec2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ec6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	781b      	ldrb	r3, [r3, #0]
 8007ece:	011a      	lsls	r2, r3, #4
 8007ed0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ed2:	4413      	add	r3, r2
 8007ed4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007ed8:	65bb      	str	r3, [r7, #88]	; 0x58
 8007eda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ede:	b29a      	uxth	r2, r3
 8007ee0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007ee2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007ee4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ee8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	891b      	ldrh	r3, [r3, #8]
 8007ef0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007ef4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ef8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	6959      	ldr	r1, [r3, #20]
 8007f00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f04:	b29b      	uxth	r3, r3
 8007f06:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007f0a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007f0e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007f12:	6800      	ldr	r0, [r0, #0]
 8007f14:	f001 f80d 	bl	8008f32 <USB_WritePMA>
 8007f18:	e1b3      	b.n	8008282 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007f1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	6a1a      	ldr	r2, [r3, #32]
 8007f26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f2a:	1ad2      	subs	r2, r2, r3
 8007f2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007f38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f3c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f40:	681a      	ldr	r2, [r3, #0]
 8007f42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	781b      	ldrb	r3, [r3, #0]
 8007f4e:	009b      	lsls	r3, r3, #2
 8007f50:	4413      	add	r3, r2
 8007f52:	881b      	ldrh	r3, [r3, #0]
 8007f54:	b29b      	uxth	r3, r3
 8007f56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	f000 80c6 	beq.w	80080ec <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007f60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	673b      	str	r3, [r7, #112]	; 0x70
 8007f6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	785b      	ldrb	r3, [r3, #1]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d177      	bne.n	800806c <USB_EPStartXfer+0xb18>
 8007f7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f80:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	66bb      	str	r3, [r7, #104]	; 0x68
 8007f88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f8c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f96:	b29b      	uxth	r3, r3
 8007f98:	461a      	mov	r2, r3
 8007f9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007f9c:	4413      	add	r3, r2
 8007f9e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007fa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fa4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	781b      	ldrb	r3, [r3, #0]
 8007fac:	011a      	lsls	r2, r3, #4
 8007fae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007fb0:	4413      	add	r3, r2
 8007fb2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007fb6:	667b      	str	r3, [r7, #100]	; 0x64
 8007fb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007fba:	881b      	ldrh	r3, [r3, #0]
 8007fbc:	b29b      	uxth	r3, r3
 8007fbe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007fc2:	b29a      	uxth	r2, r3
 8007fc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007fc6:	801a      	strh	r2, [r3, #0]
 8007fc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fcc:	2b3e      	cmp	r3, #62	; 0x3e
 8007fce:	d921      	bls.n	8008014 <USB_EPStartXfer+0xac0>
 8007fd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fd4:	095b      	lsrs	r3, r3, #5
 8007fd6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007fda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fde:	f003 031f 	and.w	r3, r3, #31
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d104      	bne.n	8007ff0 <USB_EPStartXfer+0xa9c>
 8007fe6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007fea:	3b01      	subs	r3, #1
 8007fec:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007ff0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ff2:	881b      	ldrh	r3, [r3, #0]
 8007ff4:	b29a      	uxth	r2, r3
 8007ff6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007ffa:	b29b      	uxth	r3, r3
 8007ffc:	029b      	lsls	r3, r3, #10
 8007ffe:	b29b      	uxth	r3, r3
 8008000:	4313      	orrs	r3, r2
 8008002:	b29b      	uxth	r3, r3
 8008004:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008008:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800800c:	b29a      	uxth	r2, r3
 800800e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008010:	801a      	strh	r2, [r3, #0]
 8008012:	e050      	b.n	80080b6 <USB_EPStartXfer+0xb62>
 8008014:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008018:	2b00      	cmp	r3, #0
 800801a:	d10a      	bne.n	8008032 <USB_EPStartXfer+0xade>
 800801c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800801e:	881b      	ldrh	r3, [r3, #0]
 8008020:	b29b      	uxth	r3, r3
 8008022:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008026:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800802a:	b29a      	uxth	r2, r3
 800802c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800802e:	801a      	strh	r2, [r3, #0]
 8008030:	e041      	b.n	80080b6 <USB_EPStartXfer+0xb62>
 8008032:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008036:	085b      	lsrs	r3, r3, #1
 8008038:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800803c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008040:	f003 0301 	and.w	r3, r3, #1
 8008044:	2b00      	cmp	r3, #0
 8008046:	d004      	beq.n	8008052 <USB_EPStartXfer+0xafe>
 8008048:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800804c:	3301      	adds	r3, #1
 800804e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008052:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008054:	881b      	ldrh	r3, [r3, #0]
 8008056:	b29a      	uxth	r2, r3
 8008058:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800805c:	b29b      	uxth	r3, r3
 800805e:	029b      	lsls	r3, r3, #10
 8008060:	b29b      	uxth	r3, r3
 8008062:	4313      	orrs	r3, r2
 8008064:	b29a      	uxth	r2, r3
 8008066:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008068:	801a      	strh	r2, [r3, #0]
 800806a:	e024      	b.n	80080b6 <USB_EPStartXfer+0xb62>
 800806c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008070:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	785b      	ldrb	r3, [r3, #1]
 8008078:	2b01      	cmp	r3, #1
 800807a:	d11c      	bne.n	80080b6 <USB_EPStartXfer+0xb62>
 800807c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008080:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800808a:	b29b      	uxth	r3, r3
 800808c:	461a      	mov	r2, r3
 800808e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008090:	4413      	add	r3, r2
 8008092:	673b      	str	r3, [r7, #112]	; 0x70
 8008094:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008098:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	781b      	ldrb	r3, [r3, #0]
 80080a0:	011a      	lsls	r2, r3, #4
 80080a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80080a4:	4413      	add	r3, r2
 80080a6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80080aa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80080ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080b0:	b29a      	uxth	r2, r3
 80080b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080b4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80080b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	895b      	ldrh	r3, [r3, #10]
 80080c2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80080c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	6959      	ldr	r1, [r3, #20]
 80080d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080d6:	b29b      	uxth	r3, r3
 80080d8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80080dc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80080e0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80080e4:	6800      	ldr	r0, [r0, #0]
 80080e6:	f000 ff24 	bl	8008f32 <USB_WritePMA>
 80080ea:	e0ca      	b.n	8008282 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80080ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	785b      	ldrb	r3, [r3, #1]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d177      	bne.n	80081ec <USB_EPStartXfer+0xc98>
 80080fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008100:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008108:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800810c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008116:	b29b      	uxth	r3, r3
 8008118:	461a      	mov	r2, r3
 800811a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800811c:	4413      	add	r3, r2
 800811e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008120:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008124:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	781b      	ldrb	r3, [r3, #0]
 800812c:	011a      	lsls	r2, r3, #4
 800812e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008130:	4413      	add	r3, r2
 8008132:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008136:	67bb      	str	r3, [r7, #120]	; 0x78
 8008138:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800813a:	881b      	ldrh	r3, [r3, #0]
 800813c:	b29b      	uxth	r3, r3
 800813e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008142:	b29a      	uxth	r2, r3
 8008144:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008146:	801a      	strh	r2, [r3, #0]
 8008148:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800814c:	2b3e      	cmp	r3, #62	; 0x3e
 800814e:	d921      	bls.n	8008194 <USB_EPStartXfer+0xc40>
 8008150:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008154:	095b      	lsrs	r3, r3, #5
 8008156:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800815a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800815e:	f003 031f 	and.w	r3, r3, #31
 8008162:	2b00      	cmp	r3, #0
 8008164:	d104      	bne.n	8008170 <USB_EPStartXfer+0xc1c>
 8008166:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800816a:	3b01      	subs	r3, #1
 800816c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008170:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008172:	881b      	ldrh	r3, [r3, #0]
 8008174:	b29a      	uxth	r2, r3
 8008176:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800817a:	b29b      	uxth	r3, r3
 800817c:	029b      	lsls	r3, r3, #10
 800817e:	b29b      	uxth	r3, r3
 8008180:	4313      	orrs	r3, r2
 8008182:	b29b      	uxth	r3, r3
 8008184:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008188:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800818c:	b29a      	uxth	r2, r3
 800818e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008190:	801a      	strh	r2, [r3, #0]
 8008192:	e05c      	b.n	800824e <USB_EPStartXfer+0xcfa>
 8008194:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008198:	2b00      	cmp	r3, #0
 800819a:	d10a      	bne.n	80081b2 <USB_EPStartXfer+0xc5e>
 800819c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800819e:	881b      	ldrh	r3, [r3, #0]
 80081a0:	b29b      	uxth	r3, r3
 80081a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081aa:	b29a      	uxth	r2, r3
 80081ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80081ae:	801a      	strh	r2, [r3, #0]
 80081b0:	e04d      	b.n	800824e <USB_EPStartXfer+0xcfa>
 80081b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081b6:	085b      	lsrs	r3, r3, #1
 80081b8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80081bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081c0:	f003 0301 	and.w	r3, r3, #1
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d004      	beq.n	80081d2 <USB_EPStartXfer+0xc7e>
 80081c8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80081cc:	3301      	adds	r3, #1
 80081ce:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80081d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80081d4:	881b      	ldrh	r3, [r3, #0]
 80081d6:	b29a      	uxth	r2, r3
 80081d8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80081dc:	b29b      	uxth	r3, r3
 80081de:	029b      	lsls	r3, r3, #10
 80081e0:	b29b      	uxth	r3, r3
 80081e2:	4313      	orrs	r3, r2
 80081e4:	b29a      	uxth	r2, r3
 80081e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80081e8:	801a      	strh	r2, [r3, #0]
 80081ea:	e030      	b.n	800824e <USB_EPStartXfer+0xcfa>
 80081ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	785b      	ldrb	r3, [r3, #1]
 80081f8:	2b01      	cmp	r3, #1
 80081fa:	d128      	bne.n	800824e <USB_EPStartXfer+0xcfa>
 80081fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008200:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800820a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800820e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008218:	b29b      	uxth	r3, r3
 800821a:	461a      	mov	r2, r3
 800821c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008220:	4413      	add	r3, r2
 8008222:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008226:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800822a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	781b      	ldrb	r3, [r3, #0]
 8008232:	011a      	lsls	r2, r3, #4
 8008234:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008238:	4413      	add	r3, r2
 800823a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800823e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008242:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008246:	b29a      	uxth	r2, r3
 8008248:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800824c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800824e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008252:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	891b      	ldrh	r3, [r3, #8]
 800825a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800825e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008262:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	6959      	ldr	r1, [r3, #20]
 800826a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800826e:	b29b      	uxth	r3, r3
 8008270:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008274:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008278:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800827c:	6800      	ldr	r0, [r0, #0]
 800827e:	f000 fe58 	bl	8008f32 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008282:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008286:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800828a:	681a      	ldr	r2, [r3, #0]
 800828c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008290:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	781b      	ldrb	r3, [r3, #0]
 8008298:	009b      	lsls	r3, r3, #2
 800829a:	4413      	add	r3, r2
 800829c:	881b      	ldrh	r3, [r3, #0]
 800829e:	b29b      	uxth	r3, r3
 80082a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082a8:	817b      	strh	r3, [r7, #10]
 80082aa:	897b      	ldrh	r3, [r7, #10]
 80082ac:	f083 0310 	eor.w	r3, r3, #16
 80082b0:	817b      	strh	r3, [r7, #10]
 80082b2:	897b      	ldrh	r3, [r7, #10]
 80082b4:	f083 0320 	eor.w	r3, r3, #32
 80082b8:	817b      	strh	r3, [r7, #10]
 80082ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80082c2:	681a      	ldr	r2, [r3, #0]
 80082c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	781b      	ldrb	r3, [r3, #0]
 80082d0:	009b      	lsls	r3, r3, #2
 80082d2:	441a      	add	r2, r3
 80082d4:	897b      	ldrh	r3, [r7, #10]
 80082d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082e6:	b29b      	uxth	r3, r3
 80082e8:	8013      	strh	r3, [r2, #0]
 80082ea:	f000 bcde 	b.w	8008caa <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80082ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	7b1b      	ldrb	r3, [r3, #12]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	f040 80bb 	bne.w	8008476 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008300:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008304:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	699a      	ldr	r2, [r3, #24]
 800830c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008310:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	691b      	ldr	r3, [r3, #16]
 8008318:	429a      	cmp	r2, r3
 800831a:	d917      	bls.n	800834c <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800831c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008320:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	691b      	ldr	r3, [r3, #16]
 8008328:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800832c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008330:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	699a      	ldr	r2, [r3, #24]
 8008338:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800833c:	1ad2      	subs	r2, r2, r3
 800833e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008342:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	619a      	str	r2, [r3, #24]
 800834a:	e00e      	b.n	800836a <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800834c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008350:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	699b      	ldr	r3, [r3, #24]
 8008358:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800835c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008360:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	2200      	movs	r2, #0
 8008368:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800836a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800836e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008378:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800837c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008386:	b29b      	uxth	r3, r3
 8008388:	461a      	mov	r2, r3
 800838a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800838e:	4413      	add	r3, r2
 8008390:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008394:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008398:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	781b      	ldrb	r3, [r3, #0]
 80083a0:	011a      	lsls	r2, r3, #4
 80083a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80083a6:	4413      	add	r3, r2
 80083a8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80083ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80083b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80083b4:	881b      	ldrh	r3, [r3, #0]
 80083b6:	b29b      	uxth	r3, r3
 80083b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80083bc:	b29a      	uxth	r2, r3
 80083be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80083c2:	801a      	strh	r2, [r3, #0]
 80083c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083c8:	2b3e      	cmp	r3, #62	; 0x3e
 80083ca:	d924      	bls.n	8008416 <USB_EPStartXfer+0xec2>
 80083cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083d0:	095b      	lsrs	r3, r3, #5
 80083d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80083d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083da:	f003 031f 	and.w	r3, r3, #31
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d104      	bne.n	80083ec <USB_EPStartXfer+0xe98>
 80083e2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80083e6:	3b01      	subs	r3, #1
 80083e8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80083ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80083f0:	881b      	ldrh	r3, [r3, #0]
 80083f2:	b29a      	uxth	r2, r3
 80083f4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80083f8:	b29b      	uxth	r3, r3
 80083fa:	029b      	lsls	r3, r3, #10
 80083fc:	b29b      	uxth	r3, r3
 80083fe:	4313      	orrs	r3, r2
 8008400:	b29b      	uxth	r3, r3
 8008402:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008406:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800840a:	b29a      	uxth	r2, r3
 800840c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008410:	801a      	strh	r2, [r3, #0]
 8008412:	f000 bc10 	b.w	8008c36 <USB_EPStartXfer+0x16e2>
 8008416:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800841a:	2b00      	cmp	r3, #0
 800841c:	d10c      	bne.n	8008438 <USB_EPStartXfer+0xee4>
 800841e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008422:	881b      	ldrh	r3, [r3, #0]
 8008424:	b29b      	uxth	r3, r3
 8008426:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800842a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800842e:	b29a      	uxth	r2, r3
 8008430:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008434:	801a      	strh	r2, [r3, #0]
 8008436:	e3fe      	b.n	8008c36 <USB_EPStartXfer+0x16e2>
 8008438:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800843c:	085b      	lsrs	r3, r3, #1
 800843e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008442:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008446:	f003 0301 	and.w	r3, r3, #1
 800844a:	2b00      	cmp	r3, #0
 800844c:	d004      	beq.n	8008458 <USB_EPStartXfer+0xf04>
 800844e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008452:	3301      	adds	r3, #1
 8008454:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008458:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800845c:	881b      	ldrh	r3, [r3, #0]
 800845e:	b29a      	uxth	r2, r3
 8008460:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008464:	b29b      	uxth	r3, r3
 8008466:	029b      	lsls	r3, r3, #10
 8008468:	b29b      	uxth	r3, r3
 800846a:	4313      	orrs	r3, r2
 800846c:	b29a      	uxth	r2, r3
 800846e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008472:	801a      	strh	r2, [r3, #0]
 8008474:	e3df      	b.n	8008c36 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008476:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800847a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	78db      	ldrb	r3, [r3, #3]
 8008482:	2b02      	cmp	r3, #2
 8008484:	f040 8218 	bne.w	80088b8 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008488:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800848c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	785b      	ldrb	r3, [r3, #1]
 8008494:	2b00      	cmp	r3, #0
 8008496:	f040 809d 	bne.w	80085d4 <USB_EPStartXfer+0x1080>
 800849a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800849e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80084a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084b6:	b29b      	uxth	r3, r3
 80084b8:	461a      	mov	r2, r3
 80084ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80084be:	4413      	add	r3, r2
 80084c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80084c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	781b      	ldrb	r3, [r3, #0]
 80084d0:	011a      	lsls	r2, r3, #4
 80084d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80084d6:	4413      	add	r3, r2
 80084d8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80084dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80084e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80084e4:	881b      	ldrh	r3, [r3, #0]
 80084e6:	b29b      	uxth	r3, r3
 80084e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80084ec:	b29a      	uxth	r2, r3
 80084ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80084f2:	801a      	strh	r2, [r3, #0]
 80084f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	691b      	ldr	r3, [r3, #16]
 8008500:	2b3e      	cmp	r3, #62	; 0x3e
 8008502:	d92b      	bls.n	800855c <USB_EPStartXfer+0x1008>
 8008504:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008508:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	691b      	ldr	r3, [r3, #16]
 8008510:	095b      	lsrs	r3, r3, #5
 8008512:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008516:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800851a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	691b      	ldr	r3, [r3, #16]
 8008522:	f003 031f 	and.w	r3, r3, #31
 8008526:	2b00      	cmp	r3, #0
 8008528:	d104      	bne.n	8008534 <USB_EPStartXfer+0xfe0>
 800852a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800852e:	3b01      	subs	r3, #1
 8008530:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008534:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008538:	881b      	ldrh	r3, [r3, #0]
 800853a:	b29a      	uxth	r2, r3
 800853c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008540:	b29b      	uxth	r3, r3
 8008542:	029b      	lsls	r3, r3, #10
 8008544:	b29b      	uxth	r3, r3
 8008546:	4313      	orrs	r3, r2
 8008548:	b29b      	uxth	r3, r3
 800854a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800854e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008552:	b29a      	uxth	r2, r3
 8008554:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008558:	801a      	strh	r2, [r3, #0]
 800855a:	e070      	b.n	800863e <USB_EPStartXfer+0x10ea>
 800855c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008560:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	691b      	ldr	r3, [r3, #16]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d10c      	bne.n	8008586 <USB_EPStartXfer+0x1032>
 800856c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008570:	881b      	ldrh	r3, [r3, #0]
 8008572:	b29b      	uxth	r3, r3
 8008574:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008578:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800857c:	b29a      	uxth	r2, r3
 800857e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008582:	801a      	strh	r2, [r3, #0]
 8008584:	e05b      	b.n	800863e <USB_EPStartXfer+0x10ea>
 8008586:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800858a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	691b      	ldr	r3, [r3, #16]
 8008592:	085b      	lsrs	r3, r3, #1
 8008594:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008598:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800859c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	691b      	ldr	r3, [r3, #16]
 80085a4:	f003 0301 	and.w	r3, r3, #1
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d004      	beq.n	80085b6 <USB_EPStartXfer+0x1062>
 80085ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085b0:	3301      	adds	r3, #1
 80085b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80085b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80085ba:	881b      	ldrh	r3, [r3, #0]
 80085bc:	b29a      	uxth	r2, r3
 80085be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085c2:	b29b      	uxth	r3, r3
 80085c4:	029b      	lsls	r3, r3, #10
 80085c6:	b29b      	uxth	r3, r3
 80085c8:	4313      	orrs	r3, r2
 80085ca:	b29a      	uxth	r2, r3
 80085cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80085d0:	801a      	strh	r2, [r3, #0]
 80085d2:	e034      	b.n	800863e <USB_EPStartXfer+0x10ea>
 80085d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	785b      	ldrb	r3, [r3, #1]
 80085e0:	2b01      	cmp	r3, #1
 80085e2:	d12c      	bne.n	800863e <USB_EPStartXfer+0x10ea>
 80085e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80085f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008600:	b29b      	uxth	r3, r3
 8008602:	461a      	mov	r2, r3
 8008604:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008608:	4413      	add	r3, r2
 800860a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800860e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008612:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	781b      	ldrb	r3, [r3, #0]
 800861a:	011a      	lsls	r2, r3, #4
 800861c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008620:	4413      	add	r3, r2
 8008622:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008626:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800862a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800862e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	691b      	ldr	r3, [r3, #16]
 8008636:	b29a      	uxth	r2, r3
 8008638:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800863c:	801a      	strh	r2, [r3, #0]
 800863e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008642:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800864c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008650:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	785b      	ldrb	r3, [r3, #1]
 8008658:	2b00      	cmp	r3, #0
 800865a:	f040 809d 	bne.w	8008798 <USB_EPStartXfer+0x1244>
 800865e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008662:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800866c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008670:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800867a:	b29b      	uxth	r3, r3
 800867c:	461a      	mov	r2, r3
 800867e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008682:	4413      	add	r3, r2
 8008684:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008688:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800868c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	781b      	ldrb	r3, [r3, #0]
 8008694:	011a      	lsls	r2, r3, #4
 8008696:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800869a:	4413      	add	r3, r2
 800869c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80086a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80086a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80086a8:	881b      	ldrh	r3, [r3, #0]
 80086aa:	b29b      	uxth	r3, r3
 80086ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80086b0:	b29a      	uxth	r2, r3
 80086b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80086b6:	801a      	strh	r2, [r3, #0]
 80086b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	691b      	ldr	r3, [r3, #16]
 80086c4:	2b3e      	cmp	r3, #62	; 0x3e
 80086c6:	d92b      	bls.n	8008720 <USB_EPStartXfer+0x11cc>
 80086c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	691b      	ldr	r3, [r3, #16]
 80086d4:	095b      	lsrs	r3, r3, #5
 80086d6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80086da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	691b      	ldr	r3, [r3, #16]
 80086e6:	f003 031f 	and.w	r3, r3, #31
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d104      	bne.n	80086f8 <USB_EPStartXfer+0x11a4>
 80086ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086f2:	3b01      	subs	r3, #1
 80086f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80086f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80086fc:	881b      	ldrh	r3, [r3, #0]
 80086fe:	b29a      	uxth	r2, r3
 8008700:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008704:	b29b      	uxth	r3, r3
 8008706:	029b      	lsls	r3, r3, #10
 8008708:	b29b      	uxth	r3, r3
 800870a:	4313      	orrs	r3, r2
 800870c:	b29b      	uxth	r3, r3
 800870e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008712:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008716:	b29a      	uxth	r2, r3
 8008718:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800871c:	801a      	strh	r2, [r3, #0]
 800871e:	e069      	b.n	80087f4 <USB_EPStartXfer+0x12a0>
 8008720:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008724:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	691b      	ldr	r3, [r3, #16]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d10c      	bne.n	800874a <USB_EPStartXfer+0x11f6>
 8008730:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008734:	881b      	ldrh	r3, [r3, #0]
 8008736:	b29b      	uxth	r3, r3
 8008738:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800873c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008740:	b29a      	uxth	r2, r3
 8008742:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008746:	801a      	strh	r2, [r3, #0]
 8008748:	e054      	b.n	80087f4 <USB_EPStartXfer+0x12a0>
 800874a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800874e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	691b      	ldr	r3, [r3, #16]
 8008756:	085b      	lsrs	r3, r3, #1
 8008758:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800875c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008760:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	691b      	ldr	r3, [r3, #16]
 8008768:	f003 0301 	and.w	r3, r3, #1
 800876c:	2b00      	cmp	r3, #0
 800876e:	d004      	beq.n	800877a <USB_EPStartXfer+0x1226>
 8008770:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008774:	3301      	adds	r3, #1
 8008776:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800877a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800877e:	881b      	ldrh	r3, [r3, #0]
 8008780:	b29a      	uxth	r2, r3
 8008782:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008786:	b29b      	uxth	r3, r3
 8008788:	029b      	lsls	r3, r3, #10
 800878a:	b29b      	uxth	r3, r3
 800878c:	4313      	orrs	r3, r2
 800878e:	b29a      	uxth	r2, r3
 8008790:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008794:	801a      	strh	r2, [r3, #0]
 8008796:	e02d      	b.n	80087f4 <USB_EPStartXfer+0x12a0>
 8008798:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800879c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	785b      	ldrb	r3, [r3, #1]
 80087a4:	2b01      	cmp	r3, #1
 80087a6:	d125      	bne.n	80087f4 <USB_EPStartXfer+0x12a0>
 80087a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80087b6:	b29b      	uxth	r3, r3
 80087b8:	461a      	mov	r2, r3
 80087ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80087be:	4413      	add	r3, r2
 80087c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80087c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	781b      	ldrb	r3, [r3, #0]
 80087d0:	011a      	lsls	r2, r3, #4
 80087d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80087d6:	4413      	add	r3, r2
 80087d8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80087dc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80087e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	691b      	ldr	r3, [r3, #16]
 80087ec:	b29a      	uxth	r2, r3
 80087ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80087f2:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80087f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	69db      	ldr	r3, [r3, #28]
 8008800:	2b00      	cmp	r3, #0
 8008802:	f000 8218 	beq.w	8008c36 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008806:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800880a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800880e:	681a      	ldr	r2, [r3, #0]
 8008810:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008814:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	781b      	ldrb	r3, [r3, #0]
 800881c:	009b      	lsls	r3, r3, #2
 800881e:	4413      	add	r3, r2
 8008820:	881b      	ldrh	r3, [r3, #0]
 8008822:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008826:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800882a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800882e:	2b00      	cmp	r3, #0
 8008830:	d005      	beq.n	800883e <USB_EPStartXfer+0x12ea>
 8008832:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800883a:	2b00      	cmp	r3, #0
 800883c:	d10d      	bne.n	800885a <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800883e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008842:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008846:	2b00      	cmp	r3, #0
 8008848:	f040 81f5 	bne.w	8008c36 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800884c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008854:	2b00      	cmp	r3, #0
 8008856:	f040 81ee 	bne.w	8008c36 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800885a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800885e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008862:	681a      	ldr	r2, [r3, #0]
 8008864:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008868:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	781b      	ldrb	r3, [r3, #0]
 8008870:	009b      	lsls	r3, r3, #2
 8008872:	4413      	add	r3, r2
 8008874:	881b      	ldrh	r3, [r3, #0]
 8008876:	b29b      	uxth	r3, r3
 8008878:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800887c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008880:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8008884:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008888:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800888c:	681a      	ldr	r2, [r3, #0]
 800888e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008892:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	781b      	ldrb	r3, [r3, #0]
 800889a:	009b      	lsls	r3, r3, #2
 800889c:	441a      	add	r2, r3
 800889e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80088a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80088aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80088ae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80088b2:	b29b      	uxth	r3, r3
 80088b4:	8013      	strh	r3, [r2, #0]
 80088b6:	e1be      	b.n	8008c36 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80088b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	78db      	ldrb	r3, [r3, #3]
 80088c4:	2b01      	cmp	r3, #1
 80088c6:	f040 81b4 	bne.w	8008c32 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80088ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	699a      	ldr	r2, [r3, #24]
 80088d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	691b      	ldr	r3, [r3, #16]
 80088e2:	429a      	cmp	r2, r3
 80088e4:	d917      	bls.n	8008916 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80088e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	691b      	ldr	r3, [r3, #16]
 80088f2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 80088f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	699a      	ldr	r2, [r3, #24]
 8008902:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008906:	1ad2      	subs	r2, r2, r3
 8008908:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800890c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	619a      	str	r2, [r3, #24]
 8008914:	e00e      	b.n	8008934 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8008916:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800891a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	699b      	ldr	r3, [r3, #24]
 8008922:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8008926:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800892a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	2200      	movs	r2, #0
 8008932:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008934:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008938:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	785b      	ldrb	r3, [r3, #1]
 8008940:	2b00      	cmp	r3, #0
 8008942:	f040 8085 	bne.w	8008a50 <USB_EPStartXfer+0x14fc>
 8008946:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800894a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008954:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008958:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008962:	b29b      	uxth	r3, r3
 8008964:	461a      	mov	r2, r3
 8008966:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800896a:	4413      	add	r3, r2
 800896c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008970:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008974:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	781b      	ldrb	r3, [r3, #0]
 800897c:	011a      	lsls	r2, r3, #4
 800897e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008982:	4413      	add	r3, r2
 8008984:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008988:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800898c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008990:	881b      	ldrh	r3, [r3, #0]
 8008992:	b29b      	uxth	r3, r3
 8008994:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008998:	b29a      	uxth	r2, r3
 800899a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800899e:	801a      	strh	r2, [r3, #0]
 80089a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089a4:	2b3e      	cmp	r3, #62	; 0x3e
 80089a6:	d923      	bls.n	80089f0 <USB_EPStartXfer+0x149c>
 80089a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089ac:	095b      	lsrs	r3, r3, #5
 80089ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80089b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089b6:	f003 031f 	and.w	r3, r3, #31
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d104      	bne.n	80089c8 <USB_EPStartXfer+0x1474>
 80089be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80089c2:	3b01      	subs	r3, #1
 80089c4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80089c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80089cc:	881b      	ldrh	r3, [r3, #0]
 80089ce:	b29a      	uxth	r2, r3
 80089d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80089d4:	b29b      	uxth	r3, r3
 80089d6:	029b      	lsls	r3, r3, #10
 80089d8:	b29b      	uxth	r3, r3
 80089da:	4313      	orrs	r3, r2
 80089dc:	b29b      	uxth	r3, r3
 80089de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80089e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80089e6:	b29a      	uxth	r2, r3
 80089e8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80089ec:	801a      	strh	r2, [r3, #0]
 80089ee:	e060      	b.n	8008ab2 <USB_EPStartXfer+0x155e>
 80089f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d10c      	bne.n	8008a12 <USB_EPStartXfer+0x14be>
 80089f8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80089fc:	881b      	ldrh	r3, [r3, #0]
 80089fe:	b29b      	uxth	r3, r3
 8008a00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a08:	b29a      	uxth	r2, r3
 8008a0a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008a0e:	801a      	strh	r2, [r3, #0]
 8008a10:	e04f      	b.n	8008ab2 <USB_EPStartXfer+0x155e>
 8008a12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a16:	085b      	lsrs	r3, r3, #1
 8008a18:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008a1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a20:	f003 0301 	and.w	r3, r3, #1
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d004      	beq.n	8008a32 <USB_EPStartXfer+0x14de>
 8008a28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a2c:	3301      	adds	r3, #1
 8008a2e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008a32:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008a36:	881b      	ldrh	r3, [r3, #0]
 8008a38:	b29a      	uxth	r2, r3
 8008a3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a3e:	b29b      	uxth	r3, r3
 8008a40:	029b      	lsls	r3, r3, #10
 8008a42:	b29b      	uxth	r3, r3
 8008a44:	4313      	orrs	r3, r2
 8008a46:	b29a      	uxth	r2, r3
 8008a48:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008a4c:	801a      	strh	r2, [r3, #0]
 8008a4e:	e030      	b.n	8008ab2 <USB_EPStartXfer+0x155e>
 8008a50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	785b      	ldrb	r3, [r3, #1]
 8008a5c:	2b01      	cmp	r3, #1
 8008a5e:	d128      	bne.n	8008ab2 <USB_EPStartXfer+0x155e>
 8008a60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008a6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a72:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a7c:	b29b      	uxth	r3, r3
 8008a7e:	461a      	mov	r2, r3
 8008a80:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008a84:	4413      	add	r3, r2
 8008a86:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008a8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	781b      	ldrb	r3, [r3, #0]
 8008a96:	011a      	lsls	r2, r3, #4
 8008a98:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008a9c:	4413      	add	r3, r2
 8008a9e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008aa2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008aa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008aaa:	b29a      	uxth	r2, r3
 8008aac:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008ab0:	801a      	strh	r2, [r3, #0]
 8008ab2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ab6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008ac0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ac4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	785b      	ldrb	r3, [r3, #1]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	f040 8085 	bne.w	8008bdc <USB_EPStartXfer+0x1688>
 8008ad2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ad6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008ae0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ae4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008aee:	b29b      	uxth	r3, r3
 8008af0:	461a      	mov	r2, r3
 8008af2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008af6:	4413      	add	r3, r2
 8008af8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008afc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	781b      	ldrb	r3, [r3, #0]
 8008b08:	011a      	lsls	r2, r3, #4
 8008b0a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008b0e:	4413      	add	r3, r2
 8008b10:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008b14:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008b18:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008b1c:	881b      	ldrh	r3, [r3, #0]
 8008b1e:	b29b      	uxth	r3, r3
 8008b20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008b24:	b29a      	uxth	r2, r3
 8008b26:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008b2a:	801a      	strh	r2, [r3, #0]
 8008b2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b30:	2b3e      	cmp	r3, #62	; 0x3e
 8008b32:	d923      	bls.n	8008b7c <USB_EPStartXfer+0x1628>
 8008b34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b38:	095b      	lsrs	r3, r3, #5
 8008b3a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008b3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b42:	f003 031f 	and.w	r3, r3, #31
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d104      	bne.n	8008b54 <USB_EPStartXfer+0x1600>
 8008b4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008b4e:	3b01      	subs	r3, #1
 8008b50:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008b54:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008b58:	881b      	ldrh	r3, [r3, #0]
 8008b5a:	b29a      	uxth	r2, r3
 8008b5c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008b60:	b29b      	uxth	r3, r3
 8008b62:	029b      	lsls	r3, r3, #10
 8008b64:	b29b      	uxth	r3, r3
 8008b66:	4313      	orrs	r3, r2
 8008b68:	b29b      	uxth	r3, r3
 8008b6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b72:	b29a      	uxth	r2, r3
 8008b74:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008b78:	801a      	strh	r2, [r3, #0]
 8008b7a:	e05c      	b.n	8008c36 <USB_EPStartXfer+0x16e2>
 8008b7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d10c      	bne.n	8008b9e <USB_EPStartXfer+0x164a>
 8008b84:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008b88:	881b      	ldrh	r3, [r3, #0]
 8008b8a:	b29b      	uxth	r3, r3
 8008b8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b94:	b29a      	uxth	r2, r3
 8008b96:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008b9a:	801a      	strh	r2, [r3, #0]
 8008b9c:	e04b      	b.n	8008c36 <USB_EPStartXfer+0x16e2>
 8008b9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ba2:	085b      	lsrs	r3, r3, #1
 8008ba4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008ba8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bac:	f003 0301 	and.w	r3, r3, #1
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d004      	beq.n	8008bbe <USB_EPStartXfer+0x166a>
 8008bb4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008bb8:	3301      	adds	r3, #1
 8008bba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008bbe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008bc2:	881b      	ldrh	r3, [r3, #0]
 8008bc4:	b29a      	uxth	r2, r3
 8008bc6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008bca:	b29b      	uxth	r3, r3
 8008bcc:	029b      	lsls	r3, r3, #10
 8008bce:	b29b      	uxth	r3, r3
 8008bd0:	4313      	orrs	r3, r2
 8008bd2:	b29a      	uxth	r2, r3
 8008bd4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008bd8:	801a      	strh	r2, [r3, #0]
 8008bda:	e02c      	b.n	8008c36 <USB_EPStartXfer+0x16e2>
 8008bdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008be0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	785b      	ldrb	r3, [r3, #1]
 8008be8:	2b01      	cmp	r3, #1
 8008bea:	d124      	bne.n	8008c36 <USB_EPStartXfer+0x16e2>
 8008bec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bf0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008bfa:	b29b      	uxth	r3, r3
 8008bfc:	461a      	mov	r2, r3
 8008bfe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008c02:	4413      	add	r3, r2
 8008c04:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008c08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	781b      	ldrb	r3, [r3, #0]
 8008c14:	011a      	lsls	r2, r3, #4
 8008c16:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008c1a:	4413      	add	r3, r2
 8008c1c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008c20:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008c24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c28:	b29a      	uxth	r2, r3
 8008c2a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008c2e:	801a      	strh	r2, [r3, #0]
 8008c30:	e001      	b.n	8008c36 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8008c32:	2301      	movs	r3, #1
 8008c34:	e03a      	b.n	8008cac <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008c36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c3a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c3e:	681a      	ldr	r2, [r3, #0]
 8008c40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	781b      	ldrb	r3, [r3, #0]
 8008c4c:	009b      	lsls	r3, r3, #2
 8008c4e:	4413      	add	r3, r2
 8008c50:	881b      	ldrh	r3, [r3, #0]
 8008c52:	b29b      	uxth	r3, r3
 8008c54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008c58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c5c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008c60:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008c64:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008c68:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008c6c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008c70:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008c74:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008c78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c7c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c80:	681a      	ldr	r2, [r3, #0]
 8008c82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	781b      	ldrb	r3, [r3, #0]
 8008c8e:	009b      	lsls	r3, r3, #2
 8008c90:	441a      	add	r2, r3
 8008c92:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008c96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ca2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ca6:	b29b      	uxth	r3, r3
 8008ca8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008caa:	2300      	movs	r3, #0
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bd80      	pop	{r7, pc}

08008cb6 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008cb6:	b480      	push	{r7}
 8008cb8:	b085      	sub	sp, #20
 8008cba:	af00      	add	r7, sp, #0
 8008cbc:	6078      	str	r0, [r7, #4]
 8008cbe:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	785b      	ldrb	r3, [r3, #1]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d020      	beq.n	8008d0a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008cc8:	687a      	ldr	r2, [r7, #4]
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	781b      	ldrb	r3, [r3, #0]
 8008cce:	009b      	lsls	r3, r3, #2
 8008cd0:	4413      	add	r3, r2
 8008cd2:	881b      	ldrh	r3, [r3, #0]
 8008cd4:	b29b      	uxth	r3, r3
 8008cd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008cde:	81bb      	strh	r3, [r7, #12]
 8008ce0:	89bb      	ldrh	r3, [r7, #12]
 8008ce2:	f083 0310 	eor.w	r3, r3, #16
 8008ce6:	81bb      	strh	r3, [r7, #12]
 8008ce8:	687a      	ldr	r2, [r7, #4]
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	781b      	ldrb	r3, [r3, #0]
 8008cee:	009b      	lsls	r3, r3, #2
 8008cf0:	441a      	add	r2, r3
 8008cf2:	89bb      	ldrh	r3, [r7, #12]
 8008cf4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008cf8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008cfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d04:	b29b      	uxth	r3, r3
 8008d06:	8013      	strh	r3, [r2, #0]
 8008d08:	e01f      	b.n	8008d4a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008d0a:	687a      	ldr	r2, [r7, #4]
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	781b      	ldrb	r3, [r3, #0]
 8008d10:	009b      	lsls	r3, r3, #2
 8008d12:	4413      	add	r3, r2
 8008d14:	881b      	ldrh	r3, [r3, #0]
 8008d16:	b29b      	uxth	r3, r3
 8008d18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008d1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d20:	81fb      	strh	r3, [r7, #14]
 8008d22:	89fb      	ldrh	r3, [r7, #14]
 8008d24:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008d28:	81fb      	strh	r3, [r7, #14]
 8008d2a:	687a      	ldr	r2, [r7, #4]
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	781b      	ldrb	r3, [r3, #0]
 8008d30:	009b      	lsls	r3, r3, #2
 8008d32:	441a      	add	r2, r3
 8008d34:	89fb      	ldrh	r3, [r7, #14]
 8008d36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d46:	b29b      	uxth	r3, r3
 8008d48:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008d4a:	2300      	movs	r3, #0
}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	3714      	adds	r7, #20
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bc80      	pop	{r7}
 8008d54:	4770      	bx	lr

08008d56 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008d56:	b480      	push	{r7}
 8008d58:	b087      	sub	sp, #28
 8008d5a:	af00      	add	r7, sp, #0
 8008d5c:	6078      	str	r0, [r7, #4]
 8008d5e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	7b1b      	ldrb	r3, [r3, #12]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	f040 809d 	bne.w	8008ea4 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	785b      	ldrb	r3, [r3, #1]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d04c      	beq.n	8008e0c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008d72:	687a      	ldr	r2, [r7, #4]
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	781b      	ldrb	r3, [r3, #0]
 8008d78:	009b      	lsls	r3, r3, #2
 8008d7a:	4413      	add	r3, r2
 8008d7c:	881b      	ldrh	r3, [r3, #0]
 8008d7e:	823b      	strh	r3, [r7, #16]
 8008d80:	8a3b      	ldrh	r3, [r7, #16]
 8008d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d01b      	beq.n	8008dc2 <USB_EPClearStall+0x6c>
 8008d8a:	687a      	ldr	r2, [r7, #4]
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	781b      	ldrb	r3, [r3, #0]
 8008d90:	009b      	lsls	r3, r3, #2
 8008d92:	4413      	add	r3, r2
 8008d94:	881b      	ldrh	r3, [r3, #0]
 8008d96:	b29b      	uxth	r3, r3
 8008d98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008da0:	81fb      	strh	r3, [r7, #14]
 8008da2:	687a      	ldr	r2, [r7, #4]
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	781b      	ldrb	r3, [r3, #0]
 8008da8:	009b      	lsls	r3, r3, #2
 8008daa:	441a      	add	r2, r3
 8008dac:	89fb      	ldrh	r3, [r7, #14]
 8008dae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008db2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008db6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008dba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008dbe:	b29b      	uxth	r3, r3
 8008dc0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	78db      	ldrb	r3, [r3, #3]
 8008dc6:	2b01      	cmp	r3, #1
 8008dc8:	d06c      	beq.n	8008ea4 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008dca:	687a      	ldr	r2, [r7, #4]
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	781b      	ldrb	r3, [r3, #0]
 8008dd0:	009b      	lsls	r3, r3, #2
 8008dd2:	4413      	add	r3, r2
 8008dd4:	881b      	ldrh	r3, [r3, #0]
 8008dd6:	b29b      	uxth	r3, r3
 8008dd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ddc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008de0:	81bb      	strh	r3, [r7, #12]
 8008de2:	89bb      	ldrh	r3, [r7, #12]
 8008de4:	f083 0320 	eor.w	r3, r3, #32
 8008de8:	81bb      	strh	r3, [r7, #12]
 8008dea:	687a      	ldr	r2, [r7, #4]
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	781b      	ldrb	r3, [r3, #0]
 8008df0:	009b      	lsls	r3, r3, #2
 8008df2:	441a      	add	r2, r3
 8008df4:	89bb      	ldrh	r3, [r7, #12]
 8008df6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008dfa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008dfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e06:	b29b      	uxth	r3, r3
 8008e08:	8013      	strh	r3, [r2, #0]
 8008e0a:	e04b      	b.n	8008ea4 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008e0c:	687a      	ldr	r2, [r7, #4]
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	781b      	ldrb	r3, [r3, #0]
 8008e12:	009b      	lsls	r3, r3, #2
 8008e14:	4413      	add	r3, r2
 8008e16:	881b      	ldrh	r3, [r3, #0]
 8008e18:	82fb      	strh	r3, [r7, #22]
 8008e1a:	8afb      	ldrh	r3, [r7, #22]
 8008e1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d01b      	beq.n	8008e5c <USB_EPClearStall+0x106>
 8008e24:	687a      	ldr	r2, [r7, #4]
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	781b      	ldrb	r3, [r3, #0]
 8008e2a:	009b      	lsls	r3, r3, #2
 8008e2c:	4413      	add	r3, r2
 8008e2e:	881b      	ldrh	r3, [r3, #0]
 8008e30:	b29b      	uxth	r3, r3
 8008e32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e3a:	82bb      	strh	r3, [r7, #20]
 8008e3c:	687a      	ldr	r2, [r7, #4]
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	781b      	ldrb	r3, [r3, #0]
 8008e42:	009b      	lsls	r3, r3, #2
 8008e44:	441a      	add	r2, r3
 8008e46:	8abb      	ldrh	r3, [r7, #20]
 8008e48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008e54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e58:	b29b      	uxth	r3, r3
 8008e5a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008e5c:	687a      	ldr	r2, [r7, #4]
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	781b      	ldrb	r3, [r3, #0]
 8008e62:	009b      	lsls	r3, r3, #2
 8008e64:	4413      	add	r3, r2
 8008e66:	881b      	ldrh	r3, [r3, #0]
 8008e68:	b29b      	uxth	r3, r3
 8008e6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008e6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e72:	827b      	strh	r3, [r7, #18]
 8008e74:	8a7b      	ldrh	r3, [r7, #18]
 8008e76:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008e7a:	827b      	strh	r3, [r7, #18]
 8008e7c:	8a7b      	ldrh	r3, [r7, #18]
 8008e7e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008e82:	827b      	strh	r3, [r7, #18]
 8008e84:	687a      	ldr	r2, [r7, #4]
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	781b      	ldrb	r3, [r3, #0]
 8008e8a:	009b      	lsls	r3, r3, #2
 8008e8c:	441a      	add	r2, r3
 8008e8e:	8a7b      	ldrh	r3, [r7, #18]
 8008e90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ea0:	b29b      	uxth	r3, r3
 8008ea2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008ea4:	2300      	movs	r3, #0
}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	371c      	adds	r7, #28
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bc80      	pop	{r7}
 8008eae:	4770      	bx	lr

08008eb0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008eb0:	b480      	push	{r7}
 8008eb2:	b083      	sub	sp, #12
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
 8008eb8:	460b      	mov	r3, r1
 8008eba:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008ebc:	78fb      	ldrb	r3, [r7, #3]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d103      	bne.n	8008eca <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	2280      	movs	r2, #128	; 0x80
 8008ec6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008eca:	2300      	movs	r3, #0
}
 8008ecc:	4618      	mov	r0, r3
 8008ece:	370c      	adds	r7, #12
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	bc80      	pop	{r7}
 8008ed4:	4770      	bx	lr

08008ed6 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008ed6:	b480      	push	{r7}
 8008ed8:	b083      	sub	sp, #12
 8008eda:	af00      	add	r7, sp, #0
 8008edc:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008ede:	2300      	movs	r3, #0
}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	370c      	adds	r7, #12
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	bc80      	pop	{r7}
 8008ee8:	4770      	bx	lr

08008eea <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8008eea:	b480      	push	{r7}
 8008eec:	b083      	sub	sp, #12
 8008eee:	af00      	add	r7, sp, #0
 8008ef0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008ef2:	2300      	movs	r3, #0
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	370c      	adds	r7, #12
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bc80      	pop	{r7}
 8008efc:	4770      	bx	lr

08008efe <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8008efe:	b480      	push	{r7}
 8008f00:	b085      	sub	sp, #20
 8008f02:	af00      	add	r7, sp, #0
 8008f04:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008f0c:	b29b      	uxth	r3, r3
 8008f0e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008f10:	68fb      	ldr	r3, [r7, #12]
}
 8008f12:	4618      	mov	r0, r3
 8008f14:	3714      	adds	r7, #20
 8008f16:	46bd      	mov	sp, r7
 8008f18:	bc80      	pop	{r7}
 8008f1a:	4770      	bx	lr

08008f1c <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008f1c:	b480      	push	{r7}
 8008f1e:	b083      	sub	sp, #12
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
 8008f24:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008f26:	2300      	movs	r3, #0
}
 8008f28:	4618      	mov	r0, r3
 8008f2a:	370c      	adds	r7, #12
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	bc80      	pop	{r7}
 8008f30:	4770      	bx	lr

08008f32 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008f32:	b480      	push	{r7}
 8008f34:	b08b      	sub	sp, #44	; 0x2c
 8008f36:	af00      	add	r7, sp, #0
 8008f38:	60f8      	str	r0, [r7, #12]
 8008f3a:	60b9      	str	r1, [r7, #8]
 8008f3c:	4611      	mov	r1, r2
 8008f3e:	461a      	mov	r2, r3
 8008f40:	460b      	mov	r3, r1
 8008f42:	80fb      	strh	r3, [r7, #6]
 8008f44:	4613      	mov	r3, r2
 8008f46:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008f48:	88bb      	ldrh	r3, [r7, #4]
 8008f4a:	3301      	adds	r3, #1
 8008f4c:	085b      	lsrs	r3, r3, #1
 8008f4e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008f54:	68bb      	ldr	r3, [r7, #8]
 8008f56:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008f58:	88fb      	ldrh	r3, [r7, #6]
 8008f5a:	005a      	lsls	r2, r3, #1
 8008f5c:	697b      	ldr	r3, [r7, #20]
 8008f5e:	4413      	add	r3, r2
 8008f60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008f64:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008f66:	69bb      	ldr	r3, [r7, #24]
 8008f68:	627b      	str	r3, [r7, #36]	; 0x24
 8008f6a:	e01e      	b.n	8008faa <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8008f6c:	69fb      	ldr	r3, [r7, #28]
 8008f6e:	781b      	ldrb	r3, [r3, #0]
 8008f70:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8008f72:	69fb      	ldr	r3, [r7, #28]
 8008f74:	3301      	adds	r3, #1
 8008f76:	781b      	ldrb	r3, [r3, #0]
 8008f78:	021b      	lsls	r3, r3, #8
 8008f7a:	b21a      	sxth	r2, r3
 8008f7c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008f80:	4313      	orrs	r3, r2
 8008f82:	b21b      	sxth	r3, r3
 8008f84:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8008f86:	6a3b      	ldr	r3, [r7, #32]
 8008f88:	8a7a      	ldrh	r2, [r7, #18]
 8008f8a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008f8c:	6a3b      	ldr	r3, [r7, #32]
 8008f8e:	3302      	adds	r3, #2
 8008f90:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008f92:	6a3b      	ldr	r3, [r7, #32]
 8008f94:	3302      	adds	r3, #2
 8008f96:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8008f98:	69fb      	ldr	r3, [r7, #28]
 8008f9a:	3301      	adds	r3, #1
 8008f9c:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8008f9e:	69fb      	ldr	r3, [r7, #28]
 8008fa0:	3301      	adds	r3, #1
 8008fa2:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fa6:	3b01      	subs	r3, #1
 8008fa8:	627b      	str	r3, [r7, #36]	; 0x24
 8008faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d1dd      	bne.n	8008f6c <USB_WritePMA+0x3a>
  }
}
 8008fb0:	bf00      	nop
 8008fb2:	bf00      	nop
 8008fb4:	372c      	adds	r7, #44	; 0x2c
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bc80      	pop	{r7}
 8008fba:	4770      	bx	lr

08008fbc <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b08b      	sub	sp, #44	; 0x2c
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	60f8      	str	r0, [r7, #12]
 8008fc4:	60b9      	str	r1, [r7, #8]
 8008fc6:	4611      	mov	r1, r2
 8008fc8:	461a      	mov	r2, r3
 8008fca:	460b      	mov	r3, r1
 8008fcc:	80fb      	strh	r3, [r7, #6]
 8008fce:	4613      	mov	r3, r2
 8008fd0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008fd2:	88bb      	ldrh	r3, [r7, #4]
 8008fd4:	085b      	lsrs	r3, r3, #1
 8008fd6:	b29b      	uxth	r3, r3
 8008fd8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008fe2:	88fb      	ldrh	r3, [r7, #6]
 8008fe4:	005a      	lsls	r2, r3, #1
 8008fe6:	697b      	ldr	r3, [r7, #20]
 8008fe8:	4413      	add	r3, r2
 8008fea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008fee:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008ff0:	69bb      	ldr	r3, [r7, #24]
 8008ff2:	627b      	str	r3, [r7, #36]	; 0x24
 8008ff4:	e01b      	b.n	800902e <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8008ff6:	6a3b      	ldr	r3, [r7, #32]
 8008ff8:	881b      	ldrh	r3, [r3, #0]
 8008ffa:	b29b      	uxth	r3, r3
 8008ffc:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008ffe:	6a3b      	ldr	r3, [r7, #32]
 8009000:	3302      	adds	r3, #2
 8009002:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	b2da      	uxtb	r2, r3
 8009008:	69fb      	ldr	r3, [r7, #28]
 800900a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800900c:	69fb      	ldr	r3, [r7, #28]
 800900e:	3301      	adds	r3, #1
 8009010:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8009012:	693b      	ldr	r3, [r7, #16]
 8009014:	0a1b      	lsrs	r3, r3, #8
 8009016:	b2da      	uxtb	r2, r3
 8009018:	69fb      	ldr	r3, [r7, #28]
 800901a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800901c:	69fb      	ldr	r3, [r7, #28]
 800901e:	3301      	adds	r3, #1
 8009020:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8009022:	6a3b      	ldr	r3, [r7, #32]
 8009024:	3302      	adds	r3, #2
 8009026:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8009028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800902a:	3b01      	subs	r3, #1
 800902c:	627b      	str	r3, [r7, #36]	; 0x24
 800902e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009030:	2b00      	cmp	r3, #0
 8009032:	d1e0      	bne.n	8008ff6 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8009034:	88bb      	ldrh	r3, [r7, #4]
 8009036:	f003 0301 	and.w	r3, r3, #1
 800903a:	b29b      	uxth	r3, r3
 800903c:	2b00      	cmp	r3, #0
 800903e:	d007      	beq.n	8009050 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8009040:	6a3b      	ldr	r3, [r7, #32]
 8009042:	881b      	ldrh	r3, [r3, #0]
 8009044:	b29b      	uxth	r3, r3
 8009046:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009048:	693b      	ldr	r3, [r7, #16]
 800904a:	b2da      	uxtb	r2, r3
 800904c:	69fb      	ldr	r3, [r7, #28]
 800904e:	701a      	strb	r2, [r3, #0]
  }
}
 8009050:	bf00      	nop
 8009052:	372c      	adds	r7, #44	; 0x2c
 8009054:	46bd      	mov	sp, r7
 8009056:	bc80      	pop	{r7}
 8009058:	4770      	bx	lr

0800905a <DefaultFreeElementCallback>:

// TODO: Remove at the end
#include <stdio.h>

static void DefaultFreeElementCallback(HashMap_Node *sNode)
{
 800905a:	b480      	push	{r7}
 800905c:	b083      	sub	sp, #12
 800905e:	af00      	add	r7, sp, #0
 8009060:	6078      	str	r0, [r7, #4]
}
 8009062:	bf00      	nop
 8009064:	370c      	adds	r7, #12
 8009066:	46bd      	mov	sp, r7
 8009068:	bc80      	pop	{r7}
 800906a:	4770      	bx	lr

0800906c <HashMap_Init>:

HashMap *HashMap_Init()
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b082      	sub	sp, #8
 8009070:	af00      	add	r7, sp, #0
    HashMap *sHashMap = (HashMap *)malloc(sizeof(HashMap));
 8009072:	200c      	movs	r0, #12
 8009074:	f002 fd18 	bl	800baa8 <malloc>
 8009078:	4603      	mov	r3, r0
 800907a:	607b      	str	r3, [r7, #4]
    sHashMap->sHead = NULL;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2200      	movs	r2, #0
 8009080:	601a      	str	r2, [r3, #0]
    sHashMap->sTail = NULL;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2200      	movs	r2, #0
 8009086:	605a      	str	r2, [r3, #4]
    sHashMap->fFreeElementCallback = DefaultFreeElementCallback;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	4a03      	ldr	r2, [pc, #12]	; (8009098 <HashMap_Init+0x2c>)
 800908c:	609a      	str	r2, [r3, #8]
    return sHashMap;
 800908e:	687b      	ldr	r3, [r7, #4]
}
 8009090:	4618      	mov	r0, r3
 8009092:	3708      	adds	r7, #8
 8009094:	46bd      	mov	sp, r7
 8009096:	bd80      	pop	{r7, pc}
 8009098:	0800905b 	.word	0x0800905b

0800909c <HashMap_Set>:

void HashMap_Set(HashMap *sHashMap, char *chKey, void *pData)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b086      	sub	sp, #24
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	60f8      	str	r0, [r7, #12]
 80090a4:	60b9      	str	r1, [r7, #8]
 80090a6:	607a      	str	r2, [r7, #4]
    HashMap_Node *ptr = sHashMap->sHead;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	617b      	str	r3, [r7, #20]

    while (ptr != NULL)
 80090ae:	e00f      	b.n	80090d0 <HashMap_Set+0x34>
    {
        if (strcmp(ptr->chKey, chKey) == 0)
 80090b0:	697b      	ldr	r3, [r7, #20]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	68b9      	ldr	r1, [r7, #8]
 80090b6:	4618      	mov	r0, r3
 80090b8:	f7f7 f848 	bl	800014c <strcmp>
 80090bc:	4603      	mov	r3, r0
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d103      	bne.n	80090ca <HashMap_Set+0x2e>
        {
            ptr->pData = pData;
 80090c2:	697b      	ldr	r3, [r7, #20]
 80090c4:	687a      	ldr	r2, [r7, #4]
 80090c6:	605a      	str	r2, [r3, #4]
            return;
 80090c8:	e025      	b.n	8009116 <HashMap_Set+0x7a>
        }
        ptr = ptr->sNextNode;
 80090ca:	697b      	ldr	r3, [r7, #20]
 80090cc:	689b      	ldr	r3, [r3, #8]
 80090ce:	617b      	str	r3, [r7, #20]
    while (ptr != NULL)
 80090d0:	697b      	ldr	r3, [r7, #20]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d1ec      	bne.n	80090b0 <HashMap_Set+0x14>
    }

    HashMap_Node *sNewNode = (HashMap_Node *)malloc(sizeof(HashMap_Node));
 80090d6:	200c      	movs	r0, #12
 80090d8:	f002 fce6 	bl	800baa8 <malloc>
 80090dc:	4603      	mov	r3, r0
 80090de:	613b      	str	r3, [r7, #16]
    sNewNode->chKey = chKey;
 80090e0:	693b      	ldr	r3, [r7, #16]
 80090e2:	68ba      	ldr	r2, [r7, #8]
 80090e4:	601a      	str	r2, [r3, #0]
    sNewNode->pData = pData;
 80090e6:	693b      	ldr	r3, [r7, #16]
 80090e8:	687a      	ldr	r2, [r7, #4]
 80090ea:	605a      	str	r2, [r3, #4]
    sNewNode->sNextNode = NULL;
 80090ec:	693b      	ldr	r3, [r7, #16]
 80090ee:	2200      	movs	r2, #0
 80090f0:	609a      	str	r2, [r3, #8]

    if (sHashMap->sHead == NULL)
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d106      	bne.n	8009108 <HashMap_Set+0x6c>
    {
        sHashMap->sHead = sNewNode;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	693a      	ldr	r2, [r7, #16]
 80090fe:	601a      	str	r2, [r3, #0]
        sHashMap->sTail = sNewNode;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	693a      	ldr	r2, [r7, #16]
 8009104:	605a      	str	r2, [r3, #4]
 8009106:	e006      	b.n	8009116 <HashMap_Set+0x7a>
    }
    else
    {
        sHashMap->sTail->sNextNode = sNewNode;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	685b      	ldr	r3, [r3, #4]
 800910c:	693a      	ldr	r2, [r7, #16]
 800910e:	609a      	str	r2, [r3, #8]
        sHashMap->sTail = sNewNode;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	693a      	ldr	r2, [r7, #16]
 8009114:	605a      	str	r2, [r3, #4]
    }
}
 8009116:	3718      	adds	r7, #24
 8009118:	46bd      	mov	sp, r7
 800911a:	bd80      	pop	{r7, pc}

0800911c <HashMap_Get>:

void *HashMap_Get(HashMap *sHashMap, char *chKey)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b084      	sub	sp, #16
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
 8009124:	6039      	str	r1, [r7, #0]
    HashMap_Node *ptr = sHashMap->sHead;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	60fb      	str	r3, [r7, #12]

    while (ptr != NULL)
 800912c:	e00e      	b.n	800914c <HashMap_Get+0x30>
    {
        if (!strcmp(ptr->chKey, chKey))
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	6839      	ldr	r1, [r7, #0]
 8009134:	4618      	mov	r0, r3
 8009136:	f7f7 f809 	bl	800014c <strcmp>
 800913a:	4603      	mov	r3, r0
 800913c:	2b00      	cmp	r3, #0
 800913e:	d102      	bne.n	8009146 <HashMap_Get+0x2a>
        {
            return ptr->pData;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	685b      	ldr	r3, [r3, #4]
 8009144:	e006      	b.n	8009154 <HashMap_Get+0x38>
        }
        else
        {
            ptr = ptr->sNextNode;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	689b      	ldr	r3, [r3, #8]
 800914a:	60fb      	str	r3, [r7, #12]
    while (ptr != NULL)
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d1ed      	bne.n	800912e <HashMap_Get+0x12>
        }
    }

    return NULL;
 8009152:	2300      	movs	r3, #0
}
 8009154:	4618      	mov	r0, r3
 8009156:	3710      	adds	r7, #16
 8009158:	46bd      	mov	sp, r7
 800915a:	bd80      	pop	{r7, pc}

0800915c <HashMap_Contains>:

    free(sHashMap);
}

uint8_t HashMap_Contains(HashMap *sHashMap, char *chKey)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b084      	sub	sp, #16
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
 8009164:	6039      	str	r1, [r7, #0]
    HashMap_Node *ptr = sHashMap->sHead;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	60fb      	str	r3, [r7, #12]

    while (ptr != NULL)
 800916c:	e00d      	b.n	800918a <HashMap_Contains+0x2e>
    {
        if (!strcmp(ptr->chKey, chKey))
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	6839      	ldr	r1, [r7, #0]
 8009174:	4618      	mov	r0, r3
 8009176:	f7f6 ffe9 	bl	800014c <strcmp>
 800917a:	4603      	mov	r3, r0
 800917c:	2b00      	cmp	r3, #0
 800917e:	d101      	bne.n	8009184 <HashMap_Contains+0x28>
        {
            return HASH_MAP_CONTAIN;
 8009180:	2301      	movs	r3, #1
 8009182:	e006      	b.n	8009192 <HashMap_Contains+0x36>
        }

        ptr = ptr->sNextNode;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	689b      	ldr	r3, [r3, #8]
 8009188:	60fb      	str	r3, [r7, #12]
    while (ptr != NULL)
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d1ee      	bne.n	800916e <HashMap_Contains+0x12>
    }

    return HASH_MAP_NOT_CONTAIN;
 8009190:	2300      	movs	r3, #0
}
 8009192:	4618      	mov	r0, r3
 8009194:	3710      	adds	r7, #16
 8009196:	46bd      	mov	sp, r7
 8009198:	bd80      	pop	{r7, pc}

0800919a <HashMap_SetFreeElementCallback>:

void HashMap_SetFreeElementCallback(HashMap *sHashMap, FreeElementCallback fCallback)
{
 800919a:	b480      	push	{r7}
 800919c:	b083      	sub	sp, #12
 800919e:	af00      	add	r7, sp, #0
 80091a0:	6078      	str	r0, [r7, #4]
 80091a2:	6039      	str	r1, [r7, #0]
    sHashMap->fFreeElementCallback = fCallback;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	683a      	ldr	r2, [r7, #0]
 80091a8:	609a      	str	r2, [r3, #8]
}
 80091aa:	bf00      	nop
 80091ac:	370c      	adds	r7, #12
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bc80      	pop	{r7}
 80091b2:	4770      	bx	lr

080091b4 <LCD_Init>:
static TransmitI2CDataFunction m_fTransmitFunction = EmptyTransmitFunction;
static uint8_t m_u8Address = 0x00;
static uint8_t m_u8IsOn = LCD_ON;

void LCD_Init()
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	af00      	add	r7, sp, #0
	if (m_u8IsOn == LCD_OFF) return;
 80091b8:	4b0d      	ldr	r3, [pc, #52]	; (80091f0 <LCD_Init+0x3c>)
 80091ba:	781b      	ldrb	r3, [r3, #0]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d015      	beq.n	80091ec <LCD_Init+0x38>

    LCD_SendCommand(0x08);
 80091c0:	2008      	movs	r0, #8
 80091c2:	f000 f861 	bl	8009288 <LCD_SendCommand>
    LCD_SendCommand(0x0e);
 80091c6:	200e      	movs	r0, #14
 80091c8:	f000 f85e 	bl	8009288 <LCD_SendCommand>
    LCD_SendCommand(0x30);
 80091cc:	2030      	movs	r0, #48	; 0x30
 80091ce:	f000 f85b 	bl	8009288 <LCD_SendCommand>
    LCD_SendCommand(0x38);
 80091d2:	2038      	movs	r0, #56	; 0x38
 80091d4:	f000 f858 	bl	8009288 <LCD_SendCommand>
    LCD_SendCommand(0x20);
 80091d8:	2020      	movs	r0, #32
 80091da:	f000 f855 	bl	8009288 <LCD_SendCommand>
    LCD_SendCommand(0x28);
 80091de:	2028      	movs	r0, #40	; 0x28
 80091e0:	f000 f852 	bl	8009288 <LCD_SendCommand>
    LCD_SendCommand(0x01);
 80091e4:	2001      	movs	r0, #1
 80091e6:	f000 f84f 	bl	8009288 <LCD_SendCommand>
 80091ea:	e000      	b.n	80091ee <LCD_Init+0x3a>
	if (m_u8IsOn == LCD_OFF) return;
 80091ec:	bf00      	nop
}
 80091ee:	bd80      	pop	{r7, pc}
 80091f0:	20000058 	.word	0x20000058

080091f4 <LCD_SetSendI2CData>:

void LCD_SetSendI2CData(TransmitI2CDataFunction fTransmitFunction)
{
 80091f4:	b480      	push	{r7}
 80091f6:	b083      	sub	sp, #12
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
	if (m_u8IsOn == LCD_OFF) return;
 80091fc:	4b06      	ldr	r3, [pc, #24]	; (8009218 <LCD_SetSendI2CData+0x24>)
 80091fe:	781b      	ldrb	r3, [r3, #0]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d003      	beq.n	800920c <LCD_SetSendI2CData+0x18>

    m_fTransmitFunction = fTransmitFunction;
 8009204:	4a05      	ldr	r2, [pc, #20]	; (800921c <LCD_SetSendI2CData+0x28>)
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6013      	str	r3, [r2, #0]
 800920a:	e000      	b.n	800920e <LCD_SetSendI2CData+0x1a>
	if (m_u8IsOn == LCD_OFF) return;
 800920c:	bf00      	nop
}
 800920e:	370c      	adds	r7, #12
 8009210:	46bd      	mov	sp, r7
 8009212:	bc80      	pop	{r7}
 8009214:	4770      	bx	lr
 8009216:	bf00      	nop
 8009218:	20000058 	.word	0x20000058
 800921c:	20000054 	.word	0x20000054

08009220 <EmptyTransmitFunction>:
{
	if (m_u8IsOn == LCD_OFF) return;
}

void EmptyTransmitFunction(uint8_t *u8Data, uint8_t u8Length)
{
 8009220:	b480      	push	{r7}
 8009222:	b083      	sub	sp, #12
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
 8009228:	460b      	mov	r3, r1
 800922a:	70fb      	strb	r3, [r7, #3]
}
 800922c:	bf00      	nop
 800922e:	370c      	adds	r7, #12
 8009230:	46bd      	mov	sp, r7
 8009232:	bc80      	pop	{r7}
 8009234:	4770      	bx	lr
	...

08009238 <LCD_SetAddress>:

void LCD_SetAddress(uint8_t u8Address)
{
 8009238:	b480      	push	{r7}
 800923a:	b083      	sub	sp, #12
 800923c:	af00      	add	r7, sp, #0
 800923e:	4603      	mov	r3, r0
 8009240:	71fb      	strb	r3, [r7, #7]
	if (m_u8IsOn == LCD_OFF) return;
 8009242:	4b06      	ldr	r3, [pc, #24]	; (800925c <LCD_SetAddress+0x24>)
 8009244:	781b      	ldrb	r3, [r3, #0]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d003      	beq.n	8009252 <LCD_SetAddress+0x1a>
    m_u8Address = u8Address;
 800924a:	4a05      	ldr	r2, [pc, #20]	; (8009260 <LCD_SetAddress+0x28>)
 800924c:	79fb      	ldrb	r3, [r7, #7]
 800924e:	7013      	strb	r3, [r2, #0]
 8009250:	e000      	b.n	8009254 <LCD_SetAddress+0x1c>
	if (m_u8IsOn == LCD_OFF) return;
 8009252:	bf00      	nop
}
 8009254:	370c      	adds	r7, #12
 8009256:	46bd      	mov	sp, r7
 8009258:	bc80      	pop	{r7}
 800925a:	4770      	bx	lr
 800925c:	20000058 	.word	0x20000058
 8009260:	200003a4 	.word	0x200003a4

08009264 <LCD_GetAddress>:

uint8_t LCD_GetAddress()
{
 8009264:	b480      	push	{r7}
 8009266:	af00      	add	r7, sp, #0
	if (m_u8IsOn == LCD_OFF) return 0x00;
 8009268:	4b05      	ldr	r3, [pc, #20]	; (8009280 <LCD_GetAddress+0x1c>)
 800926a:	781b      	ldrb	r3, [r3, #0]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d101      	bne.n	8009274 <LCD_GetAddress+0x10>
 8009270:	2300      	movs	r3, #0
 8009272:	e001      	b.n	8009278 <LCD_GetAddress+0x14>
    return m_u8Address;
 8009274:	4b03      	ldr	r3, [pc, #12]	; (8009284 <LCD_GetAddress+0x20>)
 8009276:	781b      	ldrb	r3, [r3, #0]
}
 8009278:	4618      	mov	r0, r3
 800927a:	46bd      	mov	sp, r7
 800927c:	bc80      	pop	{r7}
 800927e:	4770      	bx	lr
 8009280:	20000058 	.word	0x20000058
 8009284:	200003a4 	.word	0x200003a4

08009288 <LCD_SendCommand>:

void LCD_SendCommand(char chCommand)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b084      	sub	sp, #16
 800928c:	af00      	add	r7, sp, #0
 800928e:	4603      	mov	r3, r0
 8009290:	71fb      	strb	r3, [r7, #7]
	if (m_u8IsOn == LCD_OFF) return;
 8009292:	4b15      	ldr	r3, [pc, #84]	; (80092e8 <LCD_SendCommand+0x60>)
 8009294:	781b      	ldrb	r3, [r3, #0]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d022      	beq.n	80092e0 <LCD_SendCommand+0x58>

    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (chCommand & 0xf0);
 800929a:	79fb      	ldrb	r3, [r7, #7]
 800929c:	f023 030f 	bic.w	r3, r3, #15
 80092a0:	73fb      	strb	r3, [r7, #15]
    data_l = ((chCommand << 4) & 0xf0);
 80092a2:	79fb      	ldrb	r3, [r7, #7]
 80092a4:	011b      	lsls	r3, r3, #4
 80092a6:	73bb      	strb	r3, [r7, #14]
    data_t[0] = data_u | 0x0C;
 80092a8:	7bfb      	ldrb	r3, [r7, #15]
 80092aa:	f043 030c 	orr.w	r3, r3, #12
 80092ae:	b2db      	uxtb	r3, r3
 80092b0:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x08;
 80092b2:	7bfb      	ldrb	r3, [r7, #15]
 80092b4:	f043 0308 	orr.w	r3, r3, #8
 80092b8:	b2db      	uxtb	r3, r3
 80092ba:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0C;
 80092bc:	7bbb      	ldrb	r3, [r7, #14]
 80092be:	f043 030c 	orr.w	r3, r3, #12
 80092c2:	b2db      	uxtb	r3, r3
 80092c4:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x08;
 80092c6:	7bbb      	ldrb	r3, [r7, #14]
 80092c8:	f043 0308 	orr.w	r3, r3, #8
 80092cc:	b2db      	uxtb	r3, r3
 80092ce:	72fb      	strb	r3, [r7, #11]
    m_fTransmitFunction(data_t, 4);
 80092d0:	4b06      	ldr	r3, [pc, #24]	; (80092ec <LCD_SendCommand+0x64>)
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	f107 0208 	add.w	r2, r7, #8
 80092d8:	2104      	movs	r1, #4
 80092da:	4610      	mov	r0, r2
 80092dc:	4798      	blx	r3
 80092de:	e000      	b.n	80092e2 <LCD_SendCommand+0x5a>
	if (m_u8IsOn == LCD_OFF) return;
 80092e0:	bf00      	nop
}
 80092e2:	3710      	adds	r7, #16
 80092e4:	46bd      	mov	sp, r7
 80092e6:	bd80      	pop	{r7, pc}
 80092e8:	20000058 	.word	0x20000058
 80092ec:	20000054 	.word	0x20000054

080092f0 <LCD_SendData>:

void LCD_SendData(char chData)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b084      	sub	sp, #16
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	4603      	mov	r3, r0
 80092f8:	71fb      	strb	r3, [r7, #7]
	if (m_u8IsOn == LCD_OFF) return;
 80092fa:	4b15      	ldr	r3, [pc, #84]	; (8009350 <LCD_SendData+0x60>)
 80092fc:	781b      	ldrb	r3, [r3, #0]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d022      	beq.n	8009348 <LCD_SendData+0x58>

    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (chData & 0xf0);
 8009302:	79fb      	ldrb	r3, [r7, #7]
 8009304:	f023 030f 	bic.w	r3, r3, #15
 8009308:	73fb      	strb	r3, [r7, #15]
    data_l = ((chData << 4) & 0xf0);
 800930a:	79fb      	ldrb	r3, [r7, #7]
 800930c:	011b      	lsls	r3, r3, #4
 800930e:	73bb      	strb	r3, [r7, #14]
    data_t[0] = data_u | 0x0D;
 8009310:	7bfb      	ldrb	r3, [r7, #15]
 8009312:	f043 030d 	orr.w	r3, r3, #13
 8009316:	b2db      	uxtb	r3, r3
 8009318:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;
 800931a:	7bfb      	ldrb	r3, [r7, #15]
 800931c:	f043 0309 	orr.w	r3, r3, #9
 8009320:	b2db      	uxtb	r3, r3
 8009322:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;
 8009324:	7bbb      	ldrb	r3, [r7, #14]
 8009326:	f043 030d 	orr.w	r3, r3, #13
 800932a:	b2db      	uxtb	r3, r3
 800932c:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;
 800932e:	7bbb      	ldrb	r3, [r7, #14]
 8009330:	f043 0309 	orr.w	r3, r3, #9
 8009334:	b2db      	uxtb	r3, r3
 8009336:	72fb      	strb	r3, [r7, #11]
    m_fTransmitFunction(data_t, 4);
 8009338:	4b06      	ldr	r3, [pc, #24]	; (8009354 <LCD_SendData+0x64>)
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f107 0208 	add.w	r2, r7, #8
 8009340:	2104      	movs	r1, #4
 8009342:	4610      	mov	r0, r2
 8009344:	4798      	blx	r3
 8009346:	e000      	b.n	800934a <LCD_SendData+0x5a>
	if (m_u8IsOn == LCD_OFF) return;
 8009348:	bf00      	nop
}
 800934a:	3710      	adds	r7, #16
 800934c:	46bd      	mov	sp, r7
 800934e:	bd80      	pop	{r7, pc}
 8009350:	20000058 	.word	0x20000058
 8009354:	20000054 	.word	0x20000054

08009358 <LCD_SendString>:

void LCD_SendString(char *chStr)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b082      	sub	sp, #8
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
    while (*chStr)
 8009360:	e006      	b.n	8009370 <LCD_SendString+0x18>
    {
        LCD_SendData(*chStr++);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	1c5a      	adds	r2, r3, #1
 8009366:	607a      	str	r2, [r7, #4]
 8009368:	781b      	ldrb	r3, [r3, #0]
 800936a:	4618      	mov	r0, r3
 800936c:	f7ff ffc0 	bl	80092f0 <LCD_SendData>
    while (*chStr)
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	781b      	ldrb	r3, [r3, #0]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d1f4      	bne.n	8009362 <LCD_SendString+0xa>
    }
}
 8009378:	bf00      	nop
 800937a:	bf00      	nop
 800937c:	3708      	adds	r7, #8
 800937e:	46bd      	mov	sp, r7
 8009380:	bd80      	pop	{r7, pc}
	...

08009384 <LCD_SetCursor>:

void LCD_SetCursor(uint8_t u8Row, uint8_t u8Col)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b082      	sub	sp, #8
 8009388:	af00      	add	r7, sp, #0
 800938a:	4603      	mov	r3, r0
 800938c:	460a      	mov	r2, r1
 800938e:	71fb      	strb	r3, [r7, #7]
 8009390:	4613      	mov	r3, r2
 8009392:	71bb      	strb	r3, [r7, #6]
	if (m_u8IsOn == LCD_OFF) return;
 8009394:	4b0e      	ldr	r3, [pc, #56]	; (80093d0 <LCD_SetCursor+0x4c>)
 8009396:	781b      	ldrb	r3, [r3, #0]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d014      	beq.n	80093c6 <LCD_SetCursor+0x42>

    switch (u8Row)
 800939c:	79fb      	ldrb	r3, [r7, #7]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d002      	beq.n	80093a8 <LCD_SetCursor+0x24>
 80093a2:	2b01      	cmp	r3, #1
 80093a4:	d005      	beq.n	80093b2 <LCD_SetCursor+0x2e>
 80093a6:	e009      	b.n	80093bc <LCD_SetCursor+0x38>
    {
    case 0:
        u8Col |= 0x80;
 80093a8:	79bb      	ldrb	r3, [r7, #6]
 80093aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80093ae:	71bb      	strb	r3, [r7, #6]
        break;
 80093b0:	e004      	b.n	80093bc <LCD_SetCursor+0x38>
    case 1:
        u8Col |= 0xC0;
 80093b2:	79bb      	ldrb	r3, [r7, #6]
 80093b4:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80093b8:	71bb      	strb	r3, [r7, #6]
        break;
 80093ba:	bf00      	nop
    }

    LCD_SendCommand(u8Col);
 80093bc:	79bb      	ldrb	r3, [r7, #6]
 80093be:	4618      	mov	r0, r3
 80093c0:	f7ff ff62 	bl	8009288 <LCD_SendCommand>
 80093c4:	e000      	b.n	80093c8 <LCD_SetCursor+0x44>
	if (m_u8IsOn == LCD_OFF) return;
 80093c6:	bf00      	nop
}
 80093c8:	3708      	adds	r7, #8
 80093ca:	46bd      	mov	sp, r7
 80093cc:	bd80      	pop	{r7, pc}
 80093ce:	bf00      	nop
 80093d0:	20000058 	.word	0x20000058

080093d4 <LCD_Clear>:

void LCD_Clear(void)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b082      	sub	sp, #8
 80093d8:	af00      	add	r7, sp, #0
	if (m_u8IsOn == LCD_OFF) return;
 80093da:	4b0e      	ldr	r3, [pc, #56]	; (8009414 <LCD_Clear+0x40>)
 80093dc:	781b      	ldrb	r3, [r3, #0]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d013      	beq.n	800940a <LCD_Clear+0x36>

    LCD_SendCommand(0x80);
 80093e2:	2080      	movs	r0, #128	; 0x80
 80093e4:	f7ff ff50 	bl	8009288 <LCD_SendCommand>
    for (int i = 0; i < 70; i++)
 80093e8:	2300      	movs	r3, #0
 80093ea:	607b      	str	r3, [r7, #4]
 80093ec:	e005      	b.n	80093fa <LCD_Clear+0x26>
    {
        LCD_SendData(' ');
 80093ee:	2020      	movs	r0, #32
 80093f0:	f7ff ff7e 	bl	80092f0 <LCD_SendData>
    for (int i = 0; i < 70; i++)
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	3301      	adds	r3, #1
 80093f8:	607b      	str	r3, [r7, #4]
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2b45      	cmp	r3, #69	; 0x45
 80093fe:	ddf6      	ble.n	80093ee <LCD_Clear+0x1a>
    }
    LCD_SetCursor(0, 0);
 8009400:	2100      	movs	r1, #0
 8009402:	2000      	movs	r0, #0
 8009404:	f7ff ffbe 	bl	8009384 <LCD_SetCursor>
 8009408:	e000      	b.n	800940c <LCD_Clear+0x38>
	if (m_u8IsOn == LCD_OFF) return;
 800940a:	bf00      	nop
}
 800940c:	3708      	adds	r7, #8
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}
 8009412:	bf00      	nop
 8009414:	20000058 	.word	0x20000058

08009418 <LCD_GlobalOff>:
{
	m_u8IsOn = LCD_ON;
}

void LCD_GlobalOff(void)
{
 8009418:	b480      	push	{r7}
 800941a:	af00      	add	r7, sp, #0
	m_u8IsOn = LCD_OFF;
 800941c:	4b03      	ldr	r3, [pc, #12]	; (800942c <LCD_GlobalOff+0x14>)
 800941e:	2200      	movs	r2, #0
 8009420:	701a      	strb	r2, [r3, #0]
}
 8009422:	bf00      	nop
 8009424:	46bd      	mov	sp, r7
 8009426:	bc80      	pop	{r7}
 8009428:	4770      	bx	lr
 800942a:	bf00      	nop
 800942c:	20000058 	.word	0x20000058

08009430 <LinkList_Init>:
#include "main.h"

static void EmptyFreeElement(LinkList_Node *sNode);

LinkList *LinkList_Init()
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b082      	sub	sp, #8
 8009434:	af00      	add	r7, sp, #0
	LinkList *sList = (LinkList *)malloc(sizeof(LinkList));
 8009436:	2010      	movs	r0, #16
 8009438:	f002 fb36 	bl	800baa8 <malloc>
 800943c:	4603      	mov	r3, r0
 800943e:	607b      	str	r3, [r7, #4]

    sList->sHead = NULL;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2200      	movs	r2, #0
 8009444:	601a      	str	r2, [r3, #0]
    sList->sTail = NULL;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2200      	movs	r2, #0
 800944a:	605a      	str	r2, [r3, #4]
    sList->u8Size = 0;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2200      	movs	r2, #0
 8009450:	721a      	strb	r2, [r3, #8]
    sList->fFreeElement = EmptyFreeElement;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	4a03      	ldr	r2, [pc, #12]	; (8009464 <LinkList_Init+0x34>)
 8009456:	60da      	str	r2, [r3, #12]
    return sList;
 8009458:	687b      	ldr	r3, [r7, #4]
}
 800945a:	4618      	mov	r0, r3
 800945c:	3708      	adds	r7, #8
 800945e:	46bd      	mov	sp, r7
 8009460:	bd80      	pop	{r7, pc}
 8009462:	bf00      	nop
 8009464:	08009571 	.word	0x08009571

08009468 <LinkList_Release>:

void LinkList_Release(LinkList *sList)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b084      	sub	sp, #16
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
    LinkList_Node *ptr = sList->sHead;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	60fb      	str	r3, [r7, #12]

    while (ptr != NULL)
 8009476:	e00b      	b.n	8009490 <LinkList_Release+0x28>
    {
        LinkList_Node *temp = ptr->sNextNode;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	685b      	ldr	r3, [r3, #4]
 800947c:	60bb      	str	r3, [r7, #8]
        sList->fFreeElement(ptr);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	68db      	ldr	r3, [r3, #12]
 8009482:	68f8      	ldr	r0, [r7, #12]
 8009484:	4798      	blx	r3
        free(ptr);
 8009486:	68f8      	ldr	r0, [r7, #12]
 8009488:	f002 fb16 	bl	800bab8 <free>
        ptr = temp;
 800948c:	68bb      	ldr	r3, [r7, #8]
 800948e:	60fb      	str	r3, [r7, #12]
    while (ptr != NULL)
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d1f0      	bne.n	8009478 <LinkList_Release+0x10>
    }

    free(sList);
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f002 fb0e 	bl	800bab8 <free>
}
 800949c:	bf00      	nop
 800949e:	3710      	adds	r7, #16
 80094a0:	46bd      	mov	sp, r7
 80094a2:	bd80      	pop	{r7, pc}

080094a4 <LinkList_GetSize>:

uint8_t LinkList_GetSize(LinkList *sList)
{
 80094a4:	b480      	push	{r7}
 80094a6:	b083      	sub	sp, #12
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
    return sList->u8Size;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	7a1b      	ldrb	r3, [r3, #8]
}
 80094b0:	4618      	mov	r0, r3
 80094b2:	370c      	adds	r7, #12
 80094b4:	46bd      	mov	sp, r7
 80094b6:	bc80      	pop	{r7}
 80094b8:	4770      	bx	lr

080094ba <LinkList_Append>:

void LinkList_Append(LinkList *sList, void *pData)
{
 80094ba:	b580      	push	{r7, lr}
 80094bc:	b084      	sub	sp, #16
 80094be:	af00      	add	r7, sp, #0
 80094c0:	6078      	str	r0, [r7, #4]
 80094c2:	6039      	str	r1, [r7, #0]
    LinkList_Node *sNode = (LinkList_Node *)malloc(sizeof(LinkList_Node));
 80094c4:	2008      	movs	r0, #8
 80094c6:	f002 faef 	bl	800baa8 <malloc>
 80094ca:	4603      	mov	r3, r0
 80094cc:	60fb      	str	r3, [r7, #12]
    sNode->pData = pData;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	683a      	ldr	r2, [r7, #0]
 80094d2:	601a      	str	r2, [r3, #0]
    sNode->sNextNode = NULL;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	2200      	movs	r2, #0
 80094d8:	605a      	str	r2, [r3, #4]

    if (sList->u8Size == 0)
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	7a1b      	ldrb	r3, [r3, #8]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d106      	bne.n	80094f0 <LinkList_Append+0x36>
    {
        sList->sHead = sNode;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	68fa      	ldr	r2, [r7, #12]
 80094e6:	601a      	str	r2, [r3, #0]
        sList->sTail = sNode;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	68fa      	ldr	r2, [r7, #12]
 80094ec:	605a      	str	r2, [r3, #4]
 80094ee:	e006      	b.n	80094fe <LinkList_Append+0x44>
    }
    else
    {
        sList->sTail->sNextNode = sNode;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	685b      	ldr	r3, [r3, #4]
 80094f4:	68fa      	ldr	r2, [r7, #12]
 80094f6:	605a      	str	r2, [r3, #4]
        sList->sTail = sNode;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	68fa      	ldr	r2, [r7, #12]
 80094fc:	605a      	str	r2, [r3, #4]
    }

    sList->u8Size++;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	7a1b      	ldrb	r3, [r3, #8]
 8009502:	3301      	adds	r3, #1
 8009504:	b2da      	uxtb	r2, r3
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	721a      	strb	r2, [r3, #8]
}
 800950a:	bf00      	nop
 800950c:	3710      	adds	r7, #16
 800950e:	46bd      	mov	sp, r7
 8009510:	bd80      	pop	{r7, pc}

08009512 <LinkList_Get>:

void *LinkList_Get(LinkList *sList, uint8_t u8Index)
{
 8009512:	b480      	push	{r7}
 8009514:	b085      	sub	sp, #20
 8009516:	af00      	add	r7, sp, #0
 8009518:	6078      	str	r0, [r7, #4]
 800951a:	460b      	mov	r3, r1
 800951c:	70fb      	strb	r3, [r7, #3]
    LinkList_Node *ptrNode = sList->sHead;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	60fb      	str	r3, [r7, #12]

    while (u8Index != 0 && ptrNode != NULL)
 8009524:	e005      	b.n	8009532 <LinkList_Get+0x20>
    {
        ptrNode = ptrNode->sNextNode;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	685b      	ldr	r3, [r3, #4]
 800952a:	60fb      	str	r3, [r7, #12]
        u8Index--;
 800952c:	78fb      	ldrb	r3, [r7, #3]
 800952e:	3b01      	subs	r3, #1
 8009530:	70fb      	strb	r3, [r7, #3]
    while (u8Index != 0 && ptrNode != NULL)
 8009532:	78fb      	ldrb	r3, [r7, #3]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d002      	beq.n	800953e <LinkList_Get+0x2c>
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d1f3      	bne.n	8009526 <LinkList_Get+0x14>
    }

    if (u8Index != 0)
 800953e:	78fb      	ldrb	r3, [r7, #3]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d001      	beq.n	8009548 <LinkList_Get+0x36>
    {
        return NULL;
 8009544:	2300      	movs	r3, #0
 8009546:	e001      	b.n	800954c <LinkList_Get+0x3a>
    }
    else
    {
        return ptrNode->pData;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	681b      	ldr	r3, [r3, #0]
    }
}
 800954c:	4618      	mov	r0, r3
 800954e:	3714      	adds	r7, #20
 8009550:	46bd      	mov	sp, r7
 8009552:	bc80      	pop	{r7}
 8009554:	4770      	bx	lr

08009556 <LinkList_SetFreeElement>:

void LinkList_SetFreeElement(LinkList *sList, FreeElementFunction fCallback)
{
 8009556:	b480      	push	{r7}
 8009558:	b083      	sub	sp, #12
 800955a:	af00      	add	r7, sp, #0
 800955c:	6078      	str	r0, [r7, #4]
 800955e:	6039      	str	r1, [r7, #0]
    sList->fFreeElement = fCallback;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	683a      	ldr	r2, [r7, #0]
 8009564:	60da      	str	r2, [r3, #12]
}
 8009566:	bf00      	nop
 8009568:	370c      	adds	r7, #12
 800956a:	46bd      	mov	sp, r7
 800956c:	bc80      	pop	{r7}
 800956e:	4770      	bx	lr

08009570 <EmptyFreeElement>:
    sList->fFreeElement(sDeleted);
    free(sDeleted);
}

void EmptyFreeElement(LinkList_Node *sNode)
{
 8009570:	b480      	push	{r7}
 8009572:	b083      	sub	sp, #12
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
}
 8009578:	bf00      	nop
 800957a:	370c      	adds	r7, #12
 800957c:	46bd      	mov	sp, r7
 800957e:	bc80      	pop	{r7}
 8009580:	4770      	bx	lr
	...

08009584 <LoRa_Init>:


void LoRa_Init(UART_HandleTypeDef *huart,
				GPIO_TypeDef *md0_port, uint16_t md0_pin,
				GPIO_TypeDef *md1_port, uint16_t md1_pin)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b084      	sub	sp, #16
 8009588:	af00      	add	r7, sp, #0
 800958a:	60f8      	str	r0, [r7, #12]
 800958c:	60b9      	str	r1, [r7, #8]
 800958e:	603b      	str	r3, [r7, #0]
 8009590:	4613      	mov	r3, r2
 8009592:	80fb      	strh	r3, [r7, #6]
	m_huart = huart;
 8009594:	4a09      	ldr	r2, [pc, #36]	; (80095bc <LoRa_Init+0x38>)
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(md0_port, md0_pin, GPIO_PIN_RESET);
 800959a:	88fb      	ldrh	r3, [r7, #6]
 800959c:	2200      	movs	r2, #0
 800959e:	4619      	mov	r1, r3
 80095a0:	68b8      	ldr	r0, [r7, #8]
 80095a2:	f7f9 f90b 	bl	80027bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(md1_port, md1_pin, GPIO_PIN_RESET);
 80095a6:	8b3b      	ldrh	r3, [r7, #24]
 80095a8:	2200      	movs	r2, #0
 80095aa:	4619      	mov	r1, r3
 80095ac:	6838      	ldr	r0, [r7, #0]
 80095ae:	f7f9 f905 	bl	80027bc <HAL_GPIO_WritePin>
}
 80095b2:	bf00      	nop
 80095b4:	3710      	adds	r7, #16
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bd80      	pop	{r7, pc}
 80095ba:	bf00      	nop
 80095bc:	200003a8 	.word	0x200003a8

080095c0 <LoRa_Send>:
{

}

void LoRa_Send(uint8_t* data, uint16_t size)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b082      	sub	sp, #8
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
 80095c8:	460b      	mov	r3, r1
 80095ca:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(m_huart, data, size, 300);
 80095cc:	4b05      	ldr	r3, [pc, #20]	; (80095e4 <LoRa_Send+0x24>)
 80095ce:	6818      	ldr	r0, [r3, #0]
 80095d0:	887a      	ldrh	r2, [r7, #2]
 80095d2:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80095d6:	6879      	ldr	r1, [r7, #4]
 80095d8:	f7fd f824 	bl	8006624 <HAL_UART_Transmit>
}
 80095dc:	bf00      	nop
 80095de:	3708      	adds	r7, #8
 80095e0:	46bd      	mov	sp, r7
 80095e2:	bd80      	pop	{r7, pc}
 80095e4:	200003a8 	.word	0x200003a8

080095e8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b084      	sub	sp, #16
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
 80095f0:	460b      	mov	r3, r1
 80095f2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80095f4:	2300      	movs	r3, #0
 80095f6:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	7c1b      	ldrb	r3, [r3, #16]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d115      	bne.n	800962c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009600:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009604:	2202      	movs	r2, #2
 8009606:	2181      	movs	r1, #129	; 0x81
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f002 f8da 	bl	800b7c2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	2201      	movs	r2, #1
 8009612:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009614:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009618:	2202      	movs	r2, #2
 800961a:	2101      	movs	r1, #1
 800961c:	6878      	ldr	r0, [r7, #4]
 800961e:	f002 f8d0 	bl	800b7c2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	2201      	movs	r2, #1
 8009626:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800962a:	e012      	b.n	8009652 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800962c:	2340      	movs	r3, #64	; 0x40
 800962e:	2202      	movs	r2, #2
 8009630:	2181      	movs	r1, #129	; 0x81
 8009632:	6878      	ldr	r0, [r7, #4]
 8009634:	f002 f8c5 	bl	800b7c2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2201      	movs	r2, #1
 800963c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800963e:	2340      	movs	r3, #64	; 0x40
 8009640:	2202      	movs	r2, #2
 8009642:	2101      	movs	r1, #1
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f002 f8bc 	bl	800b7c2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2201      	movs	r2, #1
 800964e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009652:	2308      	movs	r3, #8
 8009654:	2203      	movs	r2, #3
 8009656:	2182      	movs	r1, #130	; 0x82
 8009658:	6878      	ldr	r0, [r7, #4]
 800965a:	f002 f8b2 	bl	800b7c2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2201      	movs	r2, #1
 8009662:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009664:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009668:	f002 f9d2 	bl	800ba10 <USBD_static_malloc>
 800966c:	4602      	mov	r2, r0
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800967a:	2b00      	cmp	r3, #0
 800967c:	d102      	bne.n	8009684 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800967e:	2301      	movs	r3, #1
 8009680:	73fb      	strb	r3, [r7, #15]
 8009682:	e026      	b.n	80096d2 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800968a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8009696:	68bb      	ldr	r3, [r7, #8]
 8009698:	2200      	movs	r2, #0
 800969a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800969e:	68bb      	ldr	r3, [r7, #8]
 80096a0:	2200      	movs	r2, #0
 80096a2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	7c1b      	ldrb	r3, [r3, #16]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d109      	bne.n	80096c2 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80096ae:	68bb      	ldr	r3, [r7, #8]
 80096b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80096b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80096b8:	2101      	movs	r1, #1
 80096ba:	6878      	ldr	r0, [r7, #4]
 80096bc:	f002 f972 	bl	800b9a4 <USBD_LL_PrepareReceive>
 80096c0:	e007      	b.n	80096d2 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80096c2:	68bb      	ldr	r3, [r7, #8]
 80096c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80096c8:	2340      	movs	r3, #64	; 0x40
 80096ca:	2101      	movs	r1, #1
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	f002 f969 	bl	800b9a4 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80096d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80096d4:	4618      	mov	r0, r3
 80096d6:	3710      	adds	r7, #16
 80096d8:	46bd      	mov	sp, r7
 80096da:	bd80      	pop	{r7, pc}

080096dc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b084      	sub	sp, #16
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
 80096e4:	460b      	mov	r3, r1
 80096e6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80096e8:	2300      	movs	r3, #0
 80096ea:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80096ec:	2181      	movs	r1, #129	; 0x81
 80096ee:	6878      	ldr	r0, [r7, #4]
 80096f0:	f002 f88d 	bl	800b80e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2200      	movs	r2, #0
 80096f8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80096fa:	2101      	movs	r1, #1
 80096fc:	6878      	ldr	r0, [r7, #4]
 80096fe:	f002 f886 	bl	800b80e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2200      	movs	r2, #0
 8009706:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800970a:	2182      	movs	r1, #130	; 0x82
 800970c:	6878      	ldr	r0, [r7, #4]
 800970e:	f002 f87e 	bl	800b80e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	2200      	movs	r2, #0
 8009716:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800971e:	2b00      	cmp	r3, #0
 8009720:	d00e      	beq.n	8009740 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009728:	685b      	ldr	r3, [r3, #4]
 800972a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009732:	4618      	mov	r0, r3
 8009734:	f002 f978 	bl	800ba28 <USBD_static_free>
    pdev->pClassData = NULL;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2200      	movs	r2, #0
 800973c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8009740:	7bfb      	ldrb	r3, [r7, #15]
}
 8009742:	4618      	mov	r0, r3
 8009744:	3710      	adds	r7, #16
 8009746:	46bd      	mov	sp, r7
 8009748:	bd80      	pop	{r7, pc}

0800974a <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800974a:	b580      	push	{r7, lr}
 800974c:	b086      	sub	sp, #24
 800974e:	af00      	add	r7, sp, #0
 8009750:	6078      	str	r0, [r7, #4]
 8009752:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800975a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800975c:	2300      	movs	r3, #0
 800975e:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8009760:	2300      	movs	r3, #0
 8009762:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8009764:	2300      	movs	r3, #0
 8009766:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	781b      	ldrb	r3, [r3, #0]
 800976c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009770:	2b00      	cmp	r3, #0
 8009772:	d039      	beq.n	80097e8 <USBD_CDC_Setup+0x9e>
 8009774:	2b20      	cmp	r3, #32
 8009776:	d17f      	bne.n	8009878 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	88db      	ldrh	r3, [r3, #6]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d029      	beq.n	80097d4 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	781b      	ldrb	r3, [r3, #0]
 8009784:	b25b      	sxtb	r3, r3
 8009786:	2b00      	cmp	r3, #0
 8009788:	da11      	bge.n	80097ae <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009790:	689b      	ldr	r3, [r3, #8]
 8009792:	683a      	ldr	r2, [r7, #0]
 8009794:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8009796:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009798:	683a      	ldr	r2, [r7, #0]
 800979a:	88d2      	ldrh	r2, [r2, #6]
 800979c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800979e:	6939      	ldr	r1, [r7, #16]
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	88db      	ldrh	r3, [r3, #6]
 80097a4:	461a      	mov	r2, r3
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	f001 fa09 	bl	800abbe <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80097ac:	e06b      	b.n	8009886 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	785a      	ldrb	r2, [r3, #1]
 80097b2:	693b      	ldr	r3, [r7, #16]
 80097b4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	88db      	ldrh	r3, [r3, #6]
 80097bc:	b2da      	uxtb	r2, r3
 80097be:	693b      	ldr	r3, [r7, #16]
 80097c0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80097c4:	6939      	ldr	r1, [r7, #16]
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	88db      	ldrh	r3, [r3, #6]
 80097ca:	461a      	mov	r2, r3
 80097cc:	6878      	ldr	r0, [r7, #4]
 80097ce:	f001 fa24 	bl	800ac1a <USBD_CtlPrepareRx>
      break;
 80097d2:	e058      	b.n	8009886 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80097da:	689b      	ldr	r3, [r3, #8]
 80097dc:	683a      	ldr	r2, [r7, #0]
 80097de:	7850      	ldrb	r0, [r2, #1]
 80097e0:	2200      	movs	r2, #0
 80097e2:	6839      	ldr	r1, [r7, #0]
 80097e4:	4798      	blx	r3
      break;
 80097e6:	e04e      	b.n	8009886 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	785b      	ldrb	r3, [r3, #1]
 80097ec:	2b0b      	cmp	r3, #11
 80097ee:	d02e      	beq.n	800984e <USBD_CDC_Setup+0x104>
 80097f0:	2b0b      	cmp	r3, #11
 80097f2:	dc38      	bgt.n	8009866 <USBD_CDC_Setup+0x11c>
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d002      	beq.n	80097fe <USBD_CDC_Setup+0xb4>
 80097f8:	2b0a      	cmp	r3, #10
 80097fa:	d014      	beq.n	8009826 <USBD_CDC_Setup+0xdc>
 80097fc:	e033      	b.n	8009866 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009804:	2b03      	cmp	r3, #3
 8009806:	d107      	bne.n	8009818 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8009808:	f107 030c 	add.w	r3, r7, #12
 800980c:	2202      	movs	r2, #2
 800980e:	4619      	mov	r1, r3
 8009810:	6878      	ldr	r0, [r7, #4]
 8009812:	f001 f9d4 	bl	800abbe <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009816:	e02e      	b.n	8009876 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009818:	6839      	ldr	r1, [r7, #0]
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f001 f965 	bl	800aaea <USBD_CtlError>
            ret = USBD_FAIL;
 8009820:	2302      	movs	r3, #2
 8009822:	75fb      	strb	r3, [r7, #23]
          break;
 8009824:	e027      	b.n	8009876 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800982c:	2b03      	cmp	r3, #3
 800982e:	d107      	bne.n	8009840 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8009830:	f107 030f 	add.w	r3, r7, #15
 8009834:	2201      	movs	r2, #1
 8009836:	4619      	mov	r1, r3
 8009838:	6878      	ldr	r0, [r7, #4]
 800983a:	f001 f9c0 	bl	800abbe <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800983e:	e01a      	b.n	8009876 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009840:	6839      	ldr	r1, [r7, #0]
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	f001 f951 	bl	800aaea <USBD_CtlError>
            ret = USBD_FAIL;
 8009848:	2302      	movs	r3, #2
 800984a:	75fb      	strb	r3, [r7, #23]
          break;
 800984c:	e013      	b.n	8009876 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009854:	2b03      	cmp	r3, #3
 8009856:	d00d      	beq.n	8009874 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8009858:	6839      	ldr	r1, [r7, #0]
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	f001 f945 	bl	800aaea <USBD_CtlError>
            ret = USBD_FAIL;
 8009860:	2302      	movs	r3, #2
 8009862:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009864:	e006      	b.n	8009874 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8009866:	6839      	ldr	r1, [r7, #0]
 8009868:	6878      	ldr	r0, [r7, #4]
 800986a:	f001 f93e 	bl	800aaea <USBD_CtlError>
          ret = USBD_FAIL;
 800986e:	2302      	movs	r3, #2
 8009870:	75fb      	strb	r3, [r7, #23]
          break;
 8009872:	e000      	b.n	8009876 <USBD_CDC_Setup+0x12c>
          break;
 8009874:	bf00      	nop
      }
      break;
 8009876:	e006      	b.n	8009886 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009878:	6839      	ldr	r1, [r7, #0]
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	f001 f935 	bl	800aaea <USBD_CtlError>
      ret = USBD_FAIL;
 8009880:	2302      	movs	r3, #2
 8009882:	75fb      	strb	r3, [r7, #23]
      break;
 8009884:	bf00      	nop
  }

  return ret;
 8009886:	7dfb      	ldrb	r3, [r7, #23]
}
 8009888:	4618      	mov	r0, r3
 800988a:	3718      	adds	r7, #24
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}

08009890 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b084      	sub	sp, #16
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
 8009898:	460b      	mov	r3, r1
 800989a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098a2:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80098aa:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d03a      	beq.n	800992c <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80098b6:	78fa      	ldrb	r2, [r7, #3]
 80098b8:	6879      	ldr	r1, [r7, #4]
 80098ba:	4613      	mov	r3, r2
 80098bc:	009b      	lsls	r3, r3, #2
 80098be:	4413      	add	r3, r2
 80098c0:	009b      	lsls	r3, r3, #2
 80098c2:	440b      	add	r3, r1
 80098c4:	331c      	adds	r3, #28
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d029      	beq.n	8009920 <USBD_CDC_DataIn+0x90>
 80098cc:	78fa      	ldrb	r2, [r7, #3]
 80098ce:	6879      	ldr	r1, [r7, #4]
 80098d0:	4613      	mov	r3, r2
 80098d2:	009b      	lsls	r3, r3, #2
 80098d4:	4413      	add	r3, r2
 80098d6:	009b      	lsls	r3, r3, #2
 80098d8:	440b      	add	r3, r1
 80098da:	331c      	adds	r3, #28
 80098dc:	681a      	ldr	r2, [r3, #0]
 80098de:	78f9      	ldrb	r1, [r7, #3]
 80098e0:	68b8      	ldr	r0, [r7, #8]
 80098e2:	460b      	mov	r3, r1
 80098e4:	009b      	lsls	r3, r3, #2
 80098e6:	440b      	add	r3, r1
 80098e8:	00db      	lsls	r3, r3, #3
 80098ea:	4403      	add	r3, r0
 80098ec:	3338      	adds	r3, #56	; 0x38
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	fbb2 f1f3 	udiv	r1, r2, r3
 80098f4:	fb01 f303 	mul.w	r3, r1, r3
 80098f8:	1ad3      	subs	r3, r2, r3
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d110      	bne.n	8009920 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80098fe:	78fa      	ldrb	r2, [r7, #3]
 8009900:	6879      	ldr	r1, [r7, #4]
 8009902:	4613      	mov	r3, r2
 8009904:	009b      	lsls	r3, r3, #2
 8009906:	4413      	add	r3, r2
 8009908:	009b      	lsls	r3, r3, #2
 800990a:	440b      	add	r3, r1
 800990c:	331c      	adds	r3, #28
 800990e:	2200      	movs	r2, #0
 8009910:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009912:	78f9      	ldrb	r1, [r7, #3]
 8009914:	2300      	movs	r3, #0
 8009916:	2200      	movs	r2, #0
 8009918:	6878      	ldr	r0, [r7, #4]
 800991a:	f002 f820 	bl	800b95e <USBD_LL_Transmit>
 800991e:	e003      	b.n	8009928 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	2200      	movs	r2, #0
 8009924:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8009928:	2300      	movs	r3, #0
 800992a:	e000      	b.n	800992e <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800992c:	2302      	movs	r3, #2
  }
}
 800992e:	4618      	mov	r0, r3
 8009930:	3710      	adds	r7, #16
 8009932:	46bd      	mov	sp, r7
 8009934:	bd80      	pop	{r7, pc}

08009936 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009936:	b580      	push	{r7, lr}
 8009938:	b084      	sub	sp, #16
 800993a:	af00      	add	r7, sp, #0
 800993c:	6078      	str	r0, [r7, #4]
 800993e:	460b      	mov	r3, r1
 8009940:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009948:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800994a:	78fb      	ldrb	r3, [r7, #3]
 800994c:	4619      	mov	r1, r3
 800994e:	6878      	ldr	r0, [r7, #4]
 8009950:	f002 f84b 	bl	800b9ea <USBD_LL_GetRxDataSize>
 8009954:	4602      	mov	r2, r0
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009962:	2b00      	cmp	r3, #0
 8009964:	d00d      	beq.n	8009982 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800996c:	68db      	ldr	r3, [r3, #12]
 800996e:	68fa      	ldr	r2, [r7, #12]
 8009970:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009974:	68fa      	ldr	r2, [r7, #12]
 8009976:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800997a:	4611      	mov	r1, r2
 800997c:	4798      	blx	r3

    return USBD_OK;
 800997e:	2300      	movs	r3, #0
 8009980:	e000      	b.n	8009984 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8009982:	2302      	movs	r3, #2
  }
}
 8009984:	4618      	mov	r0, r3
 8009986:	3710      	adds	r7, #16
 8009988:	46bd      	mov	sp, r7
 800998a:	bd80      	pop	{r7, pc}

0800998c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b084      	sub	sp, #16
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800999a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d015      	beq.n	80099d2 <USBD_CDC_EP0_RxReady+0x46>
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80099ac:	2bff      	cmp	r3, #255	; 0xff
 80099ae:	d010      	beq.n	80099d2 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80099b6:	689b      	ldr	r3, [r3, #8]
 80099b8:	68fa      	ldr	r2, [r7, #12]
 80099ba:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80099be:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80099c0:	68fa      	ldr	r2, [r7, #12]
 80099c2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80099c6:	b292      	uxth	r2, r2
 80099c8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	22ff      	movs	r2, #255	; 0xff
 80099ce:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80099d2:	2300      	movs	r3, #0
}
 80099d4:	4618      	mov	r0, r3
 80099d6:	3710      	adds	r7, #16
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}

080099dc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80099dc:	b480      	push	{r7}
 80099de:	b083      	sub	sp, #12
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2243      	movs	r2, #67	; 0x43
 80099e8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80099ea:	4b03      	ldr	r3, [pc, #12]	; (80099f8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80099ec:	4618      	mov	r0, r3
 80099ee:	370c      	adds	r7, #12
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bc80      	pop	{r7}
 80099f4:	4770      	bx	lr
 80099f6:	bf00      	nop
 80099f8:	200000e4 	.word	0x200000e4

080099fc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80099fc:	b480      	push	{r7}
 80099fe:	b083      	sub	sp, #12
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2243      	movs	r2, #67	; 0x43
 8009a08:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8009a0a:	4b03      	ldr	r3, [pc, #12]	; (8009a18 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	370c      	adds	r7, #12
 8009a10:	46bd      	mov	sp, r7
 8009a12:	bc80      	pop	{r7}
 8009a14:	4770      	bx	lr
 8009a16:	bf00      	nop
 8009a18:	200000a0 	.word	0x200000a0

08009a1c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009a1c:	b480      	push	{r7}
 8009a1e:	b083      	sub	sp, #12
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2243      	movs	r2, #67	; 0x43
 8009a28:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8009a2a:	4b03      	ldr	r3, [pc, #12]	; (8009a38 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	370c      	adds	r7, #12
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bc80      	pop	{r7}
 8009a34:	4770      	bx	lr
 8009a36:	bf00      	nop
 8009a38:	20000128 	.word	0x20000128

08009a3c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009a3c:	b480      	push	{r7}
 8009a3e:	b083      	sub	sp, #12
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	220a      	movs	r2, #10
 8009a48:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8009a4a:	4b03      	ldr	r3, [pc, #12]	; (8009a58 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	370c      	adds	r7, #12
 8009a50:	46bd      	mov	sp, r7
 8009a52:	bc80      	pop	{r7}
 8009a54:	4770      	bx	lr
 8009a56:	bf00      	nop
 8009a58:	2000005c 	.word	0x2000005c

08009a5c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8009a5c:	b480      	push	{r7}
 8009a5e:	b085      	sub	sp, #20
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
 8009a64:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8009a66:	2302      	movs	r3, #2
 8009a68:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d005      	beq.n	8009a7c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	683a      	ldr	r2, [r7, #0]
 8009a74:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8009a78:	2300      	movs	r3, #0
 8009a7a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a7e:	4618      	mov	r0, r3
 8009a80:	3714      	adds	r7, #20
 8009a82:	46bd      	mov	sp, r7
 8009a84:	bc80      	pop	{r7}
 8009a86:	4770      	bx	lr

08009a88 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8009a88:	b480      	push	{r7}
 8009a8a:	b087      	sub	sp, #28
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	60f8      	str	r0, [r7, #12]
 8009a90:	60b9      	str	r1, [r7, #8]
 8009a92:	4613      	mov	r3, r2
 8009a94:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a9c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8009a9e:	697b      	ldr	r3, [r7, #20]
 8009aa0:	68ba      	ldr	r2, [r7, #8]
 8009aa2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009aa6:	88fa      	ldrh	r2, [r7, #6]
 8009aa8:	697b      	ldr	r3, [r7, #20]
 8009aaa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8009aae:	2300      	movs	r3, #0
}
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	371c      	adds	r7, #28
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	bc80      	pop	{r7}
 8009ab8:	4770      	bx	lr

08009aba <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8009aba:	b480      	push	{r7}
 8009abc:	b085      	sub	sp, #20
 8009abe:	af00      	add	r7, sp, #0
 8009ac0:	6078      	str	r0, [r7, #4]
 8009ac2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009aca:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	683a      	ldr	r2, [r7, #0]
 8009ad0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8009ad4:	2300      	movs	r3, #0
}
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	3714      	adds	r7, #20
 8009ada:	46bd      	mov	sp, r7
 8009adc:	bc80      	pop	{r7}
 8009ade:	4770      	bx	lr

08009ae0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b084      	sub	sp, #16
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009aee:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d01c      	beq.n	8009b34 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d115      	bne.n	8009b30 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	2201      	movs	r2, #1
 8009b08:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009b22:	b29b      	uxth	r3, r3
 8009b24:	2181      	movs	r1, #129	; 0x81
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	f001 ff19 	bl	800b95e <USBD_LL_Transmit>

      return USBD_OK;
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	e002      	b.n	8009b36 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8009b30:	2301      	movs	r3, #1
 8009b32:	e000      	b.n	8009b36 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8009b34:	2302      	movs	r3, #2
  }
}
 8009b36:	4618      	mov	r0, r3
 8009b38:	3710      	adds	r7, #16
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bd80      	pop	{r7, pc}

08009b3e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009b3e:	b580      	push	{r7, lr}
 8009b40:	b084      	sub	sp, #16
 8009b42:	af00      	add	r7, sp, #0
 8009b44:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b4c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d017      	beq.n	8009b88 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	7c1b      	ldrb	r3, [r3, #16]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d109      	bne.n	8009b74 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009b66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009b6a:	2101      	movs	r1, #1
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	f001 ff19 	bl	800b9a4 <USBD_LL_PrepareReceive>
 8009b72:	e007      	b.n	8009b84 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009b7a:	2340      	movs	r3, #64	; 0x40
 8009b7c:	2101      	movs	r1, #1
 8009b7e:	6878      	ldr	r0, [r7, #4]
 8009b80:	f001 ff10 	bl	800b9a4 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8009b84:	2300      	movs	r3, #0
 8009b86:	e000      	b.n	8009b8a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8009b88:	2302      	movs	r3, #2
  }
}
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	3710      	adds	r7, #16
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bd80      	pop	{r7, pc}

08009b92 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009b92:	b580      	push	{r7, lr}
 8009b94:	b084      	sub	sp, #16
 8009b96:	af00      	add	r7, sp, #0
 8009b98:	60f8      	str	r0, [r7, #12]
 8009b9a:	60b9      	str	r1, [r7, #8]
 8009b9c:	4613      	mov	r3, r2
 8009b9e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d101      	bne.n	8009baa <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009ba6:	2302      	movs	r3, #2
 8009ba8:	e01a      	b.n	8009be0 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d003      	beq.n	8009bbc <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009bbc:	68bb      	ldr	r3, [r7, #8]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d003      	beq.n	8009bca <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	68ba      	ldr	r2, [r7, #8]
 8009bc6:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	2201      	movs	r2, #1
 8009bce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	79fa      	ldrb	r2, [r7, #7]
 8009bd6:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8009bd8:	68f8      	ldr	r0, [r7, #12]
 8009bda:	f001 fd7d 	bl	800b6d8 <USBD_LL_Init>

  return USBD_OK;
 8009bde:	2300      	movs	r3, #0
}
 8009be0:	4618      	mov	r0, r3
 8009be2:	3710      	adds	r7, #16
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bd80      	pop	{r7, pc}

08009be8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009be8:	b480      	push	{r7}
 8009bea:	b085      	sub	sp, #20
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
 8009bf0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d006      	beq.n	8009c0a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	683a      	ldr	r2, [r7, #0]
 8009c00:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8009c04:	2300      	movs	r3, #0
 8009c06:	73fb      	strb	r3, [r7, #15]
 8009c08:	e001      	b.n	8009c0e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8009c0a:	2302      	movs	r3, #2
 8009c0c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c10:	4618      	mov	r0, r3
 8009c12:	3714      	adds	r7, #20
 8009c14:	46bd      	mov	sp, r7
 8009c16:	bc80      	pop	{r7}
 8009c18:	4770      	bx	lr

08009c1a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009c1a:	b580      	push	{r7, lr}
 8009c1c:	b082      	sub	sp, #8
 8009c1e:	af00      	add	r7, sp, #0
 8009c20:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	f001 fdb2 	bl	800b78c <USBD_LL_Start>

  return USBD_OK;
 8009c28:	2300      	movs	r3, #0
}
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	3708      	adds	r7, #8
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	bd80      	pop	{r7, pc}

08009c32 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009c32:	b480      	push	{r7}
 8009c34:	b083      	sub	sp, #12
 8009c36:	af00      	add	r7, sp, #0
 8009c38:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009c3a:	2300      	movs	r3, #0
}
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	370c      	adds	r7, #12
 8009c40:	46bd      	mov	sp, r7
 8009c42:	bc80      	pop	{r7}
 8009c44:	4770      	bx	lr

08009c46 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009c46:	b580      	push	{r7, lr}
 8009c48:	b084      	sub	sp, #16
 8009c4a:	af00      	add	r7, sp, #0
 8009c4c:	6078      	str	r0, [r7, #4]
 8009c4e:	460b      	mov	r3, r1
 8009c50:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009c52:	2302      	movs	r3, #2
 8009c54:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d00c      	beq.n	8009c7a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	78fa      	ldrb	r2, [r7, #3]
 8009c6a:	4611      	mov	r1, r2
 8009c6c:	6878      	ldr	r0, [r7, #4]
 8009c6e:	4798      	blx	r3
 8009c70:	4603      	mov	r3, r0
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d101      	bne.n	8009c7a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8009c76:	2300      	movs	r3, #0
 8009c78:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8009c7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	3710      	adds	r7, #16
 8009c80:	46bd      	mov	sp, r7
 8009c82:	bd80      	pop	{r7, pc}

08009c84 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b082      	sub	sp, #8
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
 8009c8c:	460b      	mov	r3, r1
 8009c8e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c96:	685b      	ldr	r3, [r3, #4]
 8009c98:	78fa      	ldrb	r2, [r7, #3]
 8009c9a:	4611      	mov	r1, r2
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	4798      	blx	r3

  return USBD_OK;
 8009ca0:	2300      	movs	r3, #0
}
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	3708      	adds	r7, #8
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	bd80      	pop	{r7, pc}

08009caa <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009caa:	b580      	push	{r7, lr}
 8009cac:	b082      	sub	sp, #8
 8009cae:	af00      	add	r7, sp, #0
 8009cb0:	6078      	str	r0, [r7, #4]
 8009cb2:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009cba:	6839      	ldr	r1, [r7, #0]
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	f000 fed8 	bl	800aa72 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	2201      	movs	r2, #1
 8009cc6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009cd0:	461a      	mov	r2, r3
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009cde:	f003 031f 	and.w	r3, r3, #31
 8009ce2:	2b02      	cmp	r3, #2
 8009ce4:	d016      	beq.n	8009d14 <USBD_LL_SetupStage+0x6a>
 8009ce6:	2b02      	cmp	r3, #2
 8009ce8:	d81c      	bhi.n	8009d24 <USBD_LL_SetupStage+0x7a>
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d002      	beq.n	8009cf4 <USBD_LL_SetupStage+0x4a>
 8009cee:	2b01      	cmp	r3, #1
 8009cf0:	d008      	beq.n	8009d04 <USBD_LL_SetupStage+0x5a>
 8009cf2:	e017      	b.n	8009d24 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009cfa:	4619      	mov	r1, r3
 8009cfc:	6878      	ldr	r0, [r7, #4]
 8009cfe:	f000 f9cb 	bl	800a098 <USBD_StdDevReq>
      break;
 8009d02:	e01a      	b.n	8009d3a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009d0a:	4619      	mov	r1, r3
 8009d0c:	6878      	ldr	r0, [r7, #4]
 8009d0e:	f000 fa2d 	bl	800a16c <USBD_StdItfReq>
      break;
 8009d12:	e012      	b.n	8009d3a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009d1a:	4619      	mov	r1, r3
 8009d1c:	6878      	ldr	r0, [r7, #4]
 8009d1e:	f000 fa6d 	bl	800a1fc <USBD_StdEPReq>
      break;
 8009d22:	e00a      	b.n	8009d3a <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009d2a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009d2e:	b2db      	uxtb	r3, r3
 8009d30:	4619      	mov	r1, r3
 8009d32:	6878      	ldr	r0, [r7, #4]
 8009d34:	f001 fd8a 	bl	800b84c <USBD_LL_StallEP>
      break;
 8009d38:	bf00      	nop
  }

  return USBD_OK;
 8009d3a:	2300      	movs	r3, #0
}
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	3708      	adds	r7, #8
 8009d40:	46bd      	mov	sp, r7
 8009d42:	bd80      	pop	{r7, pc}

08009d44 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b086      	sub	sp, #24
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	60f8      	str	r0, [r7, #12]
 8009d4c:	460b      	mov	r3, r1
 8009d4e:	607a      	str	r2, [r7, #4]
 8009d50:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009d52:	7afb      	ldrb	r3, [r7, #11]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d14b      	bne.n	8009df0 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009d5e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009d66:	2b03      	cmp	r3, #3
 8009d68:	d134      	bne.n	8009dd4 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8009d6a:	697b      	ldr	r3, [r7, #20]
 8009d6c:	68da      	ldr	r2, [r3, #12]
 8009d6e:	697b      	ldr	r3, [r7, #20]
 8009d70:	691b      	ldr	r3, [r3, #16]
 8009d72:	429a      	cmp	r2, r3
 8009d74:	d919      	bls.n	8009daa <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8009d76:	697b      	ldr	r3, [r7, #20]
 8009d78:	68da      	ldr	r2, [r3, #12]
 8009d7a:	697b      	ldr	r3, [r7, #20]
 8009d7c:	691b      	ldr	r3, [r3, #16]
 8009d7e:	1ad2      	subs	r2, r2, r3
 8009d80:	697b      	ldr	r3, [r7, #20]
 8009d82:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009d84:	697b      	ldr	r3, [r7, #20]
 8009d86:	68da      	ldr	r2, [r3, #12]
 8009d88:	697b      	ldr	r3, [r7, #20]
 8009d8a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009d8c:	429a      	cmp	r2, r3
 8009d8e:	d203      	bcs.n	8009d98 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009d90:	697b      	ldr	r3, [r7, #20]
 8009d92:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009d94:	b29b      	uxth	r3, r3
 8009d96:	e002      	b.n	8009d9e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009d98:	697b      	ldr	r3, [r7, #20]
 8009d9a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009d9c:	b29b      	uxth	r3, r3
 8009d9e:	461a      	mov	r2, r3
 8009da0:	6879      	ldr	r1, [r7, #4]
 8009da2:	68f8      	ldr	r0, [r7, #12]
 8009da4:	f000 ff57 	bl	800ac56 <USBD_CtlContinueRx>
 8009da8:	e038      	b.n	8009e1c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009db0:	691b      	ldr	r3, [r3, #16]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d00a      	beq.n	8009dcc <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009dbc:	2b03      	cmp	r3, #3
 8009dbe:	d105      	bne.n	8009dcc <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009dc6:	691b      	ldr	r3, [r3, #16]
 8009dc8:	68f8      	ldr	r0, [r7, #12]
 8009dca:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009dcc:	68f8      	ldr	r0, [r7, #12]
 8009dce:	f000 ff54 	bl	800ac7a <USBD_CtlSendStatus>
 8009dd2:	e023      	b.n	8009e1c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009dda:	2b05      	cmp	r3, #5
 8009ddc:	d11e      	bne.n	8009e1c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	2200      	movs	r2, #0
 8009de2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8009de6:	2100      	movs	r1, #0
 8009de8:	68f8      	ldr	r0, [r7, #12]
 8009dea:	f001 fd2f 	bl	800b84c <USBD_LL_StallEP>
 8009dee:	e015      	b.n	8009e1c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009df6:	699b      	ldr	r3, [r3, #24]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d00d      	beq.n	8009e18 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8009e02:	2b03      	cmp	r3, #3
 8009e04:	d108      	bne.n	8009e18 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e0c:	699b      	ldr	r3, [r3, #24]
 8009e0e:	7afa      	ldrb	r2, [r7, #11]
 8009e10:	4611      	mov	r1, r2
 8009e12:	68f8      	ldr	r0, [r7, #12]
 8009e14:	4798      	blx	r3
 8009e16:	e001      	b.n	8009e1c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009e18:	2302      	movs	r3, #2
 8009e1a:	e000      	b.n	8009e1e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8009e1c:	2300      	movs	r3, #0
}
 8009e1e:	4618      	mov	r0, r3
 8009e20:	3718      	adds	r7, #24
 8009e22:	46bd      	mov	sp, r7
 8009e24:	bd80      	pop	{r7, pc}

08009e26 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009e26:	b580      	push	{r7, lr}
 8009e28:	b086      	sub	sp, #24
 8009e2a:	af00      	add	r7, sp, #0
 8009e2c:	60f8      	str	r0, [r7, #12]
 8009e2e:	460b      	mov	r3, r1
 8009e30:	607a      	str	r2, [r7, #4]
 8009e32:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009e34:	7afb      	ldrb	r3, [r7, #11]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d17f      	bne.n	8009f3a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	3314      	adds	r3, #20
 8009e3e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009e46:	2b02      	cmp	r3, #2
 8009e48:	d15c      	bne.n	8009f04 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8009e4a:	697b      	ldr	r3, [r7, #20]
 8009e4c:	68da      	ldr	r2, [r3, #12]
 8009e4e:	697b      	ldr	r3, [r7, #20]
 8009e50:	691b      	ldr	r3, [r3, #16]
 8009e52:	429a      	cmp	r2, r3
 8009e54:	d915      	bls.n	8009e82 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8009e56:	697b      	ldr	r3, [r7, #20]
 8009e58:	68da      	ldr	r2, [r3, #12]
 8009e5a:	697b      	ldr	r3, [r7, #20]
 8009e5c:	691b      	ldr	r3, [r3, #16]
 8009e5e:	1ad2      	subs	r2, r2, r3
 8009e60:	697b      	ldr	r3, [r7, #20]
 8009e62:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8009e64:	697b      	ldr	r3, [r7, #20]
 8009e66:	68db      	ldr	r3, [r3, #12]
 8009e68:	b29b      	uxth	r3, r3
 8009e6a:	461a      	mov	r2, r3
 8009e6c:	6879      	ldr	r1, [r7, #4]
 8009e6e:	68f8      	ldr	r0, [r7, #12]
 8009e70:	f000 fec1 	bl	800abf6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009e74:	2300      	movs	r3, #0
 8009e76:	2200      	movs	r2, #0
 8009e78:	2100      	movs	r1, #0
 8009e7a:	68f8      	ldr	r0, [r7, #12]
 8009e7c:	f001 fd92 	bl	800b9a4 <USBD_LL_PrepareReceive>
 8009e80:	e04e      	b.n	8009f20 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009e82:	697b      	ldr	r3, [r7, #20]
 8009e84:	689b      	ldr	r3, [r3, #8]
 8009e86:	697a      	ldr	r2, [r7, #20]
 8009e88:	6912      	ldr	r2, [r2, #16]
 8009e8a:	fbb3 f1f2 	udiv	r1, r3, r2
 8009e8e:	fb01 f202 	mul.w	r2, r1, r2
 8009e92:	1a9b      	subs	r3, r3, r2
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d11c      	bne.n	8009ed2 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8009e98:	697b      	ldr	r3, [r7, #20]
 8009e9a:	689a      	ldr	r2, [r3, #8]
 8009e9c:	697b      	ldr	r3, [r7, #20]
 8009e9e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009ea0:	429a      	cmp	r2, r3
 8009ea2:	d316      	bcc.n	8009ed2 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8009ea4:	697b      	ldr	r3, [r7, #20]
 8009ea6:	689a      	ldr	r2, [r3, #8]
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009eae:	429a      	cmp	r2, r3
 8009eb0:	d20f      	bcs.n	8009ed2 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	2100      	movs	r1, #0
 8009eb6:	68f8      	ldr	r0, [r7, #12]
 8009eb8:	f000 fe9d 	bl	800abf6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	2100      	movs	r1, #0
 8009eca:	68f8      	ldr	r0, [r7, #12]
 8009ecc:	f001 fd6a 	bl	800b9a4 <USBD_LL_PrepareReceive>
 8009ed0:	e026      	b.n	8009f20 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ed8:	68db      	ldr	r3, [r3, #12]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d00a      	beq.n	8009ef4 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009ee4:	2b03      	cmp	r3, #3
 8009ee6:	d105      	bne.n	8009ef4 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009eee:	68db      	ldr	r3, [r3, #12]
 8009ef0:	68f8      	ldr	r0, [r7, #12]
 8009ef2:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009ef4:	2180      	movs	r1, #128	; 0x80
 8009ef6:	68f8      	ldr	r0, [r7, #12]
 8009ef8:	f001 fca8 	bl	800b84c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009efc:	68f8      	ldr	r0, [r7, #12]
 8009efe:	f000 fecf 	bl	800aca0 <USBD_CtlReceiveStatus>
 8009f02:	e00d      	b.n	8009f20 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009f0a:	2b04      	cmp	r3, #4
 8009f0c:	d004      	beq.n	8009f18 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d103      	bne.n	8009f20 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009f18:	2180      	movs	r1, #128	; 0x80
 8009f1a:	68f8      	ldr	r0, [r7, #12]
 8009f1c:	f001 fc96 	bl	800b84c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009f26:	2b01      	cmp	r3, #1
 8009f28:	d11d      	bne.n	8009f66 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8009f2a:	68f8      	ldr	r0, [r7, #12]
 8009f2c:	f7ff fe81 	bl	8009c32 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	2200      	movs	r2, #0
 8009f34:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009f38:	e015      	b.n	8009f66 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f40:	695b      	ldr	r3, [r3, #20]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d00d      	beq.n	8009f62 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009f4c:	2b03      	cmp	r3, #3
 8009f4e:	d108      	bne.n	8009f62 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f56:	695b      	ldr	r3, [r3, #20]
 8009f58:	7afa      	ldrb	r2, [r7, #11]
 8009f5a:	4611      	mov	r1, r2
 8009f5c:	68f8      	ldr	r0, [r7, #12]
 8009f5e:	4798      	blx	r3
 8009f60:	e001      	b.n	8009f66 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009f62:	2302      	movs	r3, #2
 8009f64:	e000      	b.n	8009f68 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8009f66:	2300      	movs	r3, #0
}
 8009f68:	4618      	mov	r0, r3
 8009f6a:	3718      	adds	r7, #24
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	bd80      	pop	{r7, pc}

08009f70 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b082      	sub	sp, #8
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009f78:	2340      	movs	r3, #64	; 0x40
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	2100      	movs	r1, #0
 8009f7e:	6878      	ldr	r0, [r7, #4]
 8009f80:	f001 fc1f 	bl	800b7c2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	2201      	movs	r2, #1
 8009f88:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	2240      	movs	r2, #64	; 0x40
 8009f90:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009f94:	2340      	movs	r3, #64	; 0x40
 8009f96:	2200      	movs	r2, #0
 8009f98:	2180      	movs	r1, #128	; 0x80
 8009f9a:	6878      	ldr	r0, [r7, #4]
 8009f9c:	f001 fc11 	bl	800b7c2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2201      	movs	r2, #1
 8009fa4:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	2240      	movs	r2, #64	; 0x40
 8009faa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2201      	movs	r2, #1
 8009fb0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d009      	beq.n	8009fe8 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009fda:	685b      	ldr	r3, [r3, #4]
 8009fdc:	687a      	ldr	r2, [r7, #4]
 8009fde:	6852      	ldr	r2, [r2, #4]
 8009fe0:	b2d2      	uxtb	r2, r2
 8009fe2:	4611      	mov	r1, r2
 8009fe4:	6878      	ldr	r0, [r7, #4]
 8009fe6:	4798      	blx	r3
  }

  return USBD_OK;
 8009fe8:	2300      	movs	r3, #0
}
 8009fea:	4618      	mov	r0, r3
 8009fec:	3708      	adds	r7, #8
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	bd80      	pop	{r7, pc}

08009ff2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009ff2:	b480      	push	{r7}
 8009ff4:	b083      	sub	sp, #12
 8009ff6:	af00      	add	r7, sp, #0
 8009ff8:	6078      	str	r0, [r7, #4]
 8009ffa:	460b      	mov	r3, r1
 8009ffc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	78fa      	ldrb	r2, [r7, #3]
 800a002:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a004:	2300      	movs	r3, #0
}
 800a006:	4618      	mov	r0, r3
 800a008:	370c      	adds	r7, #12
 800a00a:	46bd      	mov	sp, r7
 800a00c:	bc80      	pop	{r7}
 800a00e:	4770      	bx	lr

0800a010 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a010:	b480      	push	{r7}
 800a012:	b083      	sub	sp, #12
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2204      	movs	r2, #4
 800a028:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a02c:	2300      	movs	r3, #0
}
 800a02e:	4618      	mov	r0, r3
 800a030:	370c      	adds	r7, #12
 800a032:	46bd      	mov	sp, r7
 800a034:	bc80      	pop	{r7}
 800a036:	4770      	bx	lr

0800a038 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a038:	b480      	push	{r7}
 800a03a:	b083      	sub	sp, #12
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a046:	2b04      	cmp	r3, #4
 800a048:	d105      	bne.n	800a056 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a056:	2300      	movs	r3, #0
}
 800a058:	4618      	mov	r0, r3
 800a05a:	370c      	adds	r7, #12
 800a05c:	46bd      	mov	sp, r7
 800a05e:	bc80      	pop	{r7}
 800a060:	4770      	bx	lr

0800a062 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a062:	b580      	push	{r7, lr}
 800a064:	b082      	sub	sp, #8
 800a066:	af00      	add	r7, sp, #0
 800a068:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a070:	2b03      	cmp	r3, #3
 800a072:	d10b      	bne.n	800a08c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a07a:	69db      	ldr	r3, [r3, #28]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d005      	beq.n	800a08c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a086:	69db      	ldr	r3, [r3, #28]
 800a088:	6878      	ldr	r0, [r7, #4]
 800a08a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a08c:	2300      	movs	r3, #0
}
 800a08e:	4618      	mov	r0, r3
 800a090:	3708      	adds	r7, #8
 800a092:	46bd      	mov	sp, r7
 800a094:	bd80      	pop	{r7, pc}
	...

0800a098 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b084      	sub	sp, #16
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
 800a0a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	781b      	ldrb	r3, [r3, #0]
 800a0aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a0ae:	2b40      	cmp	r3, #64	; 0x40
 800a0b0:	d005      	beq.n	800a0be <USBD_StdDevReq+0x26>
 800a0b2:	2b40      	cmp	r3, #64	; 0x40
 800a0b4:	d84f      	bhi.n	800a156 <USBD_StdDevReq+0xbe>
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d009      	beq.n	800a0ce <USBD_StdDevReq+0x36>
 800a0ba:	2b20      	cmp	r3, #32
 800a0bc:	d14b      	bne.n	800a156 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0c4:	689b      	ldr	r3, [r3, #8]
 800a0c6:	6839      	ldr	r1, [r7, #0]
 800a0c8:	6878      	ldr	r0, [r7, #4]
 800a0ca:	4798      	blx	r3
      break;
 800a0cc:	e048      	b.n	800a160 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a0ce:	683b      	ldr	r3, [r7, #0]
 800a0d0:	785b      	ldrb	r3, [r3, #1]
 800a0d2:	2b09      	cmp	r3, #9
 800a0d4:	d839      	bhi.n	800a14a <USBD_StdDevReq+0xb2>
 800a0d6:	a201      	add	r2, pc, #4	; (adr r2, 800a0dc <USBD_StdDevReq+0x44>)
 800a0d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0dc:	0800a12d 	.word	0x0800a12d
 800a0e0:	0800a141 	.word	0x0800a141
 800a0e4:	0800a14b 	.word	0x0800a14b
 800a0e8:	0800a137 	.word	0x0800a137
 800a0ec:	0800a14b 	.word	0x0800a14b
 800a0f0:	0800a10f 	.word	0x0800a10f
 800a0f4:	0800a105 	.word	0x0800a105
 800a0f8:	0800a14b 	.word	0x0800a14b
 800a0fc:	0800a123 	.word	0x0800a123
 800a100:	0800a119 	.word	0x0800a119
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a104:	6839      	ldr	r1, [r7, #0]
 800a106:	6878      	ldr	r0, [r7, #4]
 800a108:	f000 f9dc 	bl	800a4c4 <USBD_GetDescriptor>
          break;
 800a10c:	e022      	b.n	800a154 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a10e:	6839      	ldr	r1, [r7, #0]
 800a110:	6878      	ldr	r0, [r7, #4]
 800a112:	f000 fb3f 	bl	800a794 <USBD_SetAddress>
          break;
 800a116:	e01d      	b.n	800a154 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800a118:	6839      	ldr	r1, [r7, #0]
 800a11a:	6878      	ldr	r0, [r7, #4]
 800a11c:	f000 fb7e 	bl	800a81c <USBD_SetConfig>
          break;
 800a120:	e018      	b.n	800a154 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a122:	6839      	ldr	r1, [r7, #0]
 800a124:	6878      	ldr	r0, [r7, #4]
 800a126:	f000 fc07 	bl	800a938 <USBD_GetConfig>
          break;
 800a12a:	e013      	b.n	800a154 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a12c:	6839      	ldr	r1, [r7, #0]
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	f000 fc37 	bl	800a9a2 <USBD_GetStatus>
          break;
 800a134:	e00e      	b.n	800a154 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a136:	6839      	ldr	r1, [r7, #0]
 800a138:	6878      	ldr	r0, [r7, #4]
 800a13a:	f000 fc65 	bl	800aa08 <USBD_SetFeature>
          break;
 800a13e:	e009      	b.n	800a154 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a140:	6839      	ldr	r1, [r7, #0]
 800a142:	6878      	ldr	r0, [r7, #4]
 800a144:	f000 fc74 	bl	800aa30 <USBD_ClrFeature>
          break;
 800a148:	e004      	b.n	800a154 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800a14a:	6839      	ldr	r1, [r7, #0]
 800a14c:	6878      	ldr	r0, [r7, #4]
 800a14e:	f000 fccc 	bl	800aaea <USBD_CtlError>
          break;
 800a152:	bf00      	nop
      }
      break;
 800a154:	e004      	b.n	800a160 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800a156:	6839      	ldr	r1, [r7, #0]
 800a158:	6878      	ldr	r0, [r7, #4]
 800a15a:	f000 fcc6 	bl	800aaea <USBD_CtlError>
      break;
 800a15e:	bf00      	nop
  }

  return ret;
 800a160:	7bfb      	ldrb	r3, [r7, #15]
}
 800a162:	4618      	mov	r0, r3
 800a164:	3710      	adds	r7, #16
 800a166:	46bd      	mov	sp, r7
 800a168:	bd80      	pop	{r7, pc}
 800a16a:	bf00      	nop

0800a16c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b084      	sub	sp, #16
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
 800a174:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a176:	2300      	movs	r3, #0
 800a178:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	781b      	ldrb	r3, [r3, #0]
 800a17e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a182:	2b40      	cmp	r3, #64	; 0x40
 800a184:	d005      	beq.n	800a192 <USBD_StdItfReq+0x26>
 800a186:	2b40      	cmp	r3, #64	; 0x40
 800a188:	d82e      	bhi.n	800a1e8 <USBD_StdItfReq+0x7c>
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d001      	beq.n	800a192 <USBD_StdItfReq+0x26>
 800a18e:	2b20      	cmp	r3, #32
 800a190:	d12a      	bne.n	800a1e8 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a198:	3b01      	subs	r3, #1
 800a19a:	2b02      	cmp	r3, #2
 800a19c:	d81d      	bhi.n	800a1da <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	889b      	ldrh	r3, [r3, #4]
 800a1a2:	b2db      	uxtb	r3, r3
 800a1a4:	2b01      	cmp	r3, #1
 800a1a6:	d813      	bhi.n	800a1d0 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a1ae:	689b      	ldr	r3, [r3, #8]
 800a1b0:	6839      	ldr	r1, [r7, #0]
 800a1b2:	6878      	ldr	r0, [r7, #4]
 800a1b4:	4798      	blx	r3
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	88db      	ldrh	r3, [r3, #6]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d110      	bne.n	800a1e4 <USBD_StdItfReq+0x78>
 800a1c2:	7bfb      	ldrb	r3, [r7, #15]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d10d      	bne.n	800a1e4 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800a1c8:	6878      	ldr	r0, [r7, #4]
 800a1ca:	f000 fd56 	bl	800ac7a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a1ce:	e009      	b.n	800a1e4 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800a1d0:	6839      	ldr	r1, [r7, #0]
 800a1d2:	6878      	ldr	r0, [r7, #4]
 800a1d4:	f000 fc89 	bl	800aaea <USBD_CtlError>
          break;
 800a1d8:	e004      	b.n	800a1e4 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800a1da:	6839      	ldr	r1, [r7, #0]
 800a1dc:	6878      	ldr	r0, [r7, #4]
 800a1de:	f000 fc84 	bl	800aaea <USBD_CtlError>
          break;
 800a1e2:	e000      	b.n	800a1e6 <USBD_StdItfReq+0x7a>
          break;
 800a1e4:	bf00      	nop
      }
      break;
 800a1e6:	e004      	b.n	800a1f2 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800a1e8:	6839      	ldr	r1, [r7, #0]
 800a1ea:	6878      	ldr	r0, [r7, #4]
 800a1ec:	f000 fc7d 	bl	800aaea <USBD_CtlError>
      break;
 800a1f0:	bf00      	nop
  }

  return USBD_OK;
 800a1f2:	2300      	movs	r3, #0
}
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	3710      	adds	r7, #16
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	bd80      	pop	{r7, pc}

0800a1fc <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b084      	sub	sp, #16
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
 800a204:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a206:	2300      	movs	r3, #0
 800a208:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800a20a:	683b      	ldr	r3, [r7, #0]
 800a20c:	889b      	ldrh	r3, [r3, #4]
 800a20e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a210:	683b      	ldr	r3, [r7, #0]
 800a212:	781b      	ldrb	r3, [r3, #0]
 800a214:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a218:	2b40      	cmp	r3, #64	; 0x40
 800a21a:	d007      	beq.n	800a22c <USBD_StdEPReq+0x30>
 800a21c:	2b40      	cmp	r3, #64	; 0x40
 800a21e:	f200 8146 	bhi.w	800a4ae <USBD_StdEPReq+0x2b2>
 800a222:	2b00      	cmp	r3, #0
 800a224:	d00a      	beq.n	800a23c <USBD_StdEPReq+0x40>
 800a226:	2b20      	cmp	r3, #32
 800a228:	f040 8141 	bne.w	800a4ae <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a232:	689b      	ldr	r3, [r3, #8]
 800a234:	6839      	ldr	r1, [r7, #0]
 800a236:	6878      	ldr	r0, [r7, #4]
 800a238:	4798      	blx	r3
      break;
 800a23a:	e13d      	b.n	800a4b8 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	781b      	ldrb	r3, [r3, #0]
 800a240:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a244:	2b20      	cmp	r3, #32
 800a246:	d10a      	bne.n	800a25e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a24e:	689b      	ldr	r3, [r3, #8]
 800a250:	6839      	ldr	r1, [r7, #0]
 800a252:	6878      	ldr	r0, [r7, #4]
 800a254:	4798      	blx	r3
 800a256:	4603      	mov	r3, r0
 800a258:	73fb      	strb	r3, [r7, #15]

        return ret;
 800a25a:	7bfb      	ldrb	r3, [r7, #15]
 800a25c:	e12d      	b.n	800a4ba <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	785b      	ldrb	r3, [r3, #1]
 800a262:	2b03      	cmp	r3, #3
 800a264:	d007      	beq.n	800a276 <USBD_StdEPReq+0x7a>
 800a266:	2b03      	cmp	r3, #3
 800a268:	f300 811b 	bgt.w	800a4a2 <USBD_StdEPReq+0x2a6>
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d072      	beq.n	800a356 <USBD_StdEPReq+0x15a>
 800a270:	2b01      	cmp	r3, #1
 800a272:	d03a      	beq.n	800a2ea <USBD_StdEPReq+0xee>
 800a274:	e115      	b.n	800a4a2 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a27c:	2b02      	cmp	r3, #2
 800a27e:	d002      	beq.n	800a286 <USBD_StdEPReq+0x8a>
 800a280:	2b03      	cmp	r3, #3
 800a282:	d015      	beq.n	800a2b0 <USBD_StdEPReq+0xb4>
 800a284:	e02b      	b.n	800a2de <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a286:	7bbb      	ldrb	r3, [r7, #14]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d00c      	beq.n	800a2a6 <USBD_StdEPReq+0xaa>
 800a28c:	7bbb      	ldrb	r3, [r7, #14]
 800a28e:	2b80      	cmp	r3, #128	; 0x80
 800a290:	d009      	beq.n	800a2a6 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a292:	7bbb      	ldrb	r3, [r7, #14]
 800a294:	4619      	mov	r1, r3
 800a296:	6878      	ldr	r0, [r7, #4]
 800a298:	f001 fad8 	bl	800b84c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a29c:	2180      	movs	r1, #128	; 0x80
 800a29e:	6878      	ldr	r0, [r7, #4]
 800a2a0:	f001 fad4 	bl	800b84c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a2a4:	e020      	b.n	800a2e8 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800a2a6:	6839      	ldr	r1, [r7, #0]
 800a2a8:	6878      	ldr	r0, [r7, #4]
 800a2aa:	f000 fc1e 	bl	800aaea <USBD_CtlError>
              break;
 800a2ae:	e01b      	b.n	800a2e8 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	885b      	ldrh	r3, [r3, #2]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d10e      	bne.n	800a2d6 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800a2b8:	7bbb      	ldrb	r3, [r7, #14]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d00b      	beq.n	800a2d6 <USBD_StdEPReq+0xda>
 800a2be:	7bbb      	ldrb	r3, [r7, #14]
 800a2c0:	2b80      	cmp	r3, #128	; 0x80
 800a2c2:	d008      	beq.n	800a2d6 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	88db      	ldrh	r3, [r3, #6]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d104      	bne.n	800a2d6 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800a2cc:	7bbb      	ldrb	r3, [r7, #14]
 800a2ce:	4619      	mov	r1, r3
 800a2d0:	6878      	ldr	r0, [r7, #4]
 800a2d2:	f001 fabb 	bl	800b84c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800a2d6:	6878      	ldr	r0, [r7, #4]
 800a2d8:	f000 fccf 	bl	800ac7a <USBD_CtlSendStatus>

              break;
 800a2dc:	e004      	b.n	800a2e8 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800a2de:	6839      	ldr	r1, [r7, #0]
 800a2e0:	6878      	ldr	r0, [r7, #4]
 800a2e2:	f000 fc02 	bl	800aaea <USBD_CtlError>
              break;
 800a2e6:	bf00      	nop
          }
          break;
 800a2e8:	e0e0      	b.n	800a4ac <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2f0:	2b02      	cmp	r3, #2
 800a2f2:	d002      	beq.n	800a2fa <USBD_StdEPReq+0xfe>
 800a2f4:	2b03      	cmp	r3, #3
 800a2f6:	d015      	beq.n	800a324 <USBD_StdEPReq+0x128>
 800a2f8:	e026      	b.n	800a348 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a2fa:	7bbb      	ldrb	r3, [r7, #14]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d00c      	beq.n	800a31a <USBD_StdEPReq+0x11e>
 800a300:	7bbb      	ldrb	r3, [r7, #14]
 800a302:	2b80      	cmp	r3, #128	; 0x80
 800a304:	d009      	beq.n	800a31a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a306:	7bbb      	ldrb	r3, [r7, #14]
 800a308:	4619      	mov	r1, r3
 800a30a:	6878      	ldr	r0, [r7, #4]
 800a30c:	f001 fa9e 	bl	800b84c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a310:	2180      	movs	r1, #128	; 0x80
 800a312:	6878      	ldr	r0, [r7, #4]
 800a314:	f001 fa9a 	bl	800b84c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a318:	e01c      	b.n	800a354 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800a31a:	6839      	ldr	r1, [r7, #0]
 800a31c:	6878      	ldr	r0, [r7, #4]
 800a31e:	f000 fbe4 	bl	800aaea <USBD_CtlError>
              break;
 800a322:	e017      	b.n	800a354 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	885b      	ldrh	r3, [r3, #2]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d112      	bne.n	800a352 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a32c:	7bbb      	ldrb	r3, [r7, #14]
 800a32e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a332:	2b00      	cmp	r3, #0
 800a334:	d004      	beq.n	800a340 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800a336:	7bbb      	ldrb	r3, [r7, #14]
 800a338:	4619      	mov	r1, r3
 800a33a:	6878      	ldr	r0, [r7, #4]
 800a33c:	f001 faa5 	bl	800b88a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800a340:	6878      	ldr	r0, [r7, #4]
 800a342:	f000 fc9a 	bl	800ac7a <USBD_CtlSendStatus>
              }
              break;
 800a346:	e004      	b.n	800a352 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800a348:	6839      	ldr	r1, [r7, #0]
 800a34a:	6878      	ldr	r0, [r7, #4]
 800a34c:	f000 fbcd 	bl	800aaea <USBD_CtlError>
              break;
 800a350:	e000      	b.n	800a354 <USBD_StdEPReq+0x158>
              break;
 800a352:	bf00      	nop
          }
          break;
 800a354:	e0aa      	b.n	800a4ac <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a35c:	2b02      	cmp	r3, #2
 800a35e:	d002      	beq.n	800a366 <USBD_StdEPReq+0x16a>
 800a360:	2b03      	cmp	r3, #3
 800a362:	d032      	beq.n	800a3ca <USBD_StdEPReq+0x1ce>
 800a364:	e097      	b.n	800a496 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a366:	7bbb      	ldrb	r3, [r7, #14]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d007      	beq.n	800a37c <USBD_StdEPReq+0x180>
 800a36c:	7bbb      	ldrb	r3, [r7, #14]
 800a36e:	2b80      	cmp	r3, #128	; 0x80
 800a370:	d004      	beq.n	800a37c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800a372:	6839      	ldr	r1, [r7, #0]
 800a374:	6878      	ldr	r0, [r7, #4]
 800a376:	f000 fbb8 	bl	800aaea <USBD_CtlError>
                break;
 800a37a:	e091      	b.n	800a4a0 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a37c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a380:	2b00      	cmp	r3, #0
 800a382:	da0b      	bge.n	800a39c <USBD_StdEPReq+0x1a0>
 800a384:	7bbb      	ldrb	r3, [r7, #14]
 800a386:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a38a:	4613      	mov	r3, r2
 800a38c:	009b      	lsls	r3, r3, #2
 800a38e:	4413      	add	r3, r2
 800a390:	009b      	lsls	r3, r3, #2
 800a392:	3310      	adds	r3, #16
 800a394:	687a      	ldr	r2, [r7, #4]
 800a396:	4413      	add	r3, r2
 800a398:	3304      	adds	r3, #4
 800a39a:	e00b      	b.n	800a3b4 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a39c:	7bbb      	ldrb	r3, [r7, #14]
 800a39e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a3a2:	4613      	mov	r3, r2
 800a3a4:	009b      	lsls	r3, r3, #2
 800a3a6:	4413      	add	r3, r2
 800a3a8:	009b      	lsls	r3, r3, #2
 800a3aa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a3ae:	687a      	ldr	r2, [r7, #4]
 800a3b0:	4413      	add	r3, r2
 800a3b2:	3304      	adds	r3, #4
 800a3b4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a3b6:	68bb      	ldr	r3, [r7, #8]
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a3bc:	68bb      	ldr	r3, [r7, #8]
 800a3be:	2202      	movs	r2, #2
 800a3c0:	4619      	mov	r1, r3
 800a3c2:	6878      	ldr	r0, [r7, #4]
 800a3c4:	f000 fbfb 	bl	800abbe <USBD_CtlSendData>
              break;
 800a3c8:	e06a      	b.n	800a4a0 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a3ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	da11      	bge.n	800a3f6 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a3d2:	7bbb      	ldrb	r3, [r7, #14]
 800a3d4:	f003 020f 	and.w	r2, r3, #15
 800a3d8:	6879      	ldr	r1, [r7, #4]
 800a3da:	4613      	mov	r3, r2
 800a3dc:	009b      	lsls	r3, r3, #2
 800a3de:	4413      	add	r3, r2
 800a3e0:	009b      	lsls	r3, r3, #2
 800a3e2:	440b      	add	r3, r1
 800a3e4:	3318      	adds	r3, #24
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d117      	bne.n	800a41c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800a3ec:	6839      	ldr	r1, [r7, #0]
 800a3ee:	6878      	ldr	r0, [r7, #4]
 800a3f0:	f000 fb7b 	bl	800aaea <USBD_CtlError>
                  break;
 800a3f4:	e054      	b.n	800a4a0 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a3f6:	7bbb      	ldrb	r3, [r7, #14]
 800a3f8:	f003 020f 	and.w	r2, r3, #15
 800a3fc:	6879      	ldr	r1, [r7, #4]
 800a3fe:	4613      	mov	r3, r2
 800a400:	009b      	lsls	r3, r3, #2
 800a402:	4413      	add	r3, r2
 800a404:	009b      	lsls	r3, r3, #2
 800a406:	440b      	add	r3, r1
 800a408:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d104      	bne.n	800a41c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800a412:	6839      	ldr	r1, [r7, #0]
 800a414:	6878      	ldr	r0, [r7, #4]
 800a416:	f000 fb68 	bl	800aaea <USBD_CtlError>
                  break;
 800a41a:	e041      	b.n	800a4a0 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a41c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a420:	2b00      	cmp	r3, #0
 800a422:	da0b      	bge.n	800a43c <USBD_StdEPReq+0x240>
 800a424:	7bbb      	ldrb	r3, [r7, #14]
 800a426:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a42a:	4613      	mov	r3, r2
 800a42c:	009b      	lsls	r3, r3, #2
 800a42e:	4413      	add	r3, r2
 800a430:	009b      	lsls	r3, r3, #2
 800a432:	3310      	adds	r3, #16
 800a434:	687a      	ldr	r2, [r7, #4]
 800a436:	4413      	add	r3, r2
 800a438:	3304      	adds	r3, #4
 800a43a:	e00b      	b.n	800a454 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a43c:	7bbb      	ldrb	r3, [r7, #14]
 800a43e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a442:	4613      	mov	r3, r2
 800a444:	009b      	lsls	r3, r3, #2
 800a446:	4413      	add	r3, r2
 800a448:	009b      	lsls	r3, r3, #2
 800a44a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a44e:	687a      	ldr	r2, [r7, #4]
 800a450:	4413      	add	r3, r2
 800a452:	3304      	adds	r3, #4
 800a454:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a456:	7bbb      	ldrb	r3, [r7, #14]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d002      	beq.n	800a462 <USBD_StdEPReq+0x266>
 800a45c:	7bbb      	ldrb	r3, [r7, #14]
 800a45e:	2b80      	cmp	r3, #128	; 0x80
 800a460:	d103      	bne.n	800a46a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800a462:	68bb      	ldr	r3, [r7, #8]
 800a464:	2200      	movs	r2, #0
 800a466:	601a      	str	r2, [r3, #0]
 800a468:	e00e      	b.n	800a488 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800a46a:	7bbb      	ldrb	r3, [r7, #14]
 800a46c:	4619      	mov	r1, r3
 800a46e:	6878      	ldr	r0, [r7, #4]
 800a470:	f001 fa2a 	bl	800b8c8 <USBD_LL_IsStallEP>
 800a474:	4603      	mov	r3, r0
 800a476:	2b00      	cmp	r3, #0
 800a478:	d003      	beq.n	800a482 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800a47a:	68bb      	ldr	r3, [r7, #8]
 800a47c:	2201      	movs	r2, #1
 800a47e:	601a      	str	r2, [r3, #0]
 800a480:	e002      	b.n	800a488 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800a482:	68bb      	ldr	r3, [r7, #8]
 800a484:	2200      	movs	r2, #0
 800a486:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a488:	68bb      	ldr	r3, [r7, #8]
 800a48a:	2202      	movs	r2, #2
 800a48c:	4619      	mov	r1, r3
 800a48e:	6878      	ldr	r0, [r7, #4]
 800a490:	f000 fb95 	bl	800abbe <USBD_CtlSendData>
              break;
 800a494:	e004      	b.n	800a4a0 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800a496:	6839      	ldr	r1, [r7, #0]
 800a498:	6878      	ldr	r0, [r7, #4]
 800a49a:	f000 fb26 	bl	800aaea <USBD_CtlError>
              break;
 800a49e:	bf00      	nop
          }
          break;
 800a4a0:	e004      	b.n	800a4ac <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800a4a2:	6839      	ldr	r1, [r7, #0]
 800a4a4:	6878      	ldr	r0, [r7, #4]
 800a4a6:	f000 fb20 	bl	800aaea <USBD_CtlError>
          break;
 800a4aa:	bf00      	nop
      }
      break;
 800a4ac:	e004      	b.n	800a4b8 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800a4ae:	6839      	ldr	r1, [r7, #0]
 800a4b0:	6878      	ldr	r0, [r7, #4]
 800a4b2:	f000 fb1a 	bl	800aaea <USBD_CtlError>
      break;
 800a4b6:	bf00      	nop
  }

  return ret;
 800a4b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	3710      	adds	r7, #16
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	bd80      	pop	{r7, pc}
	...

0800a4c4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b084      	sub	sp, #16
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
 800a4cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a4da:	683b      	ldr	r3, [r7, #0]
 800a4dc:	885b      	ldrh	r3, [r3, #2]
 800a4de:	0a1b      	lsrs	r3, r3, #8
 800a4e0:	b29b      	uxth	r3, r3
 800a4e2:	3b01      	subs	r3, #1
 800a4e4:	2b06      	cmp	r3, #6
 800a4e6:	f200 8128 	bhi.w	800a73a <USBD_GetDescriptor+0x276>
 800a4ea:	a201      	add	r2, pc, #4	; (adr r2, 800a4f0 <USBD_GetDescriptor+0x2c>)
 800a4ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4f0:	0800a50d 	.word	0x0800a50d
 800a4f4:	0800a525 	.word	0x0800a525
 800a4f8:	0800a565 	.word	0x0800a565
 800a4fc:	0800a73b 	.word	0x0800a73b
 800a500:	0800a73b 	.word	0x0800a73b
 800a504:	0800a6db 	.word	0x0800a6db
 800a508:	0800a707 	.word	0x0800a707
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	687a      	ldr	r2, [r7, #4]
 800a516:	7c12      	ldrb	r2, [r2, #16]
 800a518:	f107 0108 	add.w	r1, r7, #8
 800a51c:	4610      	mov	r0, r2
 800a51e:	4798      	blx	r3
 800a520:	60f8      	str	r0, [r7, #12]
      break;
 800a522:	e112      	b.n	800a74a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	7c1b      	ldrb	r3, [r3, #16]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d10d      	bne.n	800a548 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a534:	f107 0208 	add.w	r2, r7, #8
 800a538:	4610      	mov	r0, r2
 800a53a:	4798      	blx	r3
 800a53c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	3301      	adds	r3, #1
 800a542:	2202      	movs	r2, #2
 800a544:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a546:	e100      	b.n	800a74a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a54e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a550:	f107 0208 	add.w	r2, r7, #8
 800a554:	4610      	mov	r0, r2
 800a556:	4798      	blx	r3
 800a558:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	3301      	adds	r3, #1
 800a55e:	2202      	movs	r2, #2
 800a560:	701a      	strb	r2, [r3, #0]
      break;
 800a562:	e0f2      	b.n	800a74a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	885b      	ldrh	r3, [r3, #2]
 800a568:	b2db      	uxtb	r3, r3
 800a56a:	2b05      	cmp	r3, #5
 800a56c:	f200 80ac 	bhi.w	800a6c8 <USBD_GetDescriptor+0x204>
 800a570:	a201      	add	r2, pc, #4	; (adr r2, 800a578 <USBD_GetDescriptor+0xb4>)
 800a572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a576:	bf00      	nop
 800a578:	0800a591 	.word	0x0800a591
 800a57c:	0800a5c5 	.word	0x0800a5c5
 800a580:	0800a5f9 	.word	0x0800a5f9
 800a584:	0800a62d 	.word	0x0800a62d
 800a588:	0800a661 	.word	0x0800a661
 800a58c:	0800a695 	.word	0x0800a695
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a596:	685b      	ldr	r3, [r3, #4]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d00b      	beq.n	800a5b4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a5a2:	685b      	ldr	r3, [r3, #4]
 800a5a4:	687a      	ldr	r2, [r7, #4]
 800a5a6:	7c12      	ldrb	r2, [r2, #16]
 800a5a8:	f107 0108 	add.w	r1, r7, #8
 800a5ac:	4610      	mov	r0, r2
 800a5ae:	4798      	blx	r3
 800a5b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a5b2:	e091      	b.n	800a6d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a5b4:	6839      	ldr	r1, [r7, #0]
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	f000 fa97 	bl	800aaea <USBD_CtlError>
            err++;
 800a5bc:	7afb      	ldrb	r3, [r7, #11]
 800a5be:	3301      	adds	r3, #1
 800a5c0:	72fb      	strb	r3, [r7, #11]
          break;
 800a5c2:	e089      	b.n	800a6d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a5ca:	689b      	ldr	r3, [r3, #8]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d00b      	beq.n	800a5e8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a5d6:	689b      	ldr	r3, [r3, #8]
 800a5d8:	687a      	ldr	r2, [r7, #4]
 800a5da:	7c12      	ldrb	r2, [r2, #16]
 800a5dc:	f107 0108 	add.w	r1, r7, #8
 800a5e0:	4610      	mov	r0, r2
 800a5e2:	4798      	blx	r3
 800a5e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a5e6:	e077      	b.n	800a6d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a5e8:	6839      	ldr	r1, [r7, #0]
 800a5ea:	6878      	ldr	r0, [r7, #4]
 800a5ec:	f000 fa7d 	bl	800aaea <USBD_CtlError>
            err++;
 800a5f0:	7afb      	ldrb	r3, [r7, #11]
 800a5f2:	3301      	adds	r3, #1
 800a5f4:	72fb      	strb	r3, [r7, #11]
          break;
 800a5f6:	e06f      	b.n	800a6d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a5fe:	68db      	ldr	r3, [r3, #12]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d00b      	beq.n	800a61c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a60a:	68db      	ldr	r3, [r3, #12]
 800a60c:	687a      	ldr	r2, [r7, #4]
 800a60e:	7c12      	ldrb	r2, [r2, #16]
 800a610:	f107 0108 	add.w	r1, r7, #8
 800a614:	4610      	mov	r0, r2
 800a616:	4798      	blx	r3
 800a618:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a61a:	e05d      	b.n	800a6d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a61c:	6839      	ldr	r1, [r7, #0]
 800a61e:	6878      	ldr	r0, [r7, #4]
 800a620:	f000 fa63 	bl	800aaea <USBD_CtlError>
            err++;
 800a624:	7afb      	ldrb	r3, [r7, #11]
 800a626:	3301      	adds	r3, #1
 800a628:	72fb      	strb	r3, [r7, #11]
          break;
 800a62a:	e055      	b.n	800a6d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a632:	691b      	ldr	r3, [r3, #16]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d00b      	beq.n	800a650 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a63e:	691b      	ldr	r3, [r3, #16]
 800a640:	687a      	ldr	r2, [r7, #4]
 800a642:	7c12      	ldrb	r2, [r2, #16]
 800a644:	f107 0108 	add.w	r1, r7, #8
 800a648:	4610      	mov	r0, r2
 800a64a:	4798      	blx	r3
 800a64c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a64e:	e043      	b.n	800a6d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a650:	6839      	ldr	r1, [r7, #0]
 800a652:	6878      	ldr	r0, [r7, #4]
 800a654:	f000 fa49 	bl	800aaea <USBD_CtlError>
            err++;
 800a658:	7afb      	ldrb	r3, [r7, #11]
 800a65a:	3301      	adds	r3, #1
 800a65c:	72fb      	strb	r3, [r7, #11]
          break;
 800a65e:	e03b      	b.n	800a6d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a666:	695b      	ldr	r3, [r3, #20]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d00b      	beq.n	800a684 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a672:	695b      	ldr	r3, [r3, #20]
 800a674:	687a      	ldr	r2, [r7, #4]
 800a676:	7c12      	ldrb	r2, [r2, #16]
 800a678:	f107 0108 	add.w	r1, r7, #8
 800a67c:	4610      	mov	r0, r2
 800a67e:	4798      	blx	r3
 800a680:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a682:	e029      	b.n	800a6d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a684:	6839      	ldr	r1, [r7, #0]
 800a686:	6878      	ldr	r0, [r7, #4]
 800a688:	f000 fa2f 	bl	800aaea <USBD_CtlError>
            err++;
 800a68c:	7afb      	ldrb	r3, [r7, #11]
 800a68e:	3301      	adds	r3, #1
 800a690:	72fb      	strb	r3, [r7, #11]
          break;
 800a692:	e021      	b.n	800a6d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a69a:	699b      	ldr	r3, [r3, #24]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d00b      	beq.n	800a6b8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a6a6:	699b      	ldr	r3, [r3, #24]
 800a6a8:	687a      	ldr	r2, [r7, #4]
 800a6aa:	7c12      	ldrb	r2, [r2, #16]
 800a6ac:	f107 0108 	add.w	r1, r7, #8
 800a6b0:	4610      	mov	r0, r2
 800a6b2:	4798      	blx	r3
 800a6b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a6b6:	e00f      	b.n	800a6d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a6b8:	6839      	ldr	r1, [r7, #0]
 800a6ba:	6878      	ldr	r0, [r7, #4]
 800a6bc:	f000 fa15 	bl	800aaea <USBD_CtlError>
            err++;
 800a6c0:	7afb      	ldrb	r3, [r7, #11]
 800a6c2:	3301      	adds	r3, #1
 800a6c4:	72fb      	strb	r3, [r7, #11]
          break;
 800a6c6:	e007      	b.n	800a6d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800a6c8:	6839      	ldr	r1, [r7, #0]
 800a6ca:	6878      	ldr	r0, [r7, #4]
 800a6cc:	f000 fa0d 	bl	800aaea <USBD_CtlError>
          err++;
 800a6d0:	7afb      	ldrb	r3, [r7, #11]
 800a6d2:	3301      	adds	r3, #1
 800a6d4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800a6d6:	e038      	b.n	800a74a <USBD_GetDescriptor+0x286>
 800a6d8:	e037      	b.n	800a74a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	7c1b      	ldrb	r3, [r3, #16]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d109      	bne.n	800a6f6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a6e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6ea:	f107 0208 	add.w	r2, r7, #8
 800a6ee:	4610      	mov	r0, r2
 800a6f0:	4798      	blx	r3
 800a6f2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a6f4:	e029      	b.n	800a74a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a6f6:	6839      	ldr	r1, [r7, #0]
 800a6f8:	6878      	ldr	r0, [r7, #4]
 800a6fa:	f000 f9f6 	bl	800aaea <USBD_CtlError>
        err++;
 800a6fe:	7afb      	ldrb	r3, [r7, #11]
 800a700:	3301      	adds	r3, #1
 800a702:	72fb      	strb	r3, [r7, #11]
      break;
 800a704:	e021      	b.n	800a74a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	7c1b      	ldrb	r3, [r3, #16]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d10d      	bne.n	800a72a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a716:	f107 0208 	add.w	r2, r7, #8
 800a71a:	4610      	mov	r0, r2
 800a71c:	4798      	blx	r3
 800a71e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	3301      	adds	r3, #1
 800a724:	2207      	movs	r2, #7
 800a726:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a728:	e00f      	b.n	800a74a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a72a:	6839      	ldr	r1, [r7, #0]
 800a72c:	6878      	ldr	r0, [r7, #4]
 800a72e:	f000 f9dc 	bl	800aaea <USBD_CtlError>
        err++;
 800a732:	7afb      	ldrb	r3, [r7, #11]
 800a734:	3301      	adds	r3, #1
 800a736:	72fb      	strb	r3, [r7, #11]
      break;
 800a738:	e007      	b.n	800a74a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a73a:	6839      	ldr	r1, [r7, #0]
 800a73c:	6878      	ldr	r0, [r7, #4]
 800a73e:	f000 f9d4 	bl	800aaea <USBD_CtlError>
      err++;
 800a742:	7afb      	ldrb	r3, [r7, #11]
 800a744:	3301      	adds	r3, #1
 800a746:	72fb      	strb	r3, [r7, #11]
      break;
 800a748:	bf00      	nop
  }

  if (err != 0U)
 800a74a:	7afb      	ldrb	r3, [r7, #11]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d11c      	bne.n	800a78a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800a750:	893b      	ldrh	r3, [r7, #8]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d011      	beq.n	800a77a <USBD_GetDescriptor+0x2b6>
 800a756:	683b      	ldr	r3, [r7, #0]
 800a758:	88db      	ldrh	r3, [r3, #6]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d00d      	beq.n	800a77a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	88da      	ldrh	r2, [r3, #6]
 800a762:	893b      	ldrh	r3, [r7, #8]
 800a764:	4293      	cmp	r3, r2
 800a766:	bf28      	it	cs
 800a768:	4613      	movcs	r3, r2
 800a76a:	b29b      	uxth	r3, r3
 800a76c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a76e:	893b      	ldrh	r3, [r7, #8]
 800a770:	461a      	mov	r2, r3
 800a772:	68f9      	ldr	r1, [r7, #12]
 800a774:	6878      	ldr	r0, [r7, #4]
 800a776:	f000 fa22 	bl	800abbe <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800a77a:	683b      	ldr	r3, [r7, #0]
 800a77c:	88db      	ldrh	r3, [r3, #6]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d104      	bne.n	800a78c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800a782:	6878      	ldr	r0, [r7, #4]
 800a784:	f000 fa79 	bl	800ac7a <USBD_CtlSendStatus>
 800a788:	e000      	b.n	800a78c <USBD_GetDescriptor+0x2c8>
    return;
 800a78a:	bf00      	nop
    }
  }
}
 800a78c:	3710      	adds	r7, #16
 800a78e:	46bd      	mov	sp, r7
 800a790:	bd80      	pop	{r7, pc}
 800a792:	bf00      	nop

0800a794 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b084      	sub	sp, #16
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
 800a79c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a79e:	683b      	ldr	r3, [r7, #0]
 800a7a0:	889b      	ldrh	r3, [r3, #4]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d130      	bne.n	800a808 <USBD_SetAddress+0x74>
 800a7a6:	683b      	ldr	r3, [r7, #0]
 800a7a8:	88db      	ldrh	r3, [r3, #6]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d12c      	bne.n	800a808 <USBD_SetAddress+0x74>
 800a7ae:	683b      	ldr	r3, [r7, #0]
 800a7b0:	885b      	ldrh	r3, [r3, #2]
 800a7b2:	2b7f      	cmp	r3, #127	; 0x7f
 800a7b4:	d828      	bhi.n	800a808 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a7b6:	683b      	ldr	r3, [r7, #0]
 800a7b8:	885b      	ldrh	r3, [r3, #2]
 800a7ba:	b2db      	uxtb	r3, r3
 800a7bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a7c0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7c8:	2b03      	cmp	r3, #3
 800a7ca:	d104      	bne.n	800a7d6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800a7cc:	6839      	ldr	r1, [r7, #0]
 800a7ce:	6878      	ldr	r0, [r7, #4]
 800a7d0:	f000 f98b 	bl	800aaea <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7d4:	e01d      	b.n	800a812 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	7bfa      	ldrb	r2, [r7, #15]
 800a7da:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a7de:	7bfb      	ldrb	r3, [r7, #15]
 800a7e0:	4619      	mov	r1, r3
 800a7e2:	6878      	ldr	r0, [r7, #4]
 800a7e4:	f001 f89c 	bl	800b920 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800a7e8:	6878      	ldr	r0, [r7, #4]
 800a7ea:	f000 fa46 	bl	800ac7a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a7ee:	7bfb      	ldrb	r3, [r7, #15]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d004      	beq.n	800a7fe <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	2202      	movs	r2, #2
 800a7f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7fc:	e009      	b.n	800a812 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	2201      	movs	r2, #1
 800a802:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a806:	e004      	b.n	800a812 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a808:	6839      	ldr	r1, [r7, #0]
 800a80a:	6878      	ldr	r0, [r7, #4]
 800a80c:	f000 f96d 	bl	800aaea <USBD_CtlError>
  }
}
 800a810:	bf00      	nop
 800a812:	bf00      	nop
 800a814:	3710      	adds	r7, #16
 800a816:	46bd      	mov	sp, r7
 800a818:	bd80      	pop	{r7, pc}
	...

0800a81c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b082      	sub	sp, #8
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
 800a824:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a826:	683b      	ldr	r3, [r7, #0]
 800a828:	885b      	ldrh	r3, [r3, #2]
 800a82a:	b2da      	uxtb	r2, r3
 800a82c:	4b41      	ldr	r3, [pc, #260]	; (800a934 <USBD_SetConfig+0x118>)
 800a82e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a830:	4b40      	ldr	r3, [pc, #256]	; (800a934 <USBD_SetConfig+0x118>)
 800a832:	781b      	ldrb	r3, [r3, #0]
 800a834:	2b01      	cmp	r3, #1
 800a836:	d904      	bls.n	800a842 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800a838:	6839      	ldr	r1, [r7, #0]
 800a83a:	6878      	ldr	r0, [r7, #4]
 800a83c:	f000 f955 	bl	800aaea <USBD_CtlError>
 800a840:	e075      	b.n	800a92e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a848:	2b02      	cmp	r3, #2
 800a84a:	d002      	beq.n	800a852 <USBD_SetConfig+0x36>
 800a84c:	2b03      	cmp	r3, #3
 800a84e:	d023      	beq.n	800a898 <USBD_SetConfig+0x7c>
 800a850:	e062      	b.n	800a918 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800a852:	4b38      	ldr	r3, [pc, #224]	; (800a934 <USBD_SetConfig+0x118>)
 800a854:	781b      	ldrb	r3, [r3, #0]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d01a      	beq.n	800a890 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800a85a:	4b36      	ldr	r3, [pc, #216]	; (800a934 <USBD_SetConfig+0x118>)
 800a85c:	781b      	ldrb	r3, [r3, #0]
 800a85e:	461a      	mov	r2, r3
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	2203      	movs	r2, #3
 800a868:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a86c:	4b31      	ldr	r3, [pc, #196]	; (800a934 <USBD_SetConfig+0x118>)
 800a86e:	781b      	ldrb	r3, [r3, #0]
 800a870:	4619      	mov	r1, r3
 800a872:	6878      	ldr	r0, [r7, #4]
 800a874:	f7ff f9e7 	bl	8009c46 <USBD_SetClassConfig>
 800a878:	4603      	mov	r3, r0
 800a87a:	2b02      	cmp	r3, #2
 800a87c:	d104      	bne.n	800a888 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800a87e:	6839      	ldr	r1, [r7, #0]
 800a880:	6878      	ldr	r0, [r7, #4]
 800a882:	f000 f932 	bl	800aaea <USBD_CtlError>
            return;
 800a886:	e052      	b.n	800a92e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800a888:	6878      	ldr	r0, [r7, #4]
 800a88a:	f000 f9f6 	bl	800ac7a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a88e:	e04e      	b.n	800a92e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a890:	6878      	ldr	r0, [r7, #4]
 800a892:	f000 f9f2 	bl	800ac7a <USBD_CtlSendStatus>
        break;
 800a896:	e04a      	b.n	800a92e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800a898:	4b26      	ldr	r3, [pc, #152]	; (800a934 <USBD_SetConfig+0x118>)
 800a89a:	781b      	ldrb	r3, [r3, #0]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d112      	bne.n	800a8c6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2202      	movs	r2, #2
 800a8a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800a8a8:	4b22      	ldr	r3, [pc, #136]	; (800a934 <USBD_SetConfig+0x118>)
 800a8aa:	781b      	ldrb	r3, [r3, #0]
 800a8ac:	461a      	mov	r2, r3
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800a8b2:	4b20      	ldr	r3, [pc, #128]	; (800a934 <USBD_SetConfig+0x118>)
 800a8b4:	781b      	ldrb	r3, [r3, #0]
 800a8b6:	4619      	mov	r1, r3
 800a8b8:	6878      	ldr	r0, [r7, #4]
 800a8ba:	f7ff f9e3 	bl	8009c84 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800a8be:	6878      	ldr	r0, [r7, #4]
 800a8c0:	f000 f9db 	bl	800ac7a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a8c4:	e033      	b.n	800a92e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800a8c6:	4b1b      	ldr	r3, [pc, #108]	; (800a934 <USBD_SetConfig+0x118>)
 800a8c8:	781b      	ldrb	r3, [r3, #0]
 800a8ca:	461a      	mov	r2, r3
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	685b      	ldr	r3, [r3, #4]
 800a8d0:	429a      	cmp	r2, r3
 800a8d2:	d01d      	beq.n	800a910 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	685b      	ldr	r3, [r3, #4]
 800a8d8:	b2db      	uxtb	r3, r3
 800a8da:	4619      	mov	r1, r3
 800a8dc:	6878      	ldr	r0, [r7, #4]
 800a8de:	f7ff f9d1 	bl	8009c84 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800a8e2:	4b14      	ldr	r3, [pc, #80]	; (800a934 <USBD_SetConfig+0x118>)
 800a8e4:	781b      	ldrb	r3, [r3, #0]
 800a8e6:	461a      	mov	r2, r3
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a8ec:	4b11      	ldr	r3, [pc, #68]	; (800a934 <USBD_SetConfig+0x118>)
 800a8ee:	781b      	ldrb	r3, [r3, #0]
 800a8f0:	4619      	mov	r1, r3
 800a8f2:	6878      	ldr	r0, [r7, #4]
 800a8f4:	f7ff f9a7 	bl	8009c46 <USBD_SetClassConfig>
 800a8f8:	4603      	mov	r3, r0
 800a8fa:	2b02      	cmp	r3, #2
 800a8fc:	d104      	bne.n	800a908 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800a8fe:	6839      	ldr	r1, [r7, #0]
 800a900:	6878      	ldr	r0, [r7, #4]
 800a902:	f000 f8f2 	bl	800aaea <USBD_CtlError>
            return;
 800a906:	e012      	b.n	800a92e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a908:	6878      	ldr	r0, [r7, #4]
 800a90a:	f000 f9b6 	bl	800ac7a <USBD_CtlSendStatus>
        break;
 800a90e:	e00e      	b.n	800a92e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a910:	6878      	ldr	r0, [r7, #4]
 800a912:	f000 f9b2 	bl	800ac7a <USBD_CtlSendStatus>
        break;
 800a916:	e00a      	b.n	800a92e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800a918:	6839      	ldr	r1, [r7, #0]
 800a91a:	6878      	ldr	r0, [r7, #4]
 800a91c:	f000 f8e5 	bl	800aaea <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800a920:	4b04      	ldr	r3, [pc, #16]	; (800a934 <USBD_SetConfig+0x118>)
 800a922:	781b      	ldrb	r3, [r3, #0]
 800a924:	4619      	mov	r1, r3
 800a926:	6878      	ldr	r0, [r7, #4]
 800a928:	f7ff f9ac 	bl	8009c84 <USBD_ClrClassConfig>
        break;
 800a92c:	bf00      	nop
    }
  }
}
 800a92e:	3708      	adds	r7, #8
 800a930:	46bd      	mov	sp, r7
 800a932:	bd80      	pop	{r7, pc}
 800a934:	200003ac 	.word	0x200003ac

0800a938 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b082      	sub	sp, #8
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
 800a940:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a942:	683b      	ldr	r3, [r7, #0]
 800a944:	88db      	ldrh	r3, [r3, #6]
 800a946:	2b01      	cmp	r3, #1
 800a948:	d004      	beq.n	800a954 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a94a:	6839      	ldr	r1, [r7, #0]
 800a94c:	6878      	ldr	r0, [r7, #4]
 800a94e:	f000 f8cc 	bl	800aaea <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a952:	e022      	b.n	800a99a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a95a:	2b02      	cmp	r3, #2
 800a95c:	dc02      	bgt.n	800a964 <USBD_GetConfig+0x2c>
 800a95e:	2b00      	cmp	r3, #0
 800a960:	dc03      	bgt.n	800a96a <USBD_GetConfig+0x32>
 800a962:	e015      	b.n	800a990 <USBD_GetConfig+0x58>
 800a964:	2b03      	cmp	r3, #3
 800a966:	d00b      	beq.n	800a980 <USBD_GetConfig+0x48>
 800a968:	e012      	b.n	800a990 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	2200      	movs	r2, #0
 800a96e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	3308      	adds	r3, #8
 800a974:	2201      	movs	r2, #1
 800a976:	4619      	mov	r1, r3
 800a978:	6878      	ldr	r0, [r7, #4]
 800a97a:	f000 f920 	bl	800abbe <USBD_CtlSendData>
        break;
 800a97e:	e00c      	b.n	800a99a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	3304      	adds	r3, #4
 800a984:	2201      	movs	r2, #1
 800a986:	4619      	mov	r1, r3
 800a988:	6878      	ldr	r0, [r7, #4]
 800a98a:	f000 f918 	bl	800abbe <USBD_CtlSendData>
        break;
 800a98e:	e004      	b.n	800a99a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800a990:	6839      	ldr	r1, [r7, #0]
 800a992:	6878      	ldr	r0, [r7, #4]
 800a994:	f000 f8a9 	bl	800aaea <USBD_CtlError>
        break;
 800a998:	bf00      	nop
}
 800a99a:	bf00      	nop
 800a99c:	3708      	adds	r7, #8
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	bd80      	pop	{r7, pc}

0800a9a2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a9a2:	b580      	push	{r7, lr}
 800a9a4:	b082      	sub	sp, #8
 800a9a6:	af00      	add	r7, sp, #0
 800a9a8:	6078      	str	r0, [r7, #4]
 800a9aa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9b2:	3b01      	subs	r3, #1
 800a9b4:	2b02      	cmp	r3, #2
 800a9b6:	d81e      	bhi.n	800a9f6 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	88db      	ldrh	r3, [r3, #6]
 800a9bc:	2b02      	cmp	r3, #2
 800a9be:	d004      	beq.n	800a9ca <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800a9c0:	6839      	ldr	r1, [r7, #0]
 800a9c2:	6878      	ldr	r0, [r7, #4]
 800a9c4:	f000 f891 	bl	800aaea <USBD_CtlError>
        break;
 800a9c8:	e01a      	b.n	800aa00 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	2201      	movs	r2, #1
 800a9ce:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d005      	beq.n	800a9e6 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	68db      	ldr	r3, [r3, #12]
 800a9de:	f043 0202 	orr.w	r2, r3, #2
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	330c      	adds	r3, #12
 800a9ea:	2202      	movs	r2, #2
 800a9ec:	4619      	mov	r1, r3
 800a9ee:	6878      	ldr	r0, [r7, #4]
 800a9f0:	f000 f8e5 	bl	800abbe <USBD_CtlSendData>
      break;
 800a9f4:	e004      	b.n	800aa00 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800a9f6:	6839      	ldr	r1, [r7, #0]
 800a9f8:	6878      	ldr	r0, [r7, #4]
 800a9fa:	f000 f876 	bl	800aaea <USBD_CtlError>
      break;
 800a9fe:	bf00      	nop
  }
}
 800aa00:	bf00      	nop
 800aa02:	3708      	adds	r7, #8
 800aa04:	46bd      	mov	sp, r7
 800aa06:	bd80      	pop	{r7, pc}

0800aa08 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b082      	sub	sp, #8
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
 800aa10:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800aa12:	683b      	ldr	r3, [r7, #0]
 800aa14:	885b      	ldrh	r3, [r3, #2]
 800aa16:	2b01      	cmp	r3, #1
 800aa18:	d106      	bne.n	800aa28 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	2201      	movs	r2, #1
 800aa1e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800aa22:	6878      	ldr	r0, [r7, #4]
 800aa24:	f000 f929 	bl	800ac7a <USBD_CtlSendStatus>
  }
}
 800aa28:	bf00      	nop
 800aa2a:	3708      	adds	r7, #8
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	bd80      	pop	{r7, pc}

0800aa30 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b082      	sub	sp, #8
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	6078      	str	r0, [r7, #4]
 800aa38:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa40:	3b01      	subs	r3, #1
 800aa42:	2b02      	cmp	r3, #2
 800aa44:	d80b      	bhi.n	800aa5e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800aa46:	683b      	ldr	r3, [r7, #0]
 800aa48:	885b      	ldrh	r3, [r3, #2]
 800aa4a:	2b01      	cmp	r3, #1
 800aa4c:	d10c      	bne.n	800aa68 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	2200      	movs	r2, #0
 800aa52:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800aa56:	6878      	ldr	r0, [r7, #4]
 800aa58:	f000 f90f 	bl	800ac7a <USBD_CtlSendStatus>
      }
      break;
 800aa5c:	e004      	b.n	800aa68 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800aa5e:	6839      	ldr	r1, [r7, #0]
 800aa60:	6878      	ldr	r0, [r7, #4]
 800aa62:	f000 f842 	bl	800aaea <USBD_CtlError>
      break;
 800aa66:	e000      	b.n	800aa6a <USBD_ClrFeature+0x3a>
      break;
 800aa68:	bf00      	nop
  }
}
 800aa6a:	bf00      	nop
 800aa6c:	3708      	adds	r7, #8
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	bd80      	pop	{r7, pc}

0800aa72 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800aa72:	b480      	push	{r7}
 800aa74:	b083      	sub	sp, #12
 800aa76:	af00      	add	r7, sp, #0
 800aa78:	6078      	str	r0, [r7, #4]
 800aa7a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	781a      	ldrb	r2, [r3, #0]
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800aa84:	683b      	ldr	r3, [r7, #0]
 800aa86:	785a      	ldrb	r2, [r3, #1]
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800aa8c:	683b      	ldr	r3, [r7, #0]
 800aa8e:	3302      	adds	r3, #2
 800aa90:	781b      	ldrb	r3, [r3, #0]
 800aa92:	b29a      	uxth	r2, r3
 800aa94:	683b      	ldr	r3, [r7, #0]
 800aa96:	3303      	adds	r3, #3
 800aa98:	781b      	ldrb	r3, [r3, #0]
 800aa9a:	b29b      	uxth	r3, r3
 800aa9c:	021b      	lsls	r3, r3, #8
 800aa9e:	b29b      	uxth	r3, r3
 800aaa0:	4413      	add	r3, r2
 800aaa2:	b29a      	uxth	r2, r3
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800aaa8:	683b      	ldr	r3, [r7, #0]
 800aaaa:	3304      	adds	r3, #4
 800aaac:	781b      	ldrb	r3, [r3, #0]
 800aaae:	b29a      	uxth	r2, r3
 800aab0:	683b      	ldr	r3, [r7, #0]
 800aab2:	3305      	adds	r3, #5
 800aab4:	781b      	ldrb	r3, [r3, #0]
 800aab6:	b29b      	uxth	r3, r3
 800aab8:	021b      	lsls	r3, r3, #8
 800aaba:	b29b      	uxth	r3, r3
 800aabc:	4413      	add	r3, r2
 800aabe:	b29a      	uxth	r2, r3
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	3306      	adds	r3, #6
 800aac8:	781b      	ldrb	r3, [r3, #0]
 800aaca:	b29a      	uxth	r2, r3
 800aacc:	683b      	ldr	r3, [r7, #0]
 800aace:	3307      	adds	r3, #7
 800aad0:	781b      	ldrb	r3, [r3, #0]
 800aad2:	b29b      	uxth	r3, r3
 800aad4:	021b      	lsls	r3, r3, #8
 800aad6:	b29b      	uxth	r3, r3
 800aad8:	4413      	add	r3, r2
 800aada:	b29a      	uxth	r2, r3
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	80da      	strh	r2, [r3, #6]

}
 800aae0:	bf00      	nop
 800aae2:	370c      	adds	r7, #12
 800aae4:	46bd      	mov	sp, r7
 800aae6:	bc80      	pop	{r7}
 800aae8:	4770      	bx	lr

0800aaea <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800aaea:	b580      	push	{r7, lr}
 800aaec:	b082      	sub	sp, #8
 800aaee:	af00      	add	r7, sp, #0
 800aaf0:	6078      	str	r0, [r7, #4]
 800aaf2:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800aaf4:	2180      	movs	r1, #128	; 0x80
 800aaf6:	6878      	ldr	r0, [r7, #4]
 800aaf8:	f000 fea8 	bl	800b84c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800aafc:	2100      	movs	r1, #0
 800aafe:	6878      	ldr	r0, [r7, #4]
 800ab00:	f000 fea4 	bl	800b84c <USBD_LL_StallEP>
}
 800ab04:	bf00      	nop
 800ab06:	3708      	adds	r7, #8
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	bd80      	pop	{r7, pc}

0800ab0c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b086      	sub	sp, #24
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	60f8      	str	r0, [r7, #12]
 800ab14:	60b9      	str	r1, [r7, #8]
 800ab16:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ab18:	2300      	movs	r3, #0
 800ab1a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d032      	beq.n	800ab88 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800ab22:	68f8      	ldr	r0, [r7, #12]
 800ab24:	f000 f834 	bl	800ab90 <USBD_GetLen>
 800ab28:	4603      	mov	r3, r0
 800ab2a:	3301      	adds	r3, #1
 800ab2c:	b29b      	uxth	r3, r3
 800ab2e:	005b      	lsls	r3, r3, #1
 800ab30:	b29a      	uxth	r2, r3
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800ab36:	7dfb      	ldrb	r3, [r7, #23]
 800ab38:	1c5a      	adds	r2, r3, #1
 800ab3a:	75fa      	strb	r2, [r7, #23]
 800ab3c:	461a      	mov	r2, r3
 800ab3e:	68bb      	ldr	r3, [r7, #8]
 800ab40:	4413      	add	r3, r2
 800ab42:	687a      	ldr	r2, [r7, #4]
 800ab44:	7812      	ldrb	r2, [r2, #0]
 800ab46:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800ab48:	7dfb      	ldrb	r3, [r7, #23]
 800ab4a:	1c5a      	adds	r2, r3, #1
 800ab4c:	75fa      	strb	r2, [r7, #23]
 800ab4e:	461a      	mov	r2, r3
 800ab50:	68bb      	ldr	r3, [r7, #8]
 800ab52:	4413      	add	r3, r2
 800ab54:	2203      	movs	r2, #3
 800ab56:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800ab58:	e012      	b.n	800ab80 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	1c5a      	adds	r2, r3, #1
 800ab5e:	60fa      	str	r2, [r7, #12]
 800ab60:	7dfa      	ldrb	r2, [r7, #23]
 800ab62:	1c51      	adds	r1, r2, #1
 800ab64:	75f9      	strb	r1, [r7, #23]
 800ab66:	4611      	mov	r1, r2
 800ab68:	68ba      	ldr	r2, [r7, #8]
 800ab6a:	440a      	add	r2, r1
 800ab6c:	781b      	ldrb	r3, [r3, #0]
 800ab6e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800ab70:	7dfb      	ldrb	r3, [r7, #23]
 800ab72:	1c5a      	adds	r2, r3, #1
 800ab74:	75fa      	strb	r2, [r7, #23]
 800ab76:	461a      	mov	r2, r3
 800ab78:	68bb      	ldr	r3, [r7, #8]
 800ab7a:	4413      	add	r3, r2
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	781b      	ldrb	r3, [r3, #0]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d1e8      	bne.n	800ab5a <USBD_GetString+0x4e>
    }
  }
}
 800ab88:	bf00      	nop
 800ab8a:	3718      	adds	r7, #24
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	bd80      	pop	{r7, pc}

0800ab90 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ab90:	b480      	push	{r7}
 800ab92:	b085      	sub	sp, #20
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ab98:	2300      	movs	r3, #0
 800ab9a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800ab9c:	e005      	b.n	800abaa <USBD_GetLen+0x1a>
  {
    len++;
 800ab9e:	7bfb      	ldrb	r3, [r7, #15]
 800aba0:	3301      	adds	r3, #1
 800aba2:	73fb      	strb	r3, [r7, #15]
    buf++;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	3301      	adds	r3, #1
 800aba8:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	781b      	ldrb	r3, [r3, #0]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d1f5      	bne.n	800ab9e <USBD_GetLen+0xe>
  }

  return len;
 800abb2:	7bfb      	ldrb	r3, [r7, #15]
}
 800abb4:	4618      	mov	r0, r3
 800abb6:	3714      	adds	r7, #20
 800abb8:	46bd      	mov	sp, r7
 800abba:	bc80      	pop	{r7}
 800abbc:	4770      	bx	lr

0800abbe <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800abbe:	b580      	push	{r7, lr}
 800abc0:	b084      	sub	sp, #16
 800abc2:	af00      	add	r7, sp, #0
 800abc4:	60f8      	str	r0, [r7, #12]
 800abc6:	60b9      	str	r1, [r7, #8]
 800abc8:	4613      	mov	r3, r2
 800abca:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	2202      	movs	r2, #2
 800abd0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800abd4:	88fa      	ldrh	r2, [r7, #6]
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800abda:	88fa      	ldrh	r2, [r7, #6]
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800abe0:	88fb      	ldrh	r3, [r7, #6]
 800abe2:	68ba      	ldr	r2, [r7, #8]
 800abe4:	2100      	movs	r1, #0
 800abe6:	68f8      	ldr	r0, [r7, #12]
 800abe8:	f000 feb9 	bl	800b95e <USBD_LL_Transmit>

  return USBD_OK;
 800abec:	2300      	movs	r3, #0
}
 800abee:	4618      	mov	r0, r3
 800abf0:	3710      	adds	r7, #16
 800abf2:	46bd      	mov	sp, r7
 800abf4:	bd80      	pop	{r7, pc}

0800abf6 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800abf6:	b580      	push	{r7, lr}
 800abf8:	b084      	sub	sp, #16
 800abfa:	af00      	add	r7, sp, #0
 800abfc:	60f8      	str	r0, [r7, #12]
 800abfe:	60b9      	str	r1, [r7, #8]
 800ac00:	4613      	mov	r3, r2
 800ac02:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ac04:	88fb      	ldrh	r3, [r7, #6]
 800ac06:	68ba      	ldr	r2, [r7, #8]
 800ac08:	2100      	movs	r1, #0
 800ac0a:	68f8      	ldr	r0, [r7, #12]
 800ac0c:	f000 fea7 	bl	800b95e <USBD_LL_Transmit>

  return USBD_OK;
 800ac10:	2300      	movs	r3, #0
}
 800ac12:	4618      	mov	r0, r3
 800ac14:	3710      	adds	r7, #16
 800ac16:	46bd      	mov	sp, r7
 800ac18:	bd80      	pop	{r7, pc}

0800ac1a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800ac1a:	b580      	push	{r7, lr}
 800ac1c:	b084      	sub	sp, #16
 800ac1e:	af00      	add	r7, sp, #0
 800ac20:	60f8      	str	r0, [r7, #12]
 800ac22:	60b9      	str	r1, [r7, #8]
 800ac24:	4613      	mov	r3, r2
 800ac26:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	2203      	movs	r2, #3
 800ac2c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800ac30:	88fa      	ldrh	r2, [r7, #6]
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800ac38:	88fa      	ldrh	r2, [r7, #6]
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ac40:	88fb      	ldrh	r3, [r7, #6]
 800ac42:	68ba      	ldr	r2, [r7, #8]
 800ac44:	2100      	movs	r1, #0
 800ac46:	68f8      	ldr	r0, [r7, #12]
 800ac48:	f000 feac 	bl	800b9a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ac4c:	2300      	movs	r3, #0
}
 800ac4e:	4618      	mov	r0, r3
 800ac50:	3710      	adds	r7, #16
 800ac52:	46bd      	mov	sp, r7
 800ac54:	bd80      	pop	{r7, pc}

0800ac56 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800ac56:	b580      	push	{r7, lr}
 800ac58:	b084      	sub	sp, #16
 800ac5a:	af00      	add	r7, sp, #0
 800ac5c:	60f8      	str	r0, [r7, #12]
 800ac5e:	60b9      	str	r1, [r7, #8]
 800ac60:	4613      	mov	r3, r2
 800ac62:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ac64:	88fb      	ldrh	r3, [r7, #6]
 800ac66:	68ba      	ldr	r2, [r7, #8]
 800ac68:	2100      	movs	r1, #0
 800ac6a:	68f8      	ldr	r0, [r7, #12]
 800ac6c:	f000 fe9a 	bl	800b9a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ac70:	2300      	movs	r3, #0
}
 800ac72:	4618      	mov	r0, r3
 800ac74:	3710      	adds	r7, #16
 800ac76:	46bd      	mov	sp, r7
 800ac78:	bd80      	pop	{r7, pc}

0800ac7a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ac7a:	b580      	push	{r7, lr}
 800ac7c:	b082      	sub	sp, #8
 800ac7e:	af00      	add	r7, sp, #0
 800ac80:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	2204      	movs	r2, #4
 800ac86:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	2100      	movs	r1, #0
 800ac90:	6878      	ldr	r0, [r7, #4]
 800ac92:	f000 fe64 	bl	800b95e <USBD_LL_Transmit>

  return USBD_OK;
 800ac96:	2300      	movs	r3, #0
}
 800ac98:	4618      	mov	r0, r3
 800ac9a:	3708      	adds	r7, #8
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	bd80      	pop	{r7, pc}

0800aca0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b082      	sub	sp, #8
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2205      	movs	r2, #5
 800acac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800acb0:	2300      	movs	r3, #0
 800acb2:	2200      	movs	r2, #0
 800acb4:	2100      	movs	r1, #0
 800acb6:	6878      	ldr	r0, [r7, #4]
 800acb8:	f000 fe74 	bl	800b9a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800acbc:	2300      	movs	r3, #0
}
 800acbe:	4618      	mov	r0, r3
 800acc0:	3708      	adds	r7, #8
 800acc2:	46bd      	mov	sp, r7
 800acc4:	bd80      	pop	{r7, pc}
	...

0800acc8 <Queue_Init>:

#include "main.h"
static void EmptyFreeNodeFunction(Queue_Node *sNode);

Queue *Queue_Init()
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b082      	sub	sp, #8
 800accc:	af00      	add	r7, sp, #0
    Queue *sQueue = (Queue *)malloc(sizeof(Queue));
 800acce:	2010      	movs	r0, #16
 800acd0:	f000 feea 	bl	800baa8 <malloc>
 800acd4:	4603      	mov	r3, r0
 800acd6:	607b      	str	r3, [r7, #4]
    sQueue->sHead = NULL;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2200      	movs	r2, #0
 800acdc:	605a      	str	r2, [r3, #4]
    sQueue->u8Size = 0;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	2200      	movs	r2, #0
 800ace2:	701a      	strb	r2, [r3, #0]
    sQueue->sTail = NULL;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	2200      	movs	r2, #0
 800ace8:	609a      	str	r2, [r3, #8]
    sQueue->fFreeNode = EmptyFreeNodeFunction;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	4a03      	ldr	r2, [pc, #12]	; (800acfc <Queue_Init+0x34>)
 800acee:	60da      	str	r2, [r3, #12]
    return sQueue;
 800acf0:	687b      	ldr	r3, [r7, #4]
}
 800acf2:	4618      	mov	r0, r3
 800acf4:	3708      	adds	r7, #8
 800acf6:	46bd      	mov	sp, r7
 800acf8:	bd80      	pop	{r7, pc}
 800acfa:	bf00      	nop
 800acfc:	0800addf 	.word	0x0800addf

0800ad00 <Queue_SetFreeElement>:

void Queue_SetFreeElement(Queue *sQueue, QueueNodeFreeFunction fFreeElementFunction)
{
 800ad00:	b480      	push	{r7}
 800ad02:	b083      	sub	sp, #12
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
 800ad08:	6039      	str	r1, [r7, #0]
    sQueue->fFreeNode = fFreeElementFunction;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	683a      	ldr	r2, [r7, #0]
 800ad0e:	60da      	str	r2, [r3, #12]
}
 800ad10:	bf00      	nop
 800ad12:	370c      	adds	r7, #12
 800ad14:	46bd      	mov	sp, r7
 800ad16:	bc80      	pop	{r7}
 800ad18:	4770      	bx	lr

0800ad1a <Queue_IsEmpty>:

    free(sQueue);
}

uint8_t Queue_IsEmpty(Queue *sQueue)
{
 800ad1a:	b480      	push	{r7}
 800ad1c:	b083      	sub	sp, #12
 800ad1e:	af00      	add	r7, sp, #0
 800ad20:	6078      	str	r0, [r7, #4]
    return (sQueue->u8Size == 0) * QUEUE_BOOL_TRUE + (1 - (sQueue->u8Size == 0)) * QUEUE_BOOL_FALSE;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	781b      	ldrb	r3, [r3, #0]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	bf0c      	ite	eq
 800ad2a:	2301      	moveq	r3, #1
 800ad2c:	2300      	movne	r3, #0
 800ad2e:	b2db      	uxtb	r3, r3
}
 800ad30:	4618      	mov	r0, r3
 800ad32:	370c      	adds	r7, #12
 800ad34:	46bd      	mov	sp, r7
 800ad36:	bc80      	pop	{r7}
 800ad38:	4770      	bx	lr

0800ad3a <Queue_EnQueue>:

void Queue_EnQueue(Queue *sQueue, void *data)
{
 800ad3a:	b580      	push	{r7, lr}
 800ad3c:	b084      	sub	sp, #16
 800ad3e:	af00      	add	r7, sp, #0
 800ad40:	6078      	str	r0, [r7, #4]
 800ad42:	6039      	str	r1, [r7, #0]
    Queue_Node *sNewNode = (Queue_Node *)malloc(sizeof(Queue_Node));
 800ad44:	2008      	movs	r0, #8
 800ad46:	f000 feaf 	bl	800baa8 <malloc>
 800ad4a:	4603      	mov	r3, r0
 800ad4c:	60fb      	str	r3, [r7, #12]
    sNewNode->pData = data;
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	683a      	ldr	r2, [r7, #0]
 800ad52:	601a      	str	r2, [r3, #0]
    sNewNode->sNextNode = NULL;
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	2200      	movs	r2, #0
 800ad58:	605a      	str	r2, [r3, #4]

    if (sQueue->u8Size == 0)
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	781b      	ldrb	r3, [r3, #0]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d106      	bne.n	800ad70 <Queue_EnQueue+0x36>
    {
        sQueue->sHead = sNewNode;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	68fa      	ldr	r2, [r7, #12]
 800ad66:	605a      	str	r2, [r3, #4]
        sQueue->sTail = sNewNode;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	68fa      	ldr	r2, [r7, #12]
 800ad6c:	609a      	str	r2, [r3, #8]
 800ad6e:	e003      	b.n	800ad78 <Queue_EnQueue+0x3e>
    }
    else
    {
        sQueue->sTail->sNextNode = sNewNode;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	689b      	ldr	r3, [r3, #8]
 800ad74:	68fa      	ldr	r2, [r7, #12]
 800ad76:	605a      	str	r2, [r3, #4]
    }

    sQueue->u8Size++;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	781b      	ldrb	r3, [r3, #0]
 800ad7c:	3301      	adds	r3, #1
 800ad7e:	b2da      	uxtb	r2, r3
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	701a      	strb	r2, [r3, #0]
}
 800ad84:	bf00      	nop
 800ad86:	3710      	adds	r7, #16
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	bd80      	pop	{r7, pc}

0800ad8c <Queue_DeQueue>:

void *Queue_DeQueue(Queue *sQueue)
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b084      	sub	sp, #16
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
    void *pData = sQueue->sHead->pData;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	685b      	ldr	r3, [r3, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	60fb      	str	r3, [r7, #12]
    Queue_Node *sHead = sQueue->sHead;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	685b      	ldr	r3, [r3, #4]
 800ada0:	60bb      	str	r3, [r7, #8]

    if (sQueue->u8Size == 1)
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	781b      	ldrb	r3, [r3, #0]
 800ada6:	2b01      	cmp	r3, #1
 800ada8:	d106      	bne.n	800adb8 <Queue_DeQueue+0x2c>
    {
        sQueue->sHead = NULL;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	2200      	movs	r2, #0
 800adae:	605a      	str	r2, [r3, #4]
        sQueue->sTail = NULL;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	2200      	movs	r2, #0
 800adb4:	609a      	str	r2, [r3, #8]
 800adb6:	e004      	b.n	800adc2 <Queue_DeQueue+0x36>
    }
    else
    {
        sQueue->sHead = sQueue->sHead->sNextNode;
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	685b      	ldr	r3, [r3, #4]
 800adbc:	685a      	ldr	r2, [r3, #4]
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	605a      	str	r2, [r3, #4]
    }

    sQueue->u8Size--;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	781b      	ldrb	r3, [r3, #0]
 800adc6:	3b01      	subs	r3, #1
 800adc8:	b2da      	uxtb	r2, r3
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	701a      	strb	r2, [r3, #0]
    free(sHead);
 800adce:	68b8      	ldr	r0, [r7, #8]
 800add0:	f000 fe72 	bl	800bab8 <free>
    return pData;
 800add4:	68fb      	ldr	r3, [r7, #12]
}
 800add6:	4618      	mov	r0, r3
 800add8:	3710      	adds	r7, #16
 800adda:	46bd      	mov	sp, r7
 800addc:	bd80      	pop	{r7, pc}

0800adde <EmptyFreeNodeFunction>:

void EmptyFreeNodeFunction(Queue_Node *sNode)
{
 800adde:	b480      	push	{r7}
 800ade0:	b083      	sub	sp, #12
 800ade2:	af00      	add	r7, sp, #0
 800ade4:	6078      	str	r0, [r7, #4]
}
 800ade6:	bf00      	nop
 800ade8:	370c      	adds	r7, #12
 800adea:	46bd      	mov	sp, r7
 800adec:	bc80      	pop	{r7}
 800adee:	4770      	bx	lr

0800adf0 <NodeFreeElement>:
#include "main.h"

static LinkList *m_sSensors;

static void NodeFreeElement(LinkList_Node *sNode)
{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b082      	sub	sp, #8
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
    free(((Sensor *)sNode->pData));
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	4618      	mov	r0, r3
 800adfe:	f000 fe5b 	bl	800bab8 <free>
}
 800ae02:	bf00      	nop
 800ae04:	3708      	adds	r7, #8
 800ae06:	46bd      	mov	sp, r7
 800ae08:	bd80      	pop	{r7, pc}
	...

0800ae0c <Sensors_Init>:

void Sensors_Init()
{
 800ae0c:	b580      	push	{r7, lr}
 800ae0e:	af00      	add	r7, sp, #0
    m_sSensors = LinkList_Init();
 800ae10:	f7fe fb0e 	bl	8009430 <LinkList_Init>
 800ae14:	4603      	mov	r3, r0
 800ae16:	4a05      	ldr	r2, [pc, #20]	; (800ae2c <Sensors_Init+0x20>)
 800ae18:	6013      	str	r3, [r2, #0]
    LinkList_SetFreeElement(m_sSensors, NodeFreeElement);
 800ae1a:	4b04      	ldr	r3, [pc, #16]	; (800ae2c <Sensors_Init+0x20>)
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	4904      	ldr	r1, [pc, #16]	; (800ae30 <Sensors_Init+0x24>)
 800ae20:	4618      	mov	r0, r3
 800ae22:	f7fe fb98 	bl	8009556 <LinkList_SetFreeElement>
}
 800ae26:	bf00      	nop
 800ae28:	bd80      	pop	{r7, pc}
 800ae2a:	bf00      	nop
 800ae2c:	200003b0 	.word	0x200003b0
 800ae30:	0800adf1 	.word	0x0800adf1

0800ae34 <Sensors_AddSensors>:
{
    LinkList_Release(m_sSensors);
}

void Sensors_AddSensors(char *chName)
{
 800ae34:	b590      	push	{r4, r7, lr}
 800ae36:	b085      	sub	sp, #20
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
    Sensor *sSensor = (Sensor *)malloc(sizeof(Sensor));
 800ae3c:	202f      	movs	r0, #47	; 0x2f
 800ae3e:	f000 fe33 	bl	800baa8 <malloc>
 800ae42:	4603      	mov	r3, r0
 800ae44:	60fb      	str	r3, [r7, #12]
    memset(sSensor->chName, 0, sizeof(sSensor->chName));
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	220c      	movs	r2, #12
 800ae4a:	2100      	movs	r1, #0
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	f001 f937 	bl	800c0c0 <memset>
    memcpy(sSensor->chName, chName, strlen(chName));
 800ae52:	68fc      	ldr	r4, [r7, #12]
 800ae54:	6878      	ldr	r0, [r7, #4]
 800ae56:	f7f5 f983 	bl	8000160 <strlen>
 800ae5a:	4603      	mov	r3, r0
 800ae5c:	461a      	mov	r2, r3
 800ae5e:	6879      	ldr	r1, [r7, #4]
 800ae60:	4620      	mov	r0, r4
 800ae62:	f001 fa2f 	bl	800c2c4 <memcpy>

    LinkList_Append(m_sSensors, sSensor);
 800ae66:	4b05      	ldr	r3, [pc, #20]	; (800ae7c <Sensors_AddSensors+0x48>)
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	68f9      	ldr	r1, [r7, #12]
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	f7fe fb24 	bl	80094ba <LinkList_Append>
}
 800ae72:	bf00      	nop
 800ae74:	3714      	adds	r7, #20
 800ae76:	46bd      	mov	sp, r7
 800ae78:	bd90      	pop	{r4, r7, pc}
 800ae7a:	bf00      	nop
 800ae7c:	200003b0 	.word	0x200003b0

0800ae80 <Sensors_Length>:
{
    LinkList_Delete(m_sSensors, u8Index);
}

uint8_t Sensors_Length()
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	af00      	add	r7, sp, #0
    return LinkList_GetSize(m_sSensors);
 800ae84:	4b03      	ldr	r3, [pc, #12]	; (800ae94 <Sensors_Length+0x14>)
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	4618      	mov	r0, r3
 800ae8a:	f7fe fb0b 	bl	80094a4 <LinkList_GetSize>
 800ae8e:	4603      	mov	r3, r0
}
 800ae90:	4618      	mov	r0, r3
 800ae92:	bd80      	pop	{r7, pc}
 800ae94:	200003b0 	.word	0x200003b0

0800ae98 <Sensors_ForEach>:

void Sensors_ForEach(ForEach fCallback)
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b084      	sub	sp, #16
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < LinkList_GetSize(m_sSensors); i++)
 800aea0:	2300      	movs	r3, #0
 800aea2:	60fb      	str	r3, [r7, #12]
 800aea4:	e00e      	b.n	800aec4 <Sensors_ForEach+0x2c>
    {
        Sensor *sSensor = (Sensor *)LinkList_Get(m_sSensors, i);
 800aea6:	4b0f      	ldr	r3, [pc, #60]	; (800aee4 <Sensors_ForEach+0x4c>)
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	68fa      	ldr	r2, [r7, #12]
 800aeac:	b2d2      	uxtb	r2, r2
 800aeae:	4611      	mov	r1, r2
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	f7fe fb2e 	bl	8009512 <LinkList_Get>
 800aeb6:	60b8      	str	r0, [r7, #8]
        fCallback(sSensor);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	68b8      	ldr	r0, [r7, #8]
 800aebc:	4798      	blx	r3
    for (int i = 0; i < LinkList_GetSize(m_sSensors); i++)
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	3301      	adds	r3, #1
 800aec2:	60fb      	str	r3, [r7, #12]
 800aec4:	4b07      	ldr	r3, [pc, #28]	; (800aee4 <Sensors_ForEach+0x4c>)
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	4618      	mov	r0, r3
 800aeca:	f7fe faeb 	bl	80094a4 <LinkList_GetSize>
 800aece:	4603      	mov	r3, r0
 800aed0:	461a      	mov	r2, r3
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	4293      	cmp	r3, r2
 800aed6:	dbe6      	blt.n	800aea6 <Sensors_ForEach+0xe>
    }
}
 800aed8:	bf00      	nop
 800aeda:	bf00      	nop
 800aedc:	3710      	adds	r7, #16
 800aede:	46bd      	mov	sp, r7
 800aee0:	bd80      	pop	{r7, pc}
 800aee2:	bf00      	nop
 800aee4:	200003b0 	.word	0x200003b0

0800aee8 <Sensors_Clear>:
        u16Index += sizeof(Sensor);
    }
}

void Sensors_Clear()
{
 800aee8:	b580      	push	{r7, lr}
 800aeea:	af00      	add	r7, sp, #0
    LinkList_Release(m_sSensors);
 800aeec:	4b05      	ldr	r3, [pc, #20]	; (800af04 <Sensors_Clear+0x1c>)
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	4618      	mov	r0, r3
 800aef2:	f7fe fab9 	bl	8009468 <LinkList_Release>
    m_sSensors = LinkList_Init();
 800aef6:	f7fe fa9b 	bl	8009430 <LinkList_Init>
 800aefa:	4603      	mov	r3, r0
 800aefc:	4a01      	ldr	r2, [pc, #4]	; (800af04 <Sensors_Clear+0x1c>)
 800aefe:	6013      	str	r3, [r2, #0]
}
 800af00:	bf00      	nop
 800af02:	bd80      	pop	{r7, pc}
 800af04:	200003b0 	.word	0x200003b0

0800af08 <Sensors_GetSensor>:
        u16Index += sizeof(Sensor);
    }
}

Sensor *Sensors_GetSensor(uint8_t u8Index)
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b082      	sub	sp, #8
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	4603      	mov	r3, r0
 800af10:	71fb      	strb	r3, [r7, #7]
    return (Sensor *)LinkList_Get(m_sSensors, u8Index);
 800af12:	4b06      	ldr	r3, [pc, #24]	; (800af2c <Sensors_GetSensor+0x24>)
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	79fa      	ldrb	r2, [r7, #7]
 800af18:	4611      	mov	r1, r2
 800af1a:	4618      	mov	r0, r3
 800af1c:	f7fe faf9 	bl	8009512 <LinkList_Get>
 800af20:	4603      	mov	r3, r0
}
 800af22:	4618      	mov	r0, r3
 800af24:	3708      	adds	r7, #8
 800af26:	46bd      	mov	sp, r7
 800af28:	bd80      	pop	{r7, pc}
 800af2a:	bf00      	nop
 800af2c:	200003b0 	.word	0x200003b0

0800af30 <Sensors_ToString>:

void Sensors_ToString(uint8_t u8Index, char *chStr)
{
 800af30:	b580      	push	{r7, lr}
 800af32:	b086      	sub	sp, #24
 800af34:	af02      	add	r7, sp, #8
 800af36:	4603      	mov	r3, r0
 800af38:	6039      	str	r1, [r7, #0]
 800af3a:	71fb      	strb	r3, [r7, #7]
    Sensor *sSensor = Sensors_GetSensor(u8Index);
 800af3c:	79fb      	ldrb	r3, [r7, #7]
 800af3e:	4618      	mov	r0, r3
 800af40:	f7ff ffe2 	bl	800af08 <Sensors_GetSensor>
 800af44:	60f8      	str	r0, [r7, #12]
	FormatString(chStr, (char *)"%s - %d - %d - %d", sSensor->chName, sSensor->u8Address, sSensor->u8StartRegAddr, sSensor->u8RegNum);
 800af46:	68fa      	ldr	r2, [r7, #12]
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	7b1b      	ldrb	r3, [r3, #12]
 800af4c:	4618      	mov	r0, r3
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	7b5b      	ldrb	r3, [r3, #13]
 800af52:	4619      	mov	r1, r3
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	7b9b      	ldrb	r3, [r3, #14]
 800af58:	9301      	str	r3, [sp, #4]
 800af5a:	9100      	str	r1, [sp, #0]
 800af5c:	4603      	mov	r3, r0
 800af5e:	4904      	ldr	r1, [pc, #16]	; (800af70 <Sensors_ToString+0x40>)
 800af60:	6838      	ldr	r0, [r7, #0]
 800af62:	f000 f8b5 	bl	800b0d0 <FormatString>
}
 800af66:	bf00      	nop
 800af68:	3710      	adds	r7, #16
 800af6a:	46bd      	mov	sp, r7
 800af6c:	bd80      	pop	{r7, pc}
 800af6e:	bf00      	nop
 800af70:	0800d6dc 	.word	0x0800d6dc

0800af74 <Sensors_GetData>:

uint16_t Sensors_GetData(uint8_t *u8Data)
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b086      	sub	sp, #24
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
	uint16_t u16Index = 0;
 800af7c:	2300      	movs	r3, #0
 800af7e:	82fb      	strh	r3, [r7, #22]
	for (int i = 0; i < LinkList_GetSize(m_sSensors); i++)
 800af80:	2300      	movs	r3, #0
 800af82:	613b      	str	r3, [r7, #16]
 800af84:	e017      	b.n	800afb6 <Sensors_GetData+0x42>
	{
		Sensor *sSensor = Sensors_GetSensor(i);
 800af86:	693b      	ldr	r3, [r7, #16]
 800af88:	b2db      	uxtb	r3, r3
 800af8a:	4618      	mov	r0, r3
 800af8c:	f7ff ffbc 	bl	800af08 <Sensors_GetSensor>
 800af90:	60f8      	str	r0, [r7, #12]
		memcpy(u8Data + u16Index, sSensor->u8Data, DATA_SIZE);
 800af92:	8afb      	ldrh	r3, [r7, #22]
 800af94:	687a      	ldr	r2, [r7, #4]
 800af96:	18d0      	adds	r0, r2, r3
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	330f      	adds	r3, #15
 800af9c:	2220      	movs	r2, #32
 800af9e:	4619      	mov	r1, r3
 800afa0:	f001 f990 	bl	800c2c4 <memcpy>
		u16Index += sSensor->u8RegNum;
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	7b9b      	ldrb	r3, [r3, #14]
 800afa8:	b29a      	uxth	r2, r3
 800afaa:	8afb      	ldrh	r3, [r7, #22]
 800afac:	4413      	add	r3, r2
 800afae:	82fb      	strh	r3, [r7, #22]
	for (int i = 0; i < LinkList_GetSize(m_sSensors); i++)
 800afb0:	693b      	ldr	r3, [r7, #16]
 800afb2:	3301      	adds	r3, #1
 800afb4:	613b      	str	r3, [r7, #16]
 800afb6:	4b0a      	ldr	r3, [pc, #40]	; (800afe0 <Sensors_GetData+0x6c>)
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	4618      	mov	r0, r3
 800afbc:	f7fe fa72 	bl	80094a4 <LinkList_GetSize>
 800afc0:	4603      	mov	r3, r0
 800afc2:	461a      	mov	r2, r3
 800afc4:	693b      	ldr	r3, [r7, #16]
 800afc6:	4293      	cmp	r3, r2
 800afc8:	dbdd      	blt.n	800af86 <Sensors_GetData+0x12>
	}

	u8Data[u16Index] = '\0';
 800afca:	8afb      	ldrh	r3, [r7, #22]
 800afcc:	687a      	ldr	r2, [r7, #4]
 800afce:	4413      	add	r3, r2
 800afd0:	2200      	movs	r2, #0
 800afd2:	701a      	strb	r2, [r3, #0]
	return u16Index;
 800afd4:	8afb      	ldrh	r3, [r7, #22]
}
 800afd6:	4618      	mov	r0, r3
 800afd8:	3718      	adds	r7, #24
 800afda:	46bd      	mov	sp, r7
 800afdc:	bd80      	pop	{r7, pc}
 800afde:	bf00      	nop
 800afe0:	200003b0 	.word	0x200003b0

0800afe4 <SplitString>:
#include <stdarg.h>

#include "main.h"

char **SplitString(char *str, uint8_t *argc)
{
 800afe4:	b590      	push	{r4, r7, lr}
 800afe6:	b087      	sub	sp, #28
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
 800afec:	6039      	str	r1, [r7, #0]
    *argc = 0;
 800afee:	683b      	ldr	r3, [r7, #0]
 800aff0:	2200      	movs	r2, #0
 800aff2:	701a      	strb	r2, [r3, #0]
    char *token;

    char *copy = strdup(str);
 800aff4:	6878      	ldr	r0, [r7, #4]
 800aff6:	f001 f86b 	bl	800c0d0 <strdup>
 800affa:	4603      	mov	r3, r0
 800affc:	60fb      	str	r3, [r7, #12]
    token = strtok(copy, " ");
 800affe:	4924      	ldr	r1, [pc, #144]	; (800b090 <SplitString+0xac>)
 800b000:	68f8      	ldr	r0, [r7, #12]
 800b002:	f001 f881 	bl	800c108 <strtok>
 800b006:	6178      	str	r0, [r7, #20]

    while (token != NULL)
 800b008:	e00a      	b.n	800b020 <SplitString+0x3c>
    {
        (*argc)++;
 800b00a:	683b      	ldr	r3, [r7, #0]
 800b00c:	781b      	ldrb	r3, [r3, #0]
 800b00e:	3301      	adds	r3, #1
 800b010:	b2da      	uxtb	r2, r3
 800b012:	683b      	ldr	r3, [r7, #0]
 800b014:	701a      	strb	r2, [r3, #0]
        token = strtok(NULL, " ");
 800b016:	491e      	ldr	r1, [pc, #120]	; (800b090 <SplitString+0xac>)
 800b018:	2000      	movs	r0, #0
 800b01a:	f001 f875 	bl	800c108 <strtok>
 800b01e:	6178      	str	r0, [r7, #20]
    while (token != NULL)
 800b020:	697b      	ldr	r3, [r7, #20]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d1f1      	bne.n	800b00a <SplitString+0x26>
    }

    copy = strdup(str);
 800b026:	6878      	ldr	r0, [r7, #4]
 800b028:	f001 f852 	bl	800c0d0 <strdup>
 800b02c:	4603      	mov	r3, r0
 800b02e:	60fb      	str	r3, [r7, #12]
    token = strtok(copy, " ");
 800b030:	4917      	ldr	r1, [pc, #92]	; (800b090 <SplitString+0xac>)
 800b032:	68f8      	ldr	r0, [r7, #12]
 800b034:	f001 f868 	bl	800c108 <strtok>
 800b038:	6178      	str	r0, [r7, #20]
    char **argv = (char **)malloc((*argc) * sizeof(char *));
 800b03a:	683b      	ldr	r3, [r7, #0]
 800b03c:	781b      	ldrb	r3, [r3, #0]
 800b03e:	009b      	lsls	r3, r3, #2
 800b040:	4618      	mov	r0, r3
 800b042:	f000 fd31 	bl	800baa8 <malloc>
 800b046:	4603      	mov	r3, r0
 800b048:	60bb      	str	r3, [r7, #8]

    for (int i = 0; i < *argc; ++i)
 800b04a:	2300      	movs	r3, #0
 800b04c:	613b      	str	r3, [r7, #16]
 800b04e:	e010      	b.n	800b072 <SplitString+0x8e>
    {
        argv[i] = strdup(token);
 800b050:	693b      	ldr	r3, [r7, #16]
 800b052:	009b      	lsls	r3, r3, #2
 800b054:	68ba      	ldr	r2, [r7, #8]
 800b056:	18d4      	adds	r4, r2, r3
 800b058:	6978      	ldr	r0, [r7, #20]
 800b05a:	f001 f839 	bl	800c0d0 <strdup>
 800b05e:	4603      	mov	r3, r0
 800b060:	6023      	str	r3, [r4, #0]
        token = strtok(NULL, " ");
 800b062:	490b      	ldr	r1, [pc, #44]	; (800b090 <SplitString+0xac>)
 800b064:	2000      	movs	r0, #0
 800b066:	f001 f84f 	bl	800c108 <strtok>
 800b06a:	6178      	str	r0, [r7, #20]
    for (int i = 0; i < *argc; ++i)
 800b06c:	693b      	ldr	r3, [r7, #16]
 800b06e:	3301      	adds	r3, #1
 800b070:	613b      	str	r3, [r7, #16]
 800b072:	683b      	ldr	r3, [r7, #0]
 800b074:	781b      	ldrb	r3, [r3, #0]
 800b076:	461a      	mov	r2, r3
 800b078:	693b      	ldr	r3, [r7, #16]
 800b07a:	4293      	cmp	r3, r2
 800b07c:	dbe8      	blt.n	800b050 <SplitString+0x6c>
    }

    free(copy);
 800b07e:	68f8      	ldr	r0, [r7, #12]
 800b080:	f000 fd1a 	bl	800bab8 <free>
    return argv;
 800b084:	68bb      	ldr	r3, [r7, #8]
}
 800b086:	4618      	mov	r0, r3
 800b088:	371c      	adds	r7, #28
 800b08a:	46bd      	mov	sp, r7
 800b08c:	bd90      	pop	{r4, r7, pc}
 800b08e:	bf00      	nop
 800b090:	0800d6f0 	.word	0x0800d6f0

0800b094 <Free2DArray>:

void Free2DArray(int argc, char **argv)
{
 800b094:	b580      	push	{r7, lr}
 800b096:	b084      	sub	sp, #16
 800b098:	af00      	add	r7, sp, #0
 800b09a:	6078      	str	r0, [r7, #4]
 800b09c:	6039      	str	r1, [r7, #0]
    for (uint8_t i = 0; i < argc; i++)
 800b09e:	2300      	movs	r3, #0
 800b0a0:	73fb      	strb	r3, [r7, #15]
 800b0a2:	e00a      	b.n	800b0ba <Free2DArray+0x26>
    {
        free(argv[i]);
 800b0a4:	7bfb      	ldrb	r3, [r7, #15]
 800b0a6:	009b      	lsls	r3, r3, #2
 800b0a8:	683a      	ldr	r2, [r7, #0]
 800b0aa:	4413      	add	r3, r2
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	f000 fd02 	bl	800bab8 <free>
    for (uint8_t i = 0; i < argc; i++)
 800b0b4:	7bfb      	ldrb	r3, [r7, #15]
 800b0b6:	3301      	adds	r3, #1
 800b0b8:	73fb      	strb	r3, [r7, #15]
 800b0ba:	7bfb      	ldrb	r3, [r7, #15]
 800b0bc:	687a      	ldr	r2, [r7, #4]
 800b0be:	429a      	cmp	r2, r3
 800b0c0:	dcf0      	bgt.n	800b0a4 <Free2DArray+0x10>
    }

    free(argv);
 800b0c2:	6838      	ldr	r0, [r7, #0]
 800b0c4:	f000 fcf8 	bl	800bab8 <free>
}
 800b0c8:	bf00      	nop
 800b0ca:	3710      	adds	r7, #16
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	bd80      	pop	{r7, pc}

0800b0d0 <FormatString>:

void FormatString(char *buffer, char *format, ...)
{
 800b0d0:	b40e      	push	{r1, r2, r3}
 800b0d2:	b580      	push	{r7, lr}
 800b0d4:	b085      	sub	sp, #20
 800b0d6:	af00      	add	r7, sp, #0
 800b0d8:	6078      	str	r0, [r7, #4]
    va_list args;
    va_start(args, format);
 800b0da:	f107 0320 	add.w	r3, r7, #32
 800b0de:	60fb      	str	r3, [r7, #12]

    vsnprintf(buffer, 256, format, args);
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	69fa      	ldr	r2, [r7, #28]
 800b0e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b0e8:	6878      	ldr	r0, [r7, #4]
 800b0ea:	f000 ffdb 	bl	800c0a4 <vsniprintf>

    va_end(args);
}
 800b0ee:	bf00      	nop
 800b0f0:	3714      	adds	r7, #20
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b0f8:	b003      	add	sp, #12
 800b0fa:	4770      	bx	lr

0800b0fc <ConvertHexStringToHex>:
        return STR_NOT_EQUAL;
    }
}

uint8_t ConvertHexStringToHex(char *hexStr)
{
 800b0fc:	b580      	push	{r7, lr}
 800b0fe:	b082      	sub	sp, #8
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
    return strtoul(hexStr, NULL, 16);
 800b104:	2210      	movs	r2, #16
 800b106:	2100      	movs	r1, #0
 800b108:	6878      	ldr	r0, [r7, #4]
 800b10a:	f000 fe83 	bl	800be14 <strtoul>
 800b10e:	4603      	mov	r3, r0
 800b110:	b2db      	uxtb	r3, r3
}
 800b112:	4618      	mov	r0, r3
 800b114:	3708      	adds	r7, #8
 800b116:	46bd      	mov	sp, r7
 800b118:	bd80      	pop	{r7, pc}
	...

0800b11c <ConvertHexToString>:

void ConvertHexToString(char *chBuffer, uint8_t u8Value)
{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b082      	sub	sp, #8
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
 800b124:	460b      	mov	r3, r1
 800b126:	70fb      	strb	r3, [r7, #3]
    chBuffer[0] = '0';
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	2230      	movs	r2, #48	; 0x30
 800b12c:	701a      	strb	r2, [r3, #0]
    chBuffer[1] = 'x';
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	3301      	adds	r3, #1
 800b132:	2278      	movs	r2, #120	; 0x78
 800b134:	701a      	strb	r2, [r3, #0]
    sprintf(&chBuffer[2], "%X", u8Value);
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	3302      	adds	r3, #2
 800b13a:	78fa      	ldrb	r2, [r7, #3]
 800b13c:	4903      	ldr	r1, [pc, #12]	; (800b14c <ConvertHexToString+0x30>)
 800b13e:	4618      	mov	r0, r3
 800b140:	f000 ff22 	bl	800bf88 <siprintf>
}
 800b144:	bf00      	nop
 800b146:	3708      	adds	r7, #8
 800b148:	46bd      	mov	sp, r7
 800b14a:	bd80      	pop	{r7, pc}
 800b14c:	0800d6f4 	.word	0x0800d6f4

0800b150 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b150:	b580      	push	{r7, lr}
 800b152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b154:	2200      	movs	r2, #0
 800b156:	4912      	ldr	r1, [pc, #72]	; (800b1a0 <MX_USB_DEVICE_Init+0x50>)
 800b158:	4812      	ldr	r0, [pc, #72]	; (800b1a4 <MX_USB_DEVICE_Init+0x54>)
 800b15a:	f7fe fd1a 	bl	8009b92 <USBD_Init>
 800b15e:	4603      	mov	r3, r0
 800b160:	2b00      	cmp	r3, #0
 800b162:	d001      	beq.n	800b168 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b164:	f7f6 fdb4 	bl	8001cd0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b168:	490f      	ldr	r1, [pc, #60]	; (800b1a8 <MX_USB_DEVICE_Init+0x58>)
 800b16a:	480e      	ldr	r0, [pc, #56]	; (800b1a4 <MX_USB_DEVICE_Init+0x54>)
 800b16c:	f7fe fd3c 	bl	8009be8 <USBD_RegisterClass>
 800b170:	4603      	mov	r3, r0
 800b172:	2b00      	cmp	r3, #0
 800b174:	d001      	beq.n	800b17a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b176:	f7f6 fdab 	bl	8001cd0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b17a:	490c      	ldr	r1, [pc, #48]	; (800b1ac <MX_USB_DEVICE_Init+0x5c>)
 800b17c:	4809      	ldr	r0, [pc, #36]	; (800b1a4 <MX_USB_DEVICE_Init+0x54>)
 800b17e:	f7fe fc6d 	bl	8009a5c <USBD_CDC_RegisterInterface>
 800b182:	4603      	mov	r3, r0
 800b184:	2b00      	cmp	r3, #0
 800b186:	d001      	beq.n	800b18c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b188:	f7f6 fda2 	bl	8001cd0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b18c:	4805      	ldr	r0, [pc, #20]	; (800b1a4 <MX_USB_DEVICE_Init+0x54>)
 800b18e:	f7fe fd44 	bl	8009c1a <USBD_Start>
 800b192:	4603      	mov	r3, r0
 800b194:	2b00      	cmp	r3, #0
 800b196:	d001      	beq.n	800b19c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b198:	f7f6 fd9a 	bl	8001cd0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b19c:	bf00      	nop
 800b19e:	bd80      	pop	{r7, pc}
 800b1a0:	2000017c 	.word	0x2000017c
 800b1a4:	200003b4 	.word	0x200003b4
 800b1a8:	20000068 	.word	0x20000068
 800b1ac:	2000016c 	.word	0x2000016c

0800b1b0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b1b4:	2200      	movs	r2, #0
 800b1b6:	4905      	ldr	r1, [pc, #20]	; (800b1cc <CDC_Init_FS+0x1c>)
 800b1b8:	4805      	ldr	r0, [pc, #20]	; (800b1d0 <CDC_Init_FS+0x20>)
 800b1ba:	f7fe fc65 	bl	8009a88 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b1be:	4905      	ldr	r1, [pc, #20]	; (800b1d4 <CDC_Init_FS+0x24>)
 800b1c0:	4803      	ldr	r0, [pc, #12]	; (800b1d0 <CDC_Init_FS+0x20>)
 800b1c2:	f7fe fc7a 	bl	8009aba <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b1c6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	bd80      	pop	{r7, pc}
 800b1cc:	20000a78 	.word	0x20000a78
 800b1d0:	200003b4 	.word	0x200003b4
 800b1d4:	20000678 	.word	0x20000678

0800b1d8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b1d8:	b480      	push	{r7}
 800b1da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b1dc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b1de:	4618      	mov	r0, r3
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	bc80      	pop	{r7}
 800b1e4:	4770      	bx	lr
	...

0800b1e8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b1e8:	b480      	push	{r7}
 800b1ea:	b083      	sub	sp, #12
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	4603      	mov	r3, r0
 800b1f0:	6039      	str	r1, [r7, #0]
 800b1f2:	71fb      	strb	r3, [r7, #7]
 800b1f4:	4613      	mov	r3, r2
 800b1f6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b1f8:	79fb      	ldrb	r3, [r7, #7]
 800b1fa:	2b23      	cmp	r3, #35	; 0x23
 800b1fc:	d84a      	bhi.n	800b294 <CDC_Control_FS+0xac>
 800b1fe:	a201      	add	r2, pc, #4	; (adr r2, 800b204 <CDC_Control_FS+0x1c>)
 800b200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b204:	0800b295 	.word	0x0800b295
 800b208:	0800b295 	.word	0x0800b295
 800b20c:	0800b295 	.word	0x0800b295
 800b210:	0800b295 	.word	0x0800b295
 800b214:	0800b295 	.word	0x0800b295
 800b218:	0800b295 	.word	0x0800b295
 800b21c:	0800b295 	.word	0x0800b295
 800b220:	0800b295 	.word	0x0800b295
 800b224:	0800b295 	.word	0x0800b295
 800b228:	0800b295 	.word	0x0800b295
 800b22c:	0800b295 	.word	0x0800b295
 800b230:	0800b295 	.word	0x0800b295
 800b234:	0800b295 	.word	0x0800b295
 800b238:	0800b295 	.word	0x0800b295
 800b23c:	0800b295 	.word	0x0800b295
 800b240:	0800b295 	.word	0x0800b295
 800b244:	0800b295 	.word	0x0800b295
 800b248:	0800b295 	.word	0x0800b295
 800b24c:	0800b295 	.word	0x0800b295
 800b250:	0800b295 	.word	0x0800b295
 800b254:	0800b295 	.word	0x0800b295
 800b258:	0800b295 	.word	0x0800b295
 800b25c:	0800b295 	.word	0x0800b295
 800b260:	0800b295 	.word	0x0800b295
 800b264:	0800b295 	.word	0x0800b295
 800b268:	0800b295 	.word	0x0800b295
 800b26c:	0800b295 	.word	0x0800b295
 800b270:	0800b295 	.word	0x0800b295
 800b274:	0800b295 	.word	0x0800b295
 800b278:	0800b295 	.word	0x0800b295
 800b27c:	0800b295 	.word	0x0800b295
 800b280:	0800b295 	.word	0x0800b295
 800b284:	0800b295 	.word	0x0800b295
 800b288:	0800b295 	.word	0x0800b295
 800b28c:	0800b295 	.word	0x0800b295
 800b290:	0800b295 	.word	0x0800b295
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b294:	bf00      	nop
  }

  return (USBD_OK);
 800b296:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b298:	4618      	mov	r0, r3
 800b29a:	370c      	adds	r7, #12
 800b29c:	46bd      	mov	sp, r7
 800b29e:	bc80      	pop	{r7}
 800b2a0:	4770      	bx	lr
 800b2a2:	bf00      	nop

0800b2a4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	b082      	sub	sp, #8
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	6078      	str	r0, [r7, #4]
 800b2ac:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b2ae:	6879      	ldr	r1, [r7, #4]
 800b2b0:	480c      	ldr	r0, [pc, #48]	; (800b2e4 <CDC_Receive_FS+0x40>)
 800b2b2:	f7fe fc02 	bl	8009aba <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b2b6:	480b      	ldr	r0, [pc, #44]	; (800b2e4 <CDC_Receive_FS+0x40>)
 800b2b8:	f7fe fc41 	bl	8009b3e <USBD_CDC_ReceivePacket>
  Command_ReceiveData((char *)UserRxBufferFS, *Len);
 800b2bc:	683b      	ldr	r3, [r7, #0]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	b2db      	uxtb	r3, r3
 800b2c2:	4619      	mov	r1, r3
 800b2c4:	4808      	ldr	r0, [pc, #32]	; (800b2e8 <CDC_Receive_FS+0x44>)
 800b2c6:	f7f5 f87d 	bl	80003c4 <Command_ReceiveData>
  memset(UserRxBufferFS, 0, *Len);
 800b2ca:	683b      	ldr	r3, [r7, #0]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	461a      	mov	r2, r3
 800b2d0:	2100      	movs	r1, #0
 800b2d2:	4805      	ldr	r0, [pc, #20]	; (800b2e8 <CDC_Receive_FS+0x44>)
 800b2d4:	f000 fef4 	bl	800c0c0 <memset>
  return (USBD_OK);
 800b2d8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b2da:	4618      	mov	r0, r3
 800b2dc:	3708      	adds	r7, #8
 800b2de:	46bd      	mov	sp, r7
 800b2e0:	bd80      	pop	{r7, pc}
 800b2e2:	bf00      	nop
 800b2e4:	200003b4 	.word	0x200003b4
 800b2e8:	20000678 	.word	0x20000678

0800b2ec <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b084      	sub	sp, #16
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
 800b2f4:	460b      	mov	r3, r1
 800b2f6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b2fc:	4b0d      	ldr	r3, [pc, #52]	; (800b334 <CDC_Transmit_FS+0x48>)
 800b2fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b302:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b304:	68bb      	ldr	r3, [r7, #8]
 800b306:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d001      	beq.n	800b312 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b30e:	2301      	movs	r3, #1
 800b310:	e00b      	b.n	800b32a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b312:	887b      	ldrh	r3, [r7, #2]
 800b314:	461a      	mov	r2, r3
 800b316:	6879      	ldr	r1, [r7, #4]
 800b318:	4806      	ldr	r0, [pc, #24]	; (800b334 <CDC_Transmit_FS+0x48>)
 800b31a:	f7fe fbb5 	bl	8009a88 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b31e:	4805      	ldr	r0, [pc, #20]	; (800b334 <CDC_Transmit_FS+0x48>)
 800b320:	f7fe fbde 	bl	8009ae0 <USBD_CDC_TransmitPacket>
 800b324:	4603      	mov	r3, r0
 800b326:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b328:	7bfb      	ldrb	r3, [r7, #15]
}
 800b32a:	4618      	mov	r0, r3
 800b32c:	3710      	adds	r7, #16
 800b32e:	46bd      	mov	sp, r7
 800b330:	bd80      	pop	{r7, pc}
 800b332:	bf00      	nop
 800b334:	200003b4 	.word	0x200003b4

0800b338 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b338:	b480      	push	{r7}
 800b33a:	b083      	sub	sp, #12
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	4603      	mov	r3, r0
 800b340:	6039      	str	r1, [r7, #0]
 800b342:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b344:	683b      	ldr	r3, [r7, #0]
 800b346:	2212      	movs	r2, #18
 800b348:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b34a:	4b03      	ldr	r3, [pc, #12]	; (800b358 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b34c:	4618      	mov	r0, r3
 800b34e:	370c      	adds	r7, #12
 800b350:	46bd      	mov	sp, r7
 800b352:	bc80      	pop	{r7}
 800b354:	4770      	bx	lr
 800b356:	bf00      	nop
 800b358:	20000198 	.word	0x20000198

0800b35c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b35c:	b480      	push	{r7}
 800b35e:	b083      	sub	sp, #12
 800b360:	af00      	add	r7, sp, #0
 800b362:	4603      	mov	r3, r0
 800b364:	6039      	str	r1, [r7, #0]
 800b366:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b368:	683b      	ldr	r3, [r7, #0]
 800b36a:	2204      	movs	r2, #4
 800b36c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b36e:	4b03      	ldr	r3, [pc, #12]	; (800b37c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b370:	4618      	mov	r0, r3
 800b372:	370c      	adds	r7, #12
 800b374:	46bd      	mov	sp, r7
 800b376:	bc80      	pop	{r7}
 800b378:	4770      	bx	lr
 800b37a:	bf00      	nop
 800b37c:	200001ac 	.word	0x200001ac

0800b380 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b082      	sub	sp, #8
 800b384:	af00      	add	r7, sp, #0
 800b386:	4603      	mov	r3, r0
 800b388:	6039      	str	r1, [r7, #0]
 800b38a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b38c:	79fb      	ldrb	r3, [r7, #7]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d105      	bne.n	800b39e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b392:	683a      	ldr	r2, [r7, #0]
 800b394:	4907      	ldr	r1, [pc, #28]	; (800b3b4 <USBD_FS_ProductStrDescriptor+0x34>)
 800b396:	4808      	ldr	r0, [pc, #32]	; (800b3b8 <USBD_FS_ProductStrDescriptor+0x38>)
 800b398:	f7ff fbb8 	bl	800ab0c <USBD_GetString>
 800b39c:	e004      	b.n	800b3a8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b39e:	683a      	ldr	r2, [r7, #0]
 800b3a0:	4904      	ldr	r1, [pc, #16]	; (800b3b4 <USBD_FS_ProductStrDescriptor+0x34>)
 800b3a2:	4805      	ldr	r0, [pc, #20]	; (800b3b8 <USBD_FS_ProductStrDescriptor+0x38>)
 800b3a4:	f7ff fbb2 	bl	800ab0c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b3a8:	4b02      	ldr	r3, [pc, #8]	; (800b3b4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	3708      	adds	r7, #8
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	bd80      	pop	{r7, pc}
 800b3b2:	bf00      	nop
 800b3b4:	20000e78 	.word	0x20000e78
 800b3b8:	0800d6f8 	.word	0x0800d6f8

0800b3bc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b082      	sub	sp, #8
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	4603      	mov	r3, r0
 800b3c4:	6039      	str	r1, [r7, #0]
 800b3c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b3c8:	683a      	ldr	r2, [r7, #0]
 800b3ca:	4904      	ldr	r1, [pc, #16]	; (800b3dc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b3cc:	4804      	ldr	r0, [pc, #16]	; (800b3e0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b3ce:	f7ff fb9d 	bl	800ab0c <USBD_GetString>
  return USBD_StrDesc;
 800b3d2:	4b02      	ldr	r3, [pc, #8]	; (800b3dc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	3708      	adds	r7, #8
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	bd80      	pop	{r7, pc}
 800b3dc:	20000e78 	.word	0x20000e78
 800b3e0:	0800d710 	.word	0x0800d710

0800b3e4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	b082      	sub	sp, #8
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	4603      	mov	r3, r0
 800b3ec:	6039      	str	r1, [r7, #0]
 800b3ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b3f0:	683b      	ldr	r3, [r7, #0]
 800b3f2:	221a      	movs	r2, #26
 800b3f4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b3f6:	f000 f843 	bl	800b480 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b3fa:	4b02      	ldr	r3, [pc, #8]	; (800b404 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	3708      	adds	r7, #8
 800b400:	46bd      	mov	sp, r7
 800b402:	bd80      	pop	{r7, pc}
 800b404:	200001b0 	.word	0x200001b0

0800b408 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b082      	sub	sp, #8
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	4603      	mov	r3, r0
 800b410:	6039      	str	r1, [r7, #0]
 800b412:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b414:	79fb      	ldrb	r3, [r7, #7]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d105      	bne.n	800b426 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b41a:	683a      	ldr	r2, [r7, #0]
 800b41c:	4907      	ldr	r1, [pc, #28]	; (800b43c <USBD_FS_ConfigStrDescriptor+0x34>)
 800b41e:	4808      	ldr	r0, [pc, #32]	; (800b440 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b420:	f7ff fb74 	bl	800ab0c <USBD_GetString>
 800b424:	e004      	b.n	800b430 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b426:	683a      	ldr	r2, [r7, #0]
 800b428:	4904      	ldr	r1, [pc, #16]	; (800b43c <USBD_FS_ConfigStrDescriptor+0x34>)
 800b42a:	4805      	ldr	r0, [pc, #20]	; (800b440 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b42c:	f7ff fb6e 	bl	800ab0c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b430:	4b02      	ldr	r3, [pc, #8]	; (800b43c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b432:	4618      	mov	r0, r3
 800b434:	3708      	adds	r7, #8
 800b436:	46bd      	mov	sp, r7
 800b438:	bd80      	pop	{r7, pc}
 800b43a:	bf00      	nop
 800b43c:	20000e78 	.word	0x20000e78
 800b440:	0800d724 	.word	0x0800d724

0800b444 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b444:	b580      	push	{r7, lr}
 800b446:	b082      	sub	sp, #8
 800b448:	af00      	add	r7, sp, #0
 800b44a:	4603      	mov	r3, r0
 800b44c:	6039      	str	r1, [r7, #0]
 800b44e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b450:	79fb      	ldrb	r3, [r7, #7]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d105      	bne.n	800b462 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b456:	683a      	ldr	r2, [r7, #0]
 800b458:	4907      	ldr	r1, [pc, #28]	; (800b478 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b45a:	4808      	ldr	r0, [pc, #32]	; (800b47c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b45c:	f7ff fb56 	bl	800ab0c <USBD_GetString>
 800b460:	e004      	b.n	800b46c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b462:	683a      	ldr	r2, [r7, #0]
 800b464:	4904      	ldr	r1, [pc, #16]	; (800b478 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b466:	4805      	ldr	r0, [pc, #20]	; (800b47c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b468:	f7ff fb50 	bl	800ab0c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b46c:	4b02      	ldr	r3, [pc, #8]	; (800b478 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b46e:	4618      	mov	r0, r3
 800b470:	3708      	adds	r7, #8
 800b472:	46bd      	mov	sp, r7
 800b474:	bd80      	pop	{r7, pc}
 800b476:	bf00      	nop
 800b478:	20000e78 	.word	0x20000e78
 800b47c:	0800d730 	.word	0x0800d730

0800b480 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b480:	b580      	push	{r7, lr}
 800b482:	b084      	sub	sp, #16
 800b484:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b486:	4b0f      	ldr	r3, [pc, #60]	; (800b4c4 <Get_SerialNum+0x44>)
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b48c:	4b0e      	ldr	r3, [pc, #56]	; (800b4c8 <Get_SerialNum+0x48>)
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b492:	4b0e      	ldr	r3, [pc, #56]	; (800b4cc <Get_SerialNum+0x4c>)
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b498:	68fa      	ldr	r2, [r7, #12]
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	4413      	add	r3, r2
 800b49e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d009      	beq.n	800b4ba <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b4a6:	2208      	movs	r2, #8
 800b4a8:	4909      	ldr	r1, [pc, #36]	; (800b4d0 <Get_SerialNum+0x50>)
 800b4aa:	68f8      	ldr	r0, [r7, #12]
 800b4ac:	f000 f814 	bl	800b4d8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b4b0:	2204      	movs	r2, #4
 800b4b2:	4908      	ldr	r1, [pc, #32]	; (800b4d4 <Get_SerialNum+0x54>)
 800b4b4:	68b8      	ldr	r0, [r7, #8]
 800b4b6:	f000 f80f 	bl	800b4d8 <IntToUnicode>
  }
}
 800b4ba:	bf00      	nop
 800b4bc:	3710      	adds	r7, #16
 800b4be:	46bd      	mov	sp, r7
 800b4c0:	bd80      	pop	{r7, pc}
 800b4c2:	bf00      	nop
 800b4c4:	1ffff7e8 	.word	0x1ffff7e8
 800b4c8:	1ffff7ec 	.word	0x1ffff7ec
 800b4cc:	1ffff7f0 	.word	0x1ffff7f0
 800b4d0:	200001b2 	.word	0x200001b2
 800b4d4:	200001c2 	.word	0x200001c2

0800b4d8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b4d8:	b480      	push	{r7}
 800b4da:	b087      	sub	sp, #28
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	60f8      	str	r0, [r7, #12]
 800b4e0:	60b9      	str	r1, [r7, #8]
 800b4e2:	4613      	mov	r3, r2
 800b4e4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	75fb      	strb	r3, [r7, #23]
 800b4ee:	e027      	b.n	800b540 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	0f1b      	lsrs	r3, r3, #28
 800b4f4:	2b09      	cmp	r3, #9
 800b4f6:	d80b      	bhi.n	800b510 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	0f1b      	lsrs	r3, r3, #28
 800b4fc:	b2da      	uxtb	r2, r3
 800b4fe:	7dfb      	ldrb	r3, [r7, #23]
 800b500:	005b      	lsls	r3, r3, #1
 800b502:	4619      	mov	r1, r3
 800b504:	68bb      	ldr	r3, [r7, #8]
 800b506:	440b      	add	r3, r1
 800b508:	3230      	adds	r2, #48	; 0x30
 800b50a:	b2d2      	uxtb	r2, r2
 800b50c:	701a      	strb	r2, [r3, #0]
 800b50e:	e00a      	b.n	800b526 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	0f1b      	lsrs	r3, r3, #28
 800b514:	b2da      	uxtb	r2, r3
 800b516:	7dfb      	ldrb	r3, [r7, #23]
 800b518:	005b      	lsls	r3, r3, #1
 800b51a:	4619      	mov	r1, r3
 800b51c:	68bb      	ldr	r3, [r7, #8]
 800b51e:	440b      	add	r3, r1
 800b520:	3237      	adds	r2, #55	; 0x37
 800b522:	b2d2      	uxtb	r2, r2
 800b524:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	011b      	lsls	r3, r3, #4
 800b52a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b52c:	7dfb      	ldrb	r3, [r7, #23]
 800b52e:	005b      	lsls	r3, r3, #1
 800b530:	3301      	adds	r3, #1
 800b532:	68ba      	ldr	r2, [r7, #8]
 800b534:	4413      	add	r3, r2
 800b536:	2200      	movs	r2, #0
 800b538:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b53a:	7dfb      	ldrb	r3, [r7, #23]
 800b53c:	3301      	adds	r3, #1
 800b53e:	75fb      	strb	r3, [r7, #23]
 800b540:	7dfa      	ldrb	r2, [r7, #23]
 800b542:	79fb      	ldrb	r3, [r7, #7]
 800b544:	429a      	cmp	r2, r3
 800b546:	d3d3      	bcc.n	800b4f0 <IntToUnicode+0x18>
  }
}
 800b548:	bf00      	nop
 800b54a:	bf00      	nop
 800b54c:	371c      	adds	r7, #28
 800b54e:	46bd      	mov	sp, r7
 800b550:	bc80      	pop	{r7}
 800b552:	4770      	bx	lr

0800b554 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b554:	b580      	push	{r7, lr}
 800b556:	b084      	sub	sp, #16
 800b558:	af00      	add	r7, sp, #0
 800b55a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	4a0d      	ldr	r2, [pc, #52]	; (800b598 <HAL_PCD_MspInit+0x44>)
 800b562:	4293      	cmp	r3, r2
 800b564:	d113      	bne.n	800b58e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b566:	4b0d      	ldr	r3, [pc, #52]	; (800b59c <HAL_PCD_MspInit+0x48>)
 800b568:	69db      	ldr	r3, [r3, #28]
 800b56a:	4a0c      	ldr	r2, [pc, #48]	; (800b59c <HAL_PCD_MspInit+0x48>)
 800b56c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b570:	61d3      	str	r3, [r2, #28]
 800b572:	4b0a      	ldr	r3, [pc, #40]	; (800b59c <HAL_PCD_MspInit+0x48>)
 800b574:	69db      	ldr	r3, [r3, #28]
 800b576:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b57a:	60fb      	str	r3, [r7, #12]
 800b57c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800b57e:	2200      	movs	r2, #0
 800b580:	2100      	movs	r1, #0
 800b582:	2014      	movs	r0, #20
 800b584:	f7f6 ff5f 	bl	8002446 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800b588:	2014      	movs	r0, #20
 800b58a:	f7f6 ff78 	bl	800247e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b58e:	bf00      	nop
 800b590:	3710      	adds	r7, #16
 800b592:	46bd      	mov	sp, r7
 800b594:	bd80      	pop	{r7, pc}
 800b596:	bf00      	nop
 800b598:	40005c00 	.word	0x40005c00
 800b59c:	40021000 	.word	0x40021000

0800b5a0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b082      	sub	sp, #8
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800b5b4:	4619      	mov	r1, r3
 800b5b6:	4610      	mov	r0, r2
 800b5b8:	f7fe fb77 	bl	8009caa <USBD_LL_SetupStage>
}
 800b5bc:	bf00      	nop
 800b5be:	3708      	adds	r7, #8
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	bd80      	pop	{r7, pc}

0800b5c4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	b082      	sub	sp, #8
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	6078      	str	r0, [r7, #4]
 800b5cc:	460b      	mov	r3, r1
 800b5ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800b5d6:	78fa      	ldrb	r2, [r7, #3]
 800b5d8:	6879      	ldr	r1, [r7, #4]
 800b5da:	4613      	mov	r3, r2
 800b5dc:	009b      	lsls	r3, r3, #2
 800b5de:	4413      	add	r3, r2
 800b5e0:	00db      	lsls	r3, r3, #3
 800b5e2:	440b      	add	r3, r1
 800b5e4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800b5e8:	681a      	ldr	r2, [r3, #0]
 800b5ea:	78fb      	ldrb	r3, [r7, #3]
 800b5ec:	4619      	mov	r1, r3
 800b5ee:	f7fe fba9 	bl	8009d44 <USBD_LL_DataOutStage>
}
 800b5f2:	bf00      	nop
 800b5f4:	3708      	adds	r7, #8
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	bd80      	pop	{r7, pc}

0800b5fa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b5fa:	b580      	push	{r7, lr}
 800b5fc:	b082      	sub	sp, #8
 800b5fe:	af00      	add	r7, sp, #0
 800b600:	6078      	str	r0, [r7, #4]
 800b602:	460b      	mov	r3, r1
 800b604:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800b60c:	78fa      	ldrb	r2, [r7, #3]
 800b60e:	6879      	ldr	r1, [r7, #4]
 800b610:	4613      	mov	r3, r2
 800b612:	009b      	lsls	r3, r3, #2
 800b614:	4413      	add	r3, r2
 800b616:	00db      	lsls	r3, r3, #3
 800b618:	440b      	add	r3, r1
 800b61a:	333c      	adds	r3, #60	; 0x3c
 800b61c:	681a      	ldr	r2, [r3, #0]
 800b61e:	78fb      	ldrb	r3, [r7, #3]
 800b620:	4619      	mov	r1, r3
 800b622:	f7fe fc00 	bl	8009e26 <USBD_LL_DataInStage>
}
 800b626:	bf00      	nop
 800b628:	3708      	adds	r7, #8
 800b62a:	46bd      	mov	sp, r7
 800b62c:	bd80      	pop	{r7, pc}

0800b62e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b62e:	b580      	push	{r7, lr}
 800b630:	b082      	sub	sp, #8
 800b632:	af00      	add	r7, sp, #0
 800b634:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800b63c:	4618      	mov	r0, r3
 800b63e:	f7fe fd10 	bl	800a062 <USBD_LL_SOF>
}
 800b642:	bf00      	nop
 800b644:	3708      	adds	r7, #8
 800b646:	46bd      	mov	sp, r7
 800b648:	bd80      	pop	{r7, pc}

0800b64a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b64a:	b580      	push	{r7, lr}
 800b64c:	b084      	sub	sp, #16
 800b64e:	af00      	add	r7, sp, #0
 800b650:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b652:	2301      	movs	r3, #1
 800b654:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	689b      	ldr	r3, [r3, #8]
 800b65a:	2b02      	cmp	r3, #2
 800b65c:	d001      	beq.n	800b662 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b65e:	f7f6 fb37 	bl	8001cd0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800b668:	7bfa      	ldrb	r2, [r7, #15]
 800b66a:	4611      	mov	r1, r2
 800b66c:	4618      	mov	r0, r3
 800b66e:	f7fe fcc0 	bl	8009ff2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800b678:	4618      	mov	r0, r3
 800b67a:	f7fe fc79 	bl	8009f70 <USBD_LL_Reset>
}
 800b67e:	bf00      	nop
 800b680:	3710      	adds	r7, #16
 800b682:	46bd      	mov	sp, r7
 800b684:	bd80      	pop	{r7, pc}
	...

0800b688 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b082      	sub	sp, #8
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800b696:	4618      	mov	r0, r3
 800b698:	f7fe fcba 	bl	800a010 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	699b      	ldr	r3, [r3, #24]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d005      	beq.n	800b6b0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b6a4:	4b04      	ldr	r3, [pc, #16]	; (800b6b8 <HAL_PCD_SuspendCallback+0x30>)
 800b6a6:	691b      	ldr	r3, [r3, #16]
 800b6a8:	4a03      	ldr	r2, [pc, #12]	; (800b6b8 <HAL_PCD_SuspendCallback+0x30>)
 800b6aa:	f043 0306 	orr.w	r3, r3, #6
 800b6ae:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b6b0:	bf00      	nop
 800b6b2:	3708      	adds	r7, #8
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	bd80      	pop	{r7, pc}
 800b6b8:	e000ed00 	.word	0xe000ed00

0800b6bc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b082      	sub	sp, #8
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	f7fe fcb4 	bl	800a038 <USBD_LL_Resume>
}
 800b6d0:	bf00      	nop
 800b6d2:	3708      	adds	r7, #8
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	bd80      	pop	{r7, pc}

0800b6d8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b082      	sub	sp, #8
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800b6e0:	4a28      	ldr	r2, [pc, #160]	; (800b784 <USBD_LL_Init+0xac>)
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	4a26      	ldr	r2, [pc, #152]	; (800b784 <USBD_LL_Init+0xac>)
 800b6ec:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800b6f0:	4b24      	ldr	r3, [pc, #144]	; (800b784 <USBD_LL_Init+0xac>)
 800b6f2:	4a25      	ldr	r2, [pc, #148]	; (800b788 <USBD_LL_Init+0xb0>)
 800b6f4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b6f6:	4b23      	ldr	r3, [pc, #140]	; (800b784 <USBD_LL_Init+0xac>)
 800b6f8:	2208      	movs	r2, #8
 800b6fa:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b6fc:	4b21      	ldr	r3, [pc, #132]	; (800b784 <USBD_LL_Init+0xac>)
 800b6fe:	2202      	movs	r2, #2
 800b700:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b702:	4b20      	ldr	r3, [pc, #128]	; (800b784 <USBD_LL_Init+0xac>)
 800b704:	2200      	movs	r2, #0
 800b706:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800b708:	4b1e      	ldr	r3, [pc, #120]	; (800b784 <USBD_LL_Init+0xac>)
 800b70a:	2200      	movs	r2, #0
 800b70c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b70e:	4b1d      	ldr	r3, [pc, #116]	; (800b784 <USBD_LL_Init+0xac>)
 800b710:	2200      	movs	r2, #0
 800b712:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b714:	481b      	ldr	r0, [pc, #108]	; (800b784 <USBD_LL_Init+0xac>)
 800b716:	f7f8 f8d6 	bl	80038c6 <HAL_PCD_Init>
 800b71a:	4603      	mov	r3, r0
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d001      	beq.n	800b724 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800b720:	f7f6 fad6 	bl	8001cd0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b72a:	2318      	movs	r3, #24
 800b72c:	2200      	movs	r2, #0
 800b72e:	2100      	movs	r1, #0
 800b730:	f7f9 fdf5 	bl	800531e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b73a:	2358      	movs	r3, #88	; 0x58
 800b73c:	2200      	movs	r2, #0
 800b73e:	2180      	movs	r1, #128	; 0x80
 800b740:	f7f9 fded 	bl	800531e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b74a:	23c0      	movs	r3, #192	; 0xc0
 800b74c:	2200      	movs	r2, #0
 800b74e:	2181      	movs	r1, #129	; 0x81
 800b750:	f7f9 fde5 	bl	800531e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b75a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b75e:	2200      	movs	r2, #0
 800b760:	2101      	movs	r1, #1
 800b762:	f7f9 fddc 	bl	800531e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b76c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b770:	2200      	movs	r2, #0
 800b772:	2182      	movs	r1, #130	; 0x82
 800b774:	f7f9 fdd3 	bl	800531e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b778:	2300      	movs	r3, #0
}
 800b77a:	4618      	mov	r0, r3
 800b77c:	3708      	adds	r7, #8
 800b77e:	46bd      	mov	sp, r7
 800b780:	bd80      	pop	{r7, pc}
 800b782:	bf00      	nop
 800b784:	20001078 	.word	0x20001078
 800b788:	40005c00 	.word	0x40005c00

0800b78c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b78c:	b580      	push	{r7, lr}
 800b78e:	b084      	sub	sp, #16
 800b790:	af00      	add	r7, sp, #0
 800b792:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b794:	2300      	movs	r3, #0
 800b796:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b798:	2300      	movs	r3, #0
 800b79a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	f7f8 f98e 	bl	8003ac4 <HAL_PCD_Start>
 800b7a8:	4603      	mov	r3, r0
 800b7aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b7ac:	7bfb      	ldrb	r3, [r7, #15]
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	f000 f94e 	bl	800ba50 <USBD_Get_USB_Status>
 800b7b4:	4603      	mov	r3, r0
 800b7b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b7b8:	7bbb      	ldrb	r3, [r7, #14]
}
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	3710      	adds	r7, #16
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	bd80      	pop	{r7, pc}

0800b7c2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b7c2:	b580      	push	{r7, lr}
 800b7c4:	b084      	sub	sp, #16
 800b7c6:	af00      	add	r7, sp, #0
 800b7c8:	6078      	str	r0, [r7, #4]
 800b7ca:	4608      	mov	r0, r1
 800b7cc:	4611      	mov	r1, r2
 800b7ce:	461a      	mov	r2, r3
 800b7d0:	4603      	mov	r3, r0
 800b7d2:	70fb      	strb	r3, [r7, #3]
 800b7d4:	460b      	mov	r3, r1
 800b7d6:	70bb      	strb	r3, [r7, #2]
 800b7d8:	4613      	mov	r3, r2
 800b7da:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b7dc:	2300      	movs	r3, #0
 800b7de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b7e0:	2300      	movs	r3, #0
 800b7e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b7ea:	78bb      	ldrb	r3, [r7, #2]
 800b7ec:	883a      	ldrh	r2, [r7, #0]
 800b7ee:	78f9      	ldrb	r1, [r7, #3]
 800b7f0:	f7f8 fae3 	bl	8003dba <HAL_PCD_EP_Open>
 800b7f4:	4603      	mov	r3, r0
 800b7f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b7f8:	7bfb      	ldrb	r3, [r7, #15]
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	f000 f928 	bl	800ba50 <USBD_Get_USB_Status>
 800b800:	4603      	mov	r3, r0
 800b802:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b804:	7bbb      	ldrb	r3, [r7, #14]
}
 800b806:	4618      	mov	r0, r3
 800b808:	3710      	adds	r7, #16
 800b80a:	46bd      	mov	sp, r7
 800b80c:	bd80      	pop	{r7, pc}

0800b80e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b80e:	b580      	push	{r7, lr}
 800b810:	b084      	sub	sp, #16
 800b812:	af00      	add	r7, sp, #0
 800b814:	6078      	str	r0, [r7, #4]
 800b816:	460b      	mov	r3, r1
 800b818:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b81a:	2300      	movs	r3, #0
 800b81c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b81e:	2300      	movs	r3, #0
 800b820:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b828:	78fa      	ldrb	r2, [r7, #3]
 800b82a:	4611      	mov	r1, r2
 800b82c:	4618      	mov	r0, r3
 800b82e:	f7f8 fb21 	bl	8003e74 <HAL_PCD_EP_Close>
 800b832:	4603      	mov	r3, r0
 800b834:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b836:	7bfb      	ldrb	r3, [r7, #15]
 800b838:	4618      	mov	r0, r3
 800b83a:	f000 f909 	bl	800ba50 <USBD_Get_USB_Status>
 800b83e:	4603      	mov	r3, r0
 800b840:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b842:	7bbb      	ldrb	r3, [r7, #14]
}
 800b844:	4618      	mov	r0, r3
 800b846:	3710      	adds	r7, #16
 800b848:	46bd      	mov	sp, r7
 800b84a:	bd80      	pop	{r7, pc}

0800b84c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b084      	sub	sp, #16
 800b850:	af00      	add	r7, sp, #0
 800b852:	6078      	str	r0, [r7, #4]
 800b854:	460b      	mov	r3, r1
 800b856:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b858:	2300      	movs	r3, #0
 800b85a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b85c:	2300      	movs	r3, #0
 800b85e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b866:	78fa      	ldrb	r2, [r7, #3]
 800b868:	4611      	mov	r1, r2
 800b86a:	4618      	mov	r0, r3
 800b86c:	f7f8 fbc9 	bl	8004002 <HAL_PCD_EP_SetStall>
 800b870:	4603      	mov	r3, r0
 800b872:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b874:	7bfb      	ldrb	r3, [r7, #15]
 800b876:	4618      	mov	r0, r3
 800b878:	f000 f8ea 	bl	800ba50 <USBD_Get_USB_Status>
 800b87c:	4603      	mov	r3, r0
 800b87e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b880:	7bbb      	ldrb	r3, [r7, #14]
}
 800b882:	4618      	mov	r0, r3
 800b884:	3710      	adds	r7, #16
 800b886:	46bd      	mov	sp, r7
 800b888:	bd80      	pop	{r7, pc}

0800b88a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b88a:	b580      	push	{r7, lr}
 800b88c:	b084      	sub	sp, #16
 800b88e:	af00      	add	r7, sp, #0
 800b890:	6078      	str	r0, [r7, #4]
 800b892:	460b      	mov	r3, r1
 800b894:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b896:	2300      	movs	r3, #0
 800b898:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b89a:	2300      	movs	r3, #0
 800b89c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b8a4:	78fa      	ldrb	r2, [r7, #3]
 800b8a6:	4611      	mov	r1, r2
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	f7f8 fc0a 	bl	80040c2 <HAL_PCD_EP_ClrStall>
 800b8ae:	4603      	mov	r3, r0
 800b8b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b8b2:	7bfb      	ldrb	r3, [r7, #15]
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	f000 f8cb 	bl	800ba50 <USBD_Get_USB_Status>
 800b8ba:	4603      	mov	r3, r0
 800b8bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b8be:	7bbb      	ldrb	r3, [r7, #14]
}
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	3710      	adds	r7, #16
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	bd80      	pop	{r7, pc}

0800b8c8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b8c8:	b480      	push	{r7}
 800b8ca:	b085      	sub	sp, #20
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
 800b8d0:	460b      	mov	r3, r1
 800b8d2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b8da:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b8dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	da0c      	bge.n	800b8fe <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b8e4:	78fb      	ldrb	r3, [r7, #3]
 800b8e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b8ea:	68f9      	ldr	r1, [r7, #12]
 800b8ec:	1c5a      	adds	r2, r3, #1
 800b8ee:	4613      	mov	r3, r2
 800b8f0:	009b      	lsls	r3, r3, #2
 800b8f2:	4413      	add	r3, r2
 800b8f4:	00db      	lsls	r3, r3, #3
 800b8f6:	440b      	add	r3, r1
 800b8f8:	3302      	adds	r3, #2
 800b8fa:	781b      	ldrb	r3, [r3, #0]
 800b8fc:	e00b      	b.n	800b916 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b8fe:	78fb      	ldrb	r3, [r7, #3]
 800b900:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b904:	68f9      	ldr	r1, [r7, #12]
 800b906:	4613      	mov	r3, r2
 800b908:	009b      	lsls	r3, r3, #2
 800b90a:	4413      	add	r3, r2
 800b90c:	00db      	lsls	r3, r3, #3
 800b90e:	440b      	add	r3, r1
 800b910:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800b914:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b916:	4618      	mov	r0, r3
 800b918:	3714      	adds	r7, #20
 800b91a:	46bd      	mov	sp, r7
 800b91c:	bc80      	pop	{r7}
 800b91e:	4770      	bx	lr

0800b920 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b920:	b580      	push	{r7, lr}
 800b922:	b084      	sub	sp, #16
 800b924:	af00      	add	r7, sp, #0
 800b926:	6078      	str	r0, [r7, #4]
 800b928:	460b      	mov	r3, r1
 800b92a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b92c:	2300      	movs	r3, #0
 800b92e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b930:	2300      	movs	r3, #0
 800b932:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b93a:	78fa      	ldrb	r2, [r7, #3]
 800b93c:	4611      	mov	r1, r2
 800b93e:	4618      	mov	r0, r3
 800b940:	f7f8 fa16 	bl	8003d70 <HAL_PCD_SetAddress>
 800b944:	4603      	mov	r3, r0
 800b946:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b948:	7bfb      	ldrb	r3, [r7, #15]
 800b94a:	4618      	mov	r0, r3
 800b94c:	f000 f880 	bl	800ba50 <USBD_Get_USB_Status>
 800b950:	4603      	mov	r3, r0
 800b952:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b954:	7bbb      	ldrb	r3, [r7, #14]
}
 800b956:	4618      	mov	r0, r3
 800b958:	3710      	adds	r7, #16
 800b95a:	46bd      	mov	sp, r7
 800b95c:	bd80      	pop	{r7, pc}

0800b95e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b95e:	b580      	push	{r7, lr}
 800b960:	b086      	sub	sp, #24
 800b962:	af00      	add	r7, sp, #0
 800b964:	60f8      	str	r0, [r7, #12]
 800b966:	607a      	str	r2, [r7, #4]
 800b968:	461a      	mov	r2, r3
 800b96a:	460b      	mov	r3, r1
 800b96c:	72fb      	strb	r3, [r7, #11]
 800b96e:	4613      	mov	r3, r2
 800b970:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b972:	2300      	movs	r3, #0
 800b974:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b976:	2300      	movs	r3, #0
 800b978:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b980:	893b      	ldrh	r3, [r7, #8]
 800b982:	7af9      	ldrb	r1, [r7, #11]
 800b984:	687a      	ldr	r2, [r7, #4]
 800b986:	f7f8 fb05 	bl	8003f94 <HAL_PCD_EP_Transmit>
 800b98a:	4603      	mov	r3, r0
 800b98c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b98e:	7dfb      	ldrb	r3, [r7, #23]
 800b990:	4618      	mov	r0, r3
 800b992:	f000 f85d 	bl	800ba50 <USBD_Get_USB_Status>
 800b996:	4603      	mov	r3, r0
 800b998:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b99a:	7dbb      	ldrb	r3, [r7, #22]
}
 800b99c:	4618      	mov	r0, r3
 800b99e:	3718      	adds	r7, #24
 800b9a0:	46bd      	mov	sp, r7
 800b9a2:	bd80      	pop	{r7, pc}

0800b9a4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b086      	sub	sp, #24
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	60f8      	str	r0, [r7, #12]
 800b9ac:	607a      	str	r2, [r7, #4]
 800b9ae:	461a      	mov	r2, r3
 800b9b0:	460b      	mov	r3, r1
 800b9b2:	72fb      	strb	r3, [r7, #11]
 800b9b4:	4613      	mov	r3, r2
 800b9b6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9bc:	2300      	movs	r3, #0
 800b9be:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b9c6:	893b      	ldrh	r3, [r7, #8]
 800b9c8:	7af9      	ldrb	r1, [r7, #11]
 800b9ca:	687a      	ldr	r2, [r7, #4]
 800b9cc:	f7f8 fa9a 	bl	8003f04 <HAL_PCD_EP_Receive>
 800b9d0:	4603      	mov	r3, r0
 800b9d2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b9d4:	7dfb      	ldrb	r3, [r7, #23]
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	f000 f83a 	bl	800ba50 <USBD_Get_USB_Status>
 800b9dc:	4603      	mov	r3, r0
 800b9de:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b9e0:	7dbb      	ldrb	r3, [r7, #22]
}
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	3718      	adds	r7, #24
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	bd80      	pop	{r7, pc}

0800b9ea <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b9ea:	b580      	push	{r7, lr}
 800b9ec:	b082      	sub	sp, #8
 800b9ee:	af00      	add	r7, sp, #0
 800b9f0:	6078      	str	r0, [r7, #4]
 800b9f2:	460b      	mov	r3, r1
 800b9f4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b9fc:	78fa      	ldrb	r2, [r7, #3]
 800b9fe:	4611      	mov	r1, r2
 800ba00:	4618      	mov	r0, r3
 800ba02:	f7f8 fab0 	bl	8003f66 <HAL_PCD_EP_GetRxCount>
 800ba06:	4603      	mov	r3, r0
}
 800ba08:	4618      	mov	r0, r3
 800ba0a:	3708      	adds	r7, #8
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	bd80      	pop	{r7, pc}

0800ba10 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ba10:	b480      	push	{r7}
 800ba12:	b083      	sub	sp, #12
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ba18:	4b02      	ldr	r3, [pc, #8]	; (800ba24 <USBD_static_malloc+0x14>)
}
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	370c      	adds	r7, #12
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	bc80      	pop	{r7}
 800ba22:	4770      	bx	lr
 800ba24:	20001368 	.word	0x20001368

0800ba28 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ba28:	b480      	push	{r7}
 800ba2a:	b083      	sub	sp, #12
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]

}
 800ba30:	bf00      	nop
 800ba32:	370c      	adds	r7, #12
 800ba34:	46bd      	mov	sp, r7
 800ba36:	bc80      	pop	{r7}
 800ba38:	4770      	bx	lr

0800ba3a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba3a:	b480      	push	{r7}
 800ba3c:	b083      	sub	sp, #12
 800ba3e:	af00      	add	r7, sp, #0
 800ba40:	6078      	str	r0, [r7, #4]
 800ba42:	460b      	mov	r3, r1
 800ba44:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800ba46:	bf00      	nop
 800ba48:	370c      	adds	r7, #12
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	bc80      	pop	{r7}
 800ba4e:	4770      	bx	lr

0800ba50 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ba50:	b480      	push	{r7}
 800ba52:	b085      	sub	sp, #20
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	4603      	mov	r3, r0
 800ba58:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ba5e:	79fb      	ldrb	r3, [r7, #7]
 800ba60:	2b03      	cmp	r3, #3
 800ba62:	d817      	bhi.n	800ba94 <USBD_Get_USB_Status+0x44>
 800ba64:	a201      	add	r2, pc, #4	; (adr r2, 800ba6c <USBD_Get_USB_Status+0x1c>)
 800ba66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba6a:	bf00      	nop
 800ba6c:	0800ba7d 	.word	0x0800ba7d
 800ba70:	0800ba83 	.word	0x0800ba83
 800ba74:	0800ba89 	.word	0x0800ba89
 800ba78:	0800ba8f 	.word	0x0800ba8f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	73fb      	strb	r3, [r7, #15]
    break;
 800ba80:	e00b      	b.n	800ba9a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ba82:	2302      	movs	r3, #2
 800ba84:	73fb      	strb	r3, [r7, #15]
    break;
 800ba86:	e008      	b.n	800ba9a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ba88:	2301      	movs	r3, #1
 800ba8a:	73fb      	strb	r3, [r7, #15]
    break;
 800ba8c:	e005      	b.n	800ba9a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ba8e:	2302      	movs	r3, #2
 800ba90:	73fb      	strb	r3, [r7, #15]
    break;
 800ba92:	e002      	b.n	800ba9a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ba94:	2302      	movs	r3, #2
 800ba96:	73fb      	strb	r3, [r7, #15]
    break;
 800ba98:	bf00      	nop
  }
  return usb_status;
 800ba9a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	3714      	adds	r7, #20
 800baa0:	46bd      	mov	sp, r7
 800baa2:	bc80      	pop	{r7}
 800baa4:	4770      	bx	lr
 800baa6:	bf00      	nop

0800baa8 <malloc>:
 800baa8:	4b02      	ldr	r3, [pc, #8]	; (800bab4 <malloc+0xc>)
 800baaa:	4601      	mov	r1, r0
 800baac:	6818      	ldr	r0, [r3, #0]
 800baae:	f000 b82b 	b.w	800bb08 <_malloc_r>
 800bab2:	bf00      	nop
 800bab4:	20000224 	.word	0x20000224

0800bab8 <free>:
 800bab8:	4b02      	ldr	r3, [pc, #8]	; (800bac4 <free+0xc>)
 800baba:	4601      	mov	r1, r0
 800babc:	6818      	ldr	r0, [r3, #0]
 800babe:	f000 bc2d 	b.w	800c31c <_free_r>
 800bac2:	bf00      	nop
 800bac4:	20000224 	.word	0x20000224

0800bac8 <sbrk_aligned>:
 800bac8:	b570      	push	{r4, r5, r6, lr}
 800baca:	4e0e      	ldr	r6, [pc, #56]	; (800bb04 <sbrk_aligned+0x3c>)
 800bacc:	460c      	mov	r4, r1
 800bace:	6831      	ldr	r1, [r6, #0]
 800bad0:	4605      	mov	r5, r0
 800bad2:	b911      	cbnz	r1, 800bada <sbrk_aligned+0x12>
 800bad4:	f000 fba8 	bl	800c228 <_sbrk_r>
 800bad8:	6030      	str	r0, [r6, #0]
 800bada:	4621      	mov	r1, r4
 800badc:	4628      	mov	r0, r5
 800bade:	f000 fba3 	bl	800c228 <_sbrk_r>
 800bae2:	1c43      	adds	r3, r0, #1
 800bae4:	d00a      	beq.n	800bafc <sbrk_aligned+0x34>
 800bae6:	1cc4      	adds	r4, r0, #3
 800bae8:	f024 0403 	bic.w	r4, r4, #3
 800baec:	42a0      	cmp	r0, r4
 800baee:	d007      	beq.n	800bb00 <sbrk_aligned+0x38>
 800baf0:	1a21      	subs	r1, r4, r0
 800baf2:	4628      	mov	r0, r5
 800baf4:	f000 fb98 	bl	800c228 <_sbrk_r>
 800baf8:	3001      	adds	r0, #1
 800bafa:	d101      	bne.n	800bb00 <sbrk_aligned+0x38>
 800bafc:	f04f 34ff 	mov.w	r4, #4294967295
 800bb00:	4620      	mov	r0, r4
 800bb02:	bd70      	pop	{r4, r5, r6, pc}
 800bb04:	2000158c 	.word	0x2000158c

0800bb08 <_malloc_r>:
 800bb08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb0c:	1ccd      	adds	r5, r1, #3
 800bb0e:	f025 0503 	bic.w	r5, r5, #3
 800bb12:	3508      	adds	r5, #8
 800bb14:	2d0c      	cmp	r5, #12
 800bb16:	bf38      	it	cc
 800bb18:	250c      	movcc	r5, #12
 800bb1a:	2d00      	cmp	r5, #0
 800bb1c:	4607      	mov	r7, r0
 800bb1e:	db01      	blt.n	800bb24 <_malloc_r+0x1c>
 800bb20:	42a9      	cmp	r1, r5
 800bb22:	d905      	bls.n	800bb30 <_malloc_r+0x28>
 800bb24:	230c      	movs	r3, #12
 800bb26:	2600      	movs	r6, #0
 800bb28:	603b      	str	r3, [r7, #0]
 800bb2a:	4630      	mov	r0, r6
 800bb2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb30:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800bc04 <_malloc_r+0xfc>
 800bb34:	f000 f868 	bl	800bc08 <__malloc_lock>
 800bb38:	f8d8 3000 	ldr.w	r3, [r8]
 800bb3c:	461c      	mov	r4, r3
 800bb3e:	bb5c      	cbnz	r4, 800bb98 <_malloc_r+0x90>
 800bb40:	4629      	mov	r1, r5
 800bb42:	4638      	mov	r0, r7
 800bb44:	f7ff ffc0 	bl	800bac8 <sbrk_aligned>
 800bb48:	1c43      	adds	r3, r0, #1
 800bb4a:	4604      	mov	r4, r0
 800bb4c:	d155      	bne.n	800bbfa <_malloc_r+0xf2>
 800bb4e:	f8d8 4000 	ldr.w	r4, [r8]
 800bb52:	4626      	mov	r6, r4
 800bb54:	2e00      	cmp	r6, #0
 800bb56:	d145      	bne.n	800bbe4 <_malloc_r+0xdc>
 800bb58:	2c00      	cmp	r4, #0
 800bb5a:	d048      	beq.n	800bbee <_malloc_r+0xe6>
 800bb5c:	6823      	ldr	r3, [r4, #0]
 800bb5e:	4631      	mov	r1, r6
 800bb60:	4638      	mov	r0, r7
 800bb62:	eb04 0903 	add.w	r9, r4, r3
 800bb66:	f000 fb5f 	bl	800c228 <_sbrk_r>
 800bb6a:	4581      	cmp	r9, r0
 800bb6c:	d13f      	bne.n	800bbee <_malloc_r+0xe6>
 800bb6e:	6821      	ldr	r1, [r4, #0]
 800bb70:	4638      	mov	r0, r7
 800bb72:	1a6d      	subs	r5, r5, r1
 800bb74:	4629      	mov	r1, r5
 800bb76:	f7ff ffa7 	bl	800bac8 <sbrk_aligned>
 800bb7a:	3001      	adds	r0, #1
 800bb7c:	d037      	beq.n	800bbee <_malloc_r+0xe6>
 800bb7e:	6823      	ldr	r3, [r4, #0]
 800bb80:	442b      	add	r3, r5
 800bb82:	6023      	str	r3, [r4, #0]
 800bb84:	f8d8 3000 	ldr.w	r3, [r8]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d038      	beq.n	800bbfe <_malloc_r+0xf6>
 800bb8c:	685a      	ldr	r2, [r3, #4]
 800bb8e:	42a2      	cmp	r2, r4
 800bb90:	d12b      	bne.n	800bbea <_malloc_r+0xe2>
 800bb92:	2200      	movs	r2, #0
 800bb94:	605a      	str	r2, [r3, #4]
 800bb96:	e00f      	b.n	800bbb8 <_malloc_r+0xb0>
 800bb98:	6822      	ldr	r2, [r4, #0]
 800bb9a:	1b52      	subs	r2, r2, r5
 800bb9c:	d41f      	bmi.n	800bbde <_malloc_r+0xd6>
 800bb9e:	2a0b      	cmp	r2, #11
 800bba0:	d917      	bls.n	800bbd2 <_malloc_r+0xca>
 800bba2:	1961      	adds	r1, r4, r5
 800bba4:	42a3      	cmp	r3, r4
 800bba6:	6025      	str	r5, [r4, #0]
 800bba8:	bf18      	it	ne
 800bbaa:	6059      	strne	r1, [r3, #4]
 800bbac:	6863      	ldr	r3, [r4, #4]
 800bbae:	bf08      	it	eq
 800bbb0:	f8c8 1000 	streq.w	r1, [r8]
 800bbb4:	5162      	str	r2, [r4, r5]
 800bbb6:	604b      	str	r3, [r1, #4]
 800bbb8:	4638      	mov	r0, r7
 800bbba:	f104 060b 	add.w	r6, r4, #11
 800bbbe:	f000 f829 	bl	800bc14 <__malloc_unlock>
 800bbc2:	f026 0607 	bic.w	r6, r6, #7
 800bbc6:	1d23      	adds	r3, r4, #4
 800bbc8:	1af2      	subs	r2, r6, r3
 800bbca:	d0ae      	beq.n	800bb2a <_malloc_r+0x22>
 800bbcc:	1b9b      	subs	r3, r3, r6
 800bbce:	50a3      	str	r3, [r4, r2]
 800bbd0:	e7ab      	b.n	800bb2a <_malloc_r+0x22>
 800bbd2:	42a3      	cmp	r3, r4
 800bbd4:	6862      	ldr	r2, [r4, #4]
 800bbd6:	d1dd      	bne.n	800bb94 <_malloc_r+0x8c>
 800bbd8:	f8c8 2000 	str.w	r2, [r8]
 800bbdc:	e7ec      	b.n	800bbb8 <_malloc_r+0xb0>
 800bbde:	4623      	mov	r3, r4
 800bbe0:	6864      	ldr	r4, [r4, #4]
 800bbe2:	e7ac      	b.n	800bb3e <_malloc_r+0x36>
 800bbe4:	4634      	mov	r4, r6
 800bbe6:	6876      	ldr	r6, [r6, #4]
 800bbe8:	e7b4      	b.n	800bb54 <_malloc_r+0x4c>
 800bbea:	4613      	mov	r3, r2
 800bbec:	e7cc      	b.n	800bb88 <_malloc_r+0x80>
 800bbee:	230c      	movs	r3, #12
 800bbf0:	4638      	mov	r0, r7
 800bbf2:	603b      	str	r3, [r7, #0]
 800bbf4:	f000 f80e 	bl	800bc14 <__malloc_unlock>
 800bbf8:	e797      	b.n	800bb2a <_malloc_r+0x22>
 800bbfa:	6025      	str	r5, [r4, #0]
 800bbfc:	e7dc      	b.n	800bbb8 <_malloc_r+0xb0>
 800bbfe:	605b      	str	r3, [r3, #4]
 800bc00:	deff      	udf	#255	; 0xff
 800bc02:	bf00      	nop
 800bc04:	20001588 	.word	0x20001588

0800bc08 <__malloc_lock>:
 800bc08:	4801      	ldr	r0, [pc, #4]	; (800bc10 <__malloc_lock+0x8>)
 800bc0a:	f000 bb59 	b.w	800c2c0 <__retarget_lock_acquire_recursive>
 800bc0e:	bf00      	nop
 800bc10:	200016d0 	.word	0x200016d0

0800bc14 <__malloc_unlock>:
 800bc14:	4801      	ldr	r0, [pc, #4]	; (800bc1c <__malloc_unlock+0x8>)
 800bc16:	f000 bb54 	b.w	800c2c2 <__retarget_lock_release_recursive>
 800bc1a:	bf00      	nop
 800bc1c:	200016d0 	.word	0x200016d0

0800bc20 <_strtol_l.constprop.0>:
 800bc20:	2b01      	cmp	r3, #1
 800bc22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc26:	4686      	mov	lr, r0
 800bc28:	4690      	mov	r8, r2
 800bc2a:	d001      	beq.n	800bc30 <_strtol_l.constprop.0+0x10>
 800bc2c:	2b24      	cmp	r3, #36	; 0x24
 800bc2e:	d906      	bls.n	800bc3e <_strtol_l.constprop.0+0x1e>
 800bc30:	f000 fb1c 	bl	800c26c <__errno>
 800bc34:	2316      	movs	r3, #22
 800bc36:	6003      	str	r3, [r0, #0]
 800bc38:	2000      	movs	r0, #0
 800bc3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc3e:	460d      	mov	r5, r1
 800bc40:	4835      	ldr	r0, [pc, #212]	; (800bd18 <_strtol_l.constprop.0+0xf8>)
 800bc42:	462a      	mov	r2, r5
 800bc44:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bc48:	5d06      	ldrb	r6, [r0, r4]
 800bc4a:	f016 0608 	ands.w	r6, r6, #8
 800bc4e:	d1f8      	bne.n	800bc42 <_strtol_l.constprop.0+0x22>
 800bc50:	2c2d      	cmp	r4, #45	; 0x2d
 800bc52:	d12e      	bne.n	800bcb2 <_strtol_l.constprop.0+0x92>
 800bc54:	2601      	movs	r6, #1
 800bc56:	782c      	ldrb	r4, [r5, #0]
 800bc58:	1c95      	adds	r5, r2, #2
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d057      	beq.n	800bd0e <_strtol_l.constprop.0+0xee>
 800bc5e:	2b10      	cmp	r3, #16
 800bc60:	d109      	bne.n	800bc76 <_strtol_l.constprop.0+0x56>
 800bc62:	2c30      	cmp	r4, #48	; 0x30
 800bc64:	d107      	bne.n	800bc76 <_strtol_l.constprop.0+0x56>
 800bc66:	782a      	ldrb	r2, [r5, #0]
 800bc68:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800bc6c:	2a58      	cmp	r2, #88	; 0x58
 800bc6e:	d149      	bne.n	800bd04 <_strtol_l.constprop.0+0xe4>
 800bc70:	2310      	movs	r3, #16
 800bc72:	786c      	ldrb	r4, [r5, #1]
 800bc74:	3502      	adds	r5, #2
 800bc76:	2200      	movs	r2, #0
 800bc78:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 800bc7c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800bc80:	fbbc f9f3 	udiv	r9, ip, r3
 800bc84:	4610      	mov	r0, r2
 800bc86:	fb03 ca19 	mls	sl, r3, r9, ip
 800bc8a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800bc8e:	2f09      	cmp	r7, #9
 800bc90:	d814      	bhi.n	800bcbc <_strtol_l.constprop.0+0x9c>
 800bc92:	463c      	mov	r4, r7
 800bc94:	42a3      	cmp	r3, r4
 800bc96:	dd20      	ble.n	800bcda <_strtol_l.constprop.0+0xba>
 800bc98:	1c57      	adds	r7, r2, #1
 800bc9a:	d007      	beq.n	800bcac <_strtol_l.constprop.0+0x8c>
 800bc9c:	4581      	cmp	r9, r0
 800bc9e:	d319      	bcc.n	800bcd4 <_strtol_l.constprop.0+0xb4>
 800bca0:	d101      	bne.n	800bca6 <_strtol_l.constprop.0+0x86>
 800bca2:	45a2      	cmp	sl, r4
 800bca4:	db16      	blt.n	800bcd4 <_strtol_l.constprop.0+0xb4>
 800bca6:	2201      	movs	r2, #1
 800bca8:	fb00 4003 	mla	r0, r0, r3, r4
 800bcac:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bcb0:	e7eb      	b.n	800bc8a <_strtol_l.constprop.0+0x6a>
 800bcb2:	2c2b      	cmp	r4, #43	; 0x2b
 800bcb4:	bf04      	itt	eq
 800bcb6:	782c      	ldrbeq	r4, [r5, #0]
 800bcb8:	1c95      	addeq	r5, r2, #2
 800bcba:	e7ce      	b.n	800bc5a <_strtol_l.constprop.0+0x3a>
 800bcbc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800bcc0:	2f19      	cmp	r7, #25
 800bcc2:	d801      	bhi.n	800bcc8 <_strtol_l.constprop.0+0xa8>
 800bcc4:	3c37      	subs	r4, #55	; 0x37
 800bcc6:	e7e5      	b.n	800bc94 <_strtol_l.constprop.0+0x74>
 800bcc8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800bccc:	2f19      	cmp	r7, #25
 800bcce:	d804      	bhi.n	800bcda <_strtol_l.constprop.0+0xba>
 800bcd0:	3c57      	subs	r4, #87	; 0x57
 800bcd2:	e7df      	b.n	800bc94 <_strtol_l.constprop.0+0x74>
 800bcd4:	f04f 32ff 	mov.w	r2, #4294967295
 800bcd8:	e7e8      	b.n	800bcac <_strtol_l.constprop.0+0x8c>
 800bcda:	1c53      	adds	r3, r2, #1
 800bcdc:	d108      	bne.n	800bcf0 <_strtol_l.constprop.0+0xd0>
 800bcde:	2322      	movs	r3, #34	; 0x22
 800bce0:	4660      	mov	r0, ip
 800bce2:	f8ce 3000 	str.w	r3, [lr]
 800bce6:	f1b8 0f00 	cmp.w	r8, #0
 800bcea:	d0a6      	beq.n	800bc3a <_strtol_l.constprop.0+0x1a>
 800bcec:	1e69      	subs	r1, r5, #1
 800bcee:	e006      	b.n	800bcfe <_strtol_l.constprop.0+0xde>
 800bcf0:	b106      	cbz	r6, 800bcf4 <_strtol_l.constprop.0+0xd4>
 800bcf2:	4240      	negs	r0, r0
 800bcf4:	f1b8 0f00 	cmp.w	r8, #0
 800bcf8:	d09f      	beq.n	800bc3a <_strtol_l.constprop.0+0x1a>
 800bcfa:	2a00      	cmp	r2, #0
 800bcfc:	d1f6      	bne.n	800bcec <_strtol_l.constprop.0+0xcc>
 800bcfe:	f8c8 1000 	str.w	r1, [r8]
 800bd02:	e79a      	b.n	800bc3a <_strtol_l.constprop.0+0x1a>
 800bd04:	2430      	movs	r4, #48	; 0x30
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d1b5      	bne.n	800bc76 <_strtol_l.constprop.0+0x56>
 800bd0a:	2308      	movs	r3, #8
 800bd0c:	e7b3      	b.n	800bc76 <_strtol_l.constprop.0+0x56>
 800bd0e:	2c30      	cmp	r4, #48	; 0x30
 800bd10:	d0a9      	beq.n	800bc66 <_strtol_l.constprop.0+0x46>
 800bd12:	230a      	movs	r3, #10
 800bd14:	e7af      	b.n	800bc76 <_strtol_l.constprop.0+0x56>
 800bd16:	bf00      	nop
 800bd18:	0800d76b 	.word	0x0800d76b

0800bd1c <strtol>:
 800bd1c:	4613      	mov	r3, r2
 800bd1e:	460a      	mov	r2, r1
 800bd20:	4601      	mov	r1, r0
 800bd22:	4802      	ldr	r0, [pc, #8]	; (800bd2c <strtol+0x10>)
 800bd24:	6800      	ldr	r0, [r0, #0]
 800bd26:	f7ff bf7b 	b.w	800bc20 <_strtol_l.constprop.0>
 800bd2a:	bf00      	nop
 800bd2c:	20000224 	.word	0x20000224

0800bd30 <_strtoul_l.constprop.0>:
 800bd30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bd34:	4686      	mov	lr, r0
 800bd36:	460d      	mov	r5, r1
 800bd38:	4f35      	ldr	r7, [pc, #212]	; (800be10 <_strtoul_l.constprop.0+0xe0>)
 800bd3a:	4628      	mov	r0, r5
 800bd3c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bd40:	5d3e      	ldrb	r6, [r7, r4]
 800bd42:	f016 0608 	ands.w	r6, r6, #8
 800bd46:	d1f8      	bne.n	800bd3a <_strtoul_l.constprop.0+0xa>
 800bd48:	2c2d      	cmp	r4, #45	; 0x2d
 800bd4a:	d130      	bne.n	800bdae <_strtoul_l.constprop.0+0x7e>
 800bd4c:	2601      	movs	r6, #1
 800bd4e:	782c      	ldrb	r4, [r5, #0]
 800bd50:	1c85      	adds	r5, r0, #2
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d057      	beq.n	800be06 <_strtoul_l.constprop.0+0xd6>
 800bd56:	2b10      	cmp	r3, #16
 800bd58:	d109      	bne.n	800bd6e <_strtoul_l.constprop.0+0x3e>
 800bd5a:	2c30      	cmp	r4, #48	; 0x30
 800bd5c:	d107      	bne.n	800bd6e <_strtoul_l.constprop.0+0x3e>
 800bd5e:	7828      	ldrb	r0, [r5, #0]
 800bd60:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800bd64:	2858      	cmp	r0, #88	; 0x58
 800bd66:	d149      	bne.n	800bdfc <_strtoul_l.constprop.0+0xcc>
 800bd68:	2310      	movs	r3, #16
 800bd6a:	786c      	ldrb	r4, [r5, #1]
 800bd6c:	3502      	adds	r5, #2
 800bd6e:	f04f 38ff 	mov.w	r8, #4294967295
 800bd72:	fbb8 f8f3 	udiv	r8, r8, r3
 800bd76:	2700      	movs	r7, #0
 800bd78:	fb03 f908 	mul.w	r9, r3, r8
 800bd7c:	4638      	mov	r0, r7
 800bd7e:	ea6f 0909 	mvn.w	r9, r9
 800bd82:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800bd86:	f1bc 0f09 	cmp.w	ip, #9
 800bd8a:	d815      	bhi.n	800bdb8 <_strtoul_l.constprop.0+0x88>
 800bd8c:	4664      	mov	r4, ip
 800bd8e:	42a3      	cmp	r3, r4
 800bd90:	dd23      	ble.n	800bdda <_strtoul_l.constprop.0+0xaa>
 800bd92:	f1b7 3fff 	cmp.w	r7, #4294967295
 800bd96:	d007      	beq.n	800bda8 <_strtoul_l.constprop.0+0x78>
 800bd98:	4580      	cmp	r8, r0
 800bd9a:	d31b      	bcc.n	800bdd4 <_strtoul_l.constprop.0+0xa4>
 800bd9c:	d101      	bne.n	800bda2 <_strtoul_l.constprop.0+0x72>
 800bd9e:	45a1      	cmp	r9, r4
 800bda0:	db18      	blt.n	800bdd4 <_strtoul_l.constprop.0+0xa4>
 800bda2:	2701      	movs	r7, #1
 800bda4:	fb00 4003 	mla	r0, r0, r3, r4
 800bda8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bdac:	e7e9      	b.n	800bd82 <_strtoul_l.constprop.0+0x52>
 800bdae:	2c2b      	cmp	r4, #43	; 0x2b
 800bdb0:	bf04      	itt	eq
 800bdb2:	782c      	ldrbeq	r4, [r5, #0]
 800bdb4:	1c85      	addeq	r5, r0, #2
 800bdb6:	e7cc      	b.n	800bd52 <_strtoul_l.constprop.0+0x22>
 800bdb8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800bdbc:	f1bc 0f19 	cmp.w	ip, #25
 800bdc0:	d801      	bhi.n	800bdc6 <_strtoul_l.constprop.0+0x96>
 800bdc2:	3c37      	subs	r4, #55	; 0x37
 800bdc4:	e7e3      	b.n	800bd8e <_strtoul_l.constprop.0+0x5e>
 800bdc6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800bdca:	f1bc 0f19 	cmp.w	ip, #25
 800bdce:	d804      	bhi.n	800bdda <_strtoul_l.constprop.0+0xaa>
 800bdd0:	3c57      	subs	r4, #87	; 0x57
 800bdd2:	e7dc      	b.n	800bd8e <_strtoul_l.constprop.0+0x5e>
 800bdd4:	f04f 37ff 	mov.w	r7, #4294967295
 800bdd8:	e7e6      	b.n	800bda8 <_strtoul_l.constprop.0+0x78>
 800bdda:	1c7b      	adds	r3, r7, #1
 800bddc:	d106      	bne.n	800bdec <_strtoul_l.constprop.0+0xbc>
 800bdde:	2322      	movs	r3, #34	; 0x22
 800bde0:	4638      	mov	r0, r7
 800bde2:	f8ce 3000 	str.w	r3, [lr]
 800bde6:	b932      	cbnz	r2, 800bdf6 <_strtoul_l.constprop.0+0xc6>
 800bde8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bdec:	b106      	cbz	r6, 800bdf0 <_strtoul_l.constprop.0+0xc0>
 800bdee:	4240      	negs	r0, r0
 800bdf0:	2a00      	cmp	r2, #0
 800bdf2:	d0f9      	beq.n	800bde8 <_strtoul_l.constprop.0+0xb8>
 800bdf4:	b107      	cbz	r7, 800bdf8 <_strtoul_l.constprop.0+0xc8>
 800bdf6:	1e69      	subs	r1, r5, #1
 800bdf8:	6011      	str	r1, [r2, #0]
 800bdfa:	e7f5      	b.n	800bde8 <_strtoul_l.constprop.0+0xb8>
 800bdfc:	2430      	movs	r4, #48	; 0x30
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d1b5      	bne.n	800bd6e <_strtoul_l.constprop.0+0x3e>
 800be02:	2308      	movs	r3, #8
 800be04:	e7b3      	b.n	800bd6e <_strtoul_l.constprop.0+0x3e>
 800be06:	2c30      	cmp	r4, #48	; 0x30
 800be08:	d0a9      	beq.n	800bd5e <_strtoul_l.constprop.0+0x2e>
 800be0a:	230a      	movs	r3, #10
 800be0c:	e7af      	b.n	800bd6e <_strtoul_l.constprop.0+0x3e>
 800be0e:	bf00      	nop
 800be10:	0800d76b 	.word	0x0800d76b

0800be14 <strtoul>:
 800be14:	4613      	mov	r3, r2
 800be16:	460a      	mov	r2, r1
 800be18:	4601      	mov	r1, r0
 800be1a:	4802      	ldr	r0, [pc, #8]	; (800be24 <strtoul+0x10>)
 800be1c:	6800      	ldr	r0, [r0, #0]
 800be1e:	f7ff bf87 	b.w	800bd30 <_strtoul_l.constprop.0>
 800be22:	bf00      	nop
 800be24:	20000224 	.word	0x20000224

0800be28 <std>:
 800be28:	2300      	movs	r3, #0
 800be2a:	b510      	push	{r4, lr}
 800be2c:	4604      	mov	r4, r0
 800be2e:	e9c0 3300 	strd	r3, r3, [r0]
 800be32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800be36:	6083      	str	r3, [r0, #8]
 800be38:	8181      	strh	r1, [r0, #12]
 800be3a:	6643      	str	r3, [r0, #100]	; 0x64
 800be3c:	81c2      	strh	r2, [r0, #14]
 800be3e:	6183      	str	r3, [r0, #24]
 800be40:	4619      	mov	r1, r3
 800be42:	2208      	movs	r2, #8
 800be44:	305c      	adds	r0, #92	; 0x5c
 800be46:	f000 f93b 	bl	800c0c0 <memset>
 800be4a:	4b05      	ldr	r3, [pc, #20]	; (800be60 <std+0x38>)
 800be4c:	6224      	str	r4, [r4, #32]
 800be4e:	6263      	str	r3, [r4, #36]	; 0x24
 800be50:	4b04      	ldr	r3, [pc, #16]	; (800be64 <std+0x3c>)
 800be52:	62a3      	str	r3, [r4, #40]	; 0x28
 800be54:	4b04      	ldr	r3, [pc, #16]	; (800be68 <std+0x40>)
 800be56:	62e3      	str	r3, [r4, #44]	; 0x2c
 800be58:	4b04      	ldr	r3, [pc, #16]	; (800be6c <std+0x44>)
 800be5a:	6323      	str	r3, [r4, #48]	; 0x30
 800be5c:	bd10      	pop	{r4, pc}
 800be5e:	bf00      	nop
 800be60:	0800bfc9 	.word	0x0800bfc9
 800be64:	0800bfeb 	.word	0x0800bfeb
 800be68:	0800c023 	.word	0x0800c023
 800be6c:	0800c047 	.word	0x0800c047

0800be70 <stdio_exit_handler>:
 800be70:	4a02      	ldr	r2, [pc, #8]	; (800be7c <stdio_exit_handler+0xc>)
 800be72:	4903      	ldr	r1, [pc, #12]	; (800be80 <stdio_exit_handler+0x10>)
 800be74:	4803      	ldr	r0, [pc, #12]	; (800be84 <stdio_exit_handler+0x14>)
 800be76:	f000 b869 	b.w	800bf4c <_fwalk_sglue>
 800be7a:	bf00      	nop
 800be7c:	200001cc 	.word	0x200001cc
 800be80:	0800ca89 	.word	0x0800ca89
 800be84:	200001d8 	.word	0x200001d8

0800be88 <cleanup_stdio>:
 800be88:	6841      	ldr	r1, [r0, #4]
 800be8a:	4b0c      	ldr	r3, [pc, #48]	; (800bebc <cleanup_stdio+0x34>)
 800be8c:	b510      	push	{r4, lr}
 800be8e:	4299      	cmp	r1, r3
 800be90:	4604      	mov	r4, r0
 800be92:	d001      	beq.n	800be98 <cleanup_stdio+0x10>
 800be94:	f000 fdf8 	bl	800ca88 <_fflush_r>
 800be98:	68a1      	ldr	r1, [r4, #8]
 800be9a:	4b09      	ldr	r3, [pc, #36]	; (800bec0 <cleanup_stdio+0x38>)
 800be9c:	4299      	cmp	r1, r3
 800be9e:	d002      	beq.n	800bea6 <cleanup_stdio+0x1e>
 800bea0:	4620      	mov	r0, r4
 800bea2:	f000 fdf1 	bl	800ca88 <_fflush_r>
 800bea6:	68e1      	ldr	r1, [r4, #12]
 800bea8:	4b06      	ldr	r3, [pc, #24]	; (800bec4 <cleanup_stdio+0x3c>)
 800beaa:	4299      	cmp	r1, r3
 800beac:	d004      	beq.n	800beb8 <cleanup_stdio+0x30>
 800beae:	4620      	mov	r0, r4
 800beb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800beb4:	f000 bde8 	b.w	800ca88 <_fflush_r>
 800beb8:	bd10      	pop	{r4, pc}
 800beba:	bf00      	nop
 800bebc:	20001590 	.word	0x20001590
 800bec0:	200015f8 	.word	0x200015f8
 800bec4:	20001660 	.word	0x20001660

0800bec8 <global_stdio_init.part.0>:
 800bec8:	b510      	push	{r4, lr}
 800beca:	4b0b      	ldr	r3, [pc, #44]	; (800bef8 <global_stdio_init.part.0+0x30>)
 800becc:	4c0b      	ldr	r4, [pc, #44]	; (800befc <global_stdio_init.part.0+0x34>)
 800bece:	4a0c      	ldr	r2, [pc, #48]	; (800bf00 <global_stdio_init.part.0+0x38>)
 800bed0:	4620      	mov	r0, r4
 800bed2:	601a      	str	r2, [r3, #0]
 800bed4:	2104      	movs	r1, #4
 800bed6:	2200      	movs	r2, #0
 800bed8:	f7ff ffa6 	bl	800be28 <std>
 800bedc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800bee0:	2201      	movs	r2, #1
 800bee2:	2109      	movs	r1, #9
 800bee4:	f7ff ffa0 	bl	800be28 <std>
 800bee8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800beec:	2202      	movs	r2, #2
 800beee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bef2:	2112      	movs	r1, #18
 800bef4:	f7ff bf98 	b.w	800be28 <std>
 800bef8:	200016c8 	.word	0x200016c8
 800befc:	20001590 	.word	0x20001590
 800bf00:	0800be71 	.word	0x0800be71

0800bf04 <__sfp_lock_acquire>:
 800bf04:	4801      	ldr	r0, [pc, #4]	; (800bf0c <__sfp_lock_acquire+0x8>)
 800bf06:	f000 b9db 	b.w	800c2c0 <__retarget_lock_acquire_recursive>
 800bf0a:	bf00      	nop
 800bf0c:	200016d1 	.word	0x200016d1

0800bf10 <__sfp_lock_release>:
 800bf10:	4801      	ldr	r0, [pc, #4]	; (800bf18 <__sfp_lock_release+0x8>)
 800bf12:	f000 b9d6 	b.w	800c2c2 <__retarget_lock_release_recursive>
 800bf16:	bf00      	nop
 800bf18:	200016d1 	.word	0x200016d1

0800bf1c <__sinit>:
 800bf1c:	b510      	push	{r4, lr}
 800bf1e:	4604      	mov	r4, r0
 800bf20:	f7ff fff0 	bl	800bf04 <__sfp_lock_acquire>
 800bf24:	6a23      	ldr	r3, [r4, #32]
 800bf26:	b11b      	cbz	r3, 800bf30 <__sinit+0x14>
 800bf28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf2c:	f7ff bff0 	b.w	800bf10 <__sfp_lock_release>
 800bf30:	4b04      	ldr	r3, [pc, #16]	; (800bf44 <__sinit+0x28>)
 800bf32:	6223      	str	r3, [r4, #32]
 800bf34:	4b04      	ldr	r3, [pc, #16]	; (800bf48 <__sinit+0x2c>)
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d1f5      	bne.n	800bf28 <__sinit+0xc>
 800bf3c:	f7ff ffc4 	bl	800bec8 <global_stdio_init.part.0>
 800bf40:	e7f2      	b.n	800bf28 <__sinit+0xc>
 800bf42:	bf00      	nop
 800bf44:	0800be89 	.word	0x0800be89
 800bf48:	200016c8 	.word	0x200016c8

0800bf4c <_fwalk_sglue>:
 800bf4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf50:	4607      	mov	r7, r0
 800bf52:	4688      	mov	r8, r1
 800bf54:	4614      	mov	r4, r2
 800bf56:	2600      	movs	r6, #0
 800bf58:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bf5c:	f1b9 0901 	subs.w	r9, r9, #1
 800bf60:	d505      	bpl.n	800bf6e <_fwalk_sglue+0x22>
 800bf62:	6824      	ldr	r4, [r4, #0]
 800bf64:	2c00      	cmp	r4, #0
 800bf66:	d1f7      	bne.n	800bf58 <_fwalk_sglue+0xc>
 800bf68:	4630      	mov	r0, r6
 800bf6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf6e:	89ab      	ldrh	r3, [r5, #12]
 800bf70:	2b01      	cmp	r3, #1
 800bf72:	d907      	bls.n	800bf84 <_fwalk_sglue+0x38>
 800bf74:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bf78:	3301      	adds	r3, #1
 800bf7a:	d003      	beq.n	800bf84 <_fwalk_sglue+0x38>
 800bf7c:	4629      	mov	r1, r5
 800bf7e:	4638      	mov	r0, r7
 800bf80:	47c0      	blx	r8
 800bf82:	4306      	orrs	r6, r0
 800bf84:	3568      	adds	r5, #104	; 0x68
 800bf86:	e7e9      	b.n	800bf5c <_fwalk_sglue+0x10>

0800bf88 <siprintf>:
 800bf88:	b40e      	push	{r1, r2, r3}
 800bf8a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bf8e:	b500      	push	{lr}
 800bf90:	b09c      	sub	sp, #112	; 0x70
 800bf92:	ab1d      	add	r3, sp, #116	; 0x74
 800bf94:	9002      	str	r0, [sp, #8]
 800bf96:	9006      	str	r0, [sp, #24]
 800bf98:	9107      	str	r1, [sp, #28]
 800bf9a:	9104      	str	r1, [sp, #16]
 800bf9c:	4808      	ldr	r0, [pc, #32]	; (800bfc0 <siprintf+0x38>)
 800bf9e:	4909      	ldr	r1, [pc, #36]	; (800bfc4 <siprintf+0x3c>)
 800bfa0:	f853 2b04 	ldr.w	r2, [r3], #4
 800bfa4:	9105      	str	r1, [sp, #20]
 800bfa6:	6800      	ldr	r0, [r0, #0]
 800bfa8:	a902      	add	r1, sp, #8
 800bfaa:	9301      	str	r3, [sp, #4]
 800bfac:	f000 fa58 	bl	800c460 <_svfiprintf_r>
 800bfb0:	2200      	movs	r2, #0
 800bfb2:	9b02      	ldr	r3, [sp, #8]
 800bfb4:	701a      	strb	r2, [r3, #0]
 800bfb6:	b01c      	add	sp, #112	; 0x70
 800bfb8:	f85d eb04 	ldr.w	lr, [sp], #4
 800bfbc:	b003      	add	sp, #12
 800bfbe:	4770      	bx	lr
 800bfc0:	20000224 	.word	0x20000224
 800bfc4:	ffff0208 	.word	0xffff0208

0800bfc8 <__sread>:
 800bfc8:	b510      	push	{r4, lr}
 800bfca:	460c      	mov	r4, r1
 800bfcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfd0:	f000 f918 	bl	800c204 <_read_r>
 800bfd4:	2800      	cmp	r0, #0
 800bfd6:	bfab      	itete	ge
 800bfd8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bfda:	89a3      	ldrhlt	r3, [r4, #12]
 800bfdc:	181b      	addge	r3, r3, r0
 800bfde:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bfe2:	bfac      	ite	ge
 800bfe4:	6563      	strge	r3, [r4, #84]	; 0x54
 800bfe6:	81a3      	strhlt	r3, [r4, #12]
 800bfe8:	bd10      	pop	{r4, pc}

0800bfea <__swrite>:
 800bfea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfee:	461f      	mov	r7, r3
 800bff0:	898b      	ldrh	r3, [r1, #12]
 800bff2:	4605      	mov	r5, r0
 800bff4:	05db      	lsls	r3, r3, #23
 800bff6:	460c      	mov	r4, r1
 800bff8:	4616      	mov	r6, r2
 800bffa:	d505      	bpl.n	800c008 <__swrite+0x1e>
 800bffc:	2302      	movs	r3, #2
 800bffe:	2200      	movs	r2, #0
 800c000:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c004:	f000 f8ec 	bl	800c1e0 <_lseek_r>
 800c008:	89a3      	ldrh	r3, [r4, #12]
 800c00a:	4632      	mov	r2, r6
 800c00c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c010:	81a3      	strh	r3, [r4, #12]
 800c012:	4628      	mov	r0, r5
 800c014:	463b      	mov	r3, r7
 800c016:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c01a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c01e:	f000 b913 	b.w	800c248 <_write_r>

0800c022 <__sseek>:
 800c022:	b510      	push	{r4, lr}
 800c024:	460c      	mov	r4, r1
 800c026:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c02a:	f000 f8d9 	bl	800c1e0 <_lseek_r>
 800c02e:	1c43      	adds	r3, r0, #1
 800c030:	89a3      	ldrh	r3, [r4, #12]
 800c032:	bf15      	itete	ne
 800c034:	6560      	strne	r0, [r4, #84]	; 0x54
 800c036:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c03a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c03e:	81a3      	strheq	r3, [r4, #12]
 800c040:	bf18      	it	ne
 800c042:	81a3      	strhne	r3, [r4, #12]
 800c044:	bd10      	pop	{r4, pc}

0800c046 <__sclose>:
 800c046:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c04a:	f000 b8b9 	b.w	800c1c0 <_close_r>

0800c04e <_vsniprintf_r>:
 800c04e:	b530      	push	{r4, r5, lr}
 800c050:	4614      	mov	r4, r2
 800c052:	2c00      	cmp	r4, #0
 800c054:	4605      	mov	r5, r0
 800c056:	461a      	mov	r2, r3
 800c058:	b09b      	sub	sp, #108	; 0x6c
 800c05a:	da05      	bge.n	800c068 <_vsniprintf_r+0x1a>
 800c05c:	238b      	movs	r3, #139	; 0x8b
 800c05e:	6003      	str	r3, [r0, #0]
 800c060:	f04f 30ff 	mov.w	r0, #4294967295
 800c064:	b01b      	add	sp, #108	; 0x6c
 800c066:	bd30      	pop	{r4, r5, pc}
 800c068:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c06c:	f8ad 300c 	strh.w	r3, [sp, #12]
 800c070:	bf0c      	ite	eq
 800c072:	4623      	moveq	r3, r4
 800c074:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c078:	9302      	str	r3, [sp, #8]
 800c07a:	9305      	str	r3, [sp, #20]
 800c07c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c080:	9100      	str	r1, [sp, #0]
 800c082:	9104      	str	r1, [sp, #16]
 800c084:	f8ad 300e 	strh.w	r3, [sp, #14]
 800c088:	4669      	mov	r1, sp
 800c08a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c08c:	f000 f9e8 	bl	800c460 <_svfiprintf_r>
 800c090:	1c43      	adds	r3, r0, #1
 800c092:	bfbc      	itt	lt
 800c094:	238b      	movlt	r3, #139	; 0x8b
 800c096:	602b      	strlt	r3, [r5, #0]
 800c098:	2c00      	cmp	r4, #0
 800c09a:	d0e3      	beq.n	800c064 <_vsniprintf_r+0x16>
 800c09c:	2200      	movs	r2, #0
 800c09e:	9b00      	ldr	r3, [sp, #0]
 800c0a0:	701a      	strb	r2, [r3, #0]
 800c0a2:	e7df      	b.n	800c064 <_vsniprintf_r+0x16>

0800c0a4 <vsniprintf>:
 800c0a4:	b507      	push	{r0, r1, r2, lr}
 800c0a6:	9300      	str	r3, [sp, #0]
 800c0a8:	4613      	mov	r3, r2
 800c0aa:	460a      	mov	r2, r1
 800c0ac:	4601      	mov	r1, r0
 800c0ae:	4803      	ldr	r0, [pc, #12]	; (800c0bc <vsniprintf+0x18>)
 800c0b0:	6800      	ldr	r0, [r0, #0]
 800c0b2:	f7ff ffcc 	bl	800c04e <_vsniprintf_r>
 800c0b6:	b003      	add	sp, #12
 800c0b8:	f85d fb04 	ldr.w	pc, [sp], #4
 800c0bc:	20000224 	.word	0x20000224

0800c0c0 <memset>:
 800c0c0:	4603      	mov	r3, r0
 800c0c2:	4402      	add	r2, r0
 800c0c4:	4293      	cmp	r3, r2
 800c0c6:	d100      	bne.n	800c0ca <memset+0xa>
 800c0c8:	4770      	bx	lr
 800c0ca:	f803 1b01 	strb.w	r1, [r3], #1
 800c0ce:	e7f9      	b.n	800c0c4 <memset+0x4>

0800c0d0 <strdup>:
 800c0d0:	4b02      	ldr	r3, [pc, #8]	; (800c0dc <strdup+0xc>)
 800c0d2:	4601      	mov	r1, r0
 800c0d4:	6818      	ldr	r0, [r3, #0]
 800c0d6:	f000 b803 	b.w	800c0e0 <_strdup_r>
 800c0da:	bf00      	nop
 800c0dc:	20000224 	.word	0x20000224

0800c0e0 <_strdup_r>:
 800c0e0:	b570      	push	{r4, r5, r6, lr}
 800c0e2:	4604      	mov	r4, r0
 800c0e4:	4608      	mov	r0, r1
 800c0e6:	460d      	mov	r5, r1
 800c0e8:	f7f4 f83a 	bl	8000160 <strlen>
 800c0ec:	1c46      	adds	r6, r0, #1
 800c0ee:	4631      	mov	r1, r6
 800c0f0:	4620      	mov	r0, r4
 800c0f2:	f7ff fd09 	bl	800bb08 <_malloc_r>
 800c0f6:	4604      	mov	r4, r0
 800c0f8:	b118      	cbz	r0, 800c102 <_strdup_r+0x22>
 800c0fa:	4632      	mov	r2, r6
 800c0fc:	4629      	mov	r1, r5
 800c0fe:	f000 f8e1 	bl	800c2c4 <memcpy>
 800c102:	4620      	mov	r0, r4
 800c104:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c108 <strtok>:
 800c108:	4b16      	ldr	r3, [pc, #88]	; (800c164 <strtok+0x5c>)
 800c10a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c10e:	681f      	ldr	r7, [r3, #0]
 800c110:	4605      	mov	r5, r0
 800c112:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 800c114:	460e      	mov	r6, r1
 800c116:	b9ec      	cbnz	r4, 800c154 <strtok+0x4c>
 800c118:	2050      	movs	r0, #80	; 0x50
 800c11a:	f7ff fcc5 	bl	800baa8 <malloc>
 800c11e:	4602      	mov	r2, r0
 800c120:	6478      	str	r0, [r7, #68]	; 0x44
 800c122:	b920      	cbnz	r0, 800c12e <strtok+0x26>
 800c124:	215b      	movs	r1, #91	; 0x5b
 800c126:	4b10      	ldr	r3, [pc, #64]	; (800c168 <strtok+0x60>)
 800c128:	4810      	ldr	r0, [pc, #64]	; (800c16c <strtok+0x64>)
 800c12a:	f000 f8d9 	bl	800c2e0 <__assert_func>
 800c12e:	e9c0 4400 	strd	r4, r4, [r0]
 800c132:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800c136:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800c13a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800c13e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800c142:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800c146:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800c14a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800c14e:	6184      	str	r4, [r0, #24]
 800c150:	7704      	strb	r4, [r0, #28]
 800c152:	6244      	str	r4, [r0, #36]	; 0x24
 800c154:	4631      	mov	r1, r6
 800c156:	4628      	mov	r0, r5
 800c158:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c15a:	2301      	movs	r3, #1
 800c15c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c160:	f000 b806 	b.w	800c170 <__strtok_r>
 800c164:	20000224 	.word	0x20000224
 800c168:	0800d86b 	.word	0x0800d86b
 800c16c:	0800d882 	.word	0x0800d882

0800c170 <__strtok_r>:
 800c170:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c172:	b908      	cbnz	r0, 800c178 <__strtok_r+0x8>
 800c174:	6810      	ldr	r0, [r2, #0]
 800c176:	b188      	cbz	r0, 800c19c <__strtok_r+0x2c>
 800c178:	4604      	mov	r4, r0
 800c17a:	460f      	mov	r7, r1
 800c17c:	4620      	mov	r0, r4
 800c17e:	f814 5b01 	ldrb.w	r5, [r4], #1
 800c182:	f817 6b01 	ldrb.w	r6, [r7], #1
 800c186:	b91e      	cbnz	r6, 800c190 <__strtok_r+0x20>
 800c188:	b965      	cbnz	r5, 800c1a4 <__strtok_r+0x34>
 800c18a:	4628      	mov	r0, r5
 800c18c:	6015      	str	r5, [r2, #0]
 800c18e:	e005      	b.n	800c19c <__strtok_r+0x2c>
 800c190:	42b5      	cmp	r5, r6
 800c192:	d1f6      	bne.n	800c182 <__strtok_r+0x12>
 800c194:	2b00      	cmp	r3, #0
 800c196:	d1f0      	bne.n	800c17a <__strtok_r+0xa>
 800c198:	6014      	str	r4, [r2, #0]
 800c19a:	7003      	strb	r3, [r0, #0]
 800c19c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c19e:	461c      	mov	r4, r3
 800c1a0:	e00c      	b.n	800c1bc <__strtok_r+0x4c>
 800c1a2:	b915      	cbnz	r5, 800c1aa <__strtok_r+0x3a>
 800c1a4:	460e      	mov	r6, r1
 800c1a6:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c1aa:	f816 5b01 	ldrb.w	r5, [r6], #1
 800c1ae:	42ab      	cmp	r3, r5
 800c1b0:	d1f7      	bne.n	800c1a2 <__strtok_r+0x32>
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d0f3      	beq.n	800c19e <__strtok_r+0x2e>
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	f804 3c01 	strb.w	r3, [r4, #-1]
 800c1bc:	6014      	str	r4, [r2, #0]
 800c1be:	e7ed      	b.n	800c19c <__strtok_r+0x2c>

0800c1c0 <_close_r>:
 800c1c0:	b538      	push	{r3, r4, r5, lr}
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	4d05      	ldr	r5, [pc, #20]	; (800c1dc <_close_r+0x1c>)
 800c1c6:	4604      	mov	r4, r0
 800c1c8:	4608      	mov	r0, r1
 800c1ca:	602b      	str	r3, [r5, #0]
 800c1cc:	f7f5 ff4c 	bl	8002068 <_close>
 800c1d0:	1c43      	adds	r3, r0, #1
 800c1d2:	d102      	bne.n	800c1da <_close_r+0x1a>
 800c1d4:	682b      	ldr	r3, [r5, #0]
 800c1d6:	b103      	cbz	r3, 800c1da <_close_r+0x1a>
 800c1d8:	6023      	str	r3, [r4, #0]
 800c1da:	bd38      	pop	{r3, r4, r5, pc}
 800c1dc:	200016cc 	.word	0x200016cc

0800c1e0 <_lseek_r>:
 800c1e0:	b538      	push	{r3, r4, r5, lr}
 800c1e2:	4604      	mov	r4, r0
 800c1e4:	4608      	mov	r0, r1
 800c1e6:	4611      	mov	r1, r2
 800c1e8:	2200      	movs	r2, #0
 800c1ea:	4d05      	ldr	r5, [pc, #20]	; (800c200 <_lseek_r+0x20>)
 800c1ec:	602a      	str	r2, [r5, #0]
 800c1ee:	461a      	mov	r2, r3
 800c1f0:	f7f5 ff5e 	bl	80020b0 <_lseek>
 800c1f4:	1c43      	adds	r3, r0, #1
 800c1f6:	d102      	bne.n	800c1fe <_lseek_r+0x1e>
 800c1f8:	682b      	ldr	r3, [r5, #0]
 800c1fa:	b103      	cbz	r3, 800c1fe <_lseek_r+0x1e>
 800c1fc:	6023      	str	r3, [r4, #0]
 800c1fe:	bd38      	pop	{r3, r4, r5, pc}
 800c200:	200016cc 	.word	0x200016cc

0800c204 <_read_r>:
 800c204:	b538      	push	{r3, r4, r5, lr}
 800c206:	4604      	mov	r4, r0
 800c208:	4608      	mov	r0, r1
 800c20a:	4611      	mov	r1, r2
 800c20c:	2200      	movs	r2, #0
 800c20e:	4d05      	ldr	r5, [pc, #20]	; (800c224 <_read_r+0x20>)
 800c210:	602a      	str	r2, [r5, #0]
 800c212:	461a      	mov	r2, r3
 800c214:	f7f5 feef 	bl	8001ff6 <_read>
 800c218:	1c43      	adds	r3, r0, #1
 800c21a:	d102      	bne.n	800c222 <_read_r+0x1e>
 800c21c:	682b      	ldr	r3, [r5, #0]
 800c21e:	b103      	cbz	r3, 800c222 <_read_r+0x1e>
 800c220:	6023      	str	r3, [r4, #0]
 800c222:	bd38      	pop	{r3, r4, r5, pc}
 800c224:	200016cc 	.word	0x200016cc

0800c228 <_sbrk_r>:
 800c228:	b538      	push	{r3, r4, r5, lr}
 800c22a:	2300      	movs	r3, #0
 800c22c:	4d05      	ldr	r5, [pc, #20]	; (800c244 <_sbrk_r+0x1c>)
 800c22e:	4604      	mov	r4, r0
 800c230:	4608      	mov	r0, r1
 800c232:	602b      	str	r3, [r5, #0]
 800c234:	f7f5 ff48 	bl	80020c8 <_sbrk>
 800c238:	1c43      	adds	r3, r0, #1
 800c23a:	d102      	bne.n	800c242 <_sbrk_r+0x1a>
 800c23c:	682b      	ldr	r3, [r5, #0]
 800c23e:	b103      	cbz	r3, 800c242 <_sbrk_r+0x1a>
 800c240:	6023      	str	r3, [r4, #0]
 800c242:	bd38      	pop	{r3, r4, r5, pc}
 800c244:	200016cc 	.word	0x200016cc

0800c248 <_write_r>:
 800c248:	b538      	push	{r3, r4, r5, lr}
 800c24a:	4604      	mov	r4, r0
 800c24c:	4608      	mov	r0, r1
 800c24e:	4611      	mov	r1, r2
 800c250:	2200      	movs	r2, #0
 800c252:	4d05      	ldr	r5, [pc, #20]	; (800c268 <_write_r+0x20>)
 800c254:	602a      	str	r2, [r5, #0]
 800c256:	461a      	mov	r2, r3
 800c258:	f7f5 feea 	bl	8002030 <_write>
 800c25c:	1c43      	adds	r3, r0, #1
 800c25e:	d102      	bne.n	800c266 <_write_r+0x1e>
 800c260:	682b      	ldr	r3, [r5, #0]
 800c262:	b103      	cbz	r3, 800c266 <_write_r+0x1e>
 800c264:	6023      	str	r3, [r4, #0]
 800c266:	bd38      	pop	{r3, r4, r5, pc}
 800c268:	200016cc 	.word	0x200016cc

0800c26c <__errno>:
 800c26c:	4b01      	ldr	r3, [pc, #4]	; (800c274 <__errno+0x8>)
 800c26e:	6818      	ldr	r0, [r3, #0]
 800c270:	4770      	bx	lr
 800c272:	bf00      	nop
 800c274:	20000224 	.word	0x20000224

0800c278 <__libc_init_array>:
 800c278:	b570      	push	{r4, r5, r6, lr}
 800c27a:	2600      	movs	r6, #0
 800c27c:	4d0c      	ldr	r5, [pc, #48]	; (800c2b0 <__libc_init_array+0x38>)
 800c27e:	4c0d      	ldr	r4, [pc, #52]	; (800c2b4 <__libc_init_array+0x3c>)
 800c280:	1b64      	subs	r4, r4, r5
 800c282:	10a4      	asrs	r4, r4, #2
 800c284:	42a6      	cmp	r6, r4
 800c286:	d109      	bne.n	800c29c <__libc_init_array+0x24>
 800c288:	f000 ff3e 	bl	800d108 <_init>
 800c28c:	2600      	movs	r6, #0
 800c28e:	4d0a      	ldr	r5, [pc, #40]	; (800c2b8 <__libc_init_array+0x40>)
 800c290:	4c0a      	ldr	r4, [pc, #40]	; (800c2bc <__libc_init_array+0x44>)
 800c292:	1b64      	subs	r4, r4, r5
 800c294:	10a4      	asrs	r4, r4, #2
 800c296:	42a6      	cmp	r6, r4
 800c298:	d105      	bne.n	800c2a6 <__libc_init_array+0x2e>
 800c29a:	bd70      	pop	{r4, r5, r6, pc}
 800c29c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c2a0:	4798      	blx	r3
 800c2a2:	3601      	adds	r6, #1
 800c2a4:	e7ee      	b.n	800c284 <__libc_init_array+0xc>
 800c2a6:	f855 3b04 	ldr.w	r3, [r5], #4
 800c2aa:	4798      	blx	r3
 800c2ac:	3601      	adds	r6, #1
 800c2ae:	e7f2      	b.n	800c296 <__libc_init_array+0x1e>
 800c2b0:	0800d94c 	.word	0x0800d94c
 800c2b4:	0800d94c 	.word	0x0800d94c
 800c2b8:	0800d94c 	.word	0x0800d94c
 800c2bc:	0800d950 	.word	0x0800d950

0800c2c0 <__retarget_lock_acquire_recursive>:
 800c2c0:	4770      	bx	lr

0800c2c2 <__retarget_lock_release_recursive>:
 800c2c2:	4770      	bx	lr

0800c2c4 <memcpy>:
 800c2c4:	440a      	add	r2, r1
 800c2c6:	4291      	cmp	r1, r2
 800c2c8:	f100 33ff 	add.w	r3, r0, #4294967295
 800c2cc:	d100      	bne.n	800c2d0 <memcpy+0xc>
 800c2ce:	4770      	bx	lr
 800c2d0:	b510      	push	{r4, lr}
 800c2d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c2d6:	4291      	cmp	r1, r2
 800c2d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c2dc:	d1f9      	bne.n	800c2d2 <memcpy+0xe>
 800c2de:	bd10      	pop	{r4, pc}

0800c2e0 <__assert_func>:
 800c2e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c2e2:	4614      	mov	r4, r2
 800c2e4:	461a      	mov	r2, r3
 800c2e6:	4b09      	ldr	r3, [pc, #36]	; (800c30c <__assert_func+0x2c>)
 800c2e8:	4605      	mov	r5, r0
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	68d8      	ldr	r0, [r3, #12]
 800c2ee:	b14c      	cbz	r4, 800c304 <__assert_func+0x24>
 800c2f0:	4b07      	ldr	r3, [pc, #28]	; (800c310 <__assert_func+0x30>)
 800c2f2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c2f6:	9100      	str	r1, [sp, #0]
 800c2f8:	462b      	mov	r3, r5
 800c2fa:	4906      	ldr	r1, [pc, #24]	; (800c314 <__assert_func+0x34>)
 800c2fc:	f000 fbec 	bl	800cad8 <fiprintf>
 800c300:	f000 fc24 	bl	800cb4c <abort>
 800c304:	4b04      	ldr	r3, [pc, #16]	; (800c318 <__assert_func+0x38>)
 800c306:	461c      	mov	r4, r3
 800c308:	e7f3      	b.n	800c2f2 <__assert_func+0x12>
 800c30a:	bf00      	nop
 800c30c:	20000224 	.word	0x20000224
 800c310:	0800d8dc 	.word	0x0800d8dc
 800c314:	0800d8e9 	.word	0x0800d8e9
 800c318:	0800d917 	.word	0x0800d917

0800c31c <_free_r>:
 800c31c:	b538      	push	{r3, r4, r5, lr}
 800c31e:	4605      	mov	r5, r0
 800c320:	2900      	cmp	r1, #0
 800c322:	d040      	beq.n	800c3a6 <_free_r+0x8a>
 800c324:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c328:	1f0c      	subs	r4, r1, #4
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	bfb8      	it	lt
 800c32e:	18e4      	addlt	r4, r4, r3
 800c330:	f7ff fc6a 	bl	800bc08 <__malloc_lock>
 800c334:	4a1c      	ldr	r2, [pc, #112]	; (800c3a8 <_free_r+0x8c>)
 800c336:	6813      	ldr	r3, [r2, #0]
 800c338:	b933      	cbnz	r3, 800c348 <_free_r+0x2c>
 800c33a:	6063      	str	r3, [r4, #4]
 800c33c:	6014      	str	r4, [r2, #0]
 800c33e:	4628      	mov	r0, r5
 800c340:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c344:	f7ff bc66 	b.w	800bc14 <__malloc_unlock>
 800c348:	42a3      	cmp	r3, r4
 800c34a:	d908      	bls.n	800c35e <_free_r+0x42>
 800c34c:	6820      	ldr	r0, [r4, #0]
 800c34e:	1821      	adds	r1, r4, r0
 800c350:	428b      	cmp	r3, r1
 800c352:	bf01      	itttt	eq
 800c354:	6819      	ldreq	r1, [r3, #0]
 800c356:	685b      	ldreq	r3, [r3, #4]
 800c358:	1809      	addeq	r1, r1, r0
 800c35a:	6021      	streq	r1, [r4, #0]
 800c35c:	e7ed      	b.n	800c33a <_free_r+0x1e>
 800c35e:	461a      	mov	r2, r3
 800c360:	685b      	ldr	r3, [r3, #4]
 800c362:	b10b      	cbz	r3, 800c368 <_free_r+0x4c>
 800c364:	42a3      	cmp	r3, r4
 800c366:	d9fa      	bls.n	800c35e <_free_r+0x42>
 800c368:	6811      	ldr	r1, [r2, #0]
 800c36a:	1850      	adds	r0, r2, r1
 800c36c:	42a0      	cmp	r0, r4
 800c36e:	d10b      	bne.n	800c388 <_free_r+0x6c>
 800c370:	6820      	ldr	r0, [r4, #0]
 800c372:	4401      	add	r1, r0
 800c374:	1850      	adds	r0, r2, r1
 800c376:	4283      	cmp	r3, r0
 800c378:	6011      	str	r1, [r2, #0]
 800c37a:	d1e0      	bne.n	800c33e <_free_r+0x22>
 800c37c:	6818      	ldr	r0, [r3, #0]
 800c37e:	685b      	ldr	r3, [r3, #4]
 800c380:	4408      	add	r0, r1
 800c382:	6010      	str	r0, [r2, #0]
 800c384:	6053      	str	r3, [r2, #4]
 800c386:	e7da      	b.n	800c33e <_free_r+0x22>
 800c388:	d902      	bls.n	800c390 <_free_r+0x74>
 800c38a:	230c      	movs	r3, #12
 800c38c:	602b      	str	r3, [r5, #0]
 800c38e:	e7d6      	b.n	800c33e <_free_r+0x22>
 800c390:	6820      	ldr	r0, [r4, #0]
 800c392:	1821      	adds	r1, r4, r0
 800c394:	428b      	cmp	r3, r1
 800c396:	bf01      	itttt	eq
 800c398:	6819      	ldreq	r1, [r3, #0]
 800c39a:	685b      	ldreq	r3, [r3, #4]
 800c39c:	1809      	addeq	r1, r1, r0
 800c39e:	6021      	streq	r1, [r4, #0]
 800c3a0:	6063      	str	r3, [r4, #4]
 800c3a2:	6054      	str	r4, [r2, #4]
 800c3a4:	e7cb      	b.n	800c33e <_free_r+0x22>
 800c3a6:	bd38      	pop	{r3, r4, r5, pc}
 800c3a8:	20001588 	.word	0x20001588

0800c3ac <__ssputs_r>:
 800c3ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c3b0:	461f      	mov	r7, r3
 800c3b2:	688e      	ldr	r6, [r1, #8]
 800c3b4:	4682      	mov	sl, r0
 800c3b6:	42be      	cmp	r6, r7
 800c3b8:	460c      	mov	r4, r1
 800c3ba:	4690      	mov	r8, r2
 800c3bc:	680b      	ldr	r3, [r1, #0]
 800c3be:	d82c      	bhi.n	800c41a <__ssputs_r+0x6e>
 800c3c0:	898a      	ldrh	r2, [r1, #12]
 800c3c2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c3c6:	d026      	beq.n	800c416 <__ssputs_r+0x6a>
 800c3c8:	6965      	ldr	r5, [r4, #20]
 800c3ca:	6909      	ldr	r1, [r1, #16]
 800c3cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c3d0:	eba3 0901 	sub.w	r9, r3, r1
 800c3d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c3d8:	1c7b      	adds	r3, r7, #1
 800c3da:	444b      	add	r3, r9
 800c3dc:	106d      	asrs	r5, r5, #1
 800c3de:	429d      	cmp	r5, r3
 800c3e0:	bf38      	it	cc
 800c3e2:	461d      	movcc	r5, r3
 800c3e4:	0553      	lsls	r3, r2, #21
 800c3e6:	d527      	bpl.n	800c438 <__ssputs_r+0x8c>
 800c3e8:	4629      	mov	r1, r5
 800c3ea:	f7ff fb8d 	bl	800bb08 <_malloc_r>
 800c3ee:	4606      	mov	r6, r0
 800c3f0:	b360      	cbz	r0, 800c44c <__ssputs_r+0xa0>
 800c3f2:	464a      	mov	r2, r9
 800c3f4:	6921      	ldr	r1, [r4, #16]
 800c3f6:	f7ff ff65 	bl	800c2c4 <memcpy>
 800c3fa:	89a3      	ldrh	r3, [r4, #12]
 800c3fc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c400:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c404:	81a3      	strh	r3, [r4, #12]
 800c406:	6126      	str	r6, [r4, #16]
 800c408:	444e      	add	r6, r9
 800c40a:	6026      	str	r6, [r4, #0]
 800c40c:	463e      	mov	r6, r7
 800c40e:	6165      	str	r5, [r4, #20]
 800c410:	eba5 0509 	sub.w	r5, r5, r9
 800c414:	60a5      	str	r5, [r4, #8]
 800c416:	42be      	cmp	r6, r7
 800c418:	d900      	bls.n	800c41c <__ssputs_r+0x70>
 800c41a:	463e      	mov	r6, r7
 800c41c:	4632      	mov	r2, r6
 800c41e:	4641      	mov	r1, r8
 800c420:	6820      	ldr	r0, [r4, #0]
 800c422:	f000 fb6b 	bl	800cafc <memmove>
 800c426:	2000      	movs	r0, #0
 800c428:	68a3      	ldr	r3, [r4, #8]
 800c42a:	1b9b      	subs	r3, r3, r6
 800c42c:	60a3      	str	r3, [r4, #8]
 800c42e:	6823      	ldr	r3, [r4, #0]
 800c430:	4433      	add	r3, r6
 800c432:	6023      	str	r3, [r4, #0]
 800c434:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c438:	462a      	mov	r2, r5
 800c43a:	f000 fb8e 	bl	800cb5a <_realloc_r>
 800c43e:	4606      	mov	r6, r0
 800c440:	2800      	cmp	r0, #0
 800c442:	d1e0      	bne.n	800c406 <__ssputs_r+0x5a>
 800c444:	4650      	mov	r0, sl
 800c446:	6921      	ldr	r1, [r4, #16]
 800c448:	f7ff ff68 	bl	800c31c <_free_r>
 800c44c:	230c      	movs	r3, #12
 800c44e:	f8ca 3000 	str.w	r3, [sl]
 800c452:	89a3      	ldrh	r3, [r4, #12]
 800c454:	f04f 30ff 	mov.w	r0, #4294967295
 800c458:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c45c:	81a3      	strh	r3, [r4, #12]
 800c45e:	e7e9      	b.n	800c434 <__ssputs_r+0x88>

0800c460 <_svfiprintf_r>:
 800c460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c464:	4698      	mov	r8, r3
 800c466:	898b      	ldrh	r3, [r1, #12]
 800c468:	4607      	mov	r7, r0
 800c46a:	061b      	lsls	r3, r3, #24
 800c46c:	460d      	mov	r5, r1
 800c46e:	4614      	mov	r4, r2
 800c470:	b09d      	sub	sp, #116	; 0x74
 800c472:	d50e      	bpl.n	800c492 <_svfiprintf_r+0x32>
 800c474:	690b      	ldr	r3, [r1, #16]
 800c476:	b963      	cbnz	r3, 800c492 <_svfiprintf_r+0x32>
 800c478:	2140      	movs	r1, #64	; 0x40
 800c47a:	f7ff fb45 	bl	800bb08 <_malloc_r>
 800c47e:	6028      	str	r0, [r5, #0]
 800c480:	6128      	str	r0, [r5, #16]
 800c482:	b920      	cbnz	r0, 800c48e <_svfiprintf_r+0x2e>
 800c484:	230c      	movs	r3, #12
 800c486:	603b      	str	r3, [r7, #0]
 800c488:	f04f 30ff 	mov.w	r0, #4294967295
 800c48c:	e0d0      	b.n	800c630 <_svfiprintf_r+0x1d0>
 800c48e:	2340      	movs	r3, #64	; 0x40
 800c490:	616b      	str	r3, [r5, #20]
 800c492:	2300      	movs	r3, #0
 800c494:	9309      	str	r3, [sp, #36]	; 0x24
 800c496:	2320      	movs	r3, #32
 800c498:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c49c:	2330      	movs	r3, #48	; 0x30
 800c49e:	f04f 0901 	mov.w	r9, #1
 800c4a2:	f8cd 800c 	str.w	r8, [sp, #12]
 800c4a6:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800c648 <_svfiprintf_r+0x1e8>
 800c4aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c4ae:	4623      	mov	r3, r4
 800c4b0:	469a      	mov	sl, r3
 800c4b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c4b6:	b10a      	cbz	r2, 800c4bc <_svfiprintf_r+0x5c>
 800c4b8:	2a25      	cmp	r2, #37	; 0x25
 800c4ba:	d1f9      	bne.n	800c4b0 <_svfiprintf_r+0x50>
 800c4bc:	ebba 0b04 	subs.w	fp, sl, r4
 800c4c0:	d00b      	beq.n	800c4da <_svfiprintf_r+0x7a>
 800c4c2:	465b      	mov	r3, fp
 800c4c4:	4622      	mov	r2, r4
 800c4c6:	4629      	mov	r1, r5
 800c4c8:	4638      	mov	r0, r7
 800c4ca:	f7ff ff6f 	bl	800c3ac <__ssputs_r>
 800c4ce:	3001      	adds	r0, #1
 800c4d0:	f000 80a9 	beq.w	800c626 <_svfiprintf_r+0x1c6>
 800c4d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c4d6:	445a      	add	r2, fp
 800c4d8:	9209      	str	r2, [sp, #36]	; 0x24
 800c4da:	f89a 3000 	ldrb.w	r3, [sl]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	f000 80a1 	beq.w	800c626 <_svfiprintf_r+0x1c6>
 800c4e4:	2300      	movs	r3, #0
 800c4e6:	f04f 32ff 	mov.w	r2, #4294967295
 800c4ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c4ee:	f10a 0a01 	add.w	sl, sl, #1
 800c4f2:	9304      	str	r3, [sp, #16]
 800c4f4:	9307      	str	r3, [sp, #28]
 800c4f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c4fa:	931a      	str	r3, [sp, #104]	; 0x68
 800c4fc:	4654      	mov	r4, sl
 800c4fe:	2205      	movs	r2, #5
 800c500:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c504:	4850      	ldr	r0, [pc, #320]	; (800c648 <_svfiprintf_r+0x1e8>)
 800c506:	f000 fb13 	bl	800cb30 <memchr>
 800c50a:	9a04      	ldr	r2, [sp, #16]
 800c50c:	b9d8      	cbnz	r0, 800c546 <_svfiprintf_r+0xe6>
 800c50e:	06d0      	lsls	r0, r2, #27
 800c510:	bf44      	itt	mi
 800c512:	2320      	movmi	r3, #32
 800c514:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c518:	0711      	lsls	r1, r2, #28
 800c51a:	bf44      	itt	mi
 800c51c:	232b      	movmi	r3, #43	; 0x2b
 800c51e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c522:	f89a 3000 	ldrb.w	r3, [sl]
 800c526:	2b2a      	cmp	r3, #42	; 0x2a
 800c528:	d015      	beq.n	800c556 <_svfiprintf_r+0xf6>
 800c52a:	4654      	mov	r4, sl
 800c52c:	2000      	movs	r0, #0
 800c52e:	f04f 0c0a 	mov.w	ip, #10
 800c532:	9a07      	ldr	r2, [sp, #28]
 800c534:	4621      	mov	r1, r4
 800c536:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c53a:	3b30      	subs	r3, #48	; 0x30
 800c53c:	2b09      	cmp	r3, #9
 800c53e:	d94d      	bls.n	800c5dc <_svfiprintf_r+0x17c>
 800c540:	b1b0      	cbz	r0, 800c570 <_svfiprintf_r+0x110>
 800c542:	9207      	str	r2, [sp, #28]
 800c544:	e014      	b.n	800c570 <_svfiprintf_r+0x110>
 800c546:	eba0 0308 	sub.w	r3, r0, r8
 800c54a:	fa09 f303 	lsl.w	r3, r9, r3
 800c54e:	4313      	orrs	r3, r2
 800c550:	46a2      	mov	sl, r4
 800c552:	9304      	str	r3, [sp, #16]
 800c554:	e7d2      	b.n	800c4fc <_svfiprintf_r+0x9c>
 800c556:	9b03      	ldr	r3, [sp, #12]
 800c558:	1d19      	adds	r1, r3, #4
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	9103      	str	r1, [sp, #12]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	bfbb      	ittet	lt
 800c562:	425b      	neglt	r3, r3
 800c564:	f042 0202 	orrlt.w	r2, r2, #2
 800c568:	9307      	strge	r3, [sp, #28]
 800c56a:	9307      	strlt	r3, [sp, #28]
 800c56c:	bfb8      	it	lt
 800c56e:	9204      	strlt	r2, [sp, #16]
 800c570:	7823      	ldrb	r3, [r4, #0]
 800c572:	2b2e      	cmp	r3, #46	; 0x2e
 800c574:	d10c      	bne.n	800c590 <_svfiprintf_r+0x130>
 800c576:	7863      	ldrb	r3, [r4, #1]
 800c578:	2b2a      	cmp	r3, #42	; 0x2a
 800c57a:	d134      	bne.n	800c5e6 <_svfiprintf_r+0x186>
 800c57c:	9b03      	ldr	r3, [sp, #12]
 800c57e:	3402      	adds	r4, #2
 800c580:	1d1a      	adds	r2, r3, #4
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	9203      	str	r2, [sp, #12]
 800c586:	2b00      	cmp	r3, #0
 800c588:	bfb8      	it	lt
 800c58a:	f04f 33ff 	movlt.w	r3, #4294967295
 800c58e:	9305      	str	r3, [sp, #20]
 800c590:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800c64c <_svfiprintf_r+0x1ec>
 800c594:	2203      	movs	r2, #3
 800c596:	4650      	mov	r0, sl
 800c598:	7821      	ldrb	r1, [r4, #0]
 800c59a:	f000 fac9 	bl	800cb30 <memchr>
 800c59e:	b138      	cbz	r0, 800c5b0 <_svfiprintf_r+0x150>
 800c5a0:	2240      	movs	r2, #64	; 0x40
 800c5a2:	9b04      	ldr	r3, [sp, #16]
 800c5a4:	eba0 000a 	sub.w	r0, r0, sl
 800c5a8:	4082      	lsls	r2, r0
 800c5aa:	4313      	orrs	r3, r2
 800c5ac:	3401      	adds	r4, #1
 800c5ae:	9304      	str	r3, [sp, #16]
 800c5b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5b4:	2206      	movs	r2, #6
 800c5b6:	4826      	ldr	r0, [pc, #152]	; (800c650 <_svfiprintf_r+0x1f0>)
 800c5b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c5bc:	f000 fab8 	bl	800cb30 <memchr>
 800c5c0:	2800      	cmp	r0, #0
 800c5c2:	d038      	beq.n	800c636 <_svfiprintf_r+0x1d6>
 800c5c4:	4b23      	ldr	r3, [pc, #140]	; (800c654 <_svfiprintf_r+0x1f4>)
 800c5c6:	bb1b      	cbnz	r3, 800c610 <_svfiprintf_r+0x1b0>
 800c5c8:	9b03      	ldr	r3, [sp, #12]
 800c5ca:	3307      	adds	r3, #7
 800c5cc:	f023 0307 	bic.w	r3, r3, #7
 800c5d0:	3308      	adds	r3, #8
 800c5d2:	9303      	str	r3, [sp, #12]
 800c5d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5d6:	4433      	add	r3, r6
 800c5d8:	9309      	str	r3, [sp, #36]	; 0x24
 800c5da:	e768      	b.n	800c4ae <_svfiprintf_r+0x4e>
 800c5dc:	460c      	mov	r4, r1
 800c5de:	2001      	movs	r0, #1
 800c5e0:	fb0c 3202 	mla	r2, ip, r2, r3
 800c5e4:	e7a6      	b.n	800c534 <_svfiprintf_r+0xd4>
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	f04f 0c0a 	mov.w	ip, #10
 800c5ec:	4619      	mov	r1, r3
 800c5ee:	3401      	adds	r4, #1
 800c5f0:	9305      	str	r3, [sp, #20]
 800c5f2:	4620      	mov	r0, r4
 800c5f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c5f8:	3a30      	subs	r2, #48	; 0x30
 800c5fa:	2a09      	cmp	r2, #9
 800c5fc:	d903      	bls.n	800c606 <_svfiprintf_r+0x1a6>
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d0c6      	beq.n	800c590 <_svfiprintf_r+0x130>
 800c602:	9105      	str	r1, [sp, #20]
 800c604:	e7c4      	b.n	800c590 <_svfiprintf_r+0x130>
 800c606:	4604      	mov	r4, r0
 800c608:	2301      	movs	r3, #1
 800c60a:	fb0c 2101 	mla	r1, ip, r1, r2
 800c60e:	e7f0      	b.n	800c5f2 <_svfiprintf_r+0x192>
 800c610:	ab03      	add	r3, sp, #12
 800c612:	9300      	str	r3, [sp, #0]
 800c614:	462a      	mov	r2, r5
 800c616:	4638      	mov	r0, r7
 800c618:	4b0f      	ldr	r3, [pc, #60]	; (800c658 <_svfiprintf_r+0x1f8>)
 800c61a:	a904      	add	r1, sp, #16
 800c61c:	f3af 8000 	nop.w
 800c620:	1c42      	adds	r2, r0, #1
 800c622:	4606      	mov	r6, r0
 800c624:	d1d6      	bne.n	800c5d4 <_svfiprintf_r+0x174>
 800c626:	89ab      	ldrh	r3, [r5, #12]
 800c628:	065b      	lsls	r3, r3, #25
 800c62a:	f53f af2d 	bmi.w	800c488 <_svfiprintf_r+0x28>
 800c62e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c630:	b01d      	add	sp, #116	; 0x74
 800c632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c636:	ab03      	add	r3, sp, #12
 800c638:	9300      	str	r3, [sp, #0]
 800c63a:	462a      	mov	r2, r5
 800c63c:	4638      	mov	r0, r7
 800c63e:	4b06      	ldr	r3, [pc, #24]	; (800c658 <_svfiprintf_r+0x1f8>)
 800c640:	a904      	add	r1, sp, #16
 800c642:	f000 f87d 	bl	800c740 <_printf_i>
 800c646:	e7eb      	b.n	800c620 <_svfiprintf_r+0x1c0>
 800c648:	0800d918 	.word	0x0800d918
 800c64c:	0800d91e 	.word	0x0800d91e
 800c650:	0800d922 	.word	0x0800d922
 800c654:	00000000 	.word	0x00000000
 800c658:	0800c3ad 	.word	0x0800c3ad

0800c65c <_printf_common>:
 800c65c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c660:	4616      	mov	r6, r2
 800c662:	4699      	mov	r9, r3
 800c664:	688a      	ldr	r2, [r1, #8]
 800c666:	690b      	ldr	r3, [r1, #16]
 800c668:	4607      	mov	r7, r0
 800c66a:	4293      	cmp	r3, r2
 800c66c:	bfb8      	it	lt
 800c66e:	4613      	movlt	r3, r2
 800c670:	6033      	str	r3, [r6, #0]
 800c672:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c676:	460c      	mov	r4, r1
 800c678:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c67c:	b10a      	cbz	r2, 800c682 <_printf_common+0x26>
 800c67e:	3301      	adds	r3, #1
 800c680:	6033      	str	r3, [r6, #0]
 800c682:	6823      	ldr	r3, [r4, #0]
 800c684:	0699      	lsls	r1, r3, #26
 800c686:	bf42      	ittt	mi
 800c688:	6833      	ldrmi	r3, [r6, #0]
 800c68a:	3302      	addmi	r3, #2
 800c68c:	6033      	strmi	r3, [r6, #0]
 800c68e:	6825      	ldr	r5, [r4, #0]
 800c690:	f015 0506 	ands.w	r5, r5, #6
 800c694:	d106      	bne.n	800c6a4 <_printf_common+0x48>
 800c696:	f104 0a19 	add.w	sl, r4, #25
 800c69a:	68e3      	ldr	r3, [r4, #12]
 800c69c:	6832      	ldr	r2, [r6, #0]
 800c69e:	1a9b      	subs	r3, r3, r2
 800c6a0:	42ab      	cmp	r3, r5
 800c6a2:	dc2b      	bgt.n	800c6fc <_printf_common+0xa0>
 800c6a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c6a8:	1e13      	subs	r3, r2, #0
 800c6aa:	6822      	ldr	r2, [r4, #0]
 800c6ac:	bf18      	it	ne
 800c6ae:	2301      	movne	r3, #1
 800c6b0:	0692      	lsls	r2, r2, #26
 800c6b2:	d430      	bmi.n	800c716 <_printf_common+0xba>
 800c6b4:	4649      	mov	r1, r9
 800c6b6:	4638      	mov	r0, r7
 800c6b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c6bc:	47c0      	blx	r8
 800c6be:	3001      	adds	r0, #1
 800c6c0:	d023      	beq.n	800c70a <_printf_common+0xae>
 800c6c2:	6823      	ldr	r3, [r4, #0]
 800c6c4:	6922      	ldr	r2, [r4, #16]
 800c6c6:	f003 0306 	and.w	r3, r3, #6
 800c6ca:	2b04      	cmp	r3, #4
 800c6cc:	bf14      	ite	ne
 800c6ce:	2500      	movne	r5, #0
 800c6d0:	6833      	ldreq	r3, [r6, #0]
 800c6d2:	f04f 0600 	mov.w	r6, #0
 800c6d6:	bf08      	it	eq
 800c6d8:	68e5      	ldreq	r5, [r4, #12]
 800c6da:	f104 041a 	add.w	r4, r4, #26
 800c6de:	bf08      	it	eq
 800c6e0:	1aed      	subeq	r5, r5, r3
 800c6e2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800c6e6:	bf08      	it	eq
 800c6e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c6ec:	4293      	cmp	r3, r2
 800c6ee:	bfc4      	itt	gt
 800c6f0:	1a9b      	subgt	r3, r3, r2
 800c6f2:	18ed      	addgt	r5, r5, r3
 800c6f4:	42b5      	cmp	r5, r6
 800c6f6:	d11a      	bne.n	800c72e <_printf_common+0xd2>
 800c6f8:	2000      	movs	r0, #0
 800c6fa:	e008      	b.n	800c70e <_printf_common+0xb2>
 800c6fc:	2301      	movs	r3, #1
 800c6fe:	4652      	mov	r2, sl
 800c700:	4649      	mov	r1, r9
 800c702:	4638      	mov	r0, r7
 800c704:	47c0      	blx	r8
 800c706:	3001      	adds	r0, #1
 800c708:	d103      	bne.n	800c712 <_printf_common+0xb6>
 800c70a:	f04f 30ff 	mov.w	r0, #4294967295
 800c70e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c712:	3501      	adds	r5, #1
 800c714:	e7c1      	b.n	800c69a <_printf_common+0x3e>
 800c716:	2030      	movs	r0, #48	; 0x30
 800c718:	18e1      	adds	r1, r4, r3
 800c71a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c71e:	1c5a      	adds	r2, r3, #1
 800c720:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c724:	4422      	add	r2, r4
 800c726:	3302      	adds	r3, #2
 800c728:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c72c:	e7c2      	b.n	800c6b4 <_printf_common+0x58>
 800c72e:	2301      	movs	r3, #1
 800c730:	4622      	mov	r2, r4
 800c732:	4649      	mov	r1, r9
 800c734:	4638      	mov	r0, r7
 800c736:	47c0      	blx	r8
 800c738:	3001      	adds	r0, #1
 800c73a:	d0e6      	beq.n	800c70a <_printf_common+0xae>
 800c73c:	3601      	adds	r6, #1
 800c73e:	e7d9      	b.n	800c6f4 <_printf_common+0x98>

0800c740 <_printf_i>:
 800c740:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c744:	7e0f      	ldrb	r7, [r1, #24]
 800c746:	4691      	mov	r9, r2
 800c748:	2f78      	cmp	r7, #120	; 0x78
 800c74a:	4680      	mov	r8, r0
 800c74c:	460c      	mov	r4, r1
 800c74e:	469a      	mov	sl, r3
 800c750:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c752:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c756:	d807      	bhi.n	800c768 <_printf_i+0x28>
 800c758:	2f62      	cmp	r7, #98	; 0x62
 800c75a:	d80a      	bhi.n	800c772 <_printf_i+0x32>
 800c75c:	2f00      	cmp	r7, #0
 800c75e:	f000 80d5 	beq.w	800c90c <_printf_i+0x1cc>
 800c762:	2f58      	cmp	r7, #88	; 0x58
 800c764:	f000 80c1 	beq.w	800c8ea <_printf_i+0x1aa>
 800c768:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c76c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c770:	e03a      	b.n	800c7e8 <_printf_i+0xa8>
 800c772:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c776:	2b15      	cmp	r3, #21
 800c778:	d8f6      	bhi.n	800c768 <_printf_i+0x28>
 800c77a:	a101      	add	r1, pc, #4	; (adr r1, 800c780 <_printf_i+0x40>)
 800c77c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c780:	0800c7d9 	.word	0x0800c7d9
 800c784:	0800c7ed 	.word	0x0800c7ed
 800c788:	0800c769 	.word	0x0800c769
 800c78c:	0800c769 	.word	0x0800c769
 800c790:	0800c769 	.word	0x0800c769
 800c794:	0800c769 	.word	0x0800c769
 800c798:	0800c7ed 	.word	0x0800c7ed
 800c79c:	0800c769 	.word	0x0800c769
 800c7a0:	0800c769 	.word	0x0800c769
 800c7a4:	0800c769 	.word	0x0800c769
 800c7a8:	0800c769 	.word	0x0800c769
 800c7ac:	0800c8f3 	.word	0x0800c8f3
 800c7b0:	0800c819 	.word	0x0800c819
 800c7b4:	0800c8ad 	.word	0x0800c8ad
 800c7b8:	0800c769 	.word	0x0800c769
 800c7bc:	0800c769 	.word	0x0800c769
 800c7c0:	0800c915 	.word	0x0800c915
 800c7c4:	0800c769 	.word	0x0800c769
 800c7c8:	0800c819 	.word	0x0800c819
 800c7cc:	0800c769 	.word	0x0800c769
 800c7d0:	0800c769 	.word	0x0800c769
 800c7d4:	0800c8b5 	.word	0x0800c8b5
 800c7d8:	682b      	ldr	r3, [r5, #0]
 800c7da:	1d1a      	adds	r2, r3, #4
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	602a      	str	r2, [r5, #0]
 800c7e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c7e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c7e8:	2301      	movs	r3, #1
 800c7ea:	e0a0      	b.n	800c92e <_printf_i+0x1ee>
 800c7ec:	6820      	ldr	r0, [r4, #0]
 800c7ee:	682b      	ldr	r3, [r5, #0]
 800c7f0:	0607      	lsls	r7, r0, #24
 800c7f2:	f103 0104 	add.w	r1, r3, #4
 800c7f6:	6029      	str	r1, [r5, #0]
 800c7f8:	d501      	bpl.n	800c7fe <_printf_i+0xbe>
 800c7fa:	681e      	ldr	r6, [r3, #0]
 800c7fc:	e003      	b.n	800c806 <_printf_i+0xc6>
 800c7fe:	0646      	lsls	r6, r0, #25
 800c800:	d5fb      	bpl.n	800c7fa <_printf_i+0xba>
 800c802:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c806:	2e00      	cmp	r6, #0
 800c808:	da03      	bge.n	800c812 <_printf_i+0xd2>
 800c80a:	232d      	movs	r3, #45	; 0x2d
 800c80c:	4276      	negs	r6, r6
 800c80e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c812:	230a      	movs	r3, #10
 800c814:	4859      	ldr	r0, [pc, #356]	; (800c97c <_printf_i+0x23c>)
 800c816:	e012      	b.n	800c83e <_printf_i+0xfe>
 800c818:	682b      	ldr	r3, [r5, #0]
 800c81a:	6820      	ldr	r0, [r4, #0]
 800c81c:	1d19      	adds	r1, r3, #4
 800c81e:	6029      	str	r1, [r5, #0]
 800c820:	0605      	lsls	r5, r0, #24
 800c822:	d501      	bpl.n	800c828 <_printf_i+0xe8>
 800c824:	681e      	ldr	r6, [r3, #0]
 800c826:	e002      	b.n	800c82e <_printf_i+0xee>
 800c828:	0641      	lsls	r1, r0, #25
 800c82a:	d5fb      	bpl.n	800c824 <_printf_i+0xe4>
 800c82c:	881e      	ldrh	r6, [r3, #0]
 800c82e:	2f6f      	cmp	r7, #111	; 0x6f
 800c830:	bf0c      	ite	eq
 800c832:	2308      	moveq	r3, #8
 800c834:	230a      	movne	r3, #10
 800c836:	4851      	ldr	r0, [pc, #324]	; (800c97c <_printf_i+0x23c>)
 800c838:	2100      	movs	r1, #0
 800c83a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c83e:	6865      	ldr	r5, [r4, #4]
 800c840:	2d00      	cmp	r5, #0
 800c842:	bfa8      	it	ge
 800c844:	6821      	ldrge	r1, [r4, #0]
 800c846:	60a5      	str	r5, [r4, #8]
 800c848:	bfa4      	itt	ge
 800c84a:	f021 0104 	bicge.w	r1, r1, #4
 800c84e:	6021      	strge	r1, [r4, #0]
 800c850:	b90e      	cbnz	r6, 800c856 <_printf_i+0x116>
 800c852:	2d00      	cmp	r5, #0
 800c854:	d04b      	beq.n	800c8ee <_printf_i+0x1ae>
 800c856:	4615      	mov	r5, r2
 800c858:	fbb6 f1f3 	udiv	r1, r6, r3
 800c85c:	fb03 6711 	mls	r7, r3, r1, r6
 800c860:	5dc7      	ldrb	r7, [r0, r7]
 800c862:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c866:	4637      	mov	r7, r6
 800c868:	42bb      	cmp	r3, r7
 800c86a:	460e      	mov	r6, r1
 800c86c:	d9f4      	bls.n	800c858 <_printf_i+0x118>
 800c86e:	2b08      	cmp	r3, #8
 800c870:	d10b      	bne.n	800c88a <_printf_i+0x14a>
 800c872:	6823      	ldr	r3, [r4, #0]
 800c874:	07de      	lsls	r6, r3, #31
 800c876:	d508      	bpl.n	800c88a <_printf_i+0x14a>
 800c878:	6923      	ldr	r3, [r4, #16]
 800c87a:	6861      	ldr	r1, [r4, #4]
 800c87c:	4299      	cmp	r1, r3
 800c87e:	bfde      	ittt	le
 800c880:	2330      	movle	r3, #48	; 0x30
 800c882:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c886:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c88a:	1b52      	subs	r2, r2, r5
 800c88c:	6122      	str	r2, [r4, #16]
 800c88e:	464b      	mov	r3, r9
 800c890:	4621      	mov	r1, r4
 800c892:	4640      	mov	r0, r8
 800c894:	f8cd a000 	str.w	sl, [sp]
 800c898:	aa03      	add	r2, sp, #12
 800c89a:	f7ff fedf 	bl	800c65c <_printf_common>
 800c89e:	3001      	adds	r0, #1
 800c8a0:	d14a      	bne.n	800c938 <_printf_i+0x1f8>
 800c8a2:	f04f 30ff 	mov.w	r0, #4294967295
 800c8a6:	b004      	add	sp, #16
 800c8a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8ac:	6823      	ldr	r3, [r4, #0]
 800c8ae:	f043 0320 	orr.w	r3, r3, #32
 800c8b2:	6023      	str	r3, [r4, #0]
 800c8b4:	2778      	movs	r7, #120	; 0x78
 800c8b6:	4832      	ldr	r0, [pc, #200]	; (800c980 <_printf_i+0x240>)
 800c8b8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c8bc:	6823      	ldr	r3, [r4, #0]
 800c8be:	6829      	ldr	r1, [r5, #0]
 800c8c0:	061f      	lsls	r7, r3, #24
 800c8c2:	f851 6b04 	ldr.w	r6, [r1], #4
 800c8c6:	d402      	bmi.n	800c8ce <_printf_i+0x18e>
 800c8c8:	065f      	lsls	r7, r3, #25
 800c8ca:	bf48      	it	mi
 800c8cc:	b2b6      	uxthmi	r6, r6
 800c8ce:	07df      	lsls	r7, r3, #31
 800c8d0:	bf48      	it	mi
 800c8d2:	f043 0320 	orrmi.w	r3, r3, #32
 800c8d6:	6029      	str	r1, [r5, #0]
 800c8d8:	bf48      	it	mi
 800c8da:	6023      	strmi	r3, [r4, #0]
 800c8dc:	b91e      	cbnz	r6, 800c8e6 <_printf_i+0x1a6>
 800c8de:	6823      	ldr	r3, [r4, #0]
 800c8e0:	f023 0320 	bic.w	r3, r3, #32
 800c8e4:	6023      	str	r3, [r4, #0]
 800c8e6:	2310      	movs	r3, #16
 800c8e8:	e7a6      	b.n	800c838 <_printf_i+0xf8>
 800c8ea:	4824      	ldr	r0, [pc, #144]	; (800c97c <_printf_i+0x23c>)
 800c8ec:	e7e4      	b.n	800c8b8 <_printf_i+0x178>
 800c8ee:	4615      	mov	r5, r2
 800c8f0:	e7bd      	b.n	800c86e <_printf_i+0x12e>
 800c8f2:	682b      	ldr	r3, [r5, #0]
 800c8f4:	6826      	ldr	r6, [r4, #0]
 800c8f6:	1d18      	adds	r0, r3, #4
 800c8f8:	6961      	ldr	r1, [r4, #20]
 800c8fa:	6028      	str	r0, [r5, #0]
 800c8fc:	0635      	lsls	r5, r6, #24
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	d501      	bpl.n	800c906 <_printf_i+0x1c6>
 800c902:	6019      	str	r1, [r3, #0]
 800c904:	e002      	b.n	800c90c <_printf_i+0x1cc>
 800c906:	0670      	lsls	r0, r6, #25
 800c908:	d5fb      	bpl.n	800c902 <_printf_i+0x1c2>
 800c90a:	8019      	strh	r1, [r3, #0]
 800c90c:	2300      	movs	r3, #0
 800c90e:	4615      	mov	r5, r2
 800c910:	6123      	str	r3, [r4, #16]
 800c912:	e7bc      	b.n	800c88e <_printf_i+0x14e>
 800c914:	682b      	ldr	r3, [r5, #0]
 800c916:	2100      	movs	r1, #0
 800c918:	1d1a      	adds	r2, r3, #4
 800c91a:	602a      	str	r2, [r5, #0]
 800c91c:	681d      	ldr	r5, [r3, #0]
 800c91e:	6862      	ldr	r2, [r4, #4]
 800c920:	4628      	mov	r0, r5
 800c922:	f000 f905 	bl	800cb30 <memchr>
 800c926:	b108      	cbz	r0, 800c92c <_printf_i+0x1ec>
 800c928:	1b40      	subs	r0, r0, r5
 800c92a:	6060      	str	r0, [r4, #4]
 800c92c:	6863      	ldr	r3, [r4, #4]
 800c92e:	6123      	str	r3, [r4, #16]
 800c930:	2300      	movs	r3, #0
 800c932:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c936:	e7aa      	b.n	800c88e <_printf_i+0x14e>
 800c938:	462a      	mov	r2, r5
 800c93a:	4649      	mov	r1, r9
 800c93c:	4640      	mov	r0, r8
 800c93e:	6923      	ldr	r3, [r4, #16]
 800c940:	47d0      	blx	sl
 800c942:	3001      	adds	r0, #1
 800c944:	d0ad      	beq.n	800c8a2 <_printf_i+0x162>
 800c946:	6823      	ldr	r3, [r4, #0]
 800c948:	079b      	lsls	r3, r3, #30
 800c94a:	d413      	bmi.n	800c974 <_printf_i+0x234>
 800c94c:	68e0      	ldr	r0, [r4, #12]
 800c94e:	9b03      	ldr	r3, [sp, #12]
 800c950:	4298      	cmp	r0, r3
 800c952:	bfb8      	it	lt
 800c954:	4618      	movlt	r0, r3
 800c956:	e7a6      	b.n	800c8a6 <_printf_i+0x166>
 800c958:	2301      	movs	r3, #1
 800c95a:	4632      	mov	r2, r6
 800c95c:	4649      	mov	r1, r9
 800c95e:	4640      	mov	r0, r8
 800c960:	47d0      	blx	sl
 800c962:	3001      	adds	r0, #1
 800c964:	d09d      	beq.n	800c8a2 <_printf_i+0x162>
 800c966:	3501      	adds	r5, #1
 800c968:	68e3      	ldr	r3, [r4, #12]
 800c96a:	9903      	ldr	r1, [sp, #12]
 800c96c:	1a5b      	subs	r3, r3, r1
 800c96e:	42ab      	cmp	r3, r5
 800c970:	dcf2      	bgt.n	800c958 <_printf_i+0x218>
 800c972:	e7eb      	b.n	800c94c <_printf_i+0x20c>
 800c974:	2500      	movs	r5, #0
 800c976:	f104 0619 	add.w	r6, r4, #25
 800c97a:	e7f5      	b.n	800c968 <_printf_i+0x228>
 800c97c:	0800d929 	.word	0x0800d929
 800c980:	0800d93a 	.word	0x0800d93a

0800c984 <__sflush_r>:
 800c984:	898a      	ldrh	r2, [r1, #12]
 800c986:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c988:	4605      	mov	r5, r0
 800c98a:	0710      	lsls	r0, r2, #28
 800c98c:	460c      	mov	r4, r1
 800c98e:	d457      	bmi.n	800ca40 <__sflush_r+0xbc>
 800c990:	684b      	ldr	r3, [r1, #4]
 800c992:	2b00      	cmp	r3, #0
 800c994:	dc04      	bgt.n	800c9a0 <__sflush_r+0x1c>
 800c996:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c998:	2b00      	cmp	r3, #0
 800c99a:	dc01      	bgt.n	800c9a0 <__sflush_r+0x1c>
 800c99c:	2000      	movs	r0, #0
 800c99e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c9a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c9a2:	2e00      	cmp	r6, #0
 800c9a4:	d0fa      	beq.n	800c99c <__sflush_r+0x18>
 800c9a6:	2300      	movs	r3, #0
 800c9a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c9ac:	682f      	ldr	r7, [r5, #0]
 800c9ae:	6a21      	ldr	r1, [r4, #32]
 800c9b0:	602b      	str	r3, [r5, #0]
 800c9b2:	d032      	beq.n	800ca1a <__sflush_r+0x96>
 800c9b4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c9b6:	89a3      	ldrh	r3, [r4, #12]
 800c9b8:	075a      	lsls	r2, r3, #29
 800c9ba:	d505      	bpl.n	800c9c8 <__sflush_r+0x44>
 800c9bc:	6863      	ldr	r3, [r4, #4]
 800c9be:	1ac0      	subs	r0, r0, r3
 800c9c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c9c2:	b10b      	cbz	r3, 800c9c8 <__sflush_r+0x44>
 800c9c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c9c6:	1ac0      	subs	r0, r0, r3
 800c9c8:	2300      	movs	r3, #0
 800c9ca:	4602      	mov	r2, r0
 800c9cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c9ce:	4628      	mov	r0, r5
 800c9d0:	6a21      	ldr	r1, [r4, #32]
 800c9d2:	47b0      	blx	r6
 800c9d4:	1c43      	adds	r3, r0, #1
 800c9d6:	89a3      	ldrh	r3, [r4, #12]
 800c9d8:	d106      	bne.n	800c9e8 <__sflush_r+0x64>
 800c9da:	6829      	ldr	r1, [r5, #0]
 800c9dc:	291d      	cmp	r1, #29
 800c9de:	d82b      	bhi.n	800ca38 <__sflush_r+0xb4>
 800c9e0:	4a28      	ldr	r2, [pc, #160]	; (800ca84 <__sflush_r+0x100>)
 800c9e2:	410a      	asrs	r2, r1
 800c9e4:	07d6      	lsls	r6, r2, #31
 800c9e6:	d427      	bmi.n	800ca38 <__sflush_r+0xb4>
 800c9e8:	2200      	movs	r2, #0
 800c9ea:	6062      	str	r2, [r4, #4]
 800c9ec:	6922      	ldr	r2, [r4, #16]
 800c9ee:	04d9      	lsls	r1, r3, #19
 800c9f0:	6022      	str	r2, [r4, #0]
 800c9f2:	d504      	bpl.n	800c9fe <__sflush_r+0x7a>
 800c9f4:	1c42      	adds	r2, r0, #1
 800c9f6:	d101      	bne.n	800c9fc <__sflush_r+0x78>
 800c9f8:	682b      	ldr	r3, [r5, #0]
 800c9fa:	b903      	cbnz	r3, 800c9fe <__sflush_r+0x7a>
 800c9fc:	6560      	str	r0, [r4, #84]	; 0x54
 800c9fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ca00:	602f      	str	r7, [r5, #0]
 800ca02:	2900      	cmp	r1, #0
 800ca04:	d0ca      	beq.n	800c99c <__sflush_r+0x18>
 800ca06:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ca0a:	4299      	cmp	r1, r3
 800ca0c:	d002      	beq.n	800ca14 <__sflush_r+0x90>
 800ca0e:	4628      	mov	r0, r5
 800ca10:	f7ff fc84 	bl	800c31c <_free_r>
 800ca14:	2000      	movs	r0, #0
 800ca16:	6360      	str	r0, [r4, #52]	; 0x34
 800ca18:	e7c1      	b.n	800c99e <__sflush_r+0x1a>
 800ca1a:	2301      	movs	r3, #1
 800ca1c:	4628      	mov	r0, r5
 800ca1e:	47b0      	blx	r6
 800ca20:	1c41      	adds	r1, r0, #1
 800ca22:	d1c8      	bne.n	800c9b6 <__sflush_r+0x32>
 800ca24:	682b      	ldr	r3, [r5, #0]
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d0c5      	beq.n	800c9b6 <__sflush_r+0x32>
 800ca2a:	2b1d      	cmp	r3, #29
 800ca2c:	d001      	beq.n	800ca32 <__sflush_r+0xae>
 800ca2e:	2b16      	cmp	r3, #22
 800ca30:	d101      	bne.n	800ca36 <__sflush_r+0xb2>
 800ca32:	602f      	str	r7, [r5, #0]
 800ca34:	e7b2      	b.n	800c99c <__sflush_r+0x18>
 800ca36:	89a3      	ldrh	r3, [r4, #12]
 800ca38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca3c:	81a3      	strh	r3, [r4, #12]
 800ca3e:	e7ae      	b.n	800c99e <__sflush_r+0x1a>
 800ca40:	690f      	ldr	r7, [r1, #16]
 800ca42:	2f00      	cmp	r7, #0
 800ca44:	d0aa      	beq.n	800c99c <__sflush_r+0x18>
 800ca46:	0793      	lsls	r3, r2, #30
 800ca48:	bf18      	it	ne
 800ca4a:	2300      	movne	r3, #0
 800ca4c:	680e      	ldr	r6, [r1, #0]
 800ca4e:	bf08      	it	eq
 800ca50:	694b      	ldreq	r3, [r1, #20]
 800ca52:	1bf6      	subs	r6, r6, r7
 800ca54:	600f      	str	r7, [r1, #0]
 800ca56:	608b      	str	r3, [r1, #8]
 800ca58:	2e00      	cmp	r6, #0
 800ca5a:	dd9f      	ble.n	800c99c <__sflush_r+0x18>
 800ca5c:	4633      	mov	r3, r6
 800ca5e:	463a      	mov	r2, r7
 800ca60:	4628      	mov	r0, r5
 800ca62:	6a21      	ldr	r1, [r4, #32]
 800ca64:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800ca68:	47e0      	blx	ip
 800ca6a:	2800      	cmp	r0, #0
 800ca6c:	dc06      	bgt.n	800ca7c <__sflush_r+0xf8>
 800ca6e:	89a3      	ldrh	r3, [r4, #12]
 800ca70:	f04f 30ff 	mov.w	r0, #4294967295
 800ca74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca78:	81a3      	strh	r3, [r4, #12]
 800ca7a:	e790      	b.n	800c99e <__sflush_r+0x1a>
 800ca7c:	4407      	add	r7, r0
 800ca7e:	1a36      	subs	r6, r6, r0
 800ca80:	e7ea      	b.n	800ca58 <__sflush_r+0xd4>
 800ca82:	bf00      	nop
 800ca84:	dfbffffe 	.word	0xdfbffffe

0800ca88 <_fflush_r>:
 800ca88:	b538      	push	{r3, r4, r5, lr}
 800ca8a:	690b      	ldr	r3, [r1, #16]
 800ca8c:	4605      	mov	r5, r0
 800ca8e:	460c      	mov	r4, r1
 800ca90:	b913      	cbnz	r3, 800ca98 <_fflush_r+0x10>
 800ca92:	2500      	movs	r5, #0
 800ca94:	4628      	mov	r0, r5
 800ca96:	bd38      	pop	{r3, r4, r5, pc}
 800ca98:	b118      	cbz	r0, 800caa2 <_fflush_r+0x1a>
 800ca9a:	6a03      	ldr	r3, [r0, #32]
 800ca9c:	b90b      	cbnz	r3, 800caa2 <_fflush_r+0x1a>
 800ca9e:	f7ff fa3d 	bl	800bf1c <__sinit>
 800caa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d0f3      	beq.n	800ca92 <_fflush_r+0xa>
 800caaa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800caac:	07d0      	lsls	r0, r2, #31
 800caae:	d404      	bmi.n	800caba <_fflush_r+0x32>
 800cab0:	0599      	lsls	r1, r3, #22
 800cab2:	d402      	bmi.n	800caba <_fflush_r+0x32>
 800cab4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cab6:	f7ff fc03 	bl	800c2c0 <__retarget_lock_acquire_recursive>
 800caba:	4628      	mov	r0, r5
 800cabc:	4621      	mov	r1, r4
 800cabe:	f7ff ff61 	bl	800c984 <__sflush_r>
 800cac2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cac4:	4605      	mov	r5, r0
 800cac6:	07da      	lsls	r2, r3, #31
 800cac8:	d4e4      	bmi.n	800ca94 <_fflush_r+0xc>
 800caca:	89a3      	ldrh	r3, [r4, #12]
 800cacc:	059b      	lsls	r3, r3, #22
 800cace:	d4e1      	bmi.n	800ca94 <_fflush_r+0xc>
 800cad0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cad2:	f7ff fbf6 	bl	800c2c2 <__retarget_lock_release_recursive>
 800cad6:	e7dd      	b.n	800ca94 <_fflush_r+0xc>

0800cad8 <fiprintf>:
 800cad8:	b40e      	push	{r1, r2, r3}
 800cada:	b503      	push	{r0, r1, lr}
 800cadc:	4601      	mov	r1, r0
 800cade:	ab03      	add	r3, sp, #12
 800cae0:	4805      	ldr	r0, [pc, #20]	; (800caf8 <fiprintf+0x20>)
 800cae2:	f853 2b04 	ldr.w	r2, [r3], #4
 800cae6:	6800      	ldr	r0, [r0, #0]
 800cae8:	9301      	str	r3, [sp, #4]
 800caea:	f000 f88d 	bl	800cc08 <_vfiprintf_r>
 800caee:	b002      	add	sp, #8
 800caf0:	f85d eb04 	ldr.w	lr, [sp], #4
 800caf4:	b003      	add	sp, #12
 800caf6:	4770      	bx	lr
 800caf8:	20000224 	.word	0x20000224

0800cafc <memmove>:
 800cafc:	4288      	cmp	r0, r1
 800cafe:	b510      	push	{r4, lr}
 800cb00:	eb01 0402 	add.w	r4, r1, r2
 800cb04:	d902      	bls.n	800cb0c <memmove+0x10>
 800cb06:	4284      	cmp	r4, r0
 800cb08:	4623      	mov	r3, r4
 800cb0a:	d807      	bhi.n	800cb1c <memmove+0x20>
 800cb0c:	1e43      	subs	r3, r0, #1
 800cb0e:	42a1      	cmp	r1, r4
 800cb10:	d008      	beq.n	800cb24 <memmove+0x28>
 800cb12:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cb16:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cb1a:	e7f8      	b.n	800cb0e <memmove+0x12>
 800cb1c:	4601      	mov	r1, r0
 800cb1e:	4402      	add	r2, r0
 800cb20:	428a      	cmp	r2, r1
 800cb22:	d100      	bne.n	800cb26 <memmove+0x2a>
 800cb24:	bd10      	pop	{r4, pc}
 800cb26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cb2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cb2e:	e7f7      	b.n	800cb20 <memmove+0x24>

0800cb30 <memchr>:
 800cb30:	4603      	mov	r3, r0
 800cb32:	b510      	push	{r4, lr}
 800cb34:	b2c9      	uxtb	r1, r1
 800cb36:	4402      	add	r2, r0
 800cb38:	4293      	cmp	r3, r2
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	d101      	bne.n	800cb42 <memchr+0x12>
 800cb3e:	2000      	movs	r0, #0
 800cb40:	e003      	b.n	800cb4a <memchr+0x1a>
 800cb42:	7804      	ldrb	r4, [r0, #0]
 800cb44:	3301      	adds	r3, #1
 800cb46:	428c      	cmp	r4, r1
 800cb48:	d1f6      	bne.n	800cb38 <memchr+0x8>
 800cb4a:	bd10      	pop	{r4, pc}

0800cb4c <abort>:
 800cb4c:	2006      	movs	r0, #6
 800cb4e:	b508      	push	{r3, lr}
 800cb50:	f000 fa32 	bl	800cfb8 <raise>
 800cb54:	2001      	movs	r0, #1
 800cb56:	f7f5 fa44 	bl	8001fe2 <_exit>

0800cb5a <_realloc_r>:
 800cb5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb5e:	4680      	mov	r8, r0
 800cb60:	4614      	mov	r4, r2
 800cb62:	460e      	mov	r6, r1
 800cb64:	b921      	cbnz	r1, 800cb70 <_realloc_r+0x16>
 800cb66:	4611      	mov	r1, r2
 800cb68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cb6c:	f7fe bfcc 	b.w	800bb08 <_malloc_r>
 800cb70:	b92a      	cbnz	r2, 800cb7e <_realloc_r+0x24>
 800cb72:	f7ff fbd3 	bl	800c31c <_free_r>
 800cb76:	4625      	mov	r5, r4
 800cb78:	4628      	mov	r0, r5
 800cb7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb7e:	f000 fa37 	bl	800cff0 <_malloc_usable_size_r>
 800cb82:	4284      	cmp	r4, r0
 800cb84:	4607      	mov	r7, r0
 800cb86:	d802      	bhi.n	800cb8e <_realloc_r+0x34>
 800cb88:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cb8c:	d812      	bhi.n	800cbb4 <_realloc_r+0x5a>
 800cb8e:	4621      	mov	r1, r4
 800cb90:	4640      	mov	r0, r8
 800cb92:	f7fe ffb9 	bl	800bb08 <_malloc_r>
 800cb96:	4605      	mov	r5, r0
 800cb98:	2800      	cmp	r0, #0
 800cb9a:	d0ed      	beq.n	800cb78 <_realloc_r+0x1e>
 800cb9c:	42bc      	cmp	r4, r7
 800cb9e:	4622      	mov	r2, r4
 800cba0:	4631      	mov	r1, r6
 800cba2:	bf28      	it	cs
 800cba4:	463a      	movcs	r2, r7
 800cba6:	f7ff fb8d 	bl	800c2c4 <memcpy>
 800cbaa:	4631      	mov	r1, r6
 800cbac:	4640      	mov	r0, r8
 800cbae:	f7ff fbb5 	bl	800c31c <_free_r>
 800cbb2:	e7e1      	b.n	800cb78 <_realloc_r+0x1e>
 800cbb4:	4635      	mov	r5, r6
 800cbb6:	e7df      	b.n	800cb78 <_realloc_r+0x1e>

0800cbb8 <__sfputc_r>:
 800cbb8:	6893      	ldr	r3, [r2, #8]
 800cbba:	b410      	push	{r4}
 800cbbc:	3b01      	subs	r3, #1
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	6093      	str	r3, [r2, #8]
 800cbc2:	da07      	bge.n	800cbd4 <__sfputc_r+0x1c>
 800cbc4:	6994      	ldr	r4, [r2, #24]
 800cbc6:	42a3      	cmp	r3, r4
 800cbc8:	db01      	blt.n	800cbce <__sfputc_r+0x16>
 800cbca:	290a      	cmp	r1, #10
 800cbcc:	d102      	bne.n	800cbd4 <__sfputc_r+0x1c>
 800cbce:	bc10      	pop	{r4}
 800cbd0:	f000 b934 	b.w	800ce3c <__swbuf_r>
 800cbd4:	6813      	ldr	r3, [r2, #0]
 800cbd6:	1c58      	adds	r0, r3, #1
 800cbd8:	6010      	str	r0, [r2, #0]
 800cbda:	7019      	strb	r1, [r3, #0]
 800cbdc:	4608      	mov	r0, r1
 800cbde:	bc10      	pop	{r4}
 800cbe0:	4770      	bx	lr

0800cbe2 <__sfputs_r>:
 800cbe2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbe4:	4606      	mov	r6, r0
 800cbe6:	460f      	mov	r7, r1
 800cbe8:	4614      	mov	r4, r2
 800cbea:	18d5      	adds	r5, r2, r3
 800cbec:	42ac      	cmp	r4, r5
 800cbee:	d101      	bne.n	800cbf4 <__sfputs_r+0x12>
 800cbf0:	2000      	movs	r0, #0
 800cbf2:	e007      	b.n	800cc04 <__sfputs_r+0x22>
 800cbf4:	463a      	mov	r2, r7
 800cbf6:	4630      	mov	r0, r6
 800cbf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cbfc:	f7ff ffdc 	bl	800cbb8 <__sfputc_r>
 800cc00:	1c43      	adds	r3, r0, #1
 800cc02:	d1f3      	bne.n	800cbec <__sfputs_r+0xa>
 800cc04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cc08 <_vfiprintf_r>:
 800cc08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc0c:	460d      	mov	r5, r1
 800cc0e:	4614      	mov	r4, r2
 800cc10:	4698      	mov	r8, r3
 800cc12:	4606      	mov	r6, r0
 800cc14:	b09d      	sub	sp, #116	; 0x74
 800cc16:	b118      	cbz	r0, 800cc20 <_vfiprintf_r+0x18>
 800cc18:	6a03      	ldr	r3, [r0, #32]
 800cc1a:	b90b      	cbnz	r3, 800cc20 <_vfiprintf_r+0x18>
 800cc1c:	f7ff f97e 	bl	800bf1c <__sinit>
 800cc20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cc22:	07d9      	lsls	r1, r3, #31
 800cc24:	d405      	bmi.n	800cc32 <_vfiprintf_r+0x2a>
 800cc26:	89ab      	ldrh	r3, [r5, #12]
 800cc28:	059a      	lsls	r2, r3, #22
 800cc2a:	d402      	bmi.n	800cc32 <_vfiprintf_r+0x2a>
 800cc2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cc2e:	f7ff fb47 	bl	800c2c0 <__retarget_lock_acquire_recursive>
 800cc32:	89ab      	ldrh	r3, [r5, #12]
 800cc34:	071b      	lsls	r3, r3, #28
 800cc36:	d501      	bpl.n	800cc3c <_vfiprintf_r+0x34>
 800cc38:	692b      	ldr	r3, [r5, #16]
 800cc3a:	b99b      	cbnz	r3, 800cc64 <_vfiprintf_r+0x5c>
 800cc3c:	4629      	mov	r1, r5
 800cc3e:	4630      	mov	r0, r6
 800cc40:	f000 f93a 	bl	800ceb8 <__swsetup_r>
 800cc44:	b170      	cbz	r0, 800cc64 <_vfiprintf_r+0x5c>
 800cc46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cc48:	07dc      	lsls	r4, r3, #31
 800cc4a:	d504      	bpl.n	800cc56 <_vfiprintf_r+0x4e>
 800cc4c:	f04f 30ff 	mov.w	r0, #4294967295
 800cc50:	b01d      	add	sp, #116	; 0x74
 800cc52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc56:	89ab      	ldrh	r3, [r5, #12]
 800cc58:	0598      	lsls	r0, r3, #22
 800cc5a:	d4f7      	bmi.n	800cc4c <_vfiprintf_r+0x44>
 800cc5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cc5e:	f7ff fb30 	bl	800c2c2 <__retarget_lock_release_recursive>
 800cc62:	e7f3      	b.n	800cc4c <_vfiprintf_r+0x44>
 800cc64:	2300      	movs	r3, #0
 800cc66:	9309      	str	r3, [sp, #36]	; 0x24
 800cc68:	2320      	movs	r3, #32
 800cc6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cc6e:	2330      	movs	r3, #48	; 0x30
 800cc70:	f04f 0901 	mov.w	r9, #1
 800cc74:	f8cd 800c 	str.w	r8, [sp, #12]
 800cc78:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800ce28 <_vfiprintf_r+0x220>
 800cc7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cc80:	4623      	mov	r3, r4
 800cc82:	469a      	mov	sl, r3
 800cc84:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cc88:	b10a      	cbz	r2, 800cc8e <_vfiprintf_r+0x86>
 800cc8a:	2a25      	cmp	r2, #37	; 0x25
 800cc8c:	d1f9      	bne.n	800cc82 <_vfiprintf_r+0x7a>
 800cc8e:	ebba 0b04 	subs.w	fp, sl, r4
 800cc92:	d00b      	beq.n	800ccac <_vfiprintf_r+0xa4>
 800cc94:	465b      	mov	r3, fp
 800cc96:	4622      	mov	r2, r4
 800cc98:	4629      	mov	r1, r5
 800cc9a:	4630      	mov	r0, r6
 800cc9c:	f7ff ffa1 	bl	800cbe2 <__sfputs_r>
 800cca0:	3001      	adds	r0, #1
 800cca2:	f000 80a9 	beq.w	800cdf8 <_vfiprintf_r+0x1f0>
 800cca6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cca8:	445a      	add	r2, fp
 800ccaa:	9209      	str	r2, [sp, #36]	; 0x24
 800ccac:	f89a 3000 	ldrb.w	r3, [sl]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	f000 80a1 	beq.w	800cdf8 <_vfiprintf_r+0x1f0>
 800ccb6:	2300      	movs	r3, #0
 800ccb8:	f04f 32ff 	mov.w	r2, #4294967295
 800ccbc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ccc0:	f10a 0a01 	add.w	sl, sl, #1
 800ccc4:	9304      	str	r3, [sp, #16]
 800ccc6:	9307      	str	r3, [sp, #28]
 800ccc8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cccc:	931a      	str	r3, [sp, #104]	; 0x68
 800ccce:	4654      	mov	r4, sl
 800ccd0:	2205      	movs	r2, #5
 800ccd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ccd6:	4854      	ldr	r0, [pc, #336]	; (800ce28 <_vfiprintf_r+0x220>)
 800ccd8:	f7ff ff2a 	bl	800cb30 <memchr>
 800ccdc:	9a04      	ldr	r2, [sp, #16]
 800ccde:	b9d8      	cbnz	r0, 800cd18 <_vfiprintf_r+0x110>
 800cce0:	06d1      	lsls	r1, r2, #27
 800cce2:	bf44      	itt	mi
 800cce4:	2320      	movmi	r3, #32
 800cce6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ccea:	0713      	lsls	r3, r2, #28
 800ccec:	bf44      	itt	mi
 800ccee:	232b      	movmi	r3, #43	; 0x2b
 800ccf0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ccf4:	f89a 3000 	ldrb.w	r3, [sl]
 800ccf8:	2b2a      	cmp	r3, #42	; 0x2a
 800ccfa:	d015      	beq.n	800cd28 <_vfiprintf_r+0x120>
 800ccfc:	4654      	mov	r4, sl
 800ccfe:	2000      	movs	r0, #0
 800cd00:	f04f 0c0a 	mov.w	ip, #10
 800cd04:	9a07      	ldr	r2, [sp, #28]
 800cd06:	4621      	mov	r1, r4
 800cd08:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cd0c:	3b30      	subs	r3, #48	; 0x30
 800cd0e:	2b09      	cmp	r3, #9
 800cd10:	d94d      	bls.n	800cdae <_vfiprintf_r+0x1a6>
 800cd12:	b1b0      	cbz	r0, 800cd42 <_vfiprintf_r+0x13a>
 800cd14:	9207      	str	r2, [sp, #28]
 800cd16:	e014      	b.n	800cd42 <_vfiprintf_r+0x13a>
 800cd18:	eba0 0308 	sub.w	r3, r0, r8
 800cd1c:	fa09 f303 	lsl.w	r3, r9, r3
 800cd20:	4313      	orrs	r3, r2
 800cd22:	46a2      	mov	sl, r4
 800cd24:	9304      	str	r3, [sp, #16]
 800cd26:	e7d2      	b.n	800ccce <_vfiprintf_r+0xc6>
 800cd28:	9b03      	ldr	r3, [sp, #12]
 800cd2a:	1d19      	adds	r1, r3, #4
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	9103      	str	r1, [sp, #12]
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	bfbb      	ittet	lt
 800cd34:	425b      	neglt	r3, r3
 800cd36:	f042 0202 	orrlt.w	r2, r2, #2
 800cd3a:	9307      	strge	r3, [sp, #28]
 800cd3c:	9307      	strlt	r3, [sp, #28]
 800cd3e:	bfb8      	it	lt
 800cd40:	9204      	strlt	r2, [sp, #16]
 800cd42:	7823      	ldrb	r3, [r4, #0]
 800cd44:	2b2e      	cmp	r3, #46	; 0x2e
 800cd46:	d10c      	bne.n	800cd62 <_vfiprintf_r+0x15a>
 800cd48:	7863      	ldrb	r3, [r4, #1]
 800cd4a:	2b2a      	cmp	r3, #42	; 0x2a
 800cd4c:	d134      	bne.n	800cdb8 <_vfiprintf_r+0x1b0>
 800cd4e:	9b03      	ldr	r3, [sp, #12]
 800cd50:	3402      	adds	r4, #2
 800cd52:	1d1a      	adds	r2, r3, #4
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	9203      	str	r2, [sp, #12]
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	bfb8      	it	lt
 800cd5c:	f04f 33ff 	movlt.w	r3, #4294967295
 800cd60:	9305      	str	r3, [sp, #20]
 800cd62:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ce2c <_vfiprintf_r+0x224>
 800cd66:	2203      	movs	r2, #3
 800cd68:	4650      	mov	r0, sl
 800cd6a:	7821      	ldrb	r1, [r4, #0]
 800cd6c:	f7ff fee0 	bl	800cb30 <memchr>
 800cd70:	b138      	cbz	r0, 800cd82 <_vfiprintf_r+0x17a>
 800cd72:	2240      	movs	r2, #64	; 0x40
 800cd74:	9b04      	ldr	r3, [sp, #16]
 800cd76:	eba0 000a 	sub.w	r0, r0, sl
 800cd7a:	4082      	lsls	r2, r0
 800cd7c:	4313      	orrs	r3, r2
 800cd7e:	3401      	adds	r4, #1
 800cd80:	9304      	str	r3, [sp, #16]
 800cd82:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd86:	2206      	movs	r2, #6
 800cd88:	4829      	ldr	r0, [pc, #164]	; (800ce30 <_vfiprintf_r+0x228>)
 800cd8a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cd8e:	f7ff fecf 	bl	800cb30 <memchr>
 800cd92:	2800      	cmp	r0, #0
 800cd94:	d03f      	beq.n	800ce16 <_vfiprintf_r+0x20e>
 800cd96:	4b27      	ldr	r3, [pc, #156]	; (800ce34 <_vfiprintf_r+0x22c>)
 800cd98:	bb1b      	cbnz	r3, 800cde2 <_vfiprintf_r+0x1da>
 800cd9a:	9b03      	ldr	r3, [sp, #12]
 800cd9c:	3307      	adds	r3, #7
 800cd9e:	f023 0307 	bic.w	r3, r3, #7
 800cda2:	3308      	adds	r3, #8
 800cda4:	9303      	str	r3, [sp, #12]
 800cda6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cda8:	443b      	add	r3, r7
 800cdaa:	9309      	str	r3, [sp, #36]	; 0x24
 800cdac:	e768      	b.n	800cc80 <_vfiprintf_r+0x78>
 800cdae:	460c      	mov	r4, r1
 800cdb0:	2001      	movs	r0, #1
 800cdb2:	fb0c 3202 	mla	r2, ip, r2, r3
 800cdb6:	e7a6      	b.n	800cd06 <_vfiprintf_r+0xfe>
 800cdb8:	2300      	movs	r3, #0
 800cdba:	f04f 0c0a 	mov.w	ip, #10
 800cdbe:	4619      	mov	r1, r3
 800cdc0:	3401      	adds	r4, #1
 800cdc2:	9305      	str	r3, [sp, #20]
 800cdc4:	4620      	mov	r0, r4
 800cdc6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cdca:	3a30      	subs	r2, #48	; 0x30
 800cdcc:	2a09      	cmp	r2, #9
 800cdce:	d903      	bls.n	800cdd8 <_vfiprintf_r+0x1d0>
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d0c6      	beq.n	800cd62 <_vfiprintf_r+0x15a>
 800cdd4:	9105      	str	r1, [sp, #20]
 800cdd6:	e7c4      	b.n	800cd62 <_vfiprintf_r+0x15a>
 800cdd8:	4604      	mov	r4, r0
 800cdda:	2301      	movs	r3, #1
 800cddc:	fb0c 2101 	mla	r1, ip, r1, r2
 800cde0:	e7f0      	b.n	800cdc4 <_vfiprintf_r+0x1bc>
 800cde2:	ab03      	add	r3, sp, #12
 800cde4:	9300      	str	r3, [sp, #0]
 800cde6:	462a      	mov	r2, r5
 800cde8:	4630      	mov	r0, r6
 800cdea:	4b13      	ldr	r3, [pc, #76]	; (800ce38 <_vfiprintf_r+0x230>)
 800cdec:	a904      	add	r1, sp, #16
 800cdee:	f3af 8000 	nop.w
 800cdf2:	4607      	mov	r7, r0
 800cdf4:	1c78      	adds	r0, r7, #1
 800cdf6:	d1d6      	bne.n	800cda6 <_vfiprintf_r+0x19e>
 800cdf8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cdfa:	07d9      	lsls	r1, r3, #31
 800cdfc:	d405      	bmi.n	800ce0a <_vfiprintf_r+0x202>
 800cdfe:	89ab      	ldrh	r3, [r5, #12]
 800ce00:	059a      	lsls	r2, r3, #22
 800ce02:	d402      	bmi.n	800ce0a <_vfiprintf_r+0x202>
 800ce04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ce06:	f7ff fa5c 	bl	800c2c2 <__retarget_lock_release_recursive>
 800ce0a:	89ab      	ldrh	r3, [r5, #12]
 800ce0c:	065b      	lsls	r3, r3, #25
 800ce0e:	f53f af1d 	bmi.w	800cc4c <_vfiprintf_r+0x44>
 800ce12:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ce14:	e71c      	b.n	800cc50 <_vfiprintf_r+0x48>
 800ce16:	ab03      	add	r3, sp, #12
 800ce18:	9300      	str	r3, [sp, #0]
 800ce1a:	462a      	mov	r2, r5
 800ce1c:	4630      	mov	r0, r6
 800ce1e:	4b06      	ldr	r3, [pc, #24]	; (800ce38 <_vfiprintf_r+0x230>)
 800ce20:	a904      	add	r1, sp, #16
 800ce22:	f7ff fc8d 	bl	800c740 <_printf_i>
 800ce26:	e7e4      	b.n	800cdf2 <_vfiprintf_r+0x1ea>
 800ce28:	0800d918 	.word	0x0800d918
 800ce2c:	0800d91e 	.word	0x0800d91e
 800ce30:	0800d922 	.word	0x0800d922
 800ce34:	00000000 	.word	0x00000000
 800ce38:	0800cbe3 	.word	0x0800cbe3

0800ce3c <__swbuf_r>:
 800ce3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce3e:	460e      	mov	r6, r1
 800ce40:	4614      	mov	r4, r2
 800ce42:	4605      	mov	r5, r0
 800ce44:	b118      	cbz	r0, 800ce4e <__swbuf_r+0x12>
 800ce46:	6a03      	ldr	r3, [r0, #32]
 800ce48:	b90b      	cbnz	r3, 800ce4e <__swbuf_r+0x12>
 800ce4a:	f7ff f867 	bl	800bf1c <__sinit>
 800ce4e:	69a3      	ldr	r3, [r4, #24]
 800ce50:	60a3      	str	r3, [r4, #8]
 800ce52:	89a3      	ldrh	r3, [r4, #12]
 800ce54:	071a      	lsls	r2, r3, #28
 800ce56:	d525      	bpl.n	800cea4 <__swbuf_r+0x68>
 800ce58:	6923      	ldr	r3, [r4, #16]
 800ce5a:	b31b      	cbz	r3, 800cea4 <__swbuf_r+0x68>
 800ce5c:	6823      	ldr	r3, [r4, #0]
 800ce5e:	6922      	ldr	r2, [r4, #16]
 800ce60:	b2f6      	uxtb	r6, r6
 800ce62:	1a98      	subs	r0, r3, r2
 800ce64:	6963      	ldr	r3, [r4, #20]
 800ce66:	4637      	mov	r7, r6
 800ce68:	4283      	cmp	r3, r0
 800ce6a:	dc04      	bgt.n	800ce76 <__swbuf_r+0x3a>
 800ce6c:	4621      	mov	r1, r4
 800ce6e:	4628      	mov	r0, r5
 800ce70:	f7ff fe0a 	bl	800ca88 <_fflush_r>
 800ce74:	b9e0      	cbnz	r0, 800ceb0 <__swbuf_r+0x74>
 800ce76:	68a3      	ldr	r3, [r4, #8]
 800ce78:	3b01      	subs	r3, #1
 800ce7a:	60a3      	str	r3, [r4, #8]
 800ce7c:	6823      	ldr	r3, [r4, #0]
 800ce7e:	1c5a      	adds	r2, r3, #1
 800ce80:	6022      	str	r2, [r4, #0]
 800ce82:	701e      	strb	r6, [r3, #0]
 800ce84:	6962      	ldr	r2, [r4, #20]
 800ce86:	1c43      	adds	r3, r0, #1
 800ce88:	429a      	cmp	r2, r3
 800ce8a:	d004      	beq.n	800ce96 <__swbuf_r+0x5a>
 800ce8c:	89a3      	ldrh	r3, [r4, #12]
 800ce8e:	07db      	lsls	r3, r3, #31
 800ce90:	d506      	bpl.n	800cea0 <__swbuf_r+0x64>
 800ce92:	2e0a      	cmp	r6, #10
 800ce94:	d104      	bne.n	800cea0 <__swbuf_r+0x64>
 800ce96:	4621      	mov	r1, r4
 800ce98:	4628      	mov	r0, r5
 800ce9a:	f7ff fdf5 	bl	800ca88 <_fflush_r>
 800ce9e:	b938      	cbnz	r0, 800ceb0 <__swbuf_r+0x74>
 800cea0:	4638      	mov	r0, r7
 800cea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cea4:	4621      	mov	r1, r4
 800cea6:	4628      	mov	r0, r5
 800cea8:	f000 f806 	bl	800ceb8 <__swsetup_r>
 800ceac:	2800      	cmp	r0, #0
 800ceae:	d0d5      	beq.n	800ce5c <__swbuf_r+0x20>
 800ceb0:	f04f 37ff 	mov.w	r7, #4294967295
 800ceb4:	e7f4      	b.n	800cea0 <__swbuf_r+0x64>
	...

0800ceb8 <__swsetup_r>:
 800ceb8:	b538      	push	{r3, r4, r5, lr}
 800ceba:	4b2a      	ldr	r3, [pc, #168]	; (800cf64 <__swsetup_r+0xac>)
 800cebc:	4605      	mov	r5, r0
 800cebe:	6818      	ldr	r0, [r3, #0]
 800cec0:	460c      	mov	r4, r1
 800cec2:	b118      	cbz	r0, 800cecc <__swsetup_r+0x14>
 800cec4:	6a03      	ldr	r3, [r0, #32]
 800cec6:	b90b      	cbnz	r3, 800cecc <__swsetup_r+0x14>
 800cec8:	f7ff f828 	bl	800bf1c <__sinit>
 800cecc:	89a3      	ldrh	r3, [r4, #12]
 800cece:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ced2:	0718      	lsls	r0, r3, #28
 800ced4:	d422      	bmi.n	800cf1c <__swsetup_r+0x64>
 800ced6:	06d9      	lsls	r1, r3, #27
 800ced8:	d407      	bmi.n	800ceea <__swsetup_r+0x32>
 800ceda:	2309      	movs	r3, #9
 800cedc:	602b      	str	r3, [r5, #0]
 800cede:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cee2:	f04f 30ff 	mov.w	r0, #4294967295
 800cee6:	81a3      	strh	r3, [r4, #12]
 800cee8:	e034      	b.n	800cf54 <__swsetup_r+0x9c>
 800ceea:	0758      	lsls	r0, r3, #29
 800ceec:	d512      	bpl.n	800cf14 <__swsetup_r+0x5c>
 800ceee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cef0:	b141      	cbz	r1, 800cf04 <__swsetup_r+0x4c>
 800cef2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cef6:	4299      	cmp	r1, r3
 800cef8:	d002      	beq.n	800cf00 <__swsetup_r+0x48>
 800cefa:	4628      	mov	r0, r5
 800cefc:	f7ff fa0e 	bl	800c31c <_free_r>
 800cf00:	2300      	movs	r3, #0
 800cf02:	6363      	str	r3, [r4, #52]	; 0x34
 800cf04:	89a3      	ldrh	r3, [r4, #12]
 800cf06:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cf0a:	81a3      	strh	r3, [r4, #12]
 800cf0c:	2300      	movs	r3, #0
 800cf0e:	6063      	str	r3, [r4, #4]
 800cf10:	6923      	ldr	r3, [r4, #16]
 800cf12:	6023      	str	r3, [r4, #0]
 800cf14:	89a3      	ldrh	r3, [r4, #12]
 800cf16:	f043 0308 	orr.w	r3, r3, #8
 800cf1a:	81a3      	strh	r3, [r4, #12]
 800cf1c:	6923      	ldr	r3, [r4, #16]
 800cf1e:	b94b      	cbnz	r3, 800cf34 <__swsetup_r+0x7c>
 800cf20:	89a3      	ldrh	r3, [r4, #12]
 800cf22:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cf26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cf2a:	d003      	beq.n	800cf34 <__swsetup_r+0x7c>
 800cf2c:	4621      	mov	r1, r4
 800cf2e:	4628      	mov	r0, r5
 800cf30:	f000 f88b 	bl	800d04a <__smakebuf_r>
 800cf34:	89a0      	ldrh	r0, [r4, #12]
 800cf36:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cf3a:	f010 0301 	ands.w	r3, r0, #1
 800cf3e:	d00a      	beq.n	800cf56 <__swsetup_r+0x9e>
 800cf40:	2300      	movs	r3, #0
 800cf42:	60a3      	str	r3, [r4, #8]
 800cf44:	6963      	ldr	r3, [r4, #20]
 800cf46:	425b      	negs	r3, r3
 800cf48:	61a3      	str	r3, [r4, #24]
 800cf4a:	6923      	ldr	r3, [r4, #16]
 800cf4c:	b943      	cbnz	r3, 800cf60 <__swsetup_r+0xa8>
 800cf4e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cf52:	d1c4      	bne.n	800cede <__swsetup_r+0x26>
 800cf54:	bd38      	pop	{r3, r4, r5, pc}
 800cf56:	0781      	lsls	r1, r0, #30
 800cf58:	bf58      	it	pl
 800cf5a:	6963      	ldrpl	r3, [r4, #20]
 800cf5c:	60a3      	str	r3, [r4, #8]
 800cf5e:	e7f4      	b.n	800cf4a <__swsetup_r+0x92>
 800cf60:	2000      	movs	r0, #0
 800cf62:	e7f7      	b.n	800cf54 <__swsetup_r+0x9c>
 800cf64:	20000224 	.word	0x20000224

0800cf68 <_raise_r>:
 800cf68:	291f      	cmp	r1, #31
 800cf6a:	b538      	push	{r3, r4, r5, lr}
 800cf6c:	4604      	mov	r4, r0
 800cf6e:	460d      	mov	r5, r1
 800cf70:	d904      	bls.n	800cf7c <_raise_r+0x14>
 800cf72:	2316      	movs	r3, #22
 800cf74:	6003      	str	r3, [r0, #0]
 800cf76:	f04f 30ff 	mov.w	r0, #4294967295
 800cf7a:	bd38      	pop	{r3, r4, r5, pc}
 800cf7c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800cf7e:	b112      	cbz	r2, 800cf86 <_raise_r+0x1e>
 800cf80:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cf84:	b94b      	cbnz	r3, 800cf9a <_raise_r+0x32>
 800cf86:	4620      	mov	r0, r4
 800cf88:	f000 f830 	bl	800cfec <_getpid_r>
 800cf8c:	462a      	mov	r2, r5
 800cf8e:	4601      	mov	r1, r0
 800cf90:	4620      	mov	r0, r4
 800cf92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cf96:	f000 b817 	b.w	800cfc8 <_kill_r>
 800cf9a:	2b01      	cmp	r3, #1
 800cf9c:	d00a      	beq.n	800cfb4 <_raise_r+0x4c>
 800cf9e:	1c59      	adds	r1, r3, #1
 800cfa0:	d103      	bne.n	800cfaa <_raise_r+0x42>
 800cfa2:	2316      	movs	r3, #22
 800cfa4:	6003      	str	r3, [r0, #0]
 800cfa6:	2001      	movs	r0, #1
 800cfa8:	e7e7      	b.n	800cf7a <_raise_r+0x12>
 800cfaa:	2400      	movs	r4, #0
 800cfac:	4628      	mov	r0, r5
 800cfae:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cfb2:	4798      	blx	r3
 800cfb4:	2000      	movs	r0, #0
 800cfb6:	e7e0      	b.n	800cf7a <_raise_r+0x12>

0800cfb8 <raise>:
 800cfb8:	4b02      	ldr	r3, [pc, #8]	; (800cfc4 <raise+0xc>)
 800cfba:	4601      	mov	r1, r0
 800cfbc:	6818      	ldr	r0, [r3, #0]
 800cfbe:	f7ff bfd3 	b.w	800cf68 <_raise_r>
 800cfc2:	bf00      	nop
 800cfc4:	20000224 	.word	0x20000224

0800cfc8 <_kill_r>:
 800cfc8:	b538      	push	{r3, r4, r5, lr}
 800cfca:	2300      	movs	r3, #0
 800cfcc:	4d06      	ldr	r5, [pc, #24]	; (800cfe8 <_kill_r+0x20>)
 800cfce:	4604      	mov	r4, r0
 800cfd0:	4608      	mov	r0, r1
 800cfd2:	4611      	mov	r1, r2
 800cfd4:	602b      	str	r3, [r5, #0]
 800cfd6:	f7f4 fff4 	bl	8001fc2 <_kill>
 800cfda:	1c43      	adds	r3, r0, #1
 800cfdc:	d102      	bne.n	800cfe4 <_kill_r+0x1c>
 800cfde:	682b      	ldr	r3, [r5, #0]
 800cfe0:	b103      	cbz	r3, 800cfe4 <_kill_r+0x1c>
 800cfe2:	6023      	str	r3, [r4, #0]
 800cfe4:	bd38      	pop	{r3, r4, r5, pc}
 800cfe6:	bf00      	nop
 800cfe8:	200016cc 	.word	0x200016cc

0800cfec <_getpid_r>:
 800cfec:	f7f4 bfe2 	b.w	8001fb4 <_getpid>

0800cff0 <_malloc_usable_size_r>:
 800cff0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cff4:	1f18      	subs	r0, r3, #4
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	bfbc      	itt	lt
 800cffa:	580b      	ldrlt	r3, [r1, r0]
 800cffc:	18c0      	addlt	r0, r0, r3
 800cffe:	4770      	bx	lr

0800d000 <__swhatbuf_r>:
 800d000:	b570      	push	{r4, r5, r6, lr}
 800d002:	460c      	mov	r4, r1
 800d004:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d008:	4615      	mov	r5, r2
 800d00a:	2900      	cmp	r1, #0
 800d00c:	461e      	mov	r6, r3
 800d00e:	b096      	sub	sp, #88	; 0x58
 800d010:	da0c      	bge.n	800d02c <__swhatbuf_r+0x2c>
 800d012:	89a3      	ldrh	r3, [r4, #12]
 800d014:	2100      	movs	r1, #0
 800d016:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d01a:	bf0c      	ite	eq
 800d01c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d020:	2340      	movne	r3, #64	; 0x40
 800d022:	2000      	movs	r0, #0
 800d024:	6031      	str	r1, [r6, #0]
 800d026:	602b      	str	r3, [r5, #0]
 800d028:	b016      	add	sp, #88	; 0x58
 800d02a:	bd70      	pop	{r4, r5, r6, pc}
 800d02c:	466a      	mov	r2, sp
 800d02e:	f000 f849 	bl	800d0c4 <_fstat_r>
 800d032:	2800      	cmp	r0, #0
 800d034:	dbed      	blt.n	800d012 <__swhatbuf_r+0x12>
 800d036:	9901      	ldr	r1, [sp, #4]
 800d038:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d03c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d040:	4259      	negs	r1, r3
 800d042:	4159      	adcs	r1, r3
 800d044:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d048:	e7eb      	b.n	800d022 <__swhatbuf_r+0x22>

0800d04a <__smakebuf_r>:
 800d04a:	898b      	ldrh	r3, [r1, #12]
 800d04c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d04e:	079d      	lsls	r5, r3, #30
 800d050:	4606      	mov	r6, r0
 800d052:	460c      	mov	r4, r1
 800d054:	d507      	bpl.n	800d066 <__smakebuf_r+0x1c>
 800d056:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d05a:	6023      	str	r3, [r4, #0]
 800d05c:	6123      	str	r3, [r4, #16]
 800d05e:	2301      	movs	r3, #1
 800d060:	6163      	str	r3, [r4, #20]
 800d062:	b002      	add	sp, #8
 800d064:	bd70      	pop	{r4, r5, r6, pc}
 800d066:	466a      	mov	r2, sp
 800d068:	ab01      	add	r3, sp, #4
 800d06a:	f7ff ffc9 	bl	800d000 <__swhatbuf_r>
 800d06e:	9900      	ldr	r1, [sp, #0]
 800d070:	4605      	mov	r5, r0
 800d072:	4630      	mov	r0, r6
 800d074:	f7fe fd48 	bl	800bb08 <_malloc_r>
 800d078:	b948      	cbnz	r0, 800d08e <__smakebuf_r+0x44>
 800d07a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d07e:	059a      	lsls	r2, r3, #22
 800d080:	d4ef      	bmi.n	800d062 <__smakebuf_r+0x18>
 800d082:	f023 0303 	bic.w	r3, r3, #3
 800d086:	f043 0302 	orr.w	r3, r3, #2
 800d08a:	81a3      	strh	r3, [r4, #12]
 800d08c:	e7e3      	b.n	800d056 <__smakebuf_r+0xc>
 800d08e:	89a3      	ldrh	r3, [r4, #12]
 800d090:	6020      	str	r0, [r4, #0]
 800d092:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d096:	81a3      	strh	r3, [r4, #12]
 800d098:	9b00      	ldr	r3, [sp, #0]
 800d09a:	6120      	str	r0, [r4, #16]
 800d09c:	6163      	str	r3, [r4, #20]
 800d09e:	9b01      	ldr	r3, [sp, #4]
 800d0a0:	b15b      	cbz	r3, 800d0ba <__smakebuf_r+0x70>
 800d0a2:	4630      	mov	r0, r6
 800d0a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d0a8:	f000 f81e 	bl	800d0e8 <_isatty_r>
 800d0ac:	b128      	cbz	r0, 800d0ba <__smakebuf_r+0x70>
 800d0ae:	89a3      	ldrh	r3, [r4, #12]
 800d0b0:	f023 0303 	bic.w	r3, r3, #3
 800d0b4:	f043 0301 	orr.w	r3, r3, #1
 800d0b8:	81a3      	strh	r3, [r4, #12]
 800d0ba:	89a3      	ldrh	r3, [r4, #12]
 800d0bc:	431d      	orrs	r5, r3
 800d0be:	81a5      	strh	r5, [r4, #12]
 800d0c0:	e7cf      	b.n	800d062 <__smakebuf_r+0x18>
	...

0800d0c4 <_fstat_r>:
 800d0c4:	b538      	push	{r3, r4, r5, lr}
 800d0c6:	2300      	movs	r3, #0
 800d0c8:	4d06      	ldr	r5, [pc, #24]	; (800d0e4 <_fstat_r+0x20>)
 800d0ca:	4604      	mov	r4, r0
 800d0cc:	4608      	mov	r0, r1
 800d0ce:	4611      	mov	r1, r2
 800d0d0:	602b      	str	r3, [r5, #0]
 800d0d2:	f7f4 ffd4 	bl	800207e <_fstat>
 800d0d6:	1c43      	adds	r3, r0, #1
 800d0d8:	d102      	bne.n	800d0e0 <_fstat_r+0x1c>
 800d0da:	682b      	ldr	r3, [r5, #0]
 800d0dc:	b103      	cbz	r3, 800d0e0 <_fstat_r+0x1c>
 800d0de:	6023      	str	r3, [r4, #0]
 800d0e0:	bd38      	pop	{r3, r4, r5, pc}
 800d0e2:	bf00      	nop
 800d0e4:	200016cc 	.word	0x200016cc

0800d0e8 <_isatty_r>:
 800d0e8:	b538      	push	{r3, r4, r5, lr}
 800d0ea:	2300      	movs	r3, #0
 800d0ec:	4d05      	ldr	r5, [pc, #20]	; (800d104 <_isatty_r+0x1c>)
 800d0ee:	4604      	mov	r4, r0
 800d0f0:	4608      	mov	r0, r1
 800d0f2:	602b      	str	r3, [r5, #0]
 800d0f4:	f7f4 ffd2 	bl	800209c <_isatty>
 800d0f8:	1c43      	adds	r3, r0, #1
 800d0fa:	d102      	bne.n	800d102 <_isatty_r+0x1a>
 800d0fc:	682b      	ldr	r3, [r5, #0]
 800d0fe:	b103      	cbz	r3, 800d102 <_isatty_r+0x1a>
 800d100:	6023      	str	r3, [r4, #0]
 800d102:	bd38      	pop	{r3, r4, r5, pc}
 800d104:	200016cc 	.word	0x200016cc

0800d108 <_init>:
 800d108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d10a:	bf00      	nop
 800d10c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d10e:	bc08      	pop	{r3}
 800d110:	469e      	mov	lr, r3
 800d112:	4770      	bx	lr

0800d114 <_fini>:
 800d114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d116:	bf00      	nop
 800d118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d11a:	bc08      	pop	{r3}
 800d11c:	469e      	mov	lr, r3
 800d11e:	4770      	bx	lr
