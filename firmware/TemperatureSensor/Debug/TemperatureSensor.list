
TemperatureSensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007980  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000033c  08007a90  08007a90  00017a90  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007dcc  08007dcc  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08007dcc  08007dcc  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007dcc  08007dcc  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007dcc  08007dcc  00017dcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007dd0  08007dd0  00017dd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007dd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d54  200001dc  08007fb0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000f30  08007fb0  00020f30  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY
 13 .debug_info   000204dc  00000000  00000000  00020248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005e30  00000000  00000000  00040724  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0000c03b  00000000  00000000  00046554  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001418  00000000  00000000  00052590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001778  00000000  00000000  000539a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000833a  00000000  00000000  00055120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00028330  00000000  00000000  0005d45a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00095158  00000000  00000000  0008578a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000047ac  00000000  00000000  0011a8e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007e  00000000  00000000  0011f090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08007a78 	.word	0x08007a78

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08007a78 	.word	0x08007a78

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_dmul>:
 8000174:	b570      	push	{r4, r5, r6, lr}
 8000176:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800017a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800017e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000182:	bf1d      	ittte	ne
 8000184:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000188:	ea94 0f0c 	teqne	r4, ip
 800018c:	ea95 0f0c 	teqne	r5, ip
 8000190:	f000 f8de 	bleq	8000350 <__aeabi_dmul+0x1dc>
 8000194:	442c      	add	r4, r5
 8000196:	ea81 0603 	eor.w	r6, r1, r3
 800019a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800019e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001a2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001a6:	bf18      	it	ne
 80001a8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80001ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80001b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80001b4:	d038      	beq.n	8000228 <__aeabi_dmul+0xb4>
 80001b6:	fba0 ce02 	umull	ip, lr, r0, r2
 80001ba:	f04f 0500 	mov.w	r5, #0
 80001be:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001c2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001c6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001ca:	f04f 0600 	mov.w	r6, #0
 80001ce:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001d2:	f09c 0f00 	teq	ip, #0
 80001d6:	bf18      	it	ne
 80001d8:	f04e 0e01 	orrne.w	lr, lr, #1
 80001dc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001e0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001e4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001e8:	d204      	bcs.n	80001f4 <__aeabi_dmul+0x80>
 80001ea:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ee:	416d      	adcs	r5, r5
 80001f0:	eb46 0606 	adc.w	r6, r6, r6
 80001f4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001f8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001fc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000200:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000204:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000208:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800020c:	bf88      	it	hi
 800020e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000212:	d81e      	bhi.n	8000252 <__aeabi_dmul+0xde>
 8000214:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000218:	bf08      	it	eq
 800021a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800021e:	f150 0000 	adcs.w	r0, r0, #0
 8000222:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000226:	bd70      	pop	{r4, r5, r6, pc}
 8000228:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800022c:	ea46 0101 	orr.w	r1, r6, r1
 8000230:	ea40 0002 	orr.w	r0, r0, r2
 8000234:	ea81 0103 	eor.w	r1, r1, r3
 8000238:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800023c:	bfc2      	ittt	gt
 800023e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000242:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000246:	bd70      	popgt	{r4, r5, r6, pc}
 8000248:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800024c:	f04f 0e00 	mov.w	lr, #0
 8000250:	3c01      	subs	r4, #1
 8000252:	f300 80ab 	bgt.w	80003ac <__aeabi_dmul+0x238>
 8000256:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800025a:	bfde      	ittt	le
 800025c:	2000      	movle	r0, #0
 800025e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000262:	bd70      	pople	{r4, r5, r6, pc}
 8000264:	f1c4 0400 	rsb	r4, r4, #0
 8000268:	3c20      	subs	r4, #32
 800026a:	da35      	bge.n	80002d8 <__aeabi_dmul+0x164>
 800026c:	340c      	adds	r4, #12
 800026e:	dc1b      	bgt.n	80002a8 <__aeabi_dmul+0x134>
 8000270:	f104 0414 	add.w	r4, r4, #20
 8000274:	f1c4 0520 	rsb	r5, r4, #32
 8000278:	fa00 f305 	lsl.w	r3, r0, r5
 800027c:	fa20 f004 	lsr.w	r0, r0, r4
 8000280:	fa01 f205 	lsl.w	r2, r1, r5
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800028c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000290:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000294:	fa21 f604 	lsr.w	r6, r1, r4
 8000298:	eb42 0106 	adc.w	r1, r2, r6
 800029c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002a0:	bf08      	it	eq
 80002a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002a6:	bd70      	pop	{r4, r5, r6, pc}
 80002a8:	f1c4 040c 	rsb	r4, r4, #12
 80002ac:	f1c4 0520 	rsb	r5, r4, #32
 80002b0:	fa00 f304 	lsl.w	r3, r0, r4
 80002b4:	fa20 f005 	lsr.w	r0, r0, r5
 80002b8:	fa01 f204 	lsl.w	r2, r1, r4
 80002bc:	ea40 0002 	orr.w	r0, r0, r2
 80002c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002c8:	f141 0100 	adc.w	r1, r1, #0
 80002cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002d0:	bf08      	it	eq
 80002d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002d6:	bd70      	pop	{r4, r5, r6, pc}
 80002d8:	f1c4 0520 	rsb	r5, r4, #32
 80002dc:	fa00 f205 	lsl.w	r2, r0, r5
 80002e0:	ea4e 0e02 	orr.w	lr, lr, r2
 80002e4:	fa20 f304 	lsr.w	r3, r0, r4
 80002e8:	fa01 f205 	lsl.w	r2, r1, r5
 80002ec:	ea43 0302 	orr.w	r3, r3, r2
 80002f0:	fa21 f004 	lsr.w	r0, r1, r4
 80002f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002f8:	fa21 f204 	lsr.w	r2, r1, r4
 80002fc:	ea20 0002 	bic.w	r0, r0, r2
 8000300:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000304:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000308:	bf08      	it	eq
 800030a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800030e:	bd70      	pop	{r4, r5, r6, pc}
 8000310:	f094 0f00 	teq	r4, #0
 8000314:	d10f      	bne.n	8000336 <__aeabi_dmul+0x1c2>
 8000316:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800031a:	0040      	lsls	r0, r0, #1
 800031c:	eb41 0101 	adc.w	r1, r1, r1
 8000320:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000324:	bf08      	it	eq
 8000326:	3c01      	subeq	r4, #1
 8000328:	d0f7      	beq.n	800031a <__aeabi_dmul+0x1a6>
 800032a:	ea41 0106 	orr.w	r1, r1, r6
 800032e:	f095 0f00 	teq	r5, #0
 8000332:	bf18      	it	ne
 8000334:	4770      	bxne	lr
 8000336:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800033a:	0052      	lsls	r2, r2, #1
 800033c:	eb43 0303 	adc.w	r3, r3, r3
 8000340:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000344:	bf08      	it	eq
 8000346:	3d01      	subeq	r5, #1
 8000348:	d0f7      	beq.n	800033a <__aeabi_dmul+0x1c6>
 800034a:	ea43 0306 	orr.w	r3, r3, r6
 800034e:	4770      	bx	lr
 8000350:	ea94 0f0c 	teq	r4, ip
 8000354:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000358:	bf18      	it	ne
 800035a:	ea95 0f0c 	teqne	r5, ip
 800035e:	d00c      	beq.n	800037a <__aeabi_dmul+0x206>
 8000360:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000364:	bf18      	it	ne
 8000366:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800036a:	d1d1      	bne.n	8000310 <__aeabi_dmul+0x19c>
 800036c:	ea81 0103 	eor.w	r1, r1, r3
 8000370:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000374:	f04f 0000 	mov.w	r0, #0
 8000378:	bd70      	pop	{r4, r5, r6, pc}
 800037a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800037e:	bf06      	itte	eq
 8000380:	4610      	moveq	r0, r2
 8000382:	4619      	moveq	r1, r3
 8000384:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000388:	d019      	beq.n	80003be <__aeabi_dmul+0x24a>
 800038a:	ea94 0f0c 	teq	r4, ip
 800038e:	d102      	bne.n	8000396 <__aeabi_dmul+0x222>
 8000390:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000394:	d113      	bne.n	80003be <__aeabi_dmul+0x24a>
 8000396:	ea95 0f0c 	teq	r5, ip
 800039a:	d105      	bne.n	80003a8 <__aeabi_dmul+0x234>
 800039c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003a0:	bf1c      	itt	ne
 80003a2:	4610      	movne	r0, r2
 80003a4:	4619      	movne	r1, r3
 80003a6:	d10a      	bne.n	80003be <__aeabi_dmul+0x24a>
 80003a8:	ea81 0103 	eor.w	r1, r1, r3
 80003ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003b0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b8:	f04f 0000 	mov.w	r0, #0
 80003bc:	bd70      	pop	{r4, r5, r6, pc}
 80003be:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003c2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003c6:	bd70      	pop	{r4, r5, r6, pc}

080003c8 <__aeabi_drsub>:
 80003c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003cc:	e002      	b.n	80003d4 <__adddf3>
 80003ce:	bf00      	nop

080003d0 <__aeabi_dsub>:
 80003d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003d4 <__adddf3>:
 80003d4:	b530      	push	{r4, r5, lr}
 80003d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	bf1f      	itttt	ne
 80003ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003fa:	f000 80e2 	beq.w	80005c2 <__adddf3+0x1ee>
 80003fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000402:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000406:	bfb8      	it	lt
 8000408:	426d      	neglt	r5, r5
 800040a:	dd0c      	ble.n	8000426 <__adddf3+0x52>
 800040c:	442c      	add	r4, r5
 800040e:	ea80 0202 	eor.w	r2, r0, r2
 8000412:	ea81 0303 	eor.w	r3, r1, r3
 8000416:	ea82 0000 	eor.w	r0, r2, r0
 800041a:	ea83 0101 	eor.w	r1, r3, r1
 800041e:	ea80 0202 	eor.w	r2, r0, r2
 8000422:	ea81 0303 	eor.w	r3, r1, r3
 8000426:	2d36      	cmp	r5, #54	; 0x36
 8000428:	bf88      	it	hi
 800042a:	bd30      	pophi	{r4, r5, pc}
 800042c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000430:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000434:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000438:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800043c:	d002      	beq.n	8000444 <__adddf3+0x70>
 800043e:	4240      	negs	r0, r0
 8000440:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000444:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000448:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800044c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000450:	d002      	beq.n	8000458 <__adddf3+0x84>
 8000452:	4252      	negs	r2, r2
 8000454:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000458:	ea94 0f05 	teq	r4, r5
 800045c:	f000 80a7 	beq.w	80005ae <__adddf3+0x1da>
 8000460:	f1a4 0401 	sub.w	r4, r4, #1
 8000464:	f1d5 0e20 	rsbs	lr, r5, #32
 8000468:	db0d      	blt.n	8000486 <__adddf3+0xb2>
 800046a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800046e:	fa22 f205 	lsr.w	r2, r2, r5
 8000472:	1880      	adds	r0, r0, r2
 8000474:	f141 0100 	adc.w	r1, r1, #0
 8000478:	fa03 f20e 	lsl.w	r2, r3, lr
 800047c:	1880      	adds	r0, r0, r2
 800047e:	fa43 f305 	asr.w	r3, r3, r5
 8000482:	4159      	adcs	r1, r3
 8000484:	e00e      	b.n	80004a4 <__adddf3+0xd0>
 8000486:	f1a5 0520 	sub.w	r5, r5, #32
 800048a:	f10e 0e20 	add.w	lr, lr, #32
 800048e:	2a01      	cmp	r2, #1
 8000490:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000494:	bf28      	it	cs
 8000496:	f04c 0c02 	orrcs.w	ip, ip, #2
 800049a:	fa43 f305 	asr.w	r3, r3, r5
 800049e:	18c0      	adds	r0, r0, r3
 80004a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004a8:	d507      	bpl.n	80004ba <__adddf3+0xe6>
 80004aa:	f04f 0e00 	mov.w	lr, #0
 80004ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80004b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80004ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004be:	d31b      	bcc.n	80004f8 <__adddf3+0x124>
 80004c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004c4:	d30c      	bcc.n	80004e0 <__adddf3+0x10c>
 80004c6:	0849      	lsrs	r1, r1, #1
 80004c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80004cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004d0:	f104 0401 	add.w	r4, r4, #1
 80004d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004dc:	f080 809a 	bcs.w	8000614 <__adddf3+0x240>
 80004e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004e4:	bf08      	it	eq
 80004e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004ea:	f150 0000 	adcs.w	r0, r0, #0
 80004ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004f2:	ea41 0105 	orr.w	r1, r1, r5
 80004f6:	bd30      	pop	{r4, r5, pc}
 80004f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004fc:	4140      	adcs	r0, r0
 80004fe:	eb41 0101 	adc.w	r1, r1, r1
 8000502:	3c01      	subs	r4, #1
 8000504:	bf28      	it	cs
 8000506:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800050a:	d2e9      	bcs.n	80004e0 <__adddf3+0x10c>
 800050c:	f091 0f00 	teq	r1, #0
 8000510:	bf04      	itt	eq
 8000512:	4601      	moveq	r1, r0
 8000514:	2000      	moveq	r0, #0
 8000516:	fab1 f381 	clz	r3, r1
 800051a:	bf08      	it	eq
 800051c:	3320      	addeq	r3, #32
 800051e:	f1a3 030b 	sub.w	r3, r3, #11
 8000522:	f1b3 0220 	subs.w	r2, r3, #32
 8000526:	da0c      	bge.n	8000542 <__adddf3+0x16e>
 8000528:	320c      	adds	r2, #12
 800052a:	dd08      	ble.n	800053e <__adddf3+0x16a>
 800052c:	f102 0c14 	add.w	ip, r2, #20
 8000530:	f1c2 020c 	rsb	r2, r2, #12
 8000534:	fa01 f00c 	lsl.w	r0, r1, ip
 8000538:	fa21 f102 	lsr.w	r1, r1, r2
 800053c:	e00c      	b.n	8000558 <__adddf3+0x184>
 800053e:	f102 0214 	add.w	r2, r2, #20
 8000542:	bfd8      	it	le
 8000544:	f1c2 0c20 	rsble	ip, r2, #32
 8000548:	fa01 f102 	lsl.w	r1, r1, r2
 800054c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000550:	bfdc      	itt	le
 8000552:	ea41 010c 	orrle.w	r1, r1, ip
 8000556:	4090      	lslle	r0, r2
 8000558:	1ae4      	subs	r4, r4, r3
 800055a:	bfa2      	ittt	ge
 800055c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000560:	4329      	orrge	r1, r5
 8000562:	bd30      	popge	{r4, r5, pc}
 8000564:	ea6f 0404 	mvn.w	r4, r4
 8000568:	3c1f      	subs	r4, #31
 800056a:	da1c      	bge.n	80005a6 <__adddf3+0x1d2>
 800056c:	340c      	adds	r4, #12
 800056e:	dc0e      	bgt.n	800058e <__adddf3+0x1ba>
 8000570:	f104 0414 	add.w	r4, r4, #20
 8000574:	f1c4 0220 	rsb	r2, r4, #32
 8000578:	fa20 f004 	lsr.w	r0, r0, r4
 800057c:	fa01 f302 	lsl.w	r3, r1, r2
 8000580:	ea40 0003 	orr.w	r0, r0, r3
 8000584:	fa21 f304 	lsr.w	r3, r1, r4
 8000588:	ea45 0103 	orr.w	r1, r5, r3
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	f1c4 040c 	rsb	r4, r4, #12
 8000592:	f1c4 0220 	rsb	r2, r4, #32
 8000596:	fa20 f002 	lsr.w	r0, r0, r2
 800059a:	fa01 f304 	lsl.w	r3, r1, r4
 800059e:	ea40 0003 	orr.w	r0, r0, r3
 80005a2:	4629      	mov	r1, r5
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	fa21 f004 	lsr.w	r0, r1, r4
 80005aa:	4629      	mov	r1, r5
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	f094 0f00 	teq	r4, #0
 80005b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005b6:	bf06      	itte	eq
 80005b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005bc:	3401      	addeq	r4, #1
 80005be:	3d01      	subne	r5, #1
 80005c0:	e74e      	b.n	8000460 <__adddf3+0x8c>
 80005c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005c6:	bf18      	it	ne
 80005c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005cc:	d029      	beq.n	8000622 <__adddf3+0x24e>
 80005ce:	ea94 0f05 	teq	r4, r5
 80005d2:	bf08      	it	eq
 80005d4:	ea90 0f02 	teqeq	r0, r2
 80005d8:	d005      	beq.n	80005e6 <__adddf3+0x212>
 80005da:	ea54 0c00 	orrs.w	ip, r4, r0
 80005de:	bf04      	itt	eq
 80005e0:	4619      	moveq	r1, r3
 80005e2:	4610      	moveq	r0, r2
 80005e4:	bd30      	pop	{r4, r5, pc}
 80005e6:	ea91 0f03 	teq	r1, r3
 80005ea:	bf1e      	ittt	ne
 80005ec:	2100      	movne	r1, #0
 80005ee:	2000      	movne	r0, #0
 80005f0:	bd30      	popne	{r4, r5, pc}
 80005f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005f6:	d105      	bne.n	8000604 <__adddf3+0x230>
 80005f8:	0040      	lsls	r0, r0, #1
 80005fa:	4149      	adcs	r1, r1
 80005fc:	bf28      	it	cs
 80005fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000608:	bf3c      	itt	cc
 800060a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800060e:	bd30      	popcc	{r4, r5, pc}
 8000610:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000614:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000618:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800061c:	f04f 0000 	mov.w	r0, #0
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000626:	bf1a      	itte	ne
 8000628:	4619      	movne	r1, r3
 800062a:	4610      	movne	r0, r2
 800062c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000630:	bf1c      	itt	ne
 8000632:	460b      	movne	r3, r1
 8000634:	4602      	movne	r2, r0
 8000636:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800063a:	bf06      	itte	eq
 800063c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000640:	ea91 0f03 	teqeq	r1, r3
 8000644:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	bf00      	nop

0800064c <__aeabi_ui2d>:
 800064c:	f090 0f00 	teq	r0, #0
 8000650:	bf04      	itt	eq
 8000652:	2100      	moveq	r1, #0
 8000654:	4770      	bxeq	lr
 8000656:	b530      	push	{r4, r5, lr}
 8000658:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800065c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000660:	f04f 0500 	mov.w	r5, #0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e750      	b.n	800050c <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_i2d>:
 800066c:	f090 0f00 	teq	r0, #0
 8000670:	bf04      	itt	eq
 8000672:	2100      	moveq	r1, #0
 8000674:	4770      	bxeq	lr
 8000676:	b530      	push	{r4, r5, lr}
 8000678:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800067c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000680:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000684:	bf48      	it	mi
 8000686:	4240      	negmi	r0, r0
 8000688:	f04f 0100 	mov.w	r1, #0
 800068c:	e73e      	b.n	800050c <__adddf3+0x138>
 800068e:	bf00      	nop

08000690 <__aeabi_f2d>:
 8000690:	0042      	lsls	r2, r0, #1
 8000692:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000696:	ea4f 0131 	mov.w	r1, r1, rrx
 800069a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800069e:	bf1f      	itttt	ne
 80006a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80006ac:	4770      	bxne	lr
 80006ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80006b2:	bf08      	it	eq
 80006b4:	4770      	bxeq	lr
 80006b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006ba:	bf04      	itt	eq
 80006bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006c0:	4770      	bxeq	lr
 80006c2:	b530      	push	{r4, r5, lr}
 80006c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	e71c      	b.n	800050c <__adddf3+0x138>
 80006d2:	bf00      	nop

080006d4 <__aeabi_ul2d>:
 80006d4:	ea50 0201 	orrs.w	r2, r0, r1
 80006d8:	bf08      	it	eq
 80006da:	4770      	bxeq	lr
 80006dc:	b530      	push	{r4, r5, lr}
 80006de:	f04f 0500 	mov.w	r5, #0
 80006e2:	e00a      	b.n	80006fa <__aeabi_l2d+0x16>

080006e4 <__aeabi_l2d>:
 80006e4:	ea50 0201 	orrs.w	r2, r0, r1
 80006e8:	bf08      	it	eq
 80006ea:	4770      	bxeq	lr
 80006ec:	b530      	push	{r4, r5, lr}
 80006ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006f2:	d502      	bpl.n	80006fa <__aeabi_l2d+0x16>
 80006f4:	4240      	negs	r0, r0
 80006f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000702:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000706:	f43f aed8 	beq.w	80004ba <__adddf3+0xe6>
 800070a:	f04f 0203 	mov.w	r2, #3
 800070e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000712:	bf18      	it	ne
 8000714:	3203      	addne	r2, #3
 8000716:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800071a:	bf18      	it	ne
 800071c:	3203      	addne	r2, #3
 800071e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000722:	f1c2 0320 	rsb	r3, r2, #32
 8000726:	fa00 fc03 	lsl.w	ip, r0, r3
 800072a:	fa20 f002 	lsr.w	r0, r0, r2
 800072e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000732:	ea40 000e 	orr.w	r0, r0, lr
 8000736:	fa21 f102 	lsr.w	r1, r1, r2
 800073a:	4414      	add	r4, r2
 800073c:	e6bd      	b.n	80004ba <__adddf3+0xe6>
 800073e:	bf00      	nop

08000740 <__aeabi_d2f>:
 8000740:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000744:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000748:	bf24      	itt	cs
 800074a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800074e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000752:	d90d      	bls.n	8000770 <__aeabi_d2f+0x30>
 8000754:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000758:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800075c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000760:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000764:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000768:	bf08      	it	eq
 800076a:	f020 0001 	biceq.w	r0, r0, #1
 800076e:	4770      	bx	lr
 8000770:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000774:	d121      	bne.n	80007ba <__aeabi_d2f+0x7a>
 8000776:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800077a:	bfbc      	itt	lt
 800077c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000780:	4770      	bxlt	lr
 8000782:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000786:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800078a:	f1c2 0218 	rsb	r2, r2, #24
 800078e:	f1c2 0c20 	rsb	ip, r2, #32
 8000792:	fa10 f30c 	lsls.w	r3, r0, ip
 8000796:	fa20 f002 	lsr.w	r0, r0, r2
 800079a:	bf18      	it	ne
 800079c:	f040 0001 	orrne.w	r0, r0, #1
 80007a0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007a4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80007a8:	fa03 fc0c 	lsl.w	ip, r3, ip
 80007ac:	ea40 000c 	orr.w	r0, r0, ip
 80007b0:	fa23 f302 	lsr.w	r3, r3, r2
 80007b4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80007b8:	e7cc      	b.n	8000754 <__aeabi_d2f+0x14>
 80007ba:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80007be:	d107      	bne.n	80007d0 <__aeabi_d2f+0x90>
 80007c0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80007c4:	bf1e      	ittt	ne
 80007c6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80007ca:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80007ce:	4770      	bxne	lr
 80007d0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80007d4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80007d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop

080007e0 <__aeabi_frsub>:
 80007e0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80007e4:	e002      	b.n	80007ec <__addsf3>
 80007e6:	bf00      	nop

080007e8 <__aeabi_fsub>:
 80007e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080007ec <__addsf3>:
 80007ec:	0042      	lsls	r2, r0, #1
 80007ee:	bf1f      	itttt	ne
 80007f0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80007f4:	ea92 0f03 	teqne	r2, r3
 80007f8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80007fc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000800:	d06a      	beq.n	80008d8 <__addsf3+0xec>
 8000802:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000806:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800080a:	bfc1      	itttt	gt
 800080c:	18d2      	addgt	r2, r2, r3
 800080e:	4041      	eorgt	r1, r0
 8000810:	4048      	eorgt	r0, r1
 8000812:	4041      	eorgt	r1, r0
 8000814:	bfb8      	it	lt
 8000816:	425b      	neglt	r3, r3
 8000818:	2b19      	cmp	r3, #25
 800081a:	bf88      	it	hi
 800081c:	4770      	bxhi	lr
 800081e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000822:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000826:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800082a:	bf18      	it	ne
 800082c:	4240      	negne	r0, r0
 800082e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000832:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000836:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800083a:	bf18      	it	ne
 800083c:	4249      	negne	r1, r1
 800083e:	ea92 0f03 	teq	r2, r3
 8000842:	d03f      	beq.n	80008c4 <__addsf3+0xd8>
 8000844:	f1a2 0201 	sub.w	r2, r2, #1
 8000848:	fa41 fc03 	asr.w	ip, r1, r3
 800084c:	eb10 000c 	adds.w	r0, r0, ip
 8000850:	f1c3 0320 	rsb	r3, r3, #32
 8000854:	fa01 f103 	lsl.w	r1, r1, r3
 8000858:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800085c:	d502      	bpl.n	8000864 <__addsf3+0x78>
 800085e:	4249      	negs	r1, r1
 8000860:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000864:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000868:	d313      	bcc.n	8000892 <__addsf3+0xa6>
 800086a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800086e:	d306      	bcc.n	800087e <__addsf3+0x92>
 8000870:	0840      	lsrs	r0, r0, #1
 8000872:	ea4f 0131 	mov.w	r1, r1, rrx
 8000876:	f102 0201 	add.w	r2, r2, #1
 800087a:	2afe      	cmp	r2, #254	; 0xfe
 800087c:	d251      	bcs.n	8000922 <__addsf3+0x136>
 800087e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000882:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000886:	bf08      	it	eq
 8000888:	f020 0001 	biceq.w	r0, r0, #1
 800088c:	ea40 0003 	orr.w	r0, r0, r3
 8000890:	4770      	bx	lr
 8000892:	0049      	lsls	r1, r1, #1
 8000894:	eb40 0000 	adc.w	r0, r0, r0
 8000898:	3a01      	subs	r2, #1
 800089a:	bf28      	it	cs
 800089c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80008a0:	d2ed      	bcs.n	800087e <__addsf3+0x92>
 80008a2:	fab0 fc80 	clz	ip, r0
 80008a6:	f1ac 0c08 	sub.w	ip, ip, #8
 80008aa:	ebb2 020c 	subs.w	r2, r2, ip
 80008ae:	fa00 f00c 	lsl.w	r0, r0, ip
 80008b2:	bfaa      	itet	ge
 80008b4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80008b8:	4252      	neglt	r2, r2
 80008ba:	4318      	orrge	r0, r3
 80008bc:	bfbc      	itt	lt
 80008be:	40d0      	lsrlt	r0, r2
 80008c0:	4318      	orrlt	r0, r3
 80008c2:	4770      	bx	lr
 80008c4:	f092 0f00 	teq	r2, #0
 80008c8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80008cc:	bf06      	itte	eq
 80008ce:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80008d2:	3201      	addeq	r2, #1
 80008d4:	3b01      	subne	r3, #1
 80008d6:	e7b5      	b.n	8000844 <__addsf3+0x58>
 80008d8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80008dc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80008e0:	bf18      	it	ne
 80008e2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80008e6:	d021      	beq.n	800092c <__addsf3+0x140>
 80008e8:	ea92 0f03 	teq	r2, r3
 80008ec:	d004      	beq.n	80008f8 <__addsf3+0x10c>
 80008ee:	f092 0f00 	teq	r2, #0
 80008f2:	bf08      	it	eq
 80008f4:	4608      	moveq	r0, r1
 80008f6:	4770      	bx	lr
 80008f8:	ea90 0f01 	teq	r0, r1
 80008fc:	bf1c      	itt	ne
 80008fe:	2000      	movne	r0, #0
 8000900:	4770      	bxne	lr
 8000902:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000906:	d104      	bne.n	8000912 <__addsf3+0x126>
 8000908:	0040      	lsls	r0, r0, #1
 800090a:	bf28      	it	cs
 800090c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000910:	4770      	bx	lr
 8000912:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000916:	bf3c      	itt	cc
 8000918:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800091c:	4770      	bxcc	lr
 800091e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000922:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000926:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800092a:	4770      	bx	lr
 800092c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000930:	bf16      	itet	ne
 8000932:	4608      	movne	r0, r1
 8000934:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000938:	4601      	movne	r1, r0
 800093a:	0242      	lsls	r2, r0, #9
 800093c:	bf06      	itte	eq
 800093e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000942:	ea90 0f01 	teqeq	r0, r1
 8000946:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800094a:	4770      	bx	lr

0800094c <__aeabi_ui2f>:
 800094c:	f04f 0300 	mov.w	r3, #0
 8000950:	e004      	b.n	800095c <__aeabi_i2f+0x8>
 8000952:	bf00      	nop

08000954 <__aeabi_i2f>:
 8000954:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000958:	bf48      	it	mi
 800095a:	4240      	negmi	r0, r0
 800095c:	ea5f 0c00 	movs.w	ip, r0
 8000960:	bf08      	it	eq
 8000962:	4770      	bxeq	lr
 8000964:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000968:	4601      	mov	r1, r0
 800096a:	f04f 0000 	mov.w	r0, #0
 800096e:	e01c      	b.n	80009aa <__aeabi_l2f+0x2a>

08000970 <__aeabi_ul2f>:
 8000970:	ea50 0201 	orrs.w	r2, r0, r1
 8000974:	bf08      	it	eq
 8000976:	4770      	bxeq	lr
 8000978:	f04f 0300 	mov.w	r3, #0
 800097c:	e00a      	b.n	8000994 <__aeabi_l2f+0x14>
 800097e:	bf00      	nop

08000980 <__aeabi_l2f>:
 8000980:	ea50 0201 	orrs.w	r2, r0, r1
 8000984:	bf08      	it	eq
 8000986:	4770      	bxeq	lr
 8000988:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800098c:	d502      	bpl.n	8000994 <__aeabi_l2f+0x14>
 800098e:	4240      	negs	r0, r0
 8000990:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000994:	ea5f 0c01 	movs.w	ip, r1
 8000998:	bf02      	ittt	eq
 800099a:	4684      	moveq	ip, r0
 800099c:	4601      	moveq	r1, r0
 800099e:	2000      	moveq	r0, #0
 80009a0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80009a4:	bf08      	it	eq
 80009a6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80009aa:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80009ae:	fabc f28c 	clz	r2, ip
 80009b2:	3a08      	subs	r2, #8
 80009b4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80009b8:	db10      	blt.n	80009dc <__aeabi_l2f+0x5c>
 80009ba:	fa01 fc02 	lsl.w	ip, r1, r2
 80009be:	4463      	add	r3, ip
 80009c0:	fa00 fc02 	lsl.w	ip, r0, r2
 80009c4:	f1c2 0220 	rsb	r2, r2, #32
 80009c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80009cc:	fa20 f202 	lsr.w	r2, r0, r2
 80009d0:	eb43 0002 	adc.w	r0, r3, r2
 80009d4:	bf08      	it	eq
 80009d6:	f020 0001 	biceq.w	r0, r0, #1
 80009da:	4770      	bx	lr
 80009dc:	f102 0220 	add.w	r2, r2, #32
 80009e0:	fa01 fc02 	lsl.w	ip, r1, r2
 80009e4:	f1c2 0220 	rsb	r2, r2, #32
 80009e8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80009ec:	fa21 f202 	lsr.w	r2, r1, r2
 80009f0:	eb43 0002 	adc.w	r0, r3, r2
 80009f4:	bf08      	it	eq
 80009f6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80009fa:	4770      	bx	lr

080009fc <__aeabi_fmul>:
 80009fc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000a00:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000a04:	bf1e      	ittt	ne
 8000a06:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000a0a:	ea92 0f0c 	teqne	r2, ip
 8000a0e:	ea93 0f0c 	teqne	r3, ip
 8000a12:	d06f      	beq.n	8000af4 <__aeabi_fmul+0xf8>
 8000a14:	441a      	add	r2, r3
 8000a16:	ea80 0c01 	eor.w	ip, r0, r1
 8000a1a:	0240      	lsls	r0, r0, #9
 8000a1c:	bf18      	it	ne
 8000a1e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000a22:	d01e      	beq.n	8000a62 <__aeabi_fmul+0x66>
 8000a24:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000a28:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000a2c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000a30:	fba0 3101 	umull	r3, r1, r0, r1
 8000a34:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000a38:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000a3c:	bf3e      	ittt	cc
 8000a3e:	0049      	lslcc	r1, r1, #1
 8000a40:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000a44:	005b      	lslcc	r3, r3, #1
 8000a46:	ea40 0001 	orr.w	r0, r0, r1
 8000a4a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000a4e:	2afd      	cmp	r2, #253	; 0xfd
 8000a50:	d81d      	bhi.n	8000a8e <__aeabi_fmul+0x92>
 8000a52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000a56:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a5a:	bf08      	it	eq
 8000a5c:	f020 0001 	biceq.w	r0, r0, #1
 8000a60:	4770      	bx	lr
 8000a62:	f090 0f00 	teq	r0, #0
 8000a66:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a6a:	bf08      	it	eq
 8000a6c:	0249      	lsleq	r1, r1, #9
 8000a6e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a72:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000a76:	3a7f      	subs	r2, #127	; 0x7f
 8000a78:	bfc2      	ittt	gt
 8000a7a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a7e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a82:	4770      	bxgt	lr
 8000a84:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a88:	f04f 0300 	mov.w	r3, #0
 8000a8c:	3a01      	subs	r2, #1
 8000a8e:	dc5d      	bgt.n	8000b4c <__aeabi_fmul+0x150>
 8000a90:	f112 0f19 	cmn.w	r2, #25
 8000a94:	bfdc      	itt	le
 8000a96:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000a9a:	4770      	bxle	lr
 8000a9c:	f1c2 0200 	rsb	r2, r2, #0
 8000aa0:	0041      	lsls	r1, r0, #1
 8000aa2:	fa21 f102 	lsr.w	r1, r1, r2
 8000aa6:	f1c2 0220 	rsb	r2, r2, #32
 8000aaa:	fa00 fc02 	lsl.w	ip, r0, r2
 8000aae:	ea5f 0031 	movs.w	r0, r1, rrx
 8000ab2:	f140 0000 	adc.w	r0, r0, #0
 8000ab6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000aba:	bf08      	it	eq
 8000abc:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ac0:	4770      	bx	lr
 8000ac2:	f092 0f00 	teq	r2, #0
 8000ac6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000aca:	bf02      	ittt	eq
 8000acc:	0040      	lsleq	r0, r0, #1
 8000ace:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ad2:	3a01      	subeq	r2, #1
 8000ad4:	d0f9      	beq.n	8000aca <__aeabi_fmul+0xce>
 8000ad6:	ea40 000c 	orr.w	r0, r0, ip
 8000ada:	f093 0f00 	teq	r3, #0
 8000ade:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae2:	bf02      	ittt	eq
 8000ae4:	0049      	lsleq	r1, r1, #1
 8000ae6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000aea:	3b01      	subeq	r3, #1
 8000aec:	d0f9      	beq.n	8000ae2 <__aeabi_fmul+0xe6>
 8000aee:	ea41 010c 	orr.w	r1, r1, ip
 8000af2:	e78f      	b.n	8000a14 <__aeabi_fmul+0x18>
 8000af4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000af8:	ea92 0f0c 	teq	r2, ip
 8000afc:	bf18      	it	ne
 8000afe:	ea93 0f0c 	teqne	r3, ip
 8000b02:	d00a      	beq.n	8000b1a <__aeabi_fmul+0x11e>
 8000b04:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000b08:	bf18      	it	ne
 8000b0a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000b0e:	d1d8      	bne.n	8000ac2 <__aeabi_fmul+0xc6>
 8000b10:	ea80 0001 	eor.w	r0, r0, r1
 8000b14:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000b18:	4770      	bx	lr
 8000b1a:	f090 0f00 	teq	r0, #0
 8000b1e:	bf17      	itett	ne
 8000b20:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000b24:	4608      	moveq	r0, r1
 8000b26:	f091 0f00 	teqne	r1, #0
 8000b2a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000b2e:	d014      	beq.n	8000b5a <__aeabi_fmul+0x15e>
 8000b30:	ea92 0f0c 	teq	r2, ip
 8000b34:	d101      	bne.n	8000b3a <__aeabi_fmul+0x13e>
 8000b36:	0242      	lsls	r2, r0, #9
 8000b38:	d10f      	bne.n	8000b5a <__aeabi_fmul+0x15e>
 8000b3a:	ea93 0f0c 	teq	r3, ip
 8000b3e:	d103      	bne.n	8000b48 <__aeabi_fmul+0x14c>
 8000b40:	024b      	lsls	r3, r1, #9
 8000b42:	bf18      	it	ne
 8000b44:	4608      	movne	r0, r1
 8000b46:	d108      	bne.n	8000b5a <__aeabi_fmul+0x15e>
 8000b48:	ea80 0001 	eor.w	r0, r0, r1
 8000b4c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000b50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b58:	4770      	bx	lr
 8000b5a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b5e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000b62:	4770      	bx	lr

08000b64 <__aeabi_fdiv>:
 8000b64:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b68:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b6c:	bf1e      	ittt	ne
 8000b6e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b72:	ea92 0f0c 	teqne	r2, ip
 8000b76:	ea93 0f0c 	teqne	r3, ip
 8000b7a:	d069      	beq.n	8000c50 <__aeabi_fdiv+0xec>
 8000b7c:	eba2 0203 	sub.w	r2, r2, r3
 8000b80:	ea80 0c01 	eor.w	ip, r0, r1
 8000b84:	0249      	lsls	r1, r1, #9
 8000b86:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000b8a:	d037      	beq.n	8000bfc <__aeabi_fdiv+0x98>
 8000b8c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000b90:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000b94:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000b98:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000b9c:	428b      	cmp	r3, r1
 8000b9e:	bf38      	it	cc
 8000ba0:	005b      	lslcc	r3, r3, #1
 8000ba2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ba6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000baa:	428b      	cmp	r3, r1
 8000bac:	bf24      	itt	cs
 8000bae:	1a5b      	subcs	r3, r3, r1
 8000bb0:	ea40 000c 	orrcs.w	r0, r0, ip
 8000bb4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000bb8:	bf24      	itt	cs
 8000bba:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000bbe:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000bc2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000bc6:	bf24      	itt	cs
 8000bc8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000bcc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000bd0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000bd4:	bf24      	itt	cs
 8000bd6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000bda:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000bde:	011b      	lsls	r3, r3, #4
 8000be0:	bf18      	it	ne
 8000be2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000be6:	d1e0      	bne.n	8000baa <__aeabi_fdiv+0x46>
 8000be8:	2afd      	cmp	r2, #253	; 0xfd
 8000bea:	f63f af50 	bhi.w	8000a8e <__aeabi_fmul+0x92>
 8000bee:	428b      	cmp	r3, r1
 8000bf0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bf4:	bf08      	it	eq
 8000bf6:	f020 0001 	biceq.w	r0, r0, #1
 8000bfa:	4770      	bx	lr
 8000bfc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c00:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c04:	327f      	adds	r2, #127	; 0x7f
 8000c06:	bfc2      	ittt	gt
 8000c08:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c0c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c10:	4770      	bxgt	lr
 8000c12:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c16:	f04f 0300 	mov.w	r3, #0
 8000c1a:	3a01      	subs	r2, #1
 8000c1c:	e737      	b.n	8000a8e <__aeabi_fmul+0x92>
 8000c1e:	f092 0f00 	teq	r2, #0
 8000c22:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c26:	bf02      	ittt	eq
 8000c28:	0040      	lsleq	r0, r0, #1
 8000c2a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c2e:	3a01      	subeq	r2, #1
 8000c30:	d0f9      	beq.n	8000c26 <__aeabi_fdiv+0xc2>
 8000c32:	ea40 000c 	orr.w	r0, r0, ip
 8000c36:	f093 0f00 	teq	r3, #0
 8000c3a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c3e:	bf02      	ittt	eq
 8000c40:	0049      	lsleq	r1, r1, #1
 8000c42:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c46:	3b01      	subeq	r3, #1
 8000c48:	d0f9      	beq.n	8000c3e <__aeabi_fdiv+0xda>
 8000c4a:	ea41 010c 	orr.w	r1, r1, ip
 8000c4e:	e795      	b.n	8000b7c <__aeabi_fdiv+0x18>
 8000c50:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c54:	ea92 0f0c 	teq	r2, ip
 8000c58:	d108      	bne.n	8000c6c <__aeabi_fdiv+0x108>
 8000c5a:	0242      	lsls	r2, r0, #9
 8000c5c:	f47f af7d 	bne.w	8000b5a <__aeabi_fmul+0x15e>
 8000c60:	ea93 0f0c 	teq	r3, ip
 8000c64:	f47f af70 	bne.w	8000b48 <__aeabi_fmul+0x14c>
 8000c68:	4608      	mov	r0, r1
 8000c6a:	e776      	b.n	8000b5a <__aeabi_fmul+0x15e>
 8000c6c:	ea93 0f0c 	teq	r3, ip
 8000c70:	d104      	bne.n	8000c7c <__aeabi_fdiv+0x118>
 8000c72:	024b      	lsls	r3, r1, #9
 8000c74:	f43f af4c 	beq.w	8000b10 <__aeabi_fmul+0x114>
 8000c78:	4608      	mov	r0, r1
 8000c7a:	e76e      	b.n	8000b5a <__aeabi_fmul+0x15e>
 8000c7c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000c80:	bf18      	it	ne
 8000c82:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000c86:	d1ca      	bne.n	8000c1e <__aeabi_fdiv+0xba>
 8000c88:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000c8c:	f47f af5c 	bne.w	8000b48 <__aeabi_fmul+0x14c>
 8000c90:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000c94:	f47f af3c 	bne.w	8000b10 <__aeabi_fmul+0x114>
 8000c98:	e75f      	b.n	8000b5a <__aeabi_fmul+0x15e>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_f2iz>:
 8000c9c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ca0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000ca4:	d30f      	bcc.n	8000cc6 <__aeabi_f2iz+0x2a>
 8000ca6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000caa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000cae:	d90d      	bls.n	8000ccc <__aeabi_f2iz+0x30>
 8000cb0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000cb4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000cb8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000cbc:	fa23 f002 	lsr.w	r0, r3, r2
 8000cc0:	bf18      	it	ne
 8000cc2:	4240      	negne	r0, r0
 8000cc4:	4770      	bx	lr
 8000cc6:	f04f 0000 	mov.w	r0, #0
 8000cca:	4770      	bx	lr
 8000ccc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000cd0:	d101      	bne.n	8000cd6 <__aeabi_f2iz+0x3a>
 8000cd2:	0242      	lsls	r2, r0, #9
 8000cd4:	d105      	bne.n	8000ce2 <__aeabi_f2iz+0x46>
 8000cd6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000cda:	bf08      	it	eq
 8000cdc:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ce0:	4770      	bx	lr
 8000ce2:	f04f 0000 	mov.w	r0, #0
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_f2uiz>:
 8000ce8:	0042      	lsls	r2, r0, #1
 8000cea:	d20e      	bcs.n	8000d0a <__aeabi_f2uiz+0x22>
 8000cec:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000cf0:	d30b      	bcc.n	8000d0a <__aeabi_f2uiz+0x22>
 8000cf2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000cf6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000cfa:	d409      	bmi.n	8000d10 <__aeabi_f2uiz+0x28>
 8000cfc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d00:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d04:	fa23 f002 	lsr.w	r0, r3, r2
 8000d08:	4770      	bx	lr
 8000d0a:	f04f 0000 	mov.w	r0, #0
 8000d0e:	4770      	bx	lr
 8000d10:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d14:	d101      	bne.n	8000d1a <__aeabi_f2uiz+0x32>
 8000d16:	0242      	lsls	r2, r0, #9
 8000d18:	d102      	bne.n	8000d20 <__aeabi_f2uiz+0x38>
 8000d1a:	f04f 30ff 	mov.w	r0, #4294967295
 8000d1e:	4770      	bx	lr
 8000d20:	f04f 0000 	mov.w	r0, #0
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop

08000d28 <AnalogInput_DefaultHandler>:
}

float AnalogInput_DefaultHandler(AnalogInput_Instance *sIns)
{
    return 0.0f;
}
 8000d28:	2000      	movs	r0, #0
 8000d2a:	4770      	bx	lr

08000d2c <NodeFreeElement>:
    free(((AnalogInput_Instance *)sNode->pData));
 8000d2c:	6800      	ldr	r0, [r0, #0]
 8000d2e:	f005 bc9f 	b.w	8006670 <free>
	...

08000d34 <AnalogInput_Init>:
{
 8000d34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000d38:	4604      	mov	r4, r0
    m_sAnalogInputs = LinkList_Init();
 8000d3a:	f004 fca7 	bl	800568c <LinkList_Init>
 8000d3e:	4e13      	ldr	r6, [pc, #76]	; (8000d8c <AnalogInput_Init+0x58>)
    LinkList_SetFreeElement(m_sAnalogInputs, NodeFreeElement);
 8000d40:	4913      	ldr	r1, [pc, #76]	; (8000d90 <AnalogInput_Init+0x5c>)
    m_sAnalogInputs = LinkList_Init();
 8000d42:	6030      	str	r0, [r6, #0]
    LinkList_SetFreeElement(m_sAnalogInputs, NodeFreeElement);
 8000d44:	f004 fccf 	bl	80056e6 <LinkList_SetFreeElement>
    m_u8Buffer = (uint8_t *)malloc(sizeof(uint8_t) * GetTypeSize(AI_FLOAT32) * numAnalogInput);
 8000d48:	00a0      	lsls	r0, r4, #2
 8000d4a:	f005 fc89 	bl	8006660 <malloc>
    for (int i = 0; i < numAnalogInput; i++)
 8000d4e:	2500      	movs	r5, #0
        sIns->outputMin = GetDefaultOutputMin(AI_FLOAT32);
 8000d50:	f04f 0800 	mov.w	r8, #0
    m_u8Buffer = (uint8_t *)malloc(sizeof(uint8_t) * GetTypeSize(AI_FLOAT32) * numAnalogInput);
 8000d54:	4b0f      	ldr	r3, [pc, #60]	; (8000d94 <AnalogInput_Init+0x60>)
        sIns->inputMax = 3.3;
 8000d56:	4f10      	ldr	r7, [pc, #64]	; (8000d98 <AnalogInput_Init+0x64>)
        sIns->outputMax = GetDefaultOutputMax(AI_FLOAT32);
 8000d58:	f8df 9040 	ldr.w	r9, [pc, #64]	; 8000d9c <AnalogInput_Init+0x68>
    m_u8Buffer = (uint8_t *)malloc(sizeof(uint8_t) * GetTypeSize(AI_FLOAT32) * numAnalogInput);
 8000d5c:	6018      	str	r0, [r3, #0]
    for (int i = 0; i < numAnalogInput; i++)
 8000d5e:	42ac      	cmp	r4, r5
 8000d60:	dc01      	bgt.n	8000d66 <AnalogInput_Init+0x32>
}
 8000d62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        AnalogInput_Instance *sIns = (AnalogInput_Instance *)malloc(sizeof(AnalogInput_Instance));
 8000d66:	2014      	movs	r0, #20
 8000d68:	f005 fc7a 	bl	8006660 <malloc>
        sIns->u8IsActive = AI_ON;
 8000d6c:	f240 6301 	movw	r3, #1537	; 0x601
 8000d70:	8003      	strh	r3, [r0, #0]
        sIns->handler = AnalogInput_DefaultHandler;
 8000d72:	4b0b      	ldr	r3, [pc, #44]	; (8000da0 <AnalogInput_Init+0x6c>)
        AnalogInput_Instance *sIns = (AnalogInput_Instance *)malloc(sizeof(AnalogInput_Instance));
 8000d74:	4601      	mov	r1, r0
        sIns->inputMax = 3.3;
 8000d76:	6047      	str	r7, [r0, #4]
        sIns->handler = AnalogInput_DefaultHandler;
 8000d78:	6103      	str	r3, [r0, #16]
        sIns->outputMin = GetDefaultOutputMin(AI_FLOAT32);
 8000d7a:	f8c0 8008 	str.w	r8, [r0, #8]
        sIns->outputMax = GetDefaultOutputMax(AI_FLOAT32);
 8000d7e:	f8c0 900c 	str.w	r9, [r0, #12]
        LinkList_Append(m_sAnalogInputs, sIns);
 8000d82:	6830      	ldr	r0, [r6, #0]
 8000d84:	f004 fc92 	bl	80056ac <LinkList_Append>
    for (int i = 0; i < numAnalogInput; i++)
 8000d88:	3501      	adds	r5, #1
 8000d8a:	e7e8      	b.n	8000d5e <AnalogInput_Init+0x2a>
 8000d8c:	200001f8 	.word	0x200001f8
 8000d90:	08000d2d 	.word	0x08000d2d
 8000d94:	200001fc 	.word	0x200001fc
 8000d98:	40533333 	.word	0x40533333
 8000d9c:	447a0000 	.word	0x447a0000
 8000da0:	08000d29 	.word	0x08000d29

08000da4 <AnalogInput_GetDataLength>:
{
 8000da4:	b570      	push	{r4, r5, r6, lr}
    for (int i = 0; i < LinkList_GetSize(m_sAnalogInputs); i++)
 8000da6:	2500      	movs	r5, #0
    uint8_t length = 0;
 8000da8:	462c      	mov	r4, r5
    for (int i = 0; i < LinkList_GetSize(m_sAnalogInputs); i++)
 8000daa:	4e0d      	ldr	r6, [pc, #52]	; (8000de0 <AnalogInput_GetDataLength+0x3c>)
 8000dac:	6830      	ldr	r0, [r6, #0]
 8000dae:	f004 fc7b 	bl	80056a8 <LinkList_GetSize>
 8000db2:	42a8      	cmp	r0, r5
 8000db4:	dc01      	bgt.n	8000dba <AnalogInput_GetDataLength+0x16>
}
 8000db6:	4620      	mov	r0, r4
 8000db8:	bd70      	pop	{r4, r5, r6, pc}
        AnalogInput_Instance *sIns = (AnalogInput_Instance *)LinkList_Get(m_sAnalogInputs, i);
 8000dba:	6830      	ldr	r0, [r6, #0]
 8000dbc:	b2e9      	uxtb	r1, r5
 8000dbe:	f004 fc88 	bl	80056d2 <LinkList_Get>
        if (sIns->u8IsActive == AI_ON)
 8000dc2:	7802      	ldrb	r2, [r0, #0]
 8000dc4:	2a01      	cmp	r2, #1
 8000dc6:	d109      	bne.n	8000ddc <AnalogInput_GetDataLength+0x38>
            length += GetTypeSize(sIns->u8Type);
 8000dc8:	7843      	ldrb	r3, [r0, #1]
    switch (type)
 8000dca:	2b01      	cmp	r3, #1
 8000dcc:	d904      	bls.n	8000dd8 <AnalogInput_GetDataLength+0x34>
 8000dce:	3b02      	subs	r3, #2
        return 4;
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	bf94      	ite	ls
 8000dd4:	2202      	movls	r2, #2
 8000dd6:	2204      	movhi	r2, #4
            length += GetTypeSize(sIns->u8Type);
 8000dd8:	4414      	add	r4, r2
 8000dda:	b2e4      	uxtb	r4, r4
    for (int i = 0; i < LinkList_GetSize(m_sAnalogInputs); i++)
 8000ddc:	3501      	adds	r5, #1
 8000dde:	e7e5      	b.n	8000dac <AnalogInput_GetDataLength+0x8>
 8000de0:	200001f8 	.word	0x200001f8

08000de4 <AnalogInput_SetType>:
    AnalogInput_Instance *sIns = (AnalogInput_Instance *)LinkList_Get(m_sAnalogInputs, index);
 8000de4:	4b09      	ldr	r3, [pc, #36]	; (8000e0c <AnalogInput_SetType+0x28>)
{
 8000de6:	b510      	push	{r4, lr}
 8000de8:	460c      	mov	r4, r1
    AnalogInput_Instance *sIns = (AnalogInput_Instance *)LinkList_Get(m_sAnalogInputs, index);
 8000dea:	4601      	mov	r1, r0
 8000dec:	6818      	ldr	r0, [r3, #0]
 8000dee:	f004 fc70 	bl	80056d2 <LinkList_Get>
    sIns->outputMin = GetDefaultOutputMin(type);
 8000df2:	2300      	movs	r3, #0
    return 0.0f;
}

float GetDefaultOutputMax(uint8_t type)
{
    switch (type)
 8000df4:	2c01      	cmp	r4, #1
    sIns->outputMin = GetDefaultOutputMin(type);
 8000df6:	6083      	str	r3, [r0, #8]
    switch (type)
 8000df8:	d906      	bls.n	8000e08 <AnalogInput_SetType+0x24>
 8000dfa:	1ea2      	subs	r2, r4, #2
 8000dfc:	2a04      	cmp	r2, #4
 8000dfe:	d800      	bhi.n	8000e02 <AnalogInput_SetType+0x1e>
    case AI_UINT16:
    case AI_INT16:
    case AI_UINT32:
    case AI_INT32:
    case AI_FLOAT32:
        return 1000.0f;
 8000e00:	4b03      	ldr	r3, [pc, #12]	; (8000e10 <AnalogInput_SetType+0x2c>)
    sIns->u8Type = type;
 8000e02:	7044      	strb	r4, [r0, #1]
    sIns->outputMax = GetDefaultOutputMax(type);
 8000e04:	60c3      	str	r3, [r0, #12]
}
 8000e06:	bd10      	pop	{r4, pc}
    switch (type)
 8000e08:	4b02      	ldr	r3, [pc, #8]	; (8000e14 <AnalogInput_SetType+0x30>)
 8000e0a:	e7fa      	b.n	8000e02 <AnalogInput_SetType+0x1e>
 8000e0c:	200001f8 	.word	0x200001f8
 8000e10:	447a0000 	.word	0x447a0000
 8000e14:	42c80000 	.word	0x42c80000

08000e18 <AnalogInput_TurnOff>:
{
 8000e18:	b508      	push	{r3, lr}
    AnalogInput_Instance *sIns = (AnalogInput_Instance *)LinkList_Get(m_sAnalogInputs, index);
 8000e1a:	4b04      	ldr	r3, [pc, #16]	; (8000e2c <AnalogInput_TurnOff+0x14>)
{
 8000e1c:	4601      	mov	r1, r0
    AnalogInput_Instance *sIns = (AnalogInput_Instance *)LinkList_Get(m_sAnalogInputs, index);
 8000e1e:	6818      	ldr	r0, [r3, #0]
 8000e20:	f004 fc57 	bl	80056d2 <LinkList_Get>
    sIns->u8IsActive = AI_OFF;
 8000e24:	2300      	movs	r3, #0
 8000e26:	7003      	strb	r3, [r0, #0]
}
 8000e28:	bd08      	pop	{r3, pc}
 8000e2a:	bf00      	nop
 8000e2c:	200001f8 	.word	0x200001f8

08000e30 <AnalogInput_TurnOn>:
{
 8000e30:	b508      	push	{r3, lr}
	AnalogInput_Instance *sIns = (AnalogInput_Instance *)LinkList_Get(m_sAnalogInputs, index);
 8000e32:	4b04      	ldr	r3, [pc, #16]	; (8000e44 <AnalogInput_TurnOn+0x14>)
{
 8000e34:	4601      	mov	r1, r0
	AnalogInput_Instance *sIns = (AnalogInput_Instance *)LinkList_Get(m_sAnalogInputs, index);
 8000e36:	6818      	ldr	r0, [r3, #0]
 8000e38:	f004 fc4b 	bl	80056d2 <LinkList_Get>
	sIns->u8IsActive = AI_ON;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	7003      	strb	r3, [r0, #0]
}
 8000e40:	bd08      	pop	{r3, pc}
 8000e42:	bf00      	nop
 8000e44:	200001f8 	.word	0x200001f8

08000e48 <AnalogInput_SetMinAndMax>:
{
 8000e48:	b538      	push	{r3, r4, r5, lr}
    AnalogInput_Instance *sIns = (AnalogInput_Instance *)LinkList_Get(m_sAnalogInputs, index);
 8000e4a:	4b05      	ldr	r3, [pc, #20]	; (8000e60 <AnalogInput_SetMinAndMax+0x18>)
{
 8000e4c:	460d      	mov	r5, r1
    AnalogInput_Instance *sIns = (AnalogInput_Instance *)LinkList_Get(m_sAnalogInputs, index);
 8000e4e:	4601      	mov	r1, r0
 8000e50:	6818      	ldr	r0, [r3, #0]
{
 8000e52:	4614      	mov	r4, r2
    AnalogInput_Instance *sIns = (AnalogInput_Instance *)LinkList_Get(m_sAnalogInputs, index);
 8000e54:	f004 fc3d 	bl	80056d2 <LinkList_Get>
    sIns->outputMin = min;
 8000e58:	6085      	str	r5, [r0, #8]
    sIns->outputMax = max;
 8000e5a:	60c4      	str	r4, [r0, #12]
}
 8000e5c:	bd38      	pop	{r3, r4, r5, pc}
 8000e5e:	bf00      	nop
 8000e60:	200001f8 	.word	0x200001f8

08000e64 <AnalogInput_SetInputMax>:
    AnalogInput_Instance *sIns = (AnalogInput_Instance *)LinkList_Get(m_sAnalogInputs, index);
 8000e64:	4b04      	ldr	r3, [pc, #16]	; (8000e78 <AnalogInput_SetInputMax+0x14>)
{
 8000e66:	b510      	push	{r4, lr}
 8000e68:	460c      	mov	r4, r1
    AnalogInput_Instance *sIns = (AnalogInput_Instance *)LinkList_Get(m_sAnalogInputs, index);
 8000e6a:	4601      	mov	r1, r0
 8000e6c:	6818      	ldr	r0, [r3, #0]
 8000e6e:	f004 fc30 	bl	80056d2 <LinkList_Get>
    sIns->inputMax = value;
 8000e72:	6044      	str	r4, [r0, #4]
}
 8000e74:	bd10      	pop	{r4, pc}
 8000e76:	bf00      	nop
 8000e78:	200001f8 	.word	0x200001f8

08000e7c <AnalogInput_SetHandler>:
    AnalogInput_Instance *sIns = (AnalogInput_Instance *)LinkList_Get(m_sAnalogInputs, index);
 8000e7c:	4b04      	ldr	r3, [pc, #16]	; (8000e90 <AnalogInput_SetHandler+0x14>)
{
 8000e7e:	b510      	push	{r4, lr}
 8000e80:	460c      	mov	r4, r1
    AnalogInput_Instance *sIns = (AnalogInput_Instance *)LinkList_Get(m_sAnalogInputs, index);
 8000e82:	4601      	mov	r1, r0
 8000e84:	6818      	ldr	r0, [r3, #0]
 8000e86:	f004 fc24 	bl	80056d2 <LinkList_Get>
    sIns->handler = handler;
 8000e8a:	6104      	str	r4, [r0, #16]
}
 8000e8c:	bd10      	pop	{r4, pc}
 8000e8e:	bf00      	nop
 8000e90:	200001f8 	.word	0x200001f8

08000e94 <AnalogInput_Update>:
{
 8000e94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    memset(m_u8Buffer, 0, AnalogInput_GetDataLength());
 8000e98:	4f31      	ldr	r7, [pc, #196]	; (8000f60 <AnalogInput_Update+0xcc>)
    for (int i = 0; i < LinkList_GetSize(m_sAnalogInputs); i++)
 8000e9a:	f04f 0800 	mov.w	r8, #0
    memset(m_u8Buffer, 0, AnalogInput_GetDataLength());
 8000e9e:	683c      	ldr	r4, [r7, #0]
 8000ea0:	f7ff ff80 	bl	8000da4 <AnalogInput_GetDataLength>
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	4602      	mov	r2, r0
 8000ea8:	4620      	mov	r0, r4
 8000eaa:	f005 fdc1 	bl	8006a30 <memset>
    uint8_t bufferIndex = 0;
 8000eae:	4646      	mov	r6, r8
    for (int i = 0; i < LinkList_GetSize(m_sAnalogInputs); i++)
 8000eb0:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8000f64 <AnalogInput_Update+0xd0>
 8000eb4:	f8d9 0000 	ldr.w	r0, [r9]
 8000eb8:	f004 fbf6 	bl	80056a8 <LinkList_GetSize>
 8000ebc:	4540      	cmp	r0, r8
 8000ebe:	dc02      	bgt.n	8000ec6 <AnalogInput_Update+0x32>
}
 8000ec0:	b003      	add	sp, #12
 8000ec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        AnalogInput_Instance *sIns = (AnalogInput_Instance *)LinkList_Get(m_sAnalogInputs, i);
 8000ec6:	f8d9 0000 	ldr.w	r0, [r9]
 8000eca:	fa5f f188 	uxtb.w	r1, r8
 8000ece:	f004 fc00 	bl	80056d2 <LinkList_Get>
        if (sIns->u8IsActive == AI_OFF)
 8000ed2:	7803      	ldrb	r3, [r0, #0]
        AnalogInput_Instance *sIns = (AnalogInput_Instance *)LinkList_Get(m_sAnalogInputs, i);
 8000ed4:	4604      	mov	r4, r0
        if (sIns->u8IsActive == AI_OFF)
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d032      	beq.n	8000f40 <AnalogInput_Update+0xac>
        uint8_t outputSize = GetTypeSize(sIns->u8Type);
 8000eda:	7843      	ldrb	r3, [r0, #1]
    switch (type)
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d921      	bls.n	8000f24 <AnalogInput_Update+0x90>
 8000ee0:	3b02      	subs	r3, #2
        return 4;
 8000ee2:	2b01      	cmp	r3, #1
 8000ee4:	bf94      	ite	ls
 8000ee6:	2502      	movls	r5, #2
 8000ee8:	2504      	movhi	r5, #4
        float input = sIns->handler(sIns);
 8000eea:	6923      	ldr	r3, [r4, #16]
 8000eec:	4620      	mov	r0, r4
 8000eee:	4798      	blx	r3
        float f32Result = (input / sIns->inputMax) * (sIns->outputMax - sIns->outputMin) + sIns->outputMin;
 8000ef0:	6861      	ldr	r1, [r4, #4]
 8000ef2:	f7ff fe37 	bl	8000b64 <__aeabi_fdiv>
 8000ef6:	f8d4 b008 	ldr.w	fp, [r4, #8]
 8000efa:	4682      	mov	sl, r0
 8000efc:	4659      	mov	r1, fp
 8000efe:	68e0      	ldr	r0, [r4, #12]
 8000f00:	f7ff fc72 	bl	80007e8 <__aeabi_fsub>
 8000f04:	4601      	mov	r1, r0
 8000f06:	4650      	mov	r0, sl
 8000f08:	f7ff fd78 	bl	80009fc <__aeabi_fmul>
 8000f0c:	4659      	mov	r1, fp
 8000f0e:	f7ff fc6d 	bl	80007ec <__addsf3>
        switch (sIns->u8Type)
 8000f12:	7863      	ldrb	r3, [r4, #1]
 8000f14:	3b02      	subs	r3, #2
 8000f16:	2b04      	cmp	r3, #4
 8000f18:	d810      	bhi.n	8000f3c <AnalogInput_Update+0xa8>
 8000f1a:	e8df f003 	tbb	[pc, r3]
 8000f1e:	0514      	.short	0x0514
 8000f20:	171b      	.short	0x171b
 8000f22:	1e          	.byte	0x1e
 8000f23:	00          	.byte	0x00
        return 1;
 8000f24:	2501      	movs	r5, #1
 8000f26:	e7e0      	b.n	8000eea <AnalogInput_Update+0x56>
            CONVERT(AI_UINT16, U16, uint16_t)
 8000f28:	f7ff fede 	bl	8000ce8 <__aeabi_f2uiz>
            CONVERT(AI_INT16, I16, int16_t)
 8000f2c:	f8ad 0004 	strh.w	r0, [sp, #4]
            CONVERT(AI_FLOAT32, F32, float)
 8000f30:	6838      	ldr	r0, [r7, #0]
 8000f32:	462a      	mov	r2, r5
 8000f34:	a901      	add	r1, sp, #4
 8000f36:	4430      	add	r0, r6
 8000f38:	f005 fe7c 	bl	8006c34 <memcpy>
        bufferIndex += outputSize;
 8000f3c:	4435      	add	r5, r6
 8000f3e:	b2ee      	uxtb	r6, r5
    for (int i = 0; i < LinkList_GetSize(m_sAnalogInputs); i++)
 8000f40:	f108 0801 	add.w	r8, r8, #1
 8000f44:	e7b6      	b.n	8000eb4 <AnalogInput_Update+0x20>
            CONVERT(AI_INT16, I16, int16_t)
 8000f46:	f7ff fea9 	bl	8000c9c <__aeabi_f2iz>
 8000f4a:	e7ef      	b.n	8000f2c <AnalogInput_Update+0x98>
            CONVERT(AI_UINT32, U32, uint32_t)
 8000f4c:	f7ff fecc 	bl	8000ce8 <__aeabi_f2uiz>
            CONVERT(AI_INT32, I32, int32_t)
 8000f50:	9001      	str	r0, [sp, #4]
 8000f52:	e7ed      	b.n	8000f30 <AnalogInput_Update+0x9c>
 8000f54:	f7ff fea2 	bl	8000c9c <__aeabi_f2iz>
 8000f58:	e7fa      	b.n	8000f50 <AnalogInput_Update+0xbc>
            CONVERT(AI_FLOAT32, F32, float)
 8000f5a:	9001      	str	r0, [sp, #4]
 8000f5c:	e7e8      	b.n	8000f30 <AnalogInput_Update+0x9c>
 8000f5e:	bf00      	nop
 8000f60:	200001fc 	.word	0x200001fc
 8000f64:	200001f8 	.word	0x200001f8

08000f68 <AnalogInput_GetData>:
{
 8000f68:	b538      	push	{r3, r4, r5, lr}
    memcpy(data, m_u8Buffer, AnalogInput_GetDataLength());
 8000f6a:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <AnalogInput_GetData+0x1c>)
{
 8000f6c:	4604      	mov	r4, r0
    memcpy(data, m_u8Buffer, AnalogInput_GetDataLength());
 8000f6e:	681d      	ldr	r5, [r3, #0]
 8000f70:	f7ff ff18 	bl	8000da4 <AnalogInput_GetDataLength>
 8000f74:	4629      	mov	r1, r5
 8000f76:	4602      	mov	r2, r0
 8000f78:	4620      	mov	r0, r4
}
 8000f7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    memcpy(data, m_u8Buffer, AnalogInput_GetDataLength());
 8000f7e:	f005 be59 	b.w	8006c34 <memcpy>
 8000f82:	bf00      	nop
 8000f84:	200001fc 	.word	0x200001fc

08000f88 <AnalogInput_GetStatusString>:
{
 8000f88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    uint8_t numAIs = LinkList_GetSize(m_sAnalogInputs);
 8000f8c:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 800108c <AnalogInput_GetStatusString+0x104>
{
 8000f90:	460a      	mov	r2, r1
 8000f92:	b08e      	sub	sp, #56	; 0x38
    memset(response, 0, size);
 8000f94:	2100      	movs	r1, #0
{
 8000f96:	4605      	mov	r5, r0
    memset(response, 0, size);
 8000f98:	f005 fd4a 	bl	8006a30 <memset>
    uint8_t numAIs = LinkList_GetSize(m_sAnalogInputs);
 8000f9c:	f8da 0000 	ldr.w	r0, [sl]
 8000fa0:	f004 fb82 	bl	80056a8 <LinkList_GetSize>
    for (int i = 0; i < numAIs; i++)
 8000fa4:	2400      	movs	r4, #0
    uint8_t numAIs = LinkList_GetSize(m_sAnalogInputs);
 8000fa6:	4607      	mov	r7, r0
                     (int)(sIns->outputMax * 10));
 8000fa8:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 8001090 <AnalogInput_GetStatusString+0x108>
    for (int i = 0; i < numAIs; i++)
 8000fac:	42a7      	cmp	r7, r4
 8000fae:	dc02      	bgt.n	8000fb6 <AnalogInput_GetStatusString+0x2e>
}
 8000fb0:	b00e      	add	sp, #56	; 0x38
 8000fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        AnalogInput_Instance *sIns = (AnalogInput_Instance *)LinkList_Get(m_sAnalogInputs, i);
 8000fb6:	f8da 0000 	ldr.w	r0, [sl]
 8000fba:	b2e1      	uxtb	r1, r4
 8000fbc:	f004 fb89 	bl	80056d2 <LinkList_Get>
    }
}

void GetTypeString(uint8_t type, char *buffer, uint16_t size)
{
    memset(buffer, 0, size);
 8000fc0:	2200      	movs	r2, #0
        GetTypeString(sIns->u8Type, typeString, 8);
 8000fc2:	7843      	ldrb	r3, [r0, #1]
        AnalogInput_Instance *sIns = (AnalogInput_Instance *)LinkList_Get(m_sAnalogInputs, i);
 8000fc4:	4606      	mov	r6, r0
    memset(buffer, 0, size);
 8000fc6:	e9cd 2204 	strd	r2, r2, [sp, #16]

    switch (type)
 8000fca:	2b06      	cmp	r3, #6
 8000fcc:	d812      	bhi.n	8000ff4 <AnalogInput_GetStatusString+0x6c>
 8000fce:	e8df f003 	tbb	[pc, r3]
 8000fd2:	040b      	.short	0x040b
 8000fd4:	4a483e3c 	.word	0x4a483e3c
 8000fd8:	4c          	.byte	0x4c
 8000fd9:	00          	.byte	0x00
    {
    case AI_UINT8:
        memcpy(buffer, "uint8", 6);
 8000fda:	4b2e      	ldr	r3, [pc, #184]	; (8001094 <AnalogInput_GetStatusString+0x10c>)
        break;
    case AI_INT8:
        memcpy(buffer, "int8", 5);
        break;
    case AI_INT16:
        memcpy(buffer, "int16", 6);
 8000fdc:	6818      	ldr	r0, [r3, #0]
 8000fde:	889b      	ldrh	r3, [r3, #4]
 8000fe0:	9004      	str	r0, [sp, #16]
 8000fe2:	f8ad 3014 	strh.w	r3, [sp, #20]
        break;
 8000fe6:	e005      	b.n	8000ff4 <AnalogInput_GetStatusString+0x6c>
        memcpy(buffer, "int8", 5);
 8000fe8:	4b2b      	ldr	r3, [pc, #172]	; (8001098 <AnalogInput_GetStatusString+0x110>)
 8000fea:	6818      	ldr	r0, [r3, #0]
 8000fec:	791b      	ldrb	r3, [r3, #4]
 8000fee:	9004      	str	r0, [sp, #16]
 8000ff0:	f88d 3014 	strb.w	r3, [sp, #20]
        FormatString(tempStr, "%d: %s | %s | %d | %d | %d", i,
 8000ff4:	4a29      	ldr	r2, [pc, #164]	; (800109c <AnalogInput_GetStatusString+0x114>)
 8000ff6:	4b2a      	ldr	r3, [pc, #168]	; (80010a0 <AnalogInput_GetStatusString+0x118>)
 8000ff8:	7831      	ldrb	r1, [r6, #0]
                     (int)(sIns->outputMax * 10));
 8000ffa:	68f0      	ldr	r0, [r6, #12]
        FormatString(tempStr, "%d: %s | %s | %d | %d | %d", i,
 8000ffc:	2901      	cmp	r1, #1
 8000ffe:	bf0c      	ite	eq
 8001000:	4691      	moveq	r9, r2
 8001002:	4699      	movne	r9, r3
                     (int)(sIns->outputMax * 10));
 8001004:	4641      	mov	r1, r8
 8001006:	f7ff fcf9 	bl	80009fc <__aeabi_fmul>
        FormatString(tempStr, "%d: %s | %s | %d | %d | %d", i,
 800100a:	f7ff fe47 	bl	8000c9c <__aeabi_f2iz>
 800100e:	9003      	str	r0, [sp, #12]
                     (int)(sIns->outputMin * 10),
 8001010:	4641      	mov	r1, r8
 8001012:	68b0      	ldr	r0, [r6, #8]
 8001014:	f7ff fcf2 	bl	80009fc <__aeabi_fmul>
        FormatString(tempStr, "%d: %s | %s | %d | %d | %d", i,
 8001018:	f7ff fe40 	bl	8000c9c <__aeabi_f2iz>
 800101c:	9002      	str	r0, [sp, #8]
                     (int)(sIns->inputMax * 10),
 800101e:	4641      	mov	r1, r8
 8001020:	6870      	ldr	r0, [r6, #4]
 8001022:	f7ff fceb 	bl	80009fc <__aeabi_fmul>
        FormatString(tempStr, "%d: %s | %s | %d | %d | %d", i,
 8001026:	f7ff fe39 	bl	8000c9c <__aeabi_f2iz>
 800102a:	4622      	mov	r2, r4
 800102c:	e9cd 9000 	strd	r9, r0, [sp]
 8001030:	491c      	ldr	r1, [pc, #112]	; (80010a4 <AnalogInput_GetStatusString+0x11c>)
 8001032:	ab04      	add	r3, sp, #16
 8001034:	a806      	add	r0, sp, #24
 8001036:	f005 f8f8 	bl	800622a <FormatString>
        if (i == 0)
 800103a:	b9e4      	cbnz	r4, 8001076 <AnalogInput_GetStatusString+0xee>
            FormatString(response, "%s", tempStr);
 800103c:	4628      	mov	r0, r5
 800103e:	491a      	ldr	r1, [pc, #104]	; (80010a8 <AnalogInput_GetStatusString+0x120>)
 8001040:	aa06      	add	r2, sp, #24
 8001042:	f005 f8f2 	bl	800622a <FormatString>
    for (int i = 0; i < numAIs; i++)
 8001046:	3401      	adds	r4, #1
 8001048:	e7b0      	b.n	8000fac <AnalogInput_GetStatusString+0x24>
        memcpy(buffer, "int16", 6);
 800104a:	4b18      	ldr	r3, [pc, #96]	; (80010ac <AnalogInput_GetStatusString+0x124>)
 800104c:	e7c6      	b.n	8000fdc <AnalogInput_GetStatusString+0x54>
    case AI_UINT16:
        memcpy(buffer, "uint16", 7);
 800104e:	4b18      	ldr	r3, [pc, #96]	; (80010b0 <AnalogInput_GetStatusString+0x128>)
        break;
    case AI_INT32:
        memcpy(buffer, "int32", 6);
        break;
    case AI_UINT32:
        memcpy(buffer, "uint32", 7);
 8001050:	6818      	ldr	r0, [r3, #0]
 8001052:	889a      	ldrh	r2, [r3, #4]
 8001054:	799b      	ldrb	r3, [r3, #6]
 8001056:	9004      	str	r0, [sp, #16]
 8001058:	f8ad 2014 	strh.w	r2, [sp, #20]
 800105c:	f88d 3016 	strb.w	r3, [sp, #22]
        break;
 8001060:	e7c8      	b.n	8000ff4 <AnalogInput_GetStatusString+0x6c>
        memcpy(buffer, "int32", 6);
 8001062:	4b14      	ldr	r3, [pc, #80]	; (80010b4 <AnalogInput_GetStatusString+0x12c>)
 8001064:	e7ba      	b.n	8000fdc <AnalogInput_GetStatusString+0x54>
        memcpy(buffer, "uint32", 7);
 8001066:	4b14      	ldr	r3, [pc, #80]	; (80010b8 <AnalogInput_GetStatusString+0x130>)
 8001068:	e7f2      	b.n	8001050 <AnalogInput_GetStatusString+0xc8>
    case AI_FLOAT32:
        memcpy(buffer, "float32", 8);
 800106a:	4a14      	ldr	r2, [pc, #80]	; (80010bc <AnalogInput_GetStatusString+0x134>)
 800106c:	ab04      	add	r3, sp, #16
 800106e:	6810      	ldr	r0, [r2, #0]
 8001070:	6851      	ldr	r1, [r2, #4]
 8001072:	c303      	stmia	r3!, {r0, r1}
        break;
 8001074:	e7be      	b.n	8000ff4 <AnalogInput_GetStatusString+0x6c>
        else if (i == numAIs - 1)
 8001076:	1e7b      	subs	r3, r7, #1
 8001078:	42a3      	cmp	r3, r4
        	FormatString(response, "%s;%s;", response, tempStr);
 800107a:	462a      	mov	r2, r5
            FormatString(response, "%s;%s", response, tempStr);
 800107c:	4628      	mov	r0, r5
        	FormatString(response, "%s;%s;", response, tempStr);
 800107e:	bf0c      	ite	eq
 8001080:	490f      	ldreq	r1, [pc, #60]	; (80010c0 <AnalogInput_GetStatusString+0x138>)
            FormatString(response, "%s;%s", response, tempStr);
 8001082:	4910      	ldrne	r1, [pc, #64]	; (80010c4 <AnalogInput_GetStatusString+0x13c>)
        	FormatString(response, "%s;%s;", response, tempStr);
 8001084:	ab06      	add	r3, sp, #24
            FormatString(response, "%s;%s", response, tempStr);
 8001086:	f005 f8d0 	bl	800622a <FormatString>
 800108a:	e7dc      	b.n	8001046 <AnalogInput_GetStatusString+0xbe>
 800108c:	200001f8 	.word	0x200001f8
 8001090:	41200000 	.word	0x41200000
 8001094:	08007a97 	.word	0x08007a97
 8001098:	08007a98 	.word	0x08007a98
 800109c:	08007a90 	.word	0x08007a90
 80010a0:	08007a93 	.word	0x08007a93
 80010a4:	08007aab 	.word	0x08007aab
 80010a8:	08007ad0 	.word	0x08007ad0
 80010ac:	08007a9e 	.word	0x08007a9e
 80010b0:	08007a9d 	.word	0x08007a9d
 80010b4:	08007aa5 	.word	0x08007aa5
 80010b8:	08007aa4 	.word	0x08007aa4
 80010bc:	08007ad3 	.word	0x08007ad3
 80010c0:	08007ac6 	.word	0x08007ac6
 80010c4:	08007acd 	.word	0x08007acd

080010c8 <AnalogInput_TypeFromString>:
{
 80010c8:	b510      	push	{r4, lr}
    CONVERT_STRING_TO_TYPE(AI_FLOAT32, "float32");
 80010ca:	4918      	ldr	r1, [pc, #96]	; (800112c <AnalogInput_TypeFromString+0x64>)
{
 80010cc:	4604      	mov	r4, r0
    CONVERT_STRING_TO_TYPE(AI_FLOAT32, "float32");
 80010ce:	f7ff f83f 	bl	8000150 <strcmp>
 80010d2:	b308      	cbz	r0, 8001118 <AnalogInput_TypeFromString+0x50>
    CONVERT_STRING_TO_TYPE(AI_INT32, "int32");
 80010d4:	4620      	mov	r0, r4
 80010d6:	4916      	ldr	r1, [pc, #88]	; (8001130 <AnalogInput_TypeFromString+0x68>)
 80010d8:	f7ff f83a 	bl	8000150 <strcmp>
 80010dc:	b1f0      	cbz	r0, 800111c <AnalogInput_TypeFromString+0x54>
    CONVERT_STRING_TO_TYPE(AI_UINT32, "uint32");
 80010de:	4620      	mov	r0, r4
 80010e0:	4914      	ldr	r1, [pc, #80]	; (8001134 <AnalogInput_TypeFromString+0x6c>)
 80010e2:	f7ff f835 	bl	8000150 <strcmp>
 80010e6:	b1d8      	cbz	r0, 8001120 <AnalogInput_TypeFromString+0x58>
    CONVERT_STRING_TO_TYPE(AI_INT16, "int16");
 80010e8:	4620      	mov	r0, r4
 80010ea:	4913      	ldr	r1, [pc, #76]	; (8001138 <AnalogInput_TypeFromString+0x70>)
 80010ec:	f7ff f830 	bl	8000150 <strcmp>
 80010f0:	b1c0      	cbz	r0, 8001124 <AnalogInput_TypeFromString+0x5c>
    CONVERT_STRING_TO_TYPE(AI_UINT16, "uint16");
 80010f2:	4620      	mov	r0, r4
 80010f4:	4911      	ldr	r1, [pc, #68]	; (800113c <AnalogInput_TypeFromString+0x74>)
 80010f6:	f7ff f82b 	bl	8000150 <strcmp>
 80010fa:	b1a8      	cbz	r0, 8001128 <AnalogInput_TypeFromString+0x60>
    CONVERT_STRING_TO_TYPE(AI_INT8, "int8");
 80010fc:	4620      	mov	r0, r4
 80010fe:	4910      	ldr	r1, [pc, #64]	; (8001140 <AnalogInput_TypeFromString+0x78>)
 8001100:	f7ff f826 	bl	8000150 <strcmp>
 8001104:	b138      	cbz	r0, 8001116 <AnalogInput_TypeFromString+0x4e>
    CONVERT_STRING_TO_TYPE(AI_UINT8, "uint8");
 8001106:	4620      	mov	r0, r4
 8001108:	490e      	ldr	r1, [pc, #56]	; (8001144 <AnalogInput_TypeFromString+0x7c>)
 800110a:	f7ff f821 	bl	8000150 <strcmp>
 800110e:	2800      	cmp	r0, #0
 8001110:	bf14      	ite	ne
 8001112:	20ff      	movne	r0, #255	; 0xff
 8001114:	2001      	moveq	r0, #1
}
 8001116:	bd10      	pop	{r4, pc}
    CONVERT_STRING_TO_TYPE(AI_FLOAT32, "float32");
 8001118:	2006      	movs	r0, #6
 800111a:	e7fc      	b.n	8001116 <AnalogInput_TypeFromString+0x4e>
    CONVERT_STRING_TO_TYPE(AI_INT32, "int32");
 800111c:	2004      	movs	r0, #4
 800111e:	e7fa      	b.n	8001116 <AnalogInput_TypeFromString+0x4e>
    CONVERT_STRING_TO_TYPE(AI_UINT32, "uint32");
 8001120:	2005      	movs	r0, #5
 8001122:	e7f8      	b.n	8001116 <AnalogInput_TypeFromString+0x4e>
    CONVERT_STRING_TO_TYPE(AI_INT16, "int16");
 8001124:	2002      	movs	r0, #2
 8001126:	e7f6      	b.n	8001116 <AnalogInput_TypeFromString+0x4e>
    CONVERT_STRING_TO_TYPE(AI_UINT16, "uint16");
 8001128:	2003      	movs	r0, #3
 800112a:	e7f4      	b.n	8001116 <AnalogInput_TypeFromString+0x4e>
 800112c:	08007ad3 	.word	0x08007ad3
 8001130:	08007aa5 	.word	0x08007aa5
 8001134:	08007aa4 	.word	0x08007aa4
 8001138:	08007a9e 	.word	0x08007a9e
 800113c:	08007a9d 	.word	0x08007a9d
 8001140:	08007a98 	.word	0x08007a98
 8001144:	08007a97 	.word	0x08007a97

08001148 <EmptyCommandHanlder>:
    m_fDefaultCallback = fCallback;
}

void EmptyCommandHanlder(uint8_t argc, char **argv)
{
}
 8001148:	4770      	bx	lr

0800114a <FreeCommandDefElement>:
    }
}

static void FreeCommandDefElement(HashMap_Node *sNode)
{
    free((Command_Def *)(sNode->pData));
 800114a:	6840      	ldr	r0, [r0, #4]
 800114c:	f005 ba90 	b.w	8006670 <free>

08001150 <HelpCommandHanlderFunction>:
{
 8001150:	b570      	push	{r4, r5, r6, lr}
    if (HashMap_Contains(m_sCommandDefsMap, argv[0]) == HASH_MAP_CONTAIN)
 8001152:	4d1a      	ldr	r5, [pc, #104]	; (80011bc <HelpCommandHanlderFunction+0x6c>)
{
 8001154:	460c      	mov	r4, r1
    if (HashMap_Contains(m_sCommandDefsMap, argv[0]) == HASH_MAP_CONTAIN)
 8001156:	6828      	ldr	r0, [r5, #0]
 8001158:	6809      	ldr	r1, [r1, #0]
{
 800115a:	b086      	sub	sp, #24
    if (HashMap_Contains(m_sCommandDefsMap, argv[0]) == HASH_MAP_CONTAIN)
 800115c:	f004 fa84 	bl	8005668 <HashMap_Contains>
 8001160:	2801      	cmp	r0, #1
 8001162:	d10e      	bne.n	8001182 <HelpCommandHanlderFunction+0x32>
        Command_Def *cmd = (Command_Def *)HashMap_Get(m_sCommandDefsMap, argv[0]);
 8001164:	6821      	ldr	r1, [r4, #0]
 8001166:	6828      	ldr	r0, [r5, #0]
 8001168:	f004 fa70 	bl	800564c <HashMap_Get>
        Command_Response(cmd->chHelp, strlen(cmd->chHelp));
 800116c:	6844      	ldr	r4, [r0, #4]
 800116e:	4620      	mov	r0, r4
 8001170:	f7fe fff8 	bl	8000164 <strlen>
	CDC_Transmit_FS((uint8_t *)chResponse, u8Length);
 8001174:	b2c1      	uxtb	r1, r0
 8001176:	4620      	mov	r0, r4
}
 8001178:	b006      	add	sp, #24
 800117a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	CDC_Transmit_FS((uint8_t *)chResponse, u8Length);
 800117e:	f005 b8cd 	b.w	800631c <CDC_Transmit_FS>
        char chResponse[] = "Command does not exist";
 8001182:	466a      	mov	r2, sp
 8001184:	4615      	mov	r5, r2
 8001186:	4b0e      	ldr	r3, [pc, #56]	; (80011c0 <HelpCommandHanlderFunction+0x70>)
 8001188:	f103 0610 	add.w	r6, r3, #16
 800118c:	4614      	mov	r4, r2
 800118e:	6818      	ldr	r0, [r3, #0]
 8001190:	6859      	ldr	r1, [r3, #4]
 8001192:	3308      	adds	r3, #8
 8001194:	c403      	stmia	r4!, {r0, r1}
 8001196:	42b3      	cmp	r3, r6
 8001198:	4622      	mov	r2, r4
 800119a:	d1f7      	bne.n	800118c <HelpCommandHanlderFunction+0x3c>
 800119c:	8899      	ldrh	r1, [r3, #4]
 800119e:	6818      	ldr	r0, [r3, #0]
 80011a0:	799b      	ldrb	r3, [r3, #6]
 80011a2:	6020      	str	r0, [r4, #0]
 80011a4:	80a1      	strh	r1, [r4, #4]
 80011a6:	71a3      	strb	r3, [r4, #6]
        Command_Response(chResponse, strlen(chResponse));
 80011a8:	4628      	mov	r0, r5
 80011aa:	f7fe ffdb 	bl	8000164 <strlen>
	CDC_Transmit_FS((uint8_t *)chResponse, u8Length);
 80011ae:	b281      	uxth	r1, r0
 80011b0:	4628      	mov	r0, r5
 80011b2:	f005 f8b3 	bl	800631c <CDC_Transmit_FS>
}
 80011b6:	b006      	add	sp, #24
 80011b8:	bd70      	pop	{r4, r5, r6, pc}
 80011ba:	bf00      	nop
 80011bc:	20000200 	.word	0x20000200
 80011c0:	08007adb 	.word	0x08007adb

080011c4 <FreeCommandQueueElement>:
}

static void FreeCommandQueueElement(Queue_Node *sNode)
{
 80011c4:	b510      	push	{r4, lr}
    FreeCommand((Command *)sNode->pData);
 80011c6:	6804      	ldr	r4, [r0, #0]
    free(sCommand->chCommand);
 80011c8:	6820      	ldr	r0, [r4, #0]
 80011ca:	f005 fa51 	bl	8006670 <free>
    free(sCommand);
 80011ce:	4620      	mov	r0, r4
}
 80011d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    free(sCommand);
 80011d4:	f005 ba4c 	b.w	8006670 <free>

080011d8 <Command_Register>:
{
 80011d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011da:	4605      	mov	r5, r0
    Command_Def *sCommandDef = (Command_Def *)malloc(sizeof(Command_Def));
 80011dc:	2008      	movs	r0, #8
{
 80011de:	460e      	mov	r6, r1
 80011e0:	4617      	mov	r7, r2
    Command_Def *sCommandDef = (Command_Def *)malloc(sizeof(Command_Def));
 80011e2:	f005 fa3d 	bl	8006660 <malloc>
 80011e6:	4604      	mov	r4, r0
    sCommandDef->chHelp = strdup(chCommandHelp);
 80011e8:	4638      	mov	r0, r7
 80011ea:	f005 fc29 	bl	8006a40 <strdup>
    HashMap_Set(m_sCommandDefsMap, chCommandKey, (void *)sCommandDef);
 80011ee:	4b05      	ldr	r3, [pc, #20]	; (8001204 <Command_Register+0x2c>)
    sCommandDef->fCallback = fCallback;
 80011f0:	e9c4 6000 	strd	r6, r0, [r4]
    HashMap_Set(m_sCommandDefsMap, chCommandKey, (void *)sCommandDef);
 80011f4:	4622      	mov	r2, r4
 80011f6:	4629      	mov	r1, r5
 80011f8:	6818      	ldr	r0, [r3, #0]
}
 80011fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    HashMap_Set(m_sCommandDefsMap, chCommandKey, (void *)sCommandDef);
 80011fe:	f004 ba03 	b.w	8005608 <HashMap_Set>
 8001202:	bf00      	nop
 8001204:	20000200 	.word	0x20000200

08001208 <Command_Init>:
{
 8001208:	b510      	push	{r4, lr}
    m_sCommandDefsMap = HashMap_Init();
 800120a:	f004 f9f1 	bl	80055f0 <HashMap_Init>
 800120e:	4c0a      	ldr	r4, [pc, #40]	; (8001238 <Command_Init+0x30>)
 8001210:	6020      	str	r0, [r4, #0]
    m_sCommandQueue = Queue_Init();
 8001212:	f004 ff7b 	bl	800610c <Queue_Init>
 8001216:	4b09      	ldr	r3, [pc, #36]	; (800123c <Command_Init+0x34>)
    Queue_SetFreeElement(m_sCommandQueue, FreeCommandQueueElement);
 8001218:	4909      	ldr	r1, [pc, #36]	; (8001240 <Command_Init+0x38>)
    m_sCommandQueue = Queue_Init();
 800121a:	6018      	str	r0, [r3, #0]
    Queue_SetFreeElement(m_sCommandQueue, FreeCommandQueueElement);
 800121c:	f004 ff84 	bl	8006128 <Queue_SetFreeElement>
    HashMap_SetFreeElementCallback(m_sCommandDefsMap, FreeCommandDefElement);
 8001220:	6820      	ldr	r0, [r4, #0]
 8001222:	4908      	ldr	r1, [pc, #32]	; (8001244 <Command_Init+0x3c>)
 8001224:	f004 fa2f 	bl	8005686 <HashMap_SetFreeElementCallback>
}
 8001228:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Command_Register((char *)"help", HelpCommandHanlderFunction, "Manual use for all commands");
 800122c:	4a06      	ldr	r2, [pc, #24]	; (8001248 <Command_Init+0x40>)
 800122e:	4907      	ldr	r1, [pc, #28]	; (800124c <Command_Init+0x44>)
 8001230:	4807      	ldr	r0, [pc, #28]	; (8001250 <Command_Init+0x48>)
 8001232:	f7ff bfd1 	b.w	80011d8 <Command_Register>
 8001236:	bf00      	nop
 8001238:	20000200 	.word	0x20000200
 800123c:	20000204 	.word	0x20000204
 8001240:	080011c5 	.word	0x080011c5
 8001244:	0800114b 	.word	0x0800114b
 8001248:	08007af2 	.word	0x08007af2
 800124c:	08001151 	.word	0x08001151
 8001250:	08007b0e 	.word	0x08007b0e

08001254 <Command_ReceiveData>:
{
 8001254:	b570      	push	{r4, r5, r6, lr}
 8001256:	4606      	mov	r6, r0
    Command *sCommand = (Command *)malloc(sizeof(Command));
 8001258:	2004      	movs	r0, #4
{
 800125a:	460d      	mov	r5, r1
    Command *sCommand = (Command *)malloc(sizeof(Command));
 800125c:	f005 fa00 	bl	8006660 <malloc>
 8001260:	4604      	mov	r4, r0
    sCommand->chCommand = (char *)malloc(u8Length * sizeof(char));
 8001262:	4628      	mov	r0, r5
 8001264:	f005 f9fc 	bl	8006660 <malloc>
    memcpy(sCommand->chCommand, chCommand, u8Length + 1);
 8001268:	4631      	mov	r1, r6
 800126a:	1c6a      	adds	r2, r5, #1
    sCommand->chCommand = (char *)malloc(u8Length * sizeof(char));
 800126c:	6020      	str	r0, [r4, #0]
    memcpy(sCommand->chCommand, chCommand, u8Length + 1);
 800126e:	f005 fce1 	bl	8006c34 <memcpy>
    Queue_EnQueue(m_sCommandQueue, (void *)sCommand);
 8001272:	4b03      	ldr	r3, [pc, #12]	; (8001280 <Command_ReceiveData+0x2c>)
 8001274:	4621      	mov	r1, r4
}
 8001276:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Queue_EnQueue(m_sCommandQueue, (void *)sCommand);
 800127a:	6818      	ldr	r0, [r3, #0]
 800127c:	f004 bf5b 	b.w	8006136 <Queue_EnQueue>
 8001280:	20000204 	.word	0x20000204

08001284 <Command_RegisterDefaultCallback>:
    m_fDefaultCallback = fCallback;
 8001284:	4b01      	ldr	r3, [pc, #4]	; (800128c <Command_RegisterDefaultCallback+0x8>)
 8001286:	6018      	str	r0, [r3, #0]
}
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	20000000 	.word	0x20000000

08001290 <Command_Update>:
{
 8001290:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if (!Queue_IsEmpty(m_sCommandQueue))
 8001292:	4d1d      	ldr	r5, [pc, #116]	; (8001308 <Command_Update+0x78>)
 8001294:	6828      	ldr	r0, [r5, #0]
 8001296:	f004 ff49 	bl	800612c <Queue_IsEmpty>
 800129a:	4604      	mov	r4, r0
 800129c:	bb50      	cbnz	r0, 80012f4 <Command_Update+0x64>
        Command *sComand = (Command *)Queue_DeQueue(m_sCommandQueue);
 800129e:	6828      	ldr	r0, [r5, #0]
 80012a0:	f004 ff5c 	bl	800615c <Queue_DeQueue>
        uint8_t argc = 0;
 80012a4:	f88d 4007 	strb.w	r4, [sp, #7]
        char **argv = SplitString(sComand->chCommand, &argc);
 80012a8:	f10d 0107 	add.w	r1, sp, #7
        Command *sComand = (Command *)Queue_DeQueue(m_sCommandQueue);
 80012ac:	4605      	mov	r5, r0
        char **argv = SplitString(sComand->chCommand, &argc);
 80012ae:	6800      	ldr	r0, [r0, #0]
 80012b0:	f004 ff6a 	bl	8006188 <SplitString>
        if (HashMap_Contains(m_sCommandDefsMap, argv[0]) == HASH_MAP_CONTAIN)
 80012b4:	4f15      	ldr	r7, [pc, #84]	; (800130c <Command_Update+0x7c>)
 80012b6:	6801      	ldr	r1, [r0, #0]
        char **argv = SplitString(sComand->chCommand, &argc);
 80012b8:	4604      	mov	r4, r0
        if (HashMap_Contains(m_sCommandDefsMap, argv[0]) == HASH_MAP_CONTAIN)
 80012ba:	6838      	ldr	r0, [r7, #0]
 80012bc:	f004 f9d4 	bl	8005668 <HashMap_Contains>
 80012c0:	2801      	cmp	r0, #1
 80012c2:	d119      	bne.n	80012f8 <Command_Update+0x68>
            Command_Def *sNode = (Command_Def *)HashMap_Get(m_sCommandDefsMap, argv[0]);
 80012c4:	4626      	mov	r6, r4
 80012c6:	6838      	ldr	r0, [r7, #0]
 80012c8:	f856 1b04 	ldr.w	r1, [r6], #4
 80012cc:	f004 f9be 	bl	800564c <HashMap_Get>
            sNode->fCallback(argc - 1, &argv[1]);
 80012d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80012d4:	6802      	ldr	r2, [r0, #0]
 80012d6:	3b01      	subs	r3, #1
 80012d8:	4631      	mov	r1, r6
 80012da:	b2d8      	uxtb	r0, r3
 80012dc:	4790      	blx	r2
    free(sCommand->chCommand);
 80012de:	6828      	ldr	r0, [r5, #0]
 80012e0:	f005 f9c6 	bl	8006670 <free>
    free(sCommand);
 80012e4:	4628      	mov	r0, r5
 80012e6:	f005 f9c3 	bl	8006670 <free>
        Free2DArray(argc, argv);
 80012ea:	4621      	mov	r1, r4
 80012ec:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80012f0:	f004 ff88 	bl	8006204 <Free2DArray>
}
 80012f4:	b003      	add	sp, #12
 80012f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
            m_fDefaultCallback(argc, argv);
 80012f8:	4b05      	ldr	r3, [pc, #20]	; (8001310 <Command_Update+0x80>)
 80012fa:	4621      	mov	r1, r4
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8001302:	4798      	blx	r3
 8001304:	e7eb      	b.n	80012de <Command_Update+0x4e>
 8001306:	bf00      	nop
 8001308:	20000204 	.word	0x20000204
 800130c:	20000200 	.word	0x20000200
 8001310:	20000000 	.word	0x20000000

08001314 <Command_Response>:
	CDC_Transmit_FS((uint8_t *)chResponse, u8Length);
 8001314:	f005 b802 	b.w	800631c <CDC_Transmit_FS>

08001318 <Command_ResponseConstChar>:
{
 8001318:	b510      	push	{r4, lr}
 800131a:	4604      	mov	r4, r0
	CDC_Transmit_FS((uint8_t *)chResponse, strlen(chResponse));
 800131c:	f7fe ff22 	bl	8000164 <strlen>
 8001320:	b281      	uxth	r1, r0
 8001322:	4620      	mov	r0, r4
}
 8001324:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	CDC_Transmit_FS((uint8_t *)chResponse, strlen(chResponse));
 8001328:	f004 bff8 	b.w	800631c <CDC_Transmit_FS>

0800132c <EmptyTransmitFunction>:
    }
}

void EmptyTransmitFunction(uint8_t *u8Data, uint8_t u8Length)
{
}
 800132c:	4770      	bx	lr

0800132e <EmptyHanlderFunction>:

void EmptyHanlderFunction(Communication_Instance *sUartInstance, uint8_t *u8Data, uint8_t u8Length)
{
}
 800132e:	4770      	bx	lr

08001330 <QueueFreeUARTFrameNode>:
    free(sFrame->u8Data);
    free(sFrame);
}

void QueueFreeUARTFrameNode(Queue_Node *sNode)
{
 8001330:	b510      	push	{r4, lr}
    FreeUARTFrame((UART_Frame *)sNode->pData);
 8001332:	6804      	ldr	r4, [r0, #0]
    free(sFrame->u8Data);
 8001334:	6820      	ldr	r0, [r4, #0]
 8001336:	f005 f99b 	bl	8006670 <free>
    free(sFrame);
 800133a:	4620      	mov	r0, r4
}
 800133c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    free(sFrame);
 8001340:	f005 b996 	b.w	8006670 <free>

08001344 <Communication_Init>:
{
 8001344:	b510      	push	{r4, lr}
    Communication_Instance *sUartInstance = (Communication_Instance *)malloc(sizeof(Communication_Instance));
 8001346:	200c      	movs	r0, #12
 8001348:	f005 f98a 	bl	8006660 <malloc>
    sUartInstance->fTransmitFunction = EmptyTransmitFunction;
 800134c:	4b06      	ldr	r3, [pc, #24]	; (8001368 <Communication_Init+0x24>)
    Communication_Instance *sUartInstance = (Communication_Instance *)malloc(sizeof(Communication_Instance));
 800134e:	4604      	mov	r4, r0
    sUartInstance->fTransmitFunction = EmptyTransmitFunction;
 8001350:	6043      	str	r3, [r0, #4]
    sUartInstance->fHandler = EmptyHanlderFunction;
 8001352:	4b06      	ldr	r3, [pc, #24]	; (800136c <Communication_Init+0x28>)
 8001354:	6003      	str	r3, [r0, #0]
    sUartInstance->sQueue = Queue_Init();
 8001356:	f004 fed9 	bl	800610c <Queue_Init>
    Queue_SetFreeElement(sUartInstance->sQueue, QueueFreeUARTFrameNode);
 800135a:	4905      	ldr	r1, [pc, #20]	; (8001370 <Communication_Init+0x2c>)
    sUartInstance->sQueue = Queue_Init();
 800135c:	60a0      	str	r0, [r4, #8]
    Queue_SetFreeElement(sUartInstance->sQueue, QueueFreeUARTFrameNode);
 800135e:	f004 fee3 	bl	8006128 <Queue_SetFreeElement>
}
 8001362:	4620      	mov	r0, r4
 8001364:	bd10      	pop	{r4, pc}
 8001366:	bf00      	nop
 8001368:	0800132d 	.word	0x0800132d
 800136c:	0800132f 	.word	0x0800132f
 8001370:	08001331 	.word	0x08001331

08001374 <Communication_SetTransmitFunction>:
    sUartInstance->fTransmitFunction = fTransmitFunction;
 8001374:	6041      	str	r1, [r0, #4]
}
 8001376:	4770      	bx	lr

08001378 <Communication_SetHandlerFunction>:
    sUartInstance->fHandler = fHanlder;
 8001378:	6001      	str	r1, [r0, #0]
}
 800137a:	4770      	bx	lr

0800137c <Communication_ReceiveData>:
{
 800137c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800137e:	4606      	mov	r6, r0
    UART_Frame *sFrame = (UART_Frame *)malloc(sizeof(UART_Frame));
 8001380:	2008      	movs	r0, #8
{
 8001382:	4615      	mov	r5, r2
 8001384:	460f      	mov	r7, r1
    UART_Frame *sFrame = (UART_Frame *)malloc(sizeof(UART_Frame));
 8001386:	f005 f96b 	bl	8006660 <malloc>
 800138a:	4604      	mov	r4, r0
    sFrame->u8Data = (uint8_t *)malloc(sizeof(uint8_t) * u8Length);
 800138c:	4628      	mov	r0, r5
 800138e:	f005 f967 	bl	8006660 <malloc>
    memcpy(sFrame->u8Data, u8Data, u8Length);
 8001392:	4639      	mov	r1, r7
 8001394:	462a      	mov	r2, r5
    sFrame->u8Data = (uint8_t *)malloc(sizeof(uint8_t) * u8Length);
 8001396:	6020      	str	r0, [r4, #0]
    memcpy(sFrame->u8Data, u8Data, u8Length);
 8001398:	f005 fc4c 	bl	8006c34 <memcpy>
    Queue_EnQueue(sUartInstance->sQueue, sFrame);
 800139c:	4621      	mov	r1, r4
 800139e:	68b0      	ldr	r0, [r6, #8]
    sFrame->u8Length = u8Length;
 80013a0:	7125      	strb	r5, [r4, #4]
}
 80013a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Queue_EnQueue(sUartInstance->sQueue, sFrame);
 80013a6:	f004 bec6 	b.w	8006136 <Queue_EnQueue>

080013aa <Communication_Update>:
{
 80013aa:	b538      	push	{r3, r4, r5, lr}
 80013ac:	4605      	mov	r5, r0
    if (!Queue_IsEmpty(sUartInstance->sQueue))
 80013ae:	6880      	ldr	r0, [r0, #8]
 80013b0:	f004 febc 	bl	800612c <Queue_IsEmpty>
 80013b4:	b980      	cbnz	r0, 80013d8 <Communication_Update+0x2e>
        UART_Frame *sFrame = (UART_Frame *)Queue_DeQueue(sUartInstance->sQueue);
 80013b6:	68a8      	ldr	r0, [r5, #8]
 80013b8:	f004 fed0 	bl	800615c <Queue_DeQueue>
 80013bc:	4604      	mov	r4, r0
        sUartInstance->fHandler(sUartInstance, sFrame->u8Data, sFrame->u8Length);
 80013be:	682b      	ldr	r3, [r5, #0]
 80013c0:	7902      	ldrb	r2, [r0, #4]
 80013c2:	6801      	ldr	r1, [r0, #0]
 80013c4:	4628      	mov	r0, r5
 80013c6:	4798      	blx	r3
    free(sFrame->u8Data);
 80013c8:	6820      	ldr	r0, [r4, #0]
 80013ca:	f005 f951 	bl	8006670 <free>
    free(sFrame);
 80013ce:	4620      	mov	r0, r4
}
 80013d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    free(sFrame);
 80013d4:	f005 b94c 	b.w	8006670 <free>
}
 80013d8:	bd38      	pop	{r3, r4, r5, pc}
 80013da:	0000      	movs	r0, r0
 80013dc:	0000      	movs	r0, r0
	...

080013e0 <customAtof>:
		return -1;
	}
	return argv[0] - '0';
}

float customAtof(char *str) {
 80013e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80013e4:	4606      	mov	r6, r0
    float result = 0.0;
    int i = 0;
 80013e6:	2500      	movs	r5, #0
    int sign = 1;

    // Handle leading whitespaces
    while (str[i] == ' ' || str[i] == '\t' || str[i] == '\n')
 80013e8:	5d73      	ldrb	r3, [r6, r5]
 80013ea:	2b20      	cmp	r3, #32
 80013ec:	d00e      	beq.n	800140c <customAtof+0x2c>
 80013ee:	f1a3 0209 	sub.w	r2, r3, #9
 80013f2:	2a01      	cmp	r2, #1
 80013f4:	d90a      	bls.n	800140c <customAtof+0x2c>
        i++;

    // Handle sign
    if (str[i] == '-' || str[i] == '+') {
 80013f6:	2b2d      	cmp	r3, #45	; 0x2d
 80013f8:	d00a      	beq.n	8001410 <customAtof+0x30>
 80013fa:	2b2b      	cmp	r3, #43	; 0x2b
        sign = (str[i] == '-') ? -1 : 1;
 80013fc:	f04f 0701 	mov.w	r7, #1
    if (str[i] == '-' || str[i] == '+') {
 8001400:	d100      	bne.n	8001404 <customAtof+0x24>
        i++;
 8001402:	3501      	adds	r5, #1
    int sign = 1;
 8001404:	2400      	movs	r4, #0
    }

    // Process digits before the decimal point
    while (str[i] >= '0' && str[i] <= '9') {
        result = result * 10 + (str[i] - '0');
 8001406:	f8df 9098 	ldr.w	r9, [pc, #152]	; 80014a0 <customAtof+0xc0>
 800140a:	e011      	b.n	8001430 <customAtof+0x50>
        i++;
 800140c:	3501      	adds	r5, #1
 800140e:	e7eb      	b.n	80013e8 <customAtof+0x8>
        sign = (str[i] == '-') ? -1 : 1;
 8001410:	f04f 37ff 	mov.w	r7, #4294967295
 8001414:	e7f5      	b.n	8001402 <customAtof+0x22>
        result = result * 10 + (str[i] - '0');
 8001416:	4649      	mov	r1, r9
 8001418:	4620      	mov	r0, r4
 800141a:	f7ff faef 	bl	80009fc <__aeabi_fmul>
 800141e:	4604      	mov	r4, r0
 8001420:	4640      	mov	r0, r8
 8001422:	f7ff fa97 	bl	8000954 <__aeabi_i2f>
 8001426:	4621      	mov	r1, r4
 8001428:	f7ff f9e0 	bl	80007ec <__addsf3>
 800142c:	4604      	mov	r4, r0
        i++;
 800142e:	3501      	adds	r5, #1
    while (str[i] >= '0' && str[i] <= '9') {
 8001430:	5d73      	ldrb	r3, [r6, r5]
 8001432:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8001436:	fa5f f288 	uxtb.w	r2, r8
 800143a:	2a09      	cmp	r2, #9
 800143c:	d9eb      	bls.n	8001416 <customAtof+0x36>
    }

    // Process the decimal point and digits after it
    if (str[i] == '.') {
 800143e:	2b2e      	cmp	r3, #46	; 0x2e
 8001440:	d10b      	bne.n	800145a <customAtof+0x7a>

        i++;  // Move past the decimal point

        while (str[i] >= '0' && str[i] <= '9') {
            result += (str[i] - '0') * fraction;
            fraction *= 0.1;
 8001442:	f20f 0954 	addw	r9, pc, #84	; 0x54
 8001446:	e9d9 8900 	ldrd	r8, r9, [r9]
 800144a:	442e      	add	r6, r5
        float fraction = 0.1;
 800144c:	4d15      	ldr	r5, [pc, #84]	; (80014a4 <customAtof+0xc4>)
        while (str[i] >= '0' && str[i] <= '9') {
 800144e:	f816 0f01 	ldrb.w	r0, [r6, #1]!
 8001452:	3830      	subs	r0, #48	; 0x30
 8001454:	b2c3      	uxtb	r3, r0
 8001456:	2b09      	cmp	r3, #9
 8001458:	d907      	bls.n	800146a <customAtof+0x8a>
            i++;
        }
    }

    return sign * result;
 800145a:	4638      	mov	r0, r7
 800145c:	f7ff fa7a 	bl	8000954 <__aeabi_i2f>
 8001460:	4621      	mov	r1, r4
 8001462:	f7ff facb 	bl	80009fc <__aeabi_fmul>
}
 8001466:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            result += (str[i] - '0') * fraction;
 800146a:	f7ff fa73 	bl	8000954 <__aeabi_i2f>
 800146e:	4629      	mov	r1, r5
 8001470:	f7ff fac4 	bl	80009fc <__aeabi_fmul>
 8001474:	4601      	mov	r1, r0
 8001476:	4620      	mov	r0, r4
 8001478:	f7ff f9b8 	bl	80007ec <__addsf3>
 800147c:	4604      	mov	r4, r0
            fraction *= 0.1;
 800147e:	4628      	mov	r0, r5
 8001480:	f7ff f906 	bl	8000690 <__aeabi_f2d>
 8001484:	4642      	mov	r2, r8
 8001486:	464b      	mov	r3, r9
 8001488:	f7fe fe74 	bl	8000174 <__aeabi_dmul>
 800148c:	f7ff f958 	bl	8000740 <__aeabi_d2f>
 8001490:	4605      	mov	r5, r0
            i++;
 8001492:	e7dc      	b.n	800144e <customAtof+0x6e>
 8001494:	f3af 8000 	nop.w
 8001498:	9999999a 	.word	0x9999999a
 800149c:	3fb99999 	.word	0x3fb99999
 80014a0:	41200000 	.word	0x41200000
 80014a4:	3dcccccd 	.word	0x3dcccccd

080014a8 <GetIndexFromString.isra.0>:
	if (argv[0] > '3' || argv[0] < '0')
 80014a8:	3830      	subs	r0, #48	; 0x30
 80014aa:	b2c0      	uxtb	r0, r0
 80014ac:	2803      	cmp	r0, #3
uint8_t GetIndexFromString(char *argv)
 80014ae:	b508      	push	{r3, lr}
	if (argv[0] > '3' || argv[0] < '0')
 80014b0:	d903      	bls.n	80014ba <GetIndexFromString.isra.0+0x12>
		Command_ResponseConstChar("Index must be from 0 - 3");
 80014b2:	4802      	ldr	r0, [pc, #8]	; (80014bc <GetIndexFromString.isra.0+0x14>)
 80014b4:	f7ff ff30 	bl	8001318 <Command_ResponseConstChar>
		return -1;
 80014b8:	20ff      	movs	r0, #255	; 0xff
}
 80014ba:	bd08      	pop	{r3, pc}
 80014bc:	08007b13 	.word	0x08007b13

080014c0 <Command_DefaultResponse>:
	Command_ResponseConstChar("Unknown command");
 80014c0:	4801      	ldr	r0, [pc, #4]	; (80014c8 <Command_DefaultResponse+0x8>)
 80014c2:	f7ff bf29 	b.w	8001318 <Command_ResponseConstChar>
 80014c6:	bf00      	nop
 80014c8:	08007b2c 	.word	0x08007b2c

080014cc <Command_AnalogInputConfig>:
{
 80014cc:	b570      	push	{r4, r5, r6, lr}
 80014ce:	460c      	mov	r4, r1
 80014d0:	b0c4      	sub	sp, #272	; 0x110
	switch (argc)
 80014d2:	2804      	cmp	r0, #4
 80014d4:	f200 8094 	bhi.w	8001600 <Command_AnalogInputConfig+0x134>
 80014d8:	e8df f000 	tbb	[pc, r0]
 80014dc:	54351103 	.word	0x54351103
 80014e0:	7a          	.byte	0x7a
 80014e1:	00          	.byte	0x00
		AnalogInput_GetStatusString(response, 256);
 80014e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014e6:	a804      	add	r0, sp, #16
 80014e8:	f7ff fd4e 	bl	8000f88 <AnalogInput_GetStatusString>
		Command_Response(response, strlen(response));
 80014ec:	a804      	add	r0, sp, #16
 80014ee:	f7fe fe39 	bl	8000164 <strlen>
 80014f2:	b2c1      	uxtb	r1, r0
 80014f4:	a804      	add	r0, sp, #16
 80014f6:	f7ff ff0d 	bl	8001314 <Command_Response>
}
 80014fa:	b044      	add	sp, #272	; 0x110
 80014fc:	bd70      	pop	{r4, r5, r6, pc}
		memset(data, 0, 16);
 80014fe:	2210      	movs	r2, #16
 8001500:	2100      	movs	r1, #0
 8001502:	4668      	mov	r0, sp
 8001504:	f005 fa94 	bl	8006a30 <memset>
		AnalogInput_GetData(data);
 8001508:	4668      	mov	r0, sp
 800150a:	f7ff fd2d 	bl	8000f68 <AnalogInput_GetData>
		if (strcmp(argv[0], "test") == 0)
 800150e:	6820      	ldr	r0, [r4, #0]
 8001510:	493c      	ldr	r1, [pc, #240]	; (8001604 <Command_AnalogInputConfig+0x138>)
 8001512:	f7fe fe1d 	bl	8000150 <strcmp>
 8001516:	4604      	mov	r4, r0
 8001518:	b998      	cbnz	r0, 8001542 <Command_AnalogInputConfig+0x76>
			FormatString(response, "Data:");
 800151a:	493b      	ldr	r1, [pc, #236]	; (8001608 <Command_AnalogInputConfig+0x13c>)
 800151c:	a804      	add	r0, sp, #16
 800151e:	f004 fe84 	bl	800622a <FormatString>
			for (int i=0; i<16; i++)
 8001522:	466d      	mov	r5, sp
				FormatString(response, "%s %02X", response, data[i]);
 8001524:	4e39      	ldr	r6, [pc, #228]	; (800160c <Command_AnalogInputConfig+0x140>)
 8001526:	aa04      	add	r2, sp, #16
 8001528:	4631      	mov	r1, r6
 800152a:	4610      	mov	r0, r2
 800152c:	f815 3b01 	ldrb.w	r3, [r5], #1
			for (int i=0; i<16; i++)
 8001530:	3401      	adds	r4, #1
				FormatString(response, "%s %02X", response, data[i]);
 8001532:	f004 fe7a 	bl	800622a <FormatString>
			for (int i=0; i<16; i++)
 8001536:	2c10      	cmp	r4, #16
 8001538:	d1f5      	bne.n	8001526 <Command_AnalogInputConfig+0x5a>
			Command_ResponseConstChar(response);
 800153a:	a804      	add	r0, sp, #16
			Command_ResponseConstChar("Invalid command");
 800153c:	f7ff feec 	bl	8001318 <Command_ResponseConstChar>
 8001540:	e7db      	b.n	80014fa <Command_AnalogInputConfig+0x2e>
 8001542:	4833      	ldr	r0, [pc, #204]	; (8001610 <Command_AnalogInputConfig+0x144>)
 8001544:	e7fa      	b.n	800153c <Command_AnalogInputConfig+0x70>
		if (strcmp(argv[0], "on") == 0)
 8001546:	680d      	ldr	r5, [r1, #0]
 8001548:	4932      	ldr	r1, [pc, #200]	; (8001614 <Command_AnalogInputConfig+0x148>)
 800154a:	4628      	mov	r0, r5
 800154c:	f7fe fe00 	bl	8000150 <strcmp>
 8001550:	b958      	cbnz	r0, 800156a <Command_AnalogInputConfig+0x9e>
			index = GetIndexFromString(argv[1]);
 8001552:	6863      	ldr	r3, [r4, #4]
 8001554:	7818      	ldrb	r0, [r3, #0]
 8001556:	f7ff ffa7 	bl	80014a8 <GetIndexFromString.isra.0>
			AnalogInput_TurnOn(index);
 800155a:	f7ff fc69 	bl	8000e30 <AnalogInput_TurnOn>
			Command_ResponseConstChar("Setup successfully");
 800155e:	482e      	ldr	r0, [pc, #184]	; (8001618 <Command_AnalogInputConfig+0x14c>)
}
 8001560:	b044      	add	sp, #272	; 0x110
 8001562:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		Command_ResponseConstChar("Invalid command");
 8001566:	f7ff bed7 	b.w	8001318 <Command_ResponseConstChar>
		else if (strcmp(argv[0], "off") == 0)
 800156a:	4628      	mov	r0, r5
 800156c:	492b      	ldr	r1, [pc, #172]	; (800161c <Command_AnalogInputConfig+0x150>)
 800156e:	f7fe fdef 	bl	8000150 <strcmp>
 8001572:	2800      	cmp	r0, #0
 8001574:	d1e5      	bne.n	8001542 <Command_AnalogInputConfig+0x76>
			index = GetIndexFromString(argv[1]);
 8001576:	6863      	ldr	r3, [r4, #4]
 8001578:	7818      	ldrb	r0, [r3, #0]
 800157a:	f7ff ff95 	bl	80014a8 <GetIndexFromString.isra.0>
			AnalogInput_TurnOff(index);
 800157e:	f7ff fc4b 	bl	8000e18 <AnalogInput_TurnOff>
 8001582:	e7ec      	b.n	800155e <Command_AnalogInputConfig+0x92>
		if (strcmp(argv[0], "type") == 0)
 8001584:	680d      	ldr	r5, [r1, #0]
 8001586:	4926      	ldr	r1, [pc, #152]	; (8001620 <Command_AnalogInputConfig+0x154>)
 8001588:	4628      	mov	r0, r5
 800158a:	f7fe fde1 	bl	8000150 <strcmp>
 800158e:	b960      	cbnz	r0, 80015aa <Command_AnalogInputConfig+0xde>
			index = GetIndexFromString(argv[1]);
 8001590:	6863      	ldr	r3, [r4, #4]
 8001592:	7818      	ldrb	r0, [r3, #0]
 8001594:	f7ff ff88 	bl	80014a8 <GetIndexFromString.isra.0>
 8001598:	4605      	mov	r5, r0
			uint8_t typeVal = AnalogInput_TypeFromString(argv[2]);
 800159a:	68a0      	ldr	r0, [r4, #8]
 800159c:	f7ff fd94 	bl	80010c8 <AnalogInput_TypeFromString>
 80015a0:	4601      	mov	r1, r0
			AnalogInput_SetType(index, typeVal);
 80015a2:	4628      	mov	r0, r5
 80015a4:	f7ff fc1e 	bl	8000de4 <AnalogInput_SetType>
			Command_ResponseConstChar("Setup successfully");
 80015a8:	e7d9      	b.n	800155e <Command_AnalogInputConfig+0x92>
		else if (strcmp(argv[0], "input-max") == 0)
 80015aa:	4628      	mov	r0, r5
 80015ac:	491d      	ldr	r1, [pc, #116]	; (8001624 <Command_AnalogInputConfig+0x158>)
 80015ae:	f7fe fdcf 	bl	8000150 <strcmp>
 80015b2:	2800      	cmp	r0, #0
 80015b4:	d1c5      	bne.n	8001542 <Command_AnalogInputConfig+0x76>
			index = GetIndexFromString(argv[1]);
 80015b6:	6863      	ldr	r3, [r4, #4]
 80015b8:	7818      	ldrb	r0, [r3, #0]
 80015ba:	f7ff ff75 	bl	80014a8 <GetIndexFromString.isra.0>
 80015be:	4605      	mov	r5, r0
			AnalogInput_SetInputMax(index, customAtof(argv[2]));
 80015c0:	68a0      	ldr	r0, [r4, #8]
 80015c2:	f7ff ff0d 	bl	80013e0 <customAtof>
 80015c6:	4601      	mov	r1, r0
 80015c8:	4628      	mov	r0, r5
 80015ca:	f7ff fc4b 	bl	8000e64 <AnalogInput_SetInputMax>
			Command_ResponseConstChar("Setup successfully");
 80015ce:	e7c6      	b.n	800155e <Command_AnalogInputConfig+0x92>
		if (strcmp(argv[0], "minmax") == 0)
 80015d0:	4915      	ldr	r1, [pc, #84]	; (8001628 <Command_AnalogInputConfig+0x15c>)
 80015d2:	6820      	ldr	r0, [r4, #0]
 80015d4:	f7fe fdbc 	bl	8000150 <strcmp>
 80015d8:	2800      	cmp	r0, #0
 80015da:	d1b2      	bne.n	8001542 <Command_AnalogInputConfig+0x76>
			index = GetIndexFromString(argv[1]);
 80015dc:	6863      	ldr	r3, [r4, #4]
 80015de:	7818      	ldrb	r0, [r3, #0]
 80015e0:	f7ff ff62 	bl	80014a8 <GetIndexFromString.isra.0>
 80015e4:	4605      	mov	r5, r0
			AnalogInput_SetMinAndMax(index, customAtof(argv[2]), customAtof(argv[3]));
 80015e6:	68a0      	ldr	r0, [r4, #8]
 80015e8:	f7ff fefa 	bl	80013e0 <customAtof>
 80015ec:	4606      	mov	r6, r0
 80015ee:	68e0      	ldr	r0, [r4, #12]
 80015f0:	f7ff fef6 	bl	80013e0 <customAtof>
 80015f4:	4631      	mov	r1, r6
 80015f6:	4602      	mov	r2, r0
 80015f8:	4628      	mov	r0, r5
 80015fa:	f7ff fc25 	bl	8000e48 <AnalogInput_SetMinAndMax>
			Command_ResponseConstChar("Setup successfully");
 80015fe:	e7ae      	b.n	800155e <Command_AnalogInputConfig+0x92>
		Command_ResponseConstChar("Invalid command");
 8001600:	4803      	ldr	r0, [pc, #12]	; (8001610 <Command_AnalogInputConfig+0x144>)
 8001602:	e7ad      	b.n	8001560 <Command_AnalogInputConfig+0x94>
 8001604:	08007b3c 	.word	0x08007b3c
 8001608:	08007b41 	.word	0x08007b41
 800160c:	08007b47 	.word	0x08007b47
 8001610:	08007b4f 	.word	0x08007b4f
 8001614:	08007a90 	.word	0x08007a90
 8001618:	08007b5f 	.word	0x08007b5f
 800161c:	08007a93 	.word	0x08007a93
 8001620:	08007b72 	.word	0x08007b72
 8001624:	08007b77 	.word	0x08007b77
 8001628:	08007b81 	.word	0x08007b81

0800162c <Command_TimeTrigger>:

static uint32_t customAtoi(char *str);

void Command_TimeTrigger(uint8_t argc, char **argv)
{
 800162c:	b510      	push	{r4, lr}
 800162e:	b088      	sub	sp, #32
	char response[32];

	switch (argc)
 8001630:	b138      	cbz	r0, 8001642 <Command_TimeTrigger+0x16>
 8001632:	2801      	cmp	r0, #1
 8001634:	d010      	beq.n	8001658 <Command_TimeTrigger+0x2c>
		ins.u32TriggeredTime = customAtoi(argv[0]);
		FormatString(response, "TriggerTime: %d ms", ins.u32TriggeredTime);
		Command_ResponseConstChar(response);
		break;
	default:
		Command_ResponseConstChar("Invalid command");
 8001636:	4815      	ldr	r0, [pc, #84]	; (800168c <Command_TimeTrigger+0x60>)
	}
}
 8001638:	b008      	add	sp, #32
 800163a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		Command_ResponseConstChar("Invalid command");
 800163e:	f7ff be6b 	b.w	8001318 <Command_ResponseConstChar>
		FormatString(response, "TriggerTime: %d ms", ins.u32TriggeredTime);
 8001642:	4b13      	ldr	r3, [pc, #76]	; (8001690 <Command_TimeTrigger+0x64>)
 8001644:	681a      	ldr	r2, [r3, #0]
		FormatString(response, "TriggerTime: %d ms", ins.u32TriggeredTime);
 8001646:	4668      	mov	r0, sp
 8001648:	4912      	ldr	r1, [pc, #72]	; (8001694 <Command_TimeTrigger+0x68>)
 800164a:	f004 fdee 	bl	800622a <FormatString>
		Command_ResponseConstChar(response);
 800164e:	4668      	mov	r0, sp
 8001650:	f7ff fe62 	bl	8001318 <Command_ResponseConstChar>
}
 8001654:	b008      	add	sp, #32
 8001656:	bd10      	pop	{r4, pc}

uint32_t customAtoi(char *str) {
    uint32_t result = 0;
    int i = 0;
 8001658:	2200      	movs	r2, #0
		ins.u32TriggeredTime = customAtoi(argv[0]);
 800165a:	680b      	ldr	r3, [r1, #0]

    // Handle leading whitespaces
    while (str[i] == ' ' || str[i] == '\t' || str[i] == '\n')
 800165c:	5c99      	ldrb	r1, [r3, r2]
 800165e:	2920      	cmp	r1, #32
 8001660:	d00e      	beq.n	8001680 <Command_TimeTrigger+0x54>
 8001662:	3909      	subs	r1, #9
 8001664:	2901      	cmp	r1, #1
 8001666:	d90b      	bls.n	8001680 <Command_TimeTrigger+0x54>
 8001668:	4413      	add	r3, r2
        i++;

    // Process digits
    while (str[i] >= '0' && str[i] <= '9') {
        result = result * 10 + (str[i] - '0');
 800166a:	240a      	movs	r4, #10
    uint32_t result = 0;
 800166c:	2200      	movs	r2, #0
    while (str[i] >= '0' && str[i] <= '9') {
 800166e:	f813 1b01 	ldrb.w	r1, [r3], #1
 8001672:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
 8001676:	2809      	cmp	r0, #9
 8001678:	d904      	bls.n	8001684 <Command_TimeTrigger+0x58>
		ins.u32TriggeredTime = customAtoi(argv[0]);
 800167a:	4b05      	ldr	r3, [pc, #20]	; (8001690 <Command_TimeTrigger+0x64>)
 800167c:	601a      	str	r2, [r3, #0]
 800167e:	e7e2      	b.n	8001646 <Command_TimeTrigger+0x1a>
        i++;
 8001680:	3201      	adds	r2, #1
 8001682:	e7eb      	b.n	800165c <Command_TimeTrigger+0x30>
        result = result * 10 + (str[i] - '0');
 8001684:	fb04 1202 	mla	r2, r4, r2, r1
 8001688:	3a30      	subs	r2, #48	; 0x30
        i++;
 800168a:	e7f0      	b.n	800166e <Command_TimeTrigger+0x42>
 800168c:	08007b4f 	.word	0x08007b4f
 8001690:	200002f4 	.word	0x200002f4
 8001694:	08007b88 	.word	0x08007b88

08001698 <I2C_TransmitFunction>:
extern I2C_HandleTypeDef hi2c1;
static uint8_t u8Buffers[16];
static uint16_t u8BufferSize;

void I2C_TransmitFunction(uint8_t *u8Data, uint8_t u8Length)
{
 8001698:	b570      	push	{r4, r5, r6, lr}
 800169a:	4606      	mov	r6, r0
	I2C_TransmitFrame *sFrame = (I2C_TransmitFrame *)malloc(sizeof(I2C_TransmitFrame));
 800169c:	2041      	movs	r0, #65	; 0x41
{
 800169e:	460d      	mov	r5, r1
	I2C_TransmitFrame *sFrame = (I2C_TransmitFrame *)malloc(sizeof(I2C_TransmitFrame));
 80016a0:	f004 ffde 	bl	8006660 <malloc>
 80016a4:	4604      	mov	r4, r0
	memcpy(sFrame->u8Data, u8Data, u8Length);
 80016a6:	4631      	mov	r1, r6
 80016a8:	462a      	mov	r2, r5
 80016aa:	f005 fac3 	bl	8006c34 <memcpy>
	sFrame->u8Length = u8Length;
	Queue_EnQueue(m_sTransmitQueue, (void *)sFrame);
 80016ae:	4b04      	ldr	r3, [pc, #16]	; (80016c0 <I2C_TransmitFunction+0x28>)
	sFrame->u8Length = u8Length;
 80016b0:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
	Queue_EnQueue(m_sTransmitQueue, (void *)sFrame);
 80016b4:	4621      	mov	r1, r4
}
 80016b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	Queue_EnQueue(m_sTransmitQueue, (void *)sFrame);
 80016ba:	6818      	ldr	r0, [r3, #0]
 80016bc:	f004 bd3b 	b.w	8006136 <Queue_EnQueue>
 80016c0:	200002fc 	.word	0x200002fc

080016c4 <I2C_HandlerFunction>:

void I2C_HandlerFunction(Communication_Instance *sInstance,
							uint8_t *u8Data, uint8_t u8Length)
{
 80016c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016c6:	b091      	sub	sp, #68	; 0x44
 80016c8:	460c      	mov	r4, r1
 80016ca:	4605      	mov	r5, r0
	u8BufferSize = AnalogInput_GetDataLength();
 80016cc:	f7ff fb6a 	bl	8000da4 <AnalogInput_GetDataLength>
 80016d0:	4e2f      	ldr	r6, [pc, #188]	; (8001790 <I2C_HandlerFunction+0xcc>)
 80016d2:	8030      	strh	r0, [r6, #0]
	AnalogInput_GetData(u8Buffers);
 80016d4:	482f      	ldr	r0, [pc, #188]	; (8001794 <I2C_HandlerFunction+0xd0>)
 80016d6:	f7ff fc47 	bl	8000f68 <AnalogInput_GetData>

	uint8_t u8Response[DATA_FRAME_SIZE];
	memset(u8Response, 0, DATA_FRAME_SIZE);
 80016da:	2240      	movs	r2, #64	; 0x40
 80016dc:	2100      	movs	r1, #0
 80016de:	4668      	mov	r0, sp
 80016e0:	f005 f9a6 	bl	8006a30 <memset>
	switch (u8Data[0]) {
 80016e4:	7823      	ldrb	r3, [r4, #0]
 80016e6:	3b01      	subs	r3, #1
 80016e8:	2b03      	cmp	r3, #3
 80016ea:	d84e      	bhi.n	800178a <I2C_HandlerFunction+0xc6>
 80016ec:	e8df f003 	tbb	[pc, r3]
 80016f0:	1a024130 	.word	0x1a024130
		case READ_REGISTERS_FUNCTION:
			if (u8Data[1] + u8Data[2] <= u8BufferSize)
 80016f4:	7863      	ldrb	r3, [r4, #1]
 80016f6:	78a4      	ldrb	r4, [r4, #2]
 80016f8:	8832      	ldrh	r2, [r6, #0]
 80016fa:	1919      	adds	r1, r3, r4
 80016fc:	4291      	cmp	r1, r2
 80016fe:	dc0d      	bgt.n	800171c <I2C_HandlerFunction+0x58>
			{
				u8Response[0] = I2C_OK;
				for (int i=0; i<u8Data[2]; i++)
				{
					u8Response[i + 1] = u8Buffers[u8Data[1] + i];
 8001700:	4924      	ldr	r1, [pc, #144]	; (8001794 <I2C_HandlerFunction+0xd0>)
 8001702:	4622      	mov	r2, r4
 8001704:	4419      	add	r1, r3
 8001706:	f10d 0001 	add.w	r0, sp, #1
 800170a:	f005 fa93 	bl	8006c34 <memcpy>
			}
			else
			{
				u8Response[0] = I2C_REGISTER_ADDR_ERROR;
			}
			sInstance->fTransmitFunction(u8Response, u8Data[2] + 1);
 800170e:	1c61      	adds	r1, r4, #1
 8001710:	686b      	ldr	r3, [r5, #4]
 8001712:	b2c9      	uxtb	r1, r1
			}
			sInstance->fTransmitFunction(u8Response, 1);
			break;
		default:
			u8Response[0] = I2C_FUNCTION_NOT_REGISTERED;
			sInstance->fTransmitFunction(u8Response, 1);
 8001714:	4668      	mov	r0, sp
 8001716:	4798      	blx	r3
	}
}
 8001718:	b011      	add	sp, #68	; 0x44
 800171a:	bdf0      	pop	{r4, r5, r6, r7, pc}
				u8Response[0] = I2C_REGISTER_ADDR_ERROR;
 800171c:	2303      	movs	r3, #3
 800171e:	f88d 3000 	strb.w	r3, [sp]
 8001722:	e7f4      	b.n	800170e <I2C_HandlerFunction+0x4a>
			if (u8Data[1] + u8Data[2] <= u8BufferSize)
 8001724:	78a2      	ldrb	r2, [r4, #2]
 8001726:	7863      	ldrb	r3, [r4, #1]
 8001728:	4413      	add	r3, r2
 800172a:	8832      	ldrh	r2, [r6, #0]
 800172c:	4293      	cmp	r3, r2
 800172e:	dc28      	bgt.n	8001782 <I2C_HandlerFunction+0xbe>
				for (int i=0; i<u8Data[2]; i++)
 8001730:	2300      	movs	r3, #0
					u8Buffers[u8Data[1] + i] = u8Data[3 + i];
 8001732:	4818      	ldr	r0, [pc, #96]	; (8001794 <I2C_HandlerFunction+0xd0>)
 8001734:	1ca2      	adds	r2, r4, #2
				for (int i=0; i<u8Data[2]; i++)
 8001736:	78a1      	ldrb	r1, [r4, #2]
 8001738:	4299      	cmp	r1, r3
 800173a:	dc02      	bgt.n	8001742 <I2C_HandlerFunction+0x7e>
			sInstance->fTransmitFunction(u8Response, 1);
 800173c:	2101      	movs	r1, #1
 800173e:	686b      	ldr	r3, [r5, #4]
 8001740:	e7e8      	b.n	8001714 <I2C_HandlerFunction+0x50>
					u8Buffers[u8Data[1] + i] = u8Data[3 + i];
 8001742:	f812 7f01 	ldrb.w	r7, [r2, #1]!
 8001746:	7861      	ldrb	r1, [r4, #1]
 8001748:	18c6      	adds	r6, r0, r3
 800174a:	5477      	strb	r7, [r6, r1]
				for (int i=0; i<u8Data[2]; i++)
 800174c:	3301      	adds	r3, #1
 800174e:	e7f2      	b.n	8001736 <I2C_HandlerFunction+0x72>
			if (u8Data[1] < u8BufferSize)
 8001750:	7863      	ldrb	r3, [r4, #1]
 8001752:	8831      	ldrh	r1, [r6, #0]
 8001754:	461a      	mov	r2, r3
 8001756:	4299      	cmp	r1, r3
				u8Response[0] = I2C_REGISTER_ADDR_ERROR;
 8001758:	bf95      	itete	ls
 800175a:	2303      	movls	r3, #3
				u8Response[1] = u8Buffers[u8Data[1]];
 800175c:	4a0d      	ldrhi	r2, [pc, #52]	; (8001794 <I2C_HandlerFunction+0xd0>)
				u8Response[0] = I2C_REGISTER_ADDR_ERROR;
 800175e:	f88d 3000 	strbls.w	r3, [sp]
				u8Response[1] = u8Buffers[u8Data[1]];
 8001762:	5cd3      	ldrbhi	r3, [r2, r3]
			sInstance->fTransmitFunction(u8Response, 2);
 8001764:	f04f 0102 	mov.w	r1, #2
				u8Response[1] = u8Buffers[u8Data[1]];
 8001768:	bf88      	it	hi
 800176a:	f88d 3001 	strbhi.w	r3, [sp, #1]
			sInstance->fTransmitFunction(u8Response, 2);
 800176e:	686b      	ldr	r3, [r5, #4]
 8001770:	e7d0      	b.n	8001714 <I2C_HandlerFunction+0x50>
			if (u8Data[1] < u8BufferSize)
 8001772:	7863      	ldrb	r3, [r4, #1]
 8001774:	8831      	ldrh	r1, [r6, #0]
 8001776:	4299      	cmp	r1, r3
 8001778:	d903      	bls.n	8001782 <I2C_HandlerFunction+0xbe>
				u8Buffers[u8Data[1]] = u8Data[2];
 800177a:	78a1      	ldrb	r1, [r4, #2]
 800177c:	4a05      	ldr	r2, [pc, #20]	; (8001794 <I2C_HandlerFunction+0xd0>)
 800177e:	54d1      	strb	r1, [r2, r3]
 8001780:	e7dc      	b.n	800173c <I2C_HandlerFunction+0x78>
				u8Response[0] = I2C_REGISTER_ADDR_ERROR;
 8001782:	2303      	movs	r3, #3
			u8Response[0] = I2C_FUNCTION_NOT_REGISTERED;
 8001784:	f88d 3000 	strb.w	r3, [sp]
 8001788:	e7d8      	b.n	800173c <I2C_HandlerFunction+0x78>
 800178a:	2302      	movs	r3, #2
 800178c:	e7fa      	b.n	8001784 <I2C_HandlerFunction+0xc0>
 800178e:	bf00      	nop
 8001790:	20000208 	.word	0x20000208
 8001794:	2000020a 	.word	0x2000020a

08001798 <HAL_I2C_ListenCpltCallback>:

uint8_t m_u8Index;

extern void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
	HAL_I2C_EnableListen_IT(hi2c);
 8001798:	f001 b8d4 	b.w	8002944 <HAL_I2C_EnableListen_IT>

0800179c <HAL_I2C_AddrCallback>:
}

void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
	if (TransferDirection == I2C_DIRECTION_TRANSMIT)  // if the master wants to transmit the data
 800179c:	2901      	cmp	r1, #1
{
 800179e:	b570      	push	{r4, r5, r6, lr}
 80017a0:	460b      	mov	r3, r1
 80017a2:	4605      	mov	r5, r0
	if (TransferDirection == I2C_DIRECTION_TRANSMIT)  // if the master wants to transmit the data
 80017a4:	d108      	bne.n	80017b8 <HAL_I2C_AddrCallback+0x1c>
	{
		m_u8Index = 0;
 80017a6:	2100      	movs	r1, #0
 80017a8:	4a0e      	ldr	r2, [pc, #56]	; (80017e4 <HAL_I2C_AddrCallback+0x48>)
 80017aa:	7011      	strb	r1, [r2, #0]
											sFrame->u8Length,
											I2C_FIRST_AND_LAST_FRAME);
			free(sFrame);
		}
	}
}
 80017ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		HAL_I2C_Slave_Seq_Receive_IT(hi2c, u8RxBuffer, 1, I2C_FIRST_FRAME);
 80017b0:	461a      	mov	r2, r3
 80017b2:	490d      	ldr	r1, [pc, #52]	; (80017e8 <HAL_I2C_AddrCallback+0x4c>)
 80017b4:	f001 b88b 	b.w	80028ce <HAL_I2C_Slave_Seq_Receive_IT>
		if (!Queue_IsEmpty(m_sTransmitQueue))
 80017b8:	4c0c      	ldr	r4, [pc, #48]	; (80017ec <HAL_I2C_AddrCallback+0x50>)
 80017ba:	6820      	ldr	r0, [r4, #0]
 80017bc:	f004 fcb6 	bl	800612c <Queue_IsEmpty>
 80017c0:	b978      	cbnz	r0, 80017e2 <HAL_I2C_AddrCallback+0x46>
			I2C_TransmitFrame *sFrame = Queue_DeQueue(m_sTransmitQueue);
 80017c2:	6820      	ldr	r0, [r4, #0]
 80017c4:	f004 fcca 	bl	800615c <Queue_DeQueue>
 80017c8:	4604      	mov	r4, r0
			HAL_I2C_Slave_Seq_Transmit_IT(hi2c, sFrame->u8Data,
 80017ca:	4601      	mov	r1, r0
 80017cc:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 80017d0:	2308      	movs	r3, #8
 80017d2:	4628      	mov	r0, r5
 80017d4:	f001 f840 	bl	8002858 <HAL_I2C_Slave_Seq_Transmit_IT>
			free(sFrame);
 80017d8:	4620      	mov	r0, r4
}
 80017da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			free(sFrame);
 80017de:	f004 bf47 	b.w	8006670 <free>
}
 80017e2:	bd70      	pop	{r4, r5, r6, pc}
 80017e4:	2000021a 	.word	0x2000021a
 80017e8:	2000021b 	.word	0x2000021b
 80017ec:	200002fc 	.word	0x200002fc

080017f0 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80017f0:	b538      	push	{r3, r4, r5, lr}
	m_u8Index ++;
 80017f2:	4d10      	ldr	r5, [pc, #64]	; (8001834 <HAL_I2C_SlaveRxCpltCallback+0x44>)

	if (m_u8Index < u8RxBuffer[0])
 80017f4:	4c10      	ldr	r4, [pc, #64]	; (8001838 <HAL_I2C_SlaveRxCpltCallback+0x48>)
	m_u8Index ++;
 80017f6:	782b      	ldrb	r3, [r5, #0]
	if (m_u8Index < u8RxBuffer[0])
 80017f8:	7822      	ldrb	r2, [r4, #0]
	m_u8Index ++;
 80017fa:	3301      	adds	r3, #1
 80017fc:	b2db      	uxtb	r3, r3
	if (m_u8Index < u8RxBuffer[0])
 80017fe:	4293      	cmp	r3, r2
	m_u8Index ++;
 8001800:	702b      	strb	r3, [r5, #0]
	if (m_u8Index < u8RxBuffer[0])
 8001802:	d20a      	bcs.n	800181a <HAL_I2C_SlaveRxCpltCallback+0x2a>
	{
		if (m_u8Index < u8RxBuffer[0] - 1)
 8001804:	3a01      	subs	r2, #1
 8001806:	4293      	cmp	r3, r2
		{
			HAL_I2C_Slave_Seq_Receive_IT(hi2c, u8RxBuffer + m_u8Index, 1, I2C_NEXT_FRAME);
 8001808:	eb04 0103 	add.w	r1, r4, r3
		}
		else
		{
			HAL_I2C_Slave_Seq_Receive_IT(hi2c, u8RxBuffer + m_u8Index, 1, I2C_LAST_FRAME);
 800180c:	f04f 0201 	mov.w	r2, #1
			HAL_I2C_Slave_Seq_Receive_IT(hi2c, u8RxBuffer + m_u8Index, 1, I2C_NEXT_FRAME);
 8001810:	bfb4      	ite	lt
 8001812:	2304      	movlt	r3, #4
			HAL_I2C_Slave_Seq_Receive_IT(hi2c, u8RxBuffer + m_u8Index, 1, I2C_LAST_FRAME);
 8001814:	2320      	movge	r3, #32
 8001816:	f001 f85a 	bl	80028ce <HAL_I2C_Slave_Seq_Receive_IT>
		}
	}

	if (m_u8Index == u8RxBuffer[0])
 800181a:	782b      	ldrb	r3, [r5, #0]
 800181c:	7822      	ldrb	r2, [r4, #0]
 800181e:	429a      	cmp	r2, r3
 8001820:	d106      	bne.n	8001830 <HAL_I2C_SlaveRxCpltCallback+0x40>
	{
		Communication_ReceiveData(sI2CCommunicationIns, u8RxBuffer + 1, m_u8Index);
 8001822:	4b06      	ldr	r3, [pc, #24]	; (800183c <HAL_I2C_SlaveRxCpltCallback+0x4c>)
 8001824:	4906      	ldr	r1, [pc, #24]	; (8001840 <HAL_I2C_SlaveRxCpltCallback+0x50>)
 8001826:	6818      	ldr	r0, [r3, #0]
	}
}
 8001828:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		Communication_ReceiveData(sI2CCommunicationIns, u8RxBuffer + 1, m_u8Index);
 800182c:	f7ff bda6 	b.w	800137c <Communication_ReceiveData>
}
 8001830:	bd38      	pop	{r3, r4, r5, pc}
 8001832:	bf00      	nop
 8001834:	2000021a 	.word	0x2000021a
 8001838:	2000021b 	.word	0x2000021b
 800183c:	20000300 	.word	0x20000300
 8001840:	2000021c 	.word	0x2000021c

08001844 <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001844:	b510      	push	{r4, lr}
 8001846:	4604      	mov	r4, r0
	uint32_t errorcode = HAL_I2C_GetError(hi2c);
 8001848:	f001 fee6 	bl	8003618 <HAL_I2C_GetError>
	if (errorcode == 0x04)
 800184c:	2804      	cmp	r0, #4
 800184e:	d106      	bne.n	800185e <HAL_I2C_ErrorCallback+0x1a>
	{
		Communication_ReceiveData(sI2CCommunicationIns, u8RxBuffer + 1, m_u8Index);
 8001850:	4b05      	ldr	r3, [pc, #20]	; (8001868 <HAL_I2C_ErrorCallback+0x24>)
 8001852:	4906      	ldr	r1, [pc, #24]	; (800186c <HAL_I2C_ErrorCallback+0x28>)
 8001854:	781a      	ldrb	r2, [r3, #0]
 8001856:	4b06      	ldr	r3, [pc, #24]	; (8001870 <HAL_I2C_ErrorCallback+0x2c>)
 8001858:	6818      	ldr	r0, [r3, #0]
 800185a:	f7ff fd8f 	bl	800137c <Communication_ReceiveData>
	}

	HAL_I2C_EnableListen_IT(hi2c);
 800185e:	4620      	mov	r0, r4
}
 8001860:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_I2C_EnableListen_IT(hi2c);
 8001864:	f001 b86e 	b.w	8002944 <HAL_I2C_EnableListen_IT>
 8001868:	2000021a 	.word	0x2000021a
 800186c:	2000021c 	.word	0x2000021c
 8001870:	20000300 	.word	0x20000300

08001874 <ADC_Select>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void ADC_Select(uint32_t channel)
{
 8001874:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ADC_ChannelConfTypeDef sConfig = {0};
 8001876:	2300      	movs	r3, #0
 8001878:	9303      	str	r3, [sp, #12]
	sConfig.Channel = channel;
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800187a:	2301      	movs	r3, #1
	sConfig.Channel = channel;
 800187c:	9001      	str	r0, [sp, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800187e:	a901      	add	r1, sp, #4
 8001880:	4804      	ldr	r0, [pc, #16]	; (8001894 <ADC_Select+0x20>)
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001882:	9302      	str	r3, [sp, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001884:	f000 fbd4 	bl	8002030 <HAL_ADC_ConfigChannel>
 8001888:	b108      	cbz	r0, 800188e <ADC_Select+0x1a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800188a:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800188c:	e7fe      	b.n	800188c <ADC_Select+0x18>
}
 800188e:	b005      	add	sp, #20
 8001890:	f85d fb04 	ldr.w	pc, [sp], #4
 8001894:	20000228 	.word	0x20000228

08001898 <AD1_Handler>:
{
 8001898:	b538      	push	{r3, r4, r5, lr}
	HAL_ADC_Start(&hadc1);
 800189a:	4d11      	ldr	r5, [pc, #68]	; (80018e0 <AD1_Handler+0x48>)
	ADC_Select(ADC_CHANNEL_5);
 800189c:	2005      	movs	r0, #5
 800189e:	f7ff ffe9 	bl	8001874 <ADC_Select>
	HAL_ADC_Start(&hadc1);
 80018a2:	4628      	mov	r0, r5
 80018a4:	f000 fc7e 	bl	80021a4 <HAL_ADC_Start>
	HAL_Delay(100);
 80018a8:	2064      	movs	r0, #100	; 0x64
 80018aa:	f000 fbab 	bl	8002004 <HAL_Delay>
	float result = (3.3 / 4095) * HAL_ADC_GetValue(&hadc1);
 80018ae:	4628      	mov	r0, r5
 80018b0:	f000 fbba 	bl	8002028 <HAL_ADC_GetValue>
 80018b4:	4604      	mov	r4, r0
	HAL_ADC_Stop(&hadc1);
 80018b6:	4628      	mov	r0, r5
 80018b8:	f000 fd7a 	bl	80023b0 <HAL_ADC_Stop>
	float result = (3.3 / 4095) * HAL_ADC_GetValue(&hadc1);
 80018bc:	4620      	mov	r0, r4
 80018be:	f7fe fec5 	bl	800064c <__aeabi_ui2d>
 80018c2:	a305      	add	r3, pc, #20	; (adr r3, 80018d8 <AD1_Handler+0x40>)
 80018c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c8:	f7fe fc54 	bl	8000174 <__aeabi_dmul>
 80018cc:	f7fe ff38 	bl	8000740 <__aeabi_d2f>
}
 80018d0:	bd38      	pop	{r3, r4, r5, pc}
 80018d2:	bf00      	nop
 80018d4:	f3af 8000 	nop.w
 80018d8:	e734d9b4 	.word	0xe734d9b4
 80018dc:	3f4a680c 	.word	0x3f4a680c
 80018e0:	20000228 	.word	0x20000228
 80018e4:	00000000 	.word	0x00000000

080018e8 <AD2_Handler>:
{
 80018e8:	b538      	push	{r3, r4, r5, lr}
	HAL_ADC_Start(&hadc1);
 80018ea:	4d11      	ldr	r5, [pc, #68]	; (8001930 <AD2_Handler+0x48>)
	ADC_Select(ADC_CHANNEL_4);
 80018ec:	2004      	movs	r0, #4
 80018ee:	f7ff ffc1 	bl	8001874 <ADC_Select>
	HAL_ADC_Start(&hadc1);
 80018f2:	4628      	mov	r0, r5
 80018f4:	f000 fc56 	bl	80021a4 <HAL_ADC_Start>
	HAL_Delay(100);
 80018f8:	2064      	movs	r0, #100	; 0x64
 80018fa:	f000 fb83 	bl	8002004 <HAL_Delay>
	float result = (3.3 / 4095) * HAL_ADC_GetValue(&hadc1);
 80018fe:	4628      	mov	r0, r5
 8001900:	f000 fb92 	bl	8002028 <HAL_ADC_GetValue>
 8001904:	4604      	mov	r4, r0
	HAL_ADC_Stop(&hadc1);
 8001906:	4628      	mov	r0, r5
 8001908:	f000 fd52 	bl	80023b0 <HAL_ADC_Stop>
	float result = (3.3 / 4095) * HAL_ADC_GetValue(&hadc1);
 800190c:	4620      	mov	r0, r4
 800190e:	f7fe fe9d 	bl	800064c <__aeabi_ui2d>
 8001912:	a305      	add	r3, pc, #20	; (adr r3, 8001928 <AD2_Handler+0x40>)
 8001914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001918:	f7fe fc2c 	bl	8000174 <__aeabi_dmul>
 800191c:	f7fe ff10 	bl	8000740 <__aeabi_d2f>
}
 8001920:	bd38      	pop	{r3, r4, r5, pc}
 8001922:	bf00      	nop
 8001924:	f3af 8000 	nop.w
 8001928:	e734d9b4 	.word	0xe734d9b4
 800192c:	3f4a680c 	.word	0x3f4a680c
 8001930:	20000228 	.word	0x20000228

08001934 <SystemClock_Config>:
{
 8001934:	b510      	push	{r4, lr}
 8001936:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001938:	2214      	movs	r2, #20
 800193a:	2100      	movs	r1, #0
 800193c:	a80c      	add	r0, sp, #48	; 0x30
 800193e:	f005 f877 	bl	8006a30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001942:	2214      	movs	r2, #20
 8001944:	2100      	movs	r1, #0
 8001946:	eb0d 0002 	add.w	r0, sp, r2
 800194a:	f005 f871 	bl	8006a30 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800194e:	2210      	movs	r2, #16
 8001950:	2100      	movs	r1, #0
 8001952:	a801      	add	r0, sp, #4
 8001954:	f005 f86c 	bl	8006a30 <memset>
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001958:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800195a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800195e:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001960:	e9cd 4311 	strd	r4, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001964:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001968:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800196c:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800196e:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001970:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001972:	f002 fce5 	bl	8004340 <HAL_RCC_OscConfig>
 8001976:	b108      	cbz	r0, 800197c <SystemClock_Config+0x48>
 8001978:	b672      	cpsid	i
  while (1)
 800197a:	e7fe      	b.n	800197a <SystemClock_Config+0x46>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800197c:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800197e:	e9cd 3405 	strd	r3, r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001982:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001986:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001988:	e9cd 3008 	strd	r3, r0, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800198c:	4621      	mov	r1, r4
 800198e:	a805      	add	r0, sp, #20
 8001990:	f002 fe98 	bl	80046c4 <HAL_RCC_ClockConfig>
 8001994:	b108      	cbz	r0, 800199a <SystemClock_Config+0x66>
 8001996:	b672      	cpsid	i
  while (1)
 8001998:	e7fe      	b.n	8001998 <SystemClock_Config+0x64>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 800199a:	2312      	movs	r3, #18
 800199c:	9301      	str	r3, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800199e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80019a2:	e9cd 3003 	strd	r3, r0, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019a6:	a801      	add	r0, sp, #4
 80019a8:	f002 ff38 	bl	800481c <HAL_RCCEx_PeriphCLKConfig>
 80019ac:	b108      	cbz	r0, 80019b2 <SystemClock_Config+0x7e>
 80019ae:	b672      	cpsid	i
  while (1)
 80019b0:	e7fe      	b.n	80019b0 <SystemClock_Config+0x7c>
}
 80019b2:	b014      	add	sp, #80	; 0x50
 80019b4:	bd10      	pop	{r4, pc}
	...

080019b8 <main>:
	ins.u32TriggeredTime = 5000;
 80019b8:	f241 3388 	movw	r3, #5000	; 0x1388
{
 80019bc:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
	ins.u32TriggeredTime = 5000;
 80019c0:	f8df 82bc 	ldr.w	r8, [pc, #700]	; 8001c80 <main+0x2c8>
{
 80019c4:	b08d      	sub	sp, #52	; 0x34
	ins.u32TriggeredTime = 5000;
 80019c6:	f8c8 3000 	str.w	r3, [r8]
  HAL_Init();
 80019ca:	f000 faf7 	bl	8001fbc <HAL_Init>
  SystemClock_Config();
 80019ce:	f7ff ffb1 	bl	8001934 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d2:	2210      	movs	r2, #16
 80019d4:	2100      	movs	r1, #0
 80019d6:	a808      	add	r0, sp, #32
 80019d8:	f005 f82a 	bl	8006a30 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019dc:	4ba9      	ldr	r3, [pc, #676]	; (8001c84 <main+0x2cc>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019de:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019e0:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019e2:	f44f 4b80 	mov.w	fp, #16384	; 0x4000
 80019e6:	2701      	movs	r7, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e8:	2602      	movs	r6, #2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019ea:	f042 0210 	orr.w	r2, r2, #16
 80019ee:	619a      	str	r2, [r3, #24]
 80019f0:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(ADC_CONTROL_4_GPIO_Port, ADC_CONTROL_4_Pin, GPIO_PIN_RESET);
 80019f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019f6:	f002 0210 	and.w	r2, r2, #16
 80019fa:	9202      	str	r2, [sp, #8]
 80019fc:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019fe:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(ADC_CONTROL_4_GPIO_Port, ADC_CONTROL_4_Pin, GPIO_PIN_RESET);
 8001a00:	48a1      	ldr	r0, [pc, #644]	; (8001c88 <main+0x2d0>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a02:	f042 0220 	orr.w	r2, r2, #32
 8001a06:	619a      	str	r2, [r3, #24]
 8001a08:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a0a:	f04f 0903 	mov.w	r9, #3
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a0e:	f002 0220 	and.w	r2, r2, #32
 8001a12:	9203      	str	r2, [sp, #12]
 8001a14:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a16:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pin = SENSOR_Pin;
 8001a18:	f44f 7a80 	mov.w	sl, #256	; 0x100
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a1c:	f042 0204 	orr.w	r2, r2, #4
 8001a20:	619a      	str	r2, [r3, #24]
 8001a22:	699a      	ldr	r2, [r3, #24]
  hi2c1.Instance = I2C1;
 8001a24:	4d99      	ldr	r5, [pc, #612]	; (8001c8c <main+0x2d4>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a26:	f002 0204 	and.w	r2, r2, #4
 8001a2a:	9204      	str	r2, [sp, #16]
 8001a2c:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a2e:	699a      	ldr	r2, [r3, #24]
 8001a30:	f042 0208 	orr.w	r2, r2, #8
 8001a34:	619a      	str	r2, [r3, #24]
 8001a36:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(ADC_CONTROL_4_GPIO_Port, ADC_CONTROL_4_Pin, GPIO_PIN_RESET);
 8001a38:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a3a:	f003 0308 	and.w	r3, r3, #8
 8001a3e:	9305      	str	r3, [sp, #20]
 8001a40:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(ADC_CONTROL_4_GPIO_Port, ADC_CONTROL_4_Pin, GPIO_PIN_RESET);
 8001a42:	f000 fe5b 	bl	80026fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SENSOR_GPIO_Port, SENSOR_Pin, GPIO_PIN_RESET);
 8001a46:	2200      	movs	r2, #0
 8001a48:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a4c:	4890      	ldr	r0, [pc, #576]	; (8001c90 <main+0x2d8>)
 8001a4e:	f000 fe55 	bl	80026fc <HAL_GPIO_WritePin>
  HAL_GPIO_Init(ADC_CONTROL_4_GPIO_Port, &GPIO_InitStruct);
 8001a52:	488d      	ldr	r0, [pc, #564]	; (8001c88 <main+0x2d0>)
 8001a54:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a56:	e9cd 460a 	strd	r4, r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a5a:	e9cd b708 	strd	fp, r7, [sp, #32]
  HAL_GPIO_Init(ADC_CONTROL_4_GPIO_Port, &GPIO_InitStruct);
 8001a5e:	f000 fd71 	bl	8002544 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a62:	2308      	movs	r3, #8
  HAL_GPIO_Init(ADC_3_GPIO_Port, &GPIO_InitStruct);
 8001a64:	488a      	ldr	r0, [pc, #552]	; (8001c90 <main+0x2d8>)
 8001a66:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a68:	e9cd 3908 	strd	r3, r9, [sp, #32]
  HAL_GPIO_Init(ADC_3_GPIO_Port, &GPIO_InitStruct);
 8001a6c:	f000 fd6a 	bl	8002544 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = THIRD_Pin|SECOND_Pin|FIRST_Pin;
 8001a70:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a74:	4887      	ldr	r0, [pc, #540]	; (8001c94 <main+0x2dc>)
 8001a76:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a78:	e9cd 3408 	strd	r3, r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7c:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a7e:	f000 fd61 	bl	8002544 <HAL_GPIO_Init>
  HAL_GPIO_Init(SENSOR_GPIO_Port, &GPIO_InitStruct);
 8001a82:	4883      	ldr	r0, [pc, #524]	; (8001c90 <main+0x2d8>)
 8001a84:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a86:	e9cd 460a 	strd	r4, r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a8a:	e9cd a708 	strd	sl, r7, [sp, #32]
  HAL_GPIO_Init(SENSOR_GPIO_Port, &GPIO_InitStruct);
 8001a8e:	f000 fd59 	bl	8002544 <HAL_GPIO_Init>
	uint32_t address = (HAL_GPIO_ReadPin(FIRST_GPIO_Port, FIRST_Pin) |
 8001a92:	4659      	mov	r1, fp
 8001a94:	487f      	ldr	r0, [pc, #508]	; (8001c94 <main+0x2dc>)
 8001a96:	f000 fe2b 	bl	80026f0 <HAL_GPIO_ReadPin>
			HAL_GPIO_ReadPin(SECOND_GPIO_Port, SECOND_Pin) << 1 |
 8001a9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
	uint32_t address = (HAL_GPIO_ReadPin(FIRST_GPIO_Port, FIRST_Pin) |
 8001a9e:	9001      	str	r0, [sp, #4]
			HAL_GPIO_ReadPin(SECOND_GPIO_Port, SECOND_Pin) << 1 |
 8001aa0:	487c      	ldr	r0, [pc, #496]	; (8001c94 <main+0x2dc>)
 8001aa2:	f000 fe25 	bl	80026f0 <HAL_GPIO_ReadPin>
			HAL_GPIO_ReadPin(THIRD_GPIO_Port, THIRD_Pin) << 2) & 0x07;
 8001aa6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
			HAL_GPIO_ReadPin(SECOND_GPIO_Port, SECOND_Pin) << 1 |
 8001aaa:	9000      	str	r0, [sp, #0]
			HAL_GPIO_ReadPin(THIRD_GPIO_Port, THIRD_Pin) << 2) & 0x07;
 8001aac:	4879      	ldr	r0, [pc, #484]	; (8001c94 <main+0x2dc>)
 8001aae:	f000 fe1f 	bl	80026f0 <HAL_GPIO_ReadPin>
  hi2c1.Init.ClockSpeed = 100000;
 8001ab2:	4979      	ldr	r1, [pc, #484]	; (8001c98 <main+0x2e0>)
 8001ab4:	4b79      	ldr	r3, [pc, #484]	; (8001c9c <main+0x2e4>)
			HAL_GPIO_ReadPin(SECOND_GPIO_Port, SECOND_Pin) << 1 |
 8001ab6:	9a00      	ldr	r2, [sp, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001ab8:	e9c5 1300 	strd	r1, r3, [r5]
			HAL_GPIO_ReadPin(THIRD_GPIO_Port, THIRD_Pin) << 2) & 0x07;
 8001abc:	fa00 f306 	lsl.w	r3, r0, r6
			HAL_GPIO_ReadPin(SECOND_GPIO_Port, SECOND_Pin) << 1 |
 8001ac0:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 8001ac4:	9a01      	ldr	r2, [sp, #4]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ac6:	4628      	mov	r0, r5
			HAL_GPIO_ReadPin(SECOND_GPIO_Port, SECOND_Pin) << 1 |
 8001ac8:	4313      	orrs	r3, r2
  hi2c1.Init.OwnAddress1 = address << 1;
 8001aca:	40bb      	lsls	r3, r7
 8001acc:	f003 030e 	and.w	r3, r3, #14
  hi2c1.Init.OwnAddress2 = 0;
 8001ad0:	e9c5 4405 	strd	r4, r4, [r5, #20]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ad4:	e9c5 4407 	strd	r4, r4, [r5, #28]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ad8:	60ac      	str	r4, [r5, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ada:	e9c5 3b03 	strd	r3, fp, [r5, #12]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ade:	f000 fe13 	bl	8002708 <HAL_I2C_Init>
 8001ae2:	4604      	mov	r4, r0
 8001ae4:	b108      	cbz	r0, 8001aea <main+0x132>
 8001ae6:	b672      	cpsid	i
  while (1)
 8001ae8:	e7fe      	b.n	8001ae8 <main+0x130>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aea:	2210      	movs	r2, #16
 8001aec:	4601      	mov	r1, r0
 8001aee:	a808      	add	r0, sp, #32
 8001af0:	f004 ff9e 	bl	8006a30 <memset>
  htim2.Init.Prescaler = 71;
 8001af4:	2347      	movs	r3, #71	; 0x47
 8001af6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  htim2.Instance = TIM2;
 8001afa:	f8df b1a4 	ldr.w	fp, [pc, #420]	; 8001ca0 <main+0x2e8>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001afe:	e9cd 4406 	strd	r4, r4, [sp, #24]
  htim2.Init.Prescaler = 71;
 8001b02:	e9cb 2300 	strd	r2, r3, [fp]
  htim2.Init.Period = 65535;
 8001b06:	f64f 73ff 	movw	r3, #65535	; 0xffff
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b0a:	4658      	mov	r0, fp
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b0c:	e9cb 3403 	strd	r3, r4, [fp, #12]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b10:	f8cb 4008 	str.w	r4, [fp, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b14:	f8cb 4018 	str.w	r4, [fp, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b18:	f002 ff4e 	bl	80049b8 <HAL_TIM_Base_Init>
 8001b1c:	b108      	cbz	r0, 8001b22 <main+0x16a>
 8001b1e:	b672      	cpsid	i
  while (1)
 8001b20:	e7fe      	b.n	8001b20 <main+0x168>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b26:	4658      	mov	r0, fp
 8001b28:	a908      	add	r1, sp, #32
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b2a:	9308      	str	r3, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b2c:	f002 ff7a 	bl	8004a24 <HAL_TIM_ConfigClockSource>
 8001b30:	b108      	cbz	r0, 8001b36 <main+0x17e>
 8001b32:	b672      	cpsid	i
  while (1)
 8001b34:	e7fe      	b.n	8001b34 <main+0x17c>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b36:	e9cd 0006 	strd	r0, r0, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b3a:	a906      	add	r1, sp, #24
 8001b3c:	4658      	mov	r0, fp
 8001b3e:	f003 f80b 	bl	8004b58 <HAL_TIMEx_MasterConfigSynchronization>
 8001b42:	b108      	cbz	r0, 8001b48 <main+0x190>
 8001b44:	b672      	cpsid	i
  while (1)
 8001b46:	e7fe      	b.n	8001b46 <main+0x18e>
  hadc1.Instance = ADC1;
 8001b48:	4c56      	ldr	r4, [pc, #344]	; (8001ca4 <main+0x2ec>)
 8001b4a:	4b57      	ldr	r3, [pc, #348]	; (8001ca8 <main+0x2f0>)
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001b4c:	f8c4 a008 	str.w	sl, [r4, #8]
  hadc1.Instance = ADC1;
 8001b50:	6023      	str	r3, [r4, #0]
  hadc1.Init.NbrOfConversion = 4;
 8001b52:	f04f 0a04 	mov.w	sl, #4
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b56:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
  ADC_ChannelConfTypeDef sConfig = {0};
 8001b5a:	e9cd 0008 	strd	r0, r0, [sp, #32]
 8001b5e:	900a      	str	r0, [sp, #40]	; 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b60:	7520      	strb	r0, [r4, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b62:	6060      	str	r0, [r4, #4]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b64:	4620      	mov	r0, r4
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001b66:	7327      	strb	r7, [r4, #12]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b68:	61e3      	str	r3, [r4, #28]
  hadc1.Init.NbrOfConversion = 4;
 8001b6a:	f8c4 a010 	str.w	sl, [r4, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b6e:	f000 fba1 	bl	80022b4 <HAL_ADC_Init>
 8001b72:	b108      	cbz	r0, 8001b78 <main+0x1c0>
 8001b74:	b672      	cpsid	i
  while (1)
 8001b76:	e7fe      	b.n	8001b76 <main+0x1be>
  sConfig.Channel = ADC_CHANNEL_5;
 8001b78:	2305      	movs	r3, #5
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001b7a:	900a      	str	r0, [sp, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b7c:	a908      	add	r1, sp, #32
 8001b7e:	4620      	mov	r0, r4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b80:	e9cd 3708 	strd	r3, r7, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b84:	f000 fa54 	bl	8002030 <HAL_ADC_ConfigChannel>
 8001b88:	b108      	cbz	r0, 8001b8e <main+0x1d6>
 8001b8a:	b672      	cpsid	i
  while (1)
 8001b8c:	e7fe      	b.n	8001b8c <main+0x1d4>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b8e:	4620      	mov	r0, r4
 8001b90:	a908      	add	r1, sp, #32
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001b92:	e9cd a608 	strd	sl, r6, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b96:	f000 fa4b 	bl	8002030 <HAL_ADC_ConfigChannel>
 8001b9a:	b108      	cbz	r0, 8001ba0 <main+0x1e8>
 8001b9c:	b672      	cpsid	i
  while (1)
 8001b9e:	e7fe      	b.n	8001b9e <main+0x1e6>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ba0:	4620      	mov	r0, r4
 8001ba2:	a908      	add	r1, sp, #32
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001ba4:	e9cd 9908 	strd	r9, r9, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ba8:	f000 fa42 	bl	8002030 <HAL_ADC_ConfigChannel>
 8001bac:	b108      	cbz	r0, 8001bb2 <main+0x1fa>
 8001bae:	b672      	cpsid	i
  while (1)
 8001bb0:	e7fe      	b.n	8001bb0 <main+0x1f8>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bb2:	4620      	mov	r0, r4
 8001bb4:	a908      	add	r1, sp, #32
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001bb6:	e9cd 6a08 	strd	r6, sl, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bba:	f000 fa39 	bl	8002030 <HAL_ADC_ConfigChannel>
 8001bbe:	4604      	mov	r4, r0
 8001bc0:	b108      	cbz	r0, 8001bc6 <main+0x20e>
 8001bc2:	b672      	cpsid	i
  while (1)
 8001bc4:	e7fe      	b.n	8001bc4 <main+0x20c>
  MX_USB_DEVICE_Init();
 8001bc6:	f004 fb4f 	bl	8006268 <MX_USB_DEVICE_Init>
  m_sTransmitQueue = Queue_Init();
 8001bca:	f004 fa9f 	bl	800610c <Queue_Init>
 8001bce:	4b37      	ldr	r3, [pc, #220]	; (8001cac <main+0x2f4>)
  sI2CCommunicationIns = Communication_Init();
 8001bd0:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 8001cb0 <main+0x2f8>
  m_sTransmitQueue = Queue_Init();
 8001bd4:	6018      	str	r0, [r3, #0]
  sI2CCommunicationIns = Communication_Init();
 8001bd6:	f7ff fbb5 	bl	8001344 <Communication_Init>
  Communication_SetTransmitFunction(sI2CCommunicationIns, I2C_TransmitFunction);
 8001bda:	4936      	ldr	r1, [pc, #216]	; (8001cb4 <main+0x2fc>)
  sI2CCommunicationIns = Communication_Init();
 8001bdc:	f8ca 0000 	str.w	r0, [sl]
  Communication_SetTransmitFunction(sI2CCommunicationIns, I2C_TransmitFunction);
 8001be0:	f7ff fbc8 	bl	8001374 <Communication_SetTransmitFunction>
  Communication_SetHandlerFunction(sI2CCommunicationIns, I2C_HandlerFunction);
 8001be4:	4934      	ldr	r1, [pc, #208]	; (8001cb8 <main+0x300>)
 8001be6:	f8da 0000 	ldr.w	r0, [sl]
 8001bea:	f7ff fbc5 	bl	8001378 <Communication_SetHandlerFunction>
  HAL_I2C_EnableListen_IT(&hi2c1);
 8001bee:	4628      	mov	r0, r5
 8001bf0:	f000 fea8 	bl	8002944 <HAL_I2C_EnableListen_IT>
  HAL_TIM_Base_Start(&htim2);
 8001bf4:	4658      	mov	r0, fp
 8001bf6:	f002 fe8b 	bl	8004910 <HAL_TIM_Base_Start>
  TimeTrigger_Reset(&ins);
 8001bfa:	4640      	mov	r0, r8
 8001bfc:	f004 fb24 	bl	8006248 <TimeTrigger_Reset>
  Command_Init();
 8001c00:	f7ff fb02 	bl	8001208 <Command_Init>
  Command_RegisterDefaultCallback(Command_DefaultResponse);
 8001c04:	482d      	ldr	r0, [pc, #180]	; (8001cbc <main+0x304>)
 8001c06:	f7ff fb3d 	bl	8001284 <Command_RegisterDefaultCallback>
  Command_Register("ai", Command_AnalogInputConfig, "Analog Input: "
 8001c0a:	4a2d      	ldr	r2, [pc, #180]	; (8001cc0 <main+0x308>)
 8001c0c:	492d      	ldr	r1, [pc, #180]	; (8001cc4 <main+0x30c>)
 8001c0e:	482e      	ldr	r0, [pc, #184]	; (8001cc8 <main+0x310>)
 8001c10:	f7ff fae2 	bl	80011d8 <Command_Register>
  Command_Register("trigger", Command_TimeTrigger, "Time Trigger setting: "
 8001c14:	4a2d      	ldr	r2, [pc, #180]	; (8001ccc <main+0x314>)
 8001c16:	492e      	ldr	r1, [pc, #184]	; (8001cd0 <main+0x318>)
 8001c18:	482e      	ldr	r0, [pc, #184]	; (8001cd4 <main+0x31c>)
 8001c1a:	f7ff fadd 	bl	80011d8 <Command_Register>
  AnalogInput_Init(3);
 8001c1e:	4648      	mov	r0, r9
 8001c20:	f7ff f888 	bl	8000d34 <AnalogInput_Init>
  AnalogInput_SetMinAndMax(0, 1, 1000);
 8001c24:	4a2c      	ldr	r2, [pc, #176]	; (8001cd8 <main+0x320>)
 8001c26:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001c2a:	4620      	mov	r0, r4
 8001c2c:	f7ff f90c 	bl	8000e48 <AnalogInput_SetMinAndMax>
  AnalogInput_SetHandler(0, AD1_Handler);
 8001c30:	4620      	mov	r0, r4
 8001c32:	492a      	ldr	r1, [pc, #168]	; (8001cdc <main+0x324>)
 8001c34:	f7ff f922 	bl	8000e7c <AnalogInput_SetHandler>
  AnalogInput_SetHandler(1, AD2_Handler);
 8001c38:	4638      	mov	r0, r7
 8001c3a:	4929      	ldr	r1, [pc, #164]	; (8001ce0 <main+0x328>)
 8001c3c:	f7ff f91e 	bl	8000e7c <AnalogInput_SetHandler>
  AnalogInput_SetMinAndMax(1, 1, 500);
 8001c40:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001c44:	4638      	mov	r0, r7
 8001c46:	4a27      	ldr	r2, [pc, #156]	; (8001ce4 <main+0x32c>)
 8001c48:	f7ff f8fe 	bl	8000e48 <AnalogInput_SetMinAndMax>
  AnalogInput_SetMinAndMax(2, 0.05, 10);
 8001c4c:	4630      	mov	r0, r6
 8001c4e:	4926      	ldr	r1, [pc, #152]	; (8001ce8 <main+0x330>)
 8001c50:	4a26      	ldr	r2, [pc, #152]	; (8001cec <main+0x334>)
 8001c52:	f7ff f8f9 	bl	8000e48 <AnalogInput_SetMinAndMax>
  AnalogInput_SetHandler(2, AD2_Handler);
 8001c56:	4630      	mov	r0, r6
 8001c58:	4921      	ldr	r1, [pc, #132]	; (8001ce0 <main+0x328>)
 8001c5a:	f7ff f90f 	bl	8000e7c <AnalogInput_SetHandler>
	  Command_Update();
 8001c5e:	f7ff fb17 	bl	8001290 <Command_Update>
	  Communication_Update(sI2CCommunicationIns);
 8001c62:	f8da 0000 	ldr.w	r0, [sl]
 8001c66:	f7ff fba0 	bl	80013aa <Communication_Update>
	  if (TimeTrigger_IsTrigger(&ins) == TIME_TRIGGERD)
 8001c6a:	4640      	mov	r0, r8
 8001c6c:	f004 faf2 	bl	8006254 <TimeTrigger_IsTrigger>
 8001c70:	2801      	cmp	r0, #1
 8001c72:	d1f4      	bne.n	8001c5e <main+0x2a6>
		  TimeTrigger_Reset(&ins);
 8001c74:	4640      	mov	r0, r8
 8001c76:	f004 fae7 	bl	8006248 <TimeTrigger_Reset>
		  AnalogInput_Update();
 8001c7a:	f7ff f90b 	bl	8000e94 <AnalogInput_Update>
 8001c7e:	e7ee      	b.n	8001c5e <main+0x2a6>
 8001c80:	200002f4 	.word	0x200002f4
 8001c84:	40021000 	.word	0x40021000
 8001c88:	40011000 	.word	0x40011000
 8001c8c:	20000258 	.word	0x20000258
 8001c90:	40010800 	.word	0x40010800
 8001c94:	40010c00 	.word	0x40010c00
 8001c98:	40005400 	.word	0x40005400
 8001c9c:	000186a0 	.word	0x000186a0
 8001ca0:	200002ac 	.word	0x200002ac
 8001ca4:	20000228 	.word	0x20000228
 8001ca8:	40012400 	.word	0x40012400
 8001cac:	200002fc 	.word	0x200002fc
 8001cb0:	20000300 	.word	0x20000300
 8001cb4:	08001699 	.word	0x08001699
 8001cb8:	080016c5 	.word	0x080016c5
 8001cbc:	080014c1 	.word	0x080014c1
 8001cc0:	08007b9b 	.word	0x08007b9b
 8001cc4:	080014cd 	.word	0x080014cd
 8001cc8:	08007bd4 	.word	0x08007bd4
 8001ccc:	08007bd7 	.word	0x08007bd7
 8001cd0:	0800162d 	.word	0x0800162d
 8001cd4:	08007c73 	.word	0x08007c73
 8001cd8:	447a0000 	.word	0x447a0000
 8001cdc:	08001899 	.word	0x08001899
 8001ce0:	080018e9 	.word	0x080018e9
 8001ce4:	43fa0000 	.word	0x43fa0000
 8001ce8:	3d4ccccd 	.word	0x3d4ccccd
 8001cec:	41200000 	.word	0x41200000

08001cf0 <Error_Handler>:
 8001cf0:	b672      	cpsid	i
  while (1)
 8001cf2:	e7fe      	b.n	8001cf2 <Error_Handler+0x2>

08001cf4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001cf4:	4b0e      	ldr	r3, [pc, #56]	; (8001d30 <HAL_MspInit+0x3c>)
{
 8001cf6:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001cf8:	699a      	ldr	r2, [r3, #24]
 8001cfa:	f042 0201 	orr.w	r2, r2, #1
 8001cfe:	619a      	str	r2, [r3, #24]
 8001d00:	699a      	ldr	r2, [r3, #24]
 8001d02:	f002 0201 	and.w	r2, r2, #1
 8001d06:	9200      	str	r2, [sp, #0]
 8001d08:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d0a:	69da      	ldr	r2, [r3, #28]
 8001d0c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001d10:	61da      	str	r2, [r3, #28]
 8001d12:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001d14:	4a07      	ldr	r2, [pc, #28]	; (8001d34 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d1a:	9301      	str	r3, [sp, #4]
 8001d1c:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001d1e:	6853      	ldr	r3, [r2, #4]
 8001d20:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001d24:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d28:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d2a:	b002      	add	sp, #8
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	40021000 	.word	0x40021000
 8001d34:	40010000 	.word	0x40010000

08001d38 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d38:	b510      	push	{r4, lr}
 8001d3a:	4604      	mov	r4, r0
 8001d3c:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d3e:	2210      	movs	r2, #16
 8001d40:	2100      	movs	r1, #0
 8001d42:	a802      	add	r0, sp, #8
 8001d44:	f004 fe74 	bl	8006a30 <memset>
  if(hadc->Instance==ADC1)
 8001d48:	6822      	ldr	r2, [r4, #0]
 8001d4a:	4b10      	ldr	r3, [pc, #64]	; (8001d8c <HAL_ADC_MspInit+0x54>)
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d11b      	bne.n	8001d88 <HAL_ADC_MspInit+0x50>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d50:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8001d54:	699a      	ldr	r2, [r3, #24]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = ADC_4_Pin|ADC_3_Pin|ADC_2_Pin|ADC_1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d56:	480e      	ldr	r0, [pc, #56]	; (8001d90 <HAL_ADC_MspInit+0x58>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d5c:	619a      	str	r2, [r3, #24]
 8001d5e:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d60:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d62:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8001d66:	9200      	str	r2, [sp, #0]
 8001d68:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d6a:	699a      	ldr	r2, [r3, #24]
 8001d6c:	f042 0204 	orr.w	r2, r2, #4
 8001d70:	619a      	str	r2, [r3, #24]
 8001d72:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d74:	223c      	movs	r2, #60	; 0x3c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d76:	f003 0304 	and.w	r3, r3, #4
 8001d7a:	9301      	str	r3, [sp, #4]
 8001d7c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d84:	f000 fbde 	bl	8002544 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001d88:	b006      	add	sp, #24
 8001d8a:	bd10      	pop	{r4, pc}
 8001d8c:	40012400 	.word	0x40012400
 8001d90:	40010800 	.word	0x40010800

08001d94 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d94:	b510      	push	{r4, lr}
 8001d96:	4604      	mov	r4, r0
 8001d98:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d9a:	2210      	movs	r2, #16
 8001d9c:	2100      	movs	r1, #0
 8001d9e:	a802      	add	r0, sp, #8
 8001da0:	f004 fe46 	bl	8006a30 <memset>
  if(hi2c->Instance==I2C1)
 8001da4:	6822      	ldr	r2, [r4, #0]
 8001da6:	4b19      	ldr	r3, [pc, #100]	; (8001e0c <HAL_I2C_MspInit+0x78>)
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d12c      	bne.n	8001e06 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dac:	4c18      	ldr	r4, [pc, #96]	; (8001e10 <HAL_I2C_MspInit+0x7c>)
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dae:	22c0      	movs	r2, #192	; 0xc0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001db0:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001db2:	4818      	ldr	r0, [pc, #96]	; (8001e14 <HAL_I2C_MspInit+0x80>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001db4:	f043 0308 	orr.w	r3, r3, #8
 8001db8:	61a3      	str	r3, [r4, #24]
 8001dba:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dbc:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dbe:	f003 0308 	and.w	r3, r3, #8
 8001dc2:	9300      	str	r3, [sp, #0]
 8001dc4:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dc6:	2312      	movs	r3, #18
 8001dc8:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dd0:	f000 fbb8 	bl	8002544 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001dd4:	2200      	movs	r2, #0
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001dd6:	69e3      	ldr	r3, [r4, #28]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001dd8:	4611      	mov	r1, r2
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001dda:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001dde:	61e3      	str	r3, [r4, #28]
 8001de0:	69e3      	ldr	r3, [r4, #28]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001de2:	201f      	movs	r0, #31
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001de4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001de8:	9301      	str	r3, [sp, #4]
 8001dea:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001dec:	f000 fb0c 	bl	8002408 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001df0:	201f      	movs	r0, #31
 8001df2:	f000 fb39 	bl	8002468 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001df6:	2200      	movs	r2, #0
 8001df8:	2020      	movs	r0, #32
 8001dfa:	4611      	mov	r1, r2
 8001dfc:	f000 fb04 	bl	8002408 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001e00:	2020      	movs	r0, #32
 8001e02:	f000 fb31 	bl	8002468 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001e06:	b006      	add	sp, #24
 8001e08:	bd10      	pop	{r4, pc}
 8001e0a:	bf00      	nop
 8001e0c:	40005400 	.word	0x40005400
 8001e10:	40021000 	.word	0x40021000
 8001e14:	40010c00 	.word	0x40010c00

08001e18 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 8001e18:	6803      	ldr	r3, [r0, #0]
{
 8001e1a:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM2)
 8001e1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e20:	d10a      	bne.n	8001e38 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e22:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001e26:	69da      	ldr	r2, [r3, #28]
 8001e28:	f042 0201 	orr.w	r2, r2, #1
 8001e2c:	61da      	str	r2, [r3, #28]
 8001e2e:	69db      	ldr	r3, [r3, #28]
 8001e30:	f003 0301 	and.w	r3, r3, #1
 8001e34:	9301      	str	r3, [sp, #4]
 8001e36:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001e38:	b002      	add	sp, #8
 8001e3a:	4770      	bx	lr

08001e3c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e3c:	e7fe      	b.n	8001e3c <NMI_Handler>

08001e3e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e3e:	e7fe      	b.n	8001e3e <HardFault_Handler>

08001e40 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e40:	e7fe      	b.n	8001e40 <MemManage_Handler>

08001e42 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e42:	e7fe      	b.n	8001e42 <BusFault_Handler>

08001e44 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e44:	e7fe      	b.n	8001e44 <UsageFault_Handler>

08001e46 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e46:	4770      	bx	lr

08001e48 <DebugMon_Handler>:
 8001e48:	4770      	bx	lr

08001e4a <PendSV_Handler>:
 8001e4a:	4770      	bx	lr

08001e4c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e4c:	f000 b8c8 	b.w	8001fe0 <HAL_IncTick>

08001e50 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001e50:	4801      	ldr	r0, [pc, #4]	; (8001e58 <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 8001e52:	f001 bc89 	b.w	8003768 <HAL_PCD_IRQHandler>
 8001e56:	bf00      	nop
 8001e58:	200008d4 	.word	0x200008d4

08001e5c <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001e5c:	4801      	ldr	r0, [pc, #4]	; (8001e64 <I2C1_EV_IRQHandler+0x8>)
 8001e5e:	f000 bef3 	b.w	8002c48 <HAL_I2C_EV_IRQHandler>
 8001e62:	bf00      	nop
 8001e64:	20000258 	.word	0x20000258

08001e68 <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001e68:	4801      	ldr	r0, [pc, #4]	; (8001e70 <I2C1_ER_IRQHandler+0x8>)
 8001e6a:	f001 bb35 	b.w	80034d8 <HAL_I2C_ER_IRQHandler>
 8001e6e:	bf00      	nop
 8001e70:	20000258 	.word	0x20000258

08001e74 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8001e74:	2001      	movs	r0, #1
 8001e76:	4770      	bx	lr

08001e78 <_kill>:

int _kill(int pid, int sig)
{
 8001e78:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e7a:	f004 feaf 	bl	8006bdc <__errno>
 8001e7e:	2316      	movs	r3, #22
 8001e80:	6003      	str	r3, [r0, #0]
  return -1;
}
 8001e82:	f04f 30ff 	mov.w	r0, #4294967295
 8001e86:	bd08      	pop	{r3, pc}

08001e88 <_exit>:

void _exit (int status)
{
 8001e88:	b508      	push	{r3, lr}
  errno = EINVAL;
 8001e8a:	f004 fea7 	bl	8006bdc <__errno>
 8001e8e:	2316      	movs	r3, #22
 8001e90:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8001e92:	e7fe      	b.n	8001e92 <_exit+0xa>

08001e94 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e94:	b570      	push	{r4, r5, r6, lr}
 8001e96:	460d      	mov	r5, r1
 8001e98:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e9a:	460e      	mov	r6, r1
 8001e9c:	1b73      	subs	r3, r6, r5
 8001e9e:	429c      	cmp	r4, r3
 8001ea0:	dc01      	bgt.n	8001ea6 <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 8001ea2:	4620      	mov	r0, r4
 8001ea4:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 8001ea6:	f3af 8000 	nop.w
 8001eaa:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eae:	e7f5      	b.n	8001e9c <_read+0x8>

08001eb0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001eb0:	b570      	push	{r4, r5, r6, lr}
 8001eb2:	460d      	mov	r5, r1
 8001eb4:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eb6:	460e      	mov	r6, r1
 8001eb8:	1b73      	subs	r3, r6, r5
 8001eba:	429c      	cmp	r4, r3
 8001ebc:	dc01      	bgt.n	8001ec2 <_write+0x12>
  {
    __io_putchar(*ptr++);
  }
  return len;
}
 8001ebe:	4620      	mov	r0, r4
 8001ec0:	bd70      	pop	{r4, r5, r6, pc}
    __io_putchar(*ptr++);
 8001ec2:	f816 0b01 	ldrb.w	r0, [r6], #1
 8001ec6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eca:	e7f5      	b.n	8001eb8 <_write+0x8>

08001ecc <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8001ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ed0:	4770      	bx	lr

08001ed2 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8001ed2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  return 0;
}
 8001ed6:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 8001ed8:	604b      	str	r3, [r1, #4]
}
 8001eda:	4770      	bx	lr

08001edc <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8001edc:	2001      	movs	r0, #1
 8001ede:	4770      	bx	lr

08001ee0 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8001ee0:	2000      	movs	r0, #0
 8001ee2:	4770      	bx	lr

08001ee4 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ee4:	4a0b      	ldr	r2, [pc, #44]	; (8001f14 <_sbrk+0x30>)
{
 8001ee6:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8001ee8:	6811      	ldr	r1, [r2, #0]
{
 8001eea:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8001eec:	b909      	cbnz	r1, 8001ef2 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8001eee:	490a      	ldr	r1, [pc, #40]	; (8001f18 <_sbrk+0x34>)
 8001ef0:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ef2:	6810      	ldr	r0, [r2, #0]
 8001ef4:	4909      	ldr	r1, [pc, #36]	; (8001f1c <_sbrk+0x38>)
 8001ef6:	4c0a      	ldr	r4, [pc, #40]	; (8001f20 <_sbrk+0x3c>)
 8001ef8:	4403      	add	r3, r0
 8001efa:	1b09      	subs	r1, r1, r4
 8001efc:	428b      	cmp	r3, r1
 8001efe:	d906      	bls.n	8001f0e <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001f00:	f004 fe6c 	bl	8006bdc <__errno>
 8001f04:	230c      	movs	r3, #12
 8001f06:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001f08:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001f0c:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001f0e:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001f10:	e7fc      	b.n	8001f0c <_sbrk+0x28>
 8001f12:	bf00      	nop
 8001f14:	20000304 	.word	0x20000304
 8001f18:	20000f30 	.word	0x20000f30
 8001f1c:	20002800 	.word	0x20002800
 8001f20:	00000400 	.word	0x00000400

08001f24 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f24:	4770      	bx	lr
	...

08001f28 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f28:	f7ff fffc 	bl	8001f24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f2c:	480b      	ldr	r0, [pc, #44]	; (8001f5c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001f2e:	490c      	ldr	r1, [pc, #48]	; (8001f60 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001f30:	4a0c      	ldr	r2, [pc, #48]	; (8001f64 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001f32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f34:	e002      	b.n	8001f3c <LoopCopyDataInit>

08001f36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f3a:	3304      	adds	r3, #4

08001f3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f40:	d3f9      	bcc.n	8001f36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f42:	4a09      	ldr	r2, [pc, #36]	; (8001f68 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001f44:	4c09      	ldr	r4, [pc, #36]	; (8001f6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f48:	e001      	b.n	8001f4e <LoopFillZerobss>

08001f4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f4c:	3204      	adds	r2, #4

08001f4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f50:	d3fb      	bcc.n	8001f4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f52:	f004 fe49 	bl	8006be8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f56:	f7ff fd2f 	bl	80019b8 <main>
  bx lr
 8001f5a:	4770      	bx	lr
  ldr r0, =_sdata
 8001f5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f60:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001f64:	08007dd4 	.word	0x08007dd4
  ldr r2, =_sbss
 8001f68:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001f6c:	20000f30 	.word	0x20000f30

08001f70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f70:	e7fe      	b.n	8001f70 <ADC1_2_IRQHandler>
	...

08001f74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f74:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f76:	4b0e      	ldr	r3, [pc, #56]	; (8001fb0 <HAL_InitTick+0x3c>)
{
 8001f78:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f7a:	781a      	ldrb	r2, [r3, #0]
 8001f7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f80:	fbb3 f3f2 	udiv	r3, r3, r2
 8001f84:	4a0b      	ldr	r2, [pc, #44]	; (8001fb4 <HAL_InitTick+0x40>)
 8001f86:	6810      	ldr	r0, [r2, #0]
 8001f88:	fbb0 f0f3 	udiv	r0, r0, r3
 8001f8c:	f000 fa7a 	bl	8002484 <HAL_SYSTICK_Config>
 8001f90:	4604      	mov	r4, r0
 8001f92:	b958      	cbnz	r0, 8001fac <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f94:	2d0f      	cmp	r5, #15
 8001f96:	d809      	bhi.n	8001fac <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f98:	4602      	mov	r2, r0
 8001f9a:	4629      	mov	r1, r5
 8001f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001fa0:	f000 fa32 	bl	8002408 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fa4:	4620      	mov	r0, r4
 8001fa6:	4b04      	ldr	r3, [pc, #16]	; (8001fb8 <HAL_InitTick+0x44>)
 8001fa8:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001faa:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001fac:	2001      	movs	r0, #1
 8001fae:	e7fc      	b.n	8001faa <HAL_InitTick+0x36>
 8001fb0:	20000008 	.word	0x20000008
 8001fb4:	20000004 	.word	0x20000004
 8001fb8:	2000000c 	.word	0x2000000c

08001fbc <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fbc:	4a07      	ldr	r2, [pc, #28]	; (8001fdc <HAL_Init+0x20>)
{
 8001fbe:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fc0:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fc2:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fc4:	f043 0310 	orr.w	r3, r3, #16
 8001fc8:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fca:	f000 fa0b 	bl	80023e4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fce:	200f      	movs	r0, #15
 8001fd0:	f7ff ffd0 	bl	8001f74 <HAL_InitTick>
  HAL_MspInit();
 8001fd4:	f7ff fe8e 	bl	8001cf4 <HAL_MspInit>
}
 8001fd8:	2000      	movs	r0, #0
 8001fda:	bd08      	pop	{r3, pc}
 8001fdc:	40022000 	.word	0x40022000

08001fe0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001fe0:	4a03      	ldr	r2, [pc, #12]	; (8001ff0 <HAL_IncTick+0x10>)
 8001fe2:	4b04      	ldr	r3, [pc, #16]	; (8001ff4 <HAL_IncTick+0x14>)
 8001fe4:	6811      	ldr	r1, [r2, #0]
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	440b      	add	r3, r1
 8001fea:	6013      	str	r3, [r2, #0]
}
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	20000308 	.word	0x20000308
 8001ff4:	20000008 	.word	0x20000008

08001ff8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001ff8:	4b01      	ldr	r3, [pc, #4]	; (8002000 <HAL_GetTick+0x8>)
 8001ffa:	6818      	ldr	r0, [r3, #0]
}
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	20000308 	.word	0x20000308

08002004 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002004:	b538      	push	{r3, r4, r5, lr}
 8002006:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002008:	f7ff fff6 	bl	8001ff8 <HAL_GetTick>
 800200c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800200e:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8002010:	bf1e      	ittt	ne
 8002012:	4b04      	ldrne	r3, [pc, #16]	; (8002024 <HAL_Delay+0x20>)
 8002014:	781b      	ldrbne	r3, [r3, #0]
 8002016:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002018:	f7ff ffee 	bl	8001ff8 <HAL_GetTick>
 800201c:	1b43      	subs	r3, r0, r5
 800201e:	42a3      	cmp	r3, r4
 8002020:	d3fa      	bcc.n	8002018 <HAL_Delay+0x14>
  {
  }
}
 8002022:	bd38      	pop	{r3, r4, r5, pc}
 8002024:	20000008 	.word	0x20000008

08002028 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002028:	6803      	ldr	r3, [r0, #0]
 800202a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 800202c:	4770      	bx	lr
	...

08002030 <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8002030:	2300      	movs	r3, #0
{ 
 8002032:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8002034:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002036:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{ 
 800203a:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 800203c:	2b01      	cmp	r3, #1
 800203e:	d06c      	beq.n	800211a <HAL_ADC_ConfigChannel+0xea>
 8002040:	2301      	movs	r3, #1
 8002042:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002046:	684d      	ldr	r5, [r1, #4]
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002048:	6802      	ldr	r2, [r0, #0]
  if (sConfig->Rank < 7U)
 800204a:	2d06      	cmp	r5, #6
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800204c:	6808      	ldr	r0, [r1, #0]
 800204e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
  if (sConfig->Rank < 7U)
 8002052:	d822      	bhi.n	800209a <HAL_ADC_ConfigChannel+0x6a>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002054:	261f      	movs	r6, #31
 8002056:	6b55      	ldr	r5, [r2, #52]	; 0x34
 8002058:	3b05      	subs	r3, #5
 800205a:	409e      	lsls	r6, r3
 800205c:	ea25 0506 	bic.w	r5, r5, r6
 8002060:	fa00 f303 	lsl.w	r3, r0, r3
 8002064:	432b      	orrs	r3, r5
 8002066:	6353      	str	r3, [r2, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002068:	2809      	cmp	r0, #9
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800206a:	688b      	ldr	r3, [r1, #8]
 800206c:	eb00 0540 	add.w	r5, r0, r0, lsl #1
 8002070:	f04f 0107 	mov.w	r1, #7
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002074:	d929      	bls.n	80020ca <HAL_ADC_ConfigChannel+0x9a>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002076:	68d6      	ldr	r6, [r2, #12]
 8002078:	3d1e      	subs	r5, #30
 800207a:	40a9      	lsls	r1, r5
 800207c:	ea26 0101 	bic.w	r1, r6, r1
 8002080:	40ab      	lsls	r3, r5
 8002082:	430b      	orrs	r3, r1
 8002084:	60d3      	str	r3, [r2, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002086:	f1a0 0310 	sub.w	r3, r0, #16
 800208a:	2b01      	cmp	r3, #1
 800208c:	d925      	bls.n	80020da <HAL_ADC_ConfigChannel+0xaa>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800208e:	2000      	movs	r0, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002090:	2300      	movs	r3, #0
 8002092:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8002096:	b002      	add	sp, #8
 8002098:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 800209a:	2d0c      	cmp	r5, #12
 800209c:	f04f 051f 	mov.w	r5, #31
 80020a0:	d809      	bhi.n	80020b6 <HAL_ADC_ConfigChannel+0x86>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80020a2:	6b16      	ldr	r6, [r2, #48]	; 0x30
 80020a4:	3b23      	subs	r3, #35	; 0x23
 80020a6:	409d      	lsls	r5, r3
 80020a8:	ea26 0505 	bic.w	r5, r6, r5
 80020ac:	fa00 f303 	lsl.w	r3, r0, r3
 80020b0:	432b      	orrs	r3, r5
 80020b2:	6313      	str	r3, [r2, #48]	; 0x30
 80020b4:	e7d8      	b.n	8002068 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80020b6:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 80020b8:	3b41      	subs	r3, #65	; 0x41
 80020ba:	409d      	lsls	r5, r3
 80020bc:	ea26 0505 	bic.w	r5, r6, r5
 80020c0:	fa00 f303 	lsl.w	r3, r0, r3
 80020c4:	432b      	orrs	r3, r5
 80020c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80020c8:	e7ce      	b.n	8002068 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80020ca:	6910      	ldr	r0, [r2, #16]
 80020cc:	40a9      	lsls	r1, r5
 80020ce:	ea20 0101 	bic.w	r1, r0, r1
 80020d2:	40ab      	lsls	r3, r5
 80020d4:	430b      	orrs	r3, r1
 80020d6:	6113      	str	r3, [r2, #16]
 80020d8:	e7d9      	b.n	800208e <HAL_ADC_ConfigChannel+0x5e>
    if (hadc->Instance == ADC1)
 80020da:	4b11      	ldr	r3, [pc, #68]	; (8002120 <HAL_ADC_ConfigChannel+0xf0>)
 80020dc:	429a      	cmp	r2, r3
 80020de:	d116      	bne.n	800210e <HAL_ADC_ConfigChannel+0xde>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80020e0:	6893      	ldr	r3, [r2, #8]
 80020e2:	021b      	lsls	r3, r3, #8
 80020e4:	d4d3      	bmi.n	800208e <HAL_ADC_ConfigChannel+0x5e>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80020e6:	6893      	ldr	r3, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020e8:	2810      	cmp	r0, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80020ea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80020ee:	6093      	str	r3, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020f0:	d1cd      	bne.n	800208e <HAL_ADC_ConfigChannel+0x5e>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80020f2:	4b0c      	ldr	r3, [pc, #48]	; (8002124 <HAL_ADC_ConfigChannel+0xf4>)
 80020f4:	4a0c      	ldr	r2, [pc, #48]	; (8002128 <HAL_ADC_ConfigChannel+0xf8>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80020fc:	220a      	movs	r2, #10
 80020fe:	4353      	muls	r3, r2
            wait_loop_index--;
 8002100:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8002102:	9b01      	ldr	r3, [sp, #4]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d0c2      	beq.n	800208e <HAL_ADC_ConfigChannel+0x5e>
            wait_loop_index--;
 8002108:	9b01      	ldr	r3, [sp, #4]
 800210a:	3b01      	subs	r3, #1
 800210c:	e7f8      	b.n	8002100 <HAL_ADC_ConfigChannel+0xd0>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800210e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8002110:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002112:	f043 0320 	orr.w	r3, r3, #32
 8002116:	62a3      	str	r3, [r4, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8002118:	e7ba      	b.n	8002090 <HAL_ADC_ConfigChannel+0x60>
  __HAL_LOCK(hadc);
 800211a:	2002      	movs	r0, #2
 800211c:	e7bb      	b.n	8002096 <HAL_ADC_ConfigChannel+0x66>
 800211e:	bf00      	nop
 8002120:	40012400 	.word	0x40012400
 8002124:	20000004 	.word	0x20000004
 8002128:	000f4240 	.word	0x000f4240

0800212c <ADC_Enable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 800212c:	2300      	movs	r3, #0
{
 800212e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t wait_loop_index = 0U;
 8002130:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002132:	6803      	ldr	r3, [r0, #0]
{
 8002134:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002136:	689a      	ldr	r2, [r3, #8]
 8002138:	07d2      	lsls	r2, r2, #31
 800213a:	d502      	bpl.n	8002142 <ADC_Enable+0x16>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800213c:	2000      	movs	r0, #0
}
 800213e:	b003      	add	sp, #12
 8002140:	bd30      	pop	{r4, r5, pc}
    __HAL_ADC_ENABLE(hadc);
 8002142:	689a      	ldr	r2, [r3, #8]
 8002144:	f042 0201 	orr.w	r2, r2, #1
 8002148:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800214a:	4b14      	ldr	r3, [pc, #80]	; (800219c <ADC_Enable+0x70>)
 800214c:	4a14      	ldr	r2, [pc, #80]	; (80021a0 <ADC_Enable+0x74>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 8002154:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8002156:	9b01      	ldr	r3, [sp, #4]
 8002158:	b9e3      	cbnz	r3, 8002194 <ADC_Enable+0x68>
    tickstart = HAL_GetTick();
 800215a:	f7ff ff4d 	bl	8001ff8 <HAL_GetTick>
 800215e:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002160:	6823      	ldr	r3, [r4, #0]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	07db      	lsls	r3, r3, #31
 8002166:	d4e9      	bmi.n	800213c <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002168:	f7ff ff46 	bl	8001ff8 <HAL_GetTick>
 800216c:	1b40      	subs	r0, r0, r5
 800216e:	2802      	cmp	r0, #2
 8002170:	d9f6      	bls.n	8002160 <ADC_Enable+0x34>
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002172:	6823      	ldr	r3, [r4, #0]
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	f013 0301 	ands.w	r3, r3, #1
 800217a:	d1f1      	bne.n	8002160 <ADC_Enable+0x34>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800217c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
          return HAL_ERROR;
 800217e:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002180:	f042 0210 	orr.w	r2, r2, #16
 8002184:	62a2      	str	r2, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002186:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
          __HAL_UNLOCK(hadc);
 8002188:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800218c:	f042 0201 	orr.w	r2, r2, #1
 8002190:	62e2      	str	r2, [r4, #44]	; 0x2c
          return HAL_ERROR;
 8002192:	e7d4      	b.n	800213e <ADC_Enable+0x12>
      wait_loop_index--;
 8002194:	9b01      	ldr	r3, [sp, #4]
 8002196:	3b01      	subs	r3, #1
 8002198:	e7dc      	b.n	8002154 <ADC_Enable+0x28>
 800219a:	bf00      	nop
 800219c:	20000004 	.word	0x20000004
 80021a0:	000f4240 	.word	0x000f4240

080021a4 <HAL_ADC_Start>:
{
 80021a4:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 80021a6:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 80021aa:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d054      	beq.n	800225a <HAL_ADC_Start+0xb6>
 80021b0:	2301      	movs	r3, #1
 80021b2:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 80021b6:	f7ff ffb9 	bl	800212c <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 80021ba:	2800      	cmp	r0, #0
 80021bc:	d149      	bne.n	8002252 <HAL_ADC_Start+0xae>
    ADC_STATE_CLR_SET(hadc->State,
 80021be:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80021c0:	4a27      	ldr	r2, [pc, #156]	; (8002260 <HAL_ADC_Start+0xbc>)
    ADC_STATE_CLR_SET(hadc->State,
 80021c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021c6:	f023 0301 	bic.w	r3, r3, #1
 80021ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ce:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80021d0:	6823      	ldr	r3, [r4, #0]
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d104      	bne.n	80021e0 <HAL_ADC_Start+0x3c>
 80021d6:	4923      	ldr	r1, [pc, #140]	; (8002264 <HAL_ADC_Start+0xc0>)
 80021d8:	684a      	ldr	r2, [r1, #4]
 80021da:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 80021de:	d12e      	bne.n	800223e <HAL_ADC_Start+0x9a>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80021e0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80021e2:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80021e6:	62a2      	str	r2, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80021e8:	685a      	ldr	r2, [r3, #4]
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80021ea:	0552      	lsls	r2, r2, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80021ec:	bf41      	itttt	mi
 80021ee:	6aa2      	ldrmi	r2, [r4, #40]	; 0x28
 80021f0:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 80021f4:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 80021f8:	62a2      	strmi	r2, [r4, #40]	; 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021fa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80021fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002200:	bf1c      	itt	ne
 8002202:	6ae2      	ldrne	r2, [r4, #44]	; 0x2c
 8002204:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8002208:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 800220a:	2200      	movs	r2, #0
 800220c:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002210:	f06f 0202 	mvn.w	r2, #2
 8002214:	601a      	str	r2, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002216:	689a      	ldr	r2, [r3, #8]
 8002218:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 800221c:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8002220:	d113      	bne.n	800224a <HAL_ADC_Start+0xa6>
 8002222:	4a0f      	ldr	r2, [pc, #60]	; (8002260 <HAL_ADC_Start+0xbc>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d105      	bne.n	8002234 <HAL_ADC_Start+0x90>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002228:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 800222c:	6852      	ldr	r2, [r2, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800222e:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 8002232:	d10a      	bne.n	800224a <HAL_ADC_Start+0xa6>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002234:	689a      	ldr	r2, [r3, #8]
 8002236:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800223a:	609a      	str	r2, [r3, #8]
}
 800223c:	bd10      	pop	{r4, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800223e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002240:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002244:	62a2      	str	r2, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002246:	684a      	ldr	r2, [r1, #4]
 8002248:	e7cf      	b.n	80021ea <HAL_ADC_Start+0x46>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800224a:	689a      	ldr	r2, [r3, #8]
 800224c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002250:	e7f3      	b.n	800223a <HAL_ADC_Start+0x96>
    __HAL_UNLOCK(hadc);
 8002252:	2300      	movs	r3, #0
 8002254:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8002258:	e7f0      	b.n	800223c <HAL_ADC_Start+0x98>
  __HAL_LOCK(hadc);
 800225a:	2002      	movs	r0, #2
 800225c:	e7ee      	b.n	800223c <HAL_ADC_Start+0x98>
 800225e:	bf00      	nop
 8002260:	40012800 	.word	0x40012800
 8002264:	40012400 	.word	0x40012400

08002268 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002268:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800226a:	6803      	ldr	r3, [r0, #0]
{
 800226c:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 800226e:	689a      	ldr	r2, [r3, #8]
 8002270:	07d1      	lsls	r1, r2, #31
 8002272:	d401      	bmi.n	8002278 <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002274:	2000      	movs	r0, #0
}
 8002276:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8002278:	689a      	ldr	r2, [r3, #8]
 800227a:	f022 0201 	bic.w	r2, r2, #1
 800227e:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8002280:	f7ff feba 	bl	8001ff8 <HAL_GetTick>
 8002284:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002286:	6823      	ldr	r3, [r4, #0]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	07db      	lsls	r3, r3, #31
 800228c:	d5f2      	bpl.n	8002274 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800228e:	f7ff feb3 	bl	8001ff8 <HAL_GetTick>
 8002292:	1b40      	subs	r0, r0, r5
 8002294:	2802      	cmp	r0, #2
 8002296:	d9f6      	bls.n	8002286 <ADC_ConversionStop_Disable+0x1e>
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002298:	6823      	ldr	r3, [r4, #0]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	07da      	lsls	r2, r3, #31
 800229e:	d5f2      	bpl.n	8002286 <ADC_ConversionStop_Disable+0x1e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022a0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          return HAL_ERROR;
 80022a2:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022a4:	f043 0310 	orr.w	r3, r3, #16
 80022a8:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022aa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80022ac:	f043 0301 	orr.w	r3, r3, #1
 80022b0:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
 80022b2:	e7e0      	b.n	8002276 <ADC_ConversionStop_Disable+0xe>

080022b4 <HAL_ADC_Init>:
{
 80022b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc == NULL)
 80022b6:	4604      	mov	r4, r0
 80022b8:	2800      	cmp	r0, #0
 80022ba:	d06d      	beq.n	8002398 <HAL_ADC_Init+0xe4>
  if (hadc->State == HAL_ADC_STATE_RESET)
 80022bc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80022be:	b923      	cbnz	r3, 80022ca <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 80022c0:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 80022c2:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 80022c6:	f7ff fd37 	bl	8001d38 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80022ca:	4620      	mov	r0, r4
 80022cc:	f7ff ffcc 	bl	8002268 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80022d0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80022d2:	f013 0310 	ands.w	r3, r3, #16
 80022d6:	d161      	bne.n	800239c <HAL_ADC_Init+0xe8>
 80022d8:	2800      	cmp	r0, #0
 80022da:	d15f      	bne.n	800239c <HAL_ADC_Init+0xe8>
    ADC_STATE_CLR_SET(hadc->State,
 80022dc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80022de:	6861      	ldr	r1, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 80022e0:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 80022e4:	f022 0202 	bic.w	r2, r2, #2
 80022e8:	f042 0202 	orr.w	r2, r2, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80022ec:	69e5      	ldr	r5, [r4, #28]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80022ee:	68a6      	ldr	r6, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 80022f0:	62a2      	str	r2, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80022f2:	7b22      	ldrb	r2, [r4, #12]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80022f4:	4329      	orrs	r1, r5
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80022f6:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80022fa:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80022fe:	d036      	beq.n	800236e <HAL_ADC_Init+0xba>
 8002300:	1e77      	subs	r7, r6, #1
 8002302:	427d      	negs	r5, r7
 8002304:	417d      	adcs	r5, r7
 8002306:	022d      	lsls	r5, r5, #8
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002308:	7d27      	ldrb	r7, [r4, #20]
 800230a:	2f01      	cmp	r7, #1
 800230c:	d106      	bne.n	800231c <HAL_ADC_Init+0x68>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800230e:	bb82      	cbnz	r2, 8002372 <HAL_ADC_Init+0xbe>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002310:	69a2      	ldr	r2, [r4, #24]
 8002312:	3a01      	subs	r2, #1
 8002314:	ea45 3242 	orr.w	r2, r5, r2, lsl #13
 8002318:	f442 6500 	orr.w	r5, r2, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 800231c:	6822      	ldr	r2, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800231e:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8002322:	6857      	ldr	r7, [r2, #4]
 8002324:	f427 4769 	bic.w	r7, r7, #59648	; 0xe900
 8002328:	ea45 0507 	orr.w	r5, r5, r7
 800232c:	6055      	str	r5, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 800232e:	6897      	ldr	r7, [r2, #8]
 8002330:	4d1d      	ldr	r5, [pc, #116]	; (80023a8 <HAL_ADC_Init+0xf4>)
 8002332:	ea05 0507 	and.w	r5, r5, r7
 8002336:	ea45 0501 	orr.w	r5, r5, r1
 800233a:	6095      	str	r5, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800233c:	d001      	beq.n	8002342 <HAL_ADC_Init+0x8e>
 800233e:	2e01      	cmp	r6, #1
 8002340:	d102      	bne.n	8002348 <HAL_ADC_Init+0x94>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002342:	6923      	ldr	r3, [r4, #16]
 8002344:	3b01      	subs	r3, #1
 8002346:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8002348:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 800234a:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 800234e:	432b      	orrs	r3, r5
 8002350:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002352:	6892      	ldr	r2, [r2, #8]
 8002354:	4b15      	ldr	r3, [pc, #84]	; (80023ac <HAL_ADC_Init+0xf8>)
 8002356:	4013      	ands	r3, r2
 8002358:	4299      	cmp	r1, r3
 800235a:	d113      	bne.n	8002384 <HAL_ADC_Init+0xd0>
      ADC_CLEAR_ERRORCODE(hadc);
 800235c:	2300      	movs	r3, #0
 800235e:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8002360:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002362:	f023 0303 	bic.w	r3, r3, #3
 8002366:	f043 0301 	orr.w	r3, r3, #1
 800236a:	62a3      	str	r3, [r4, #40]	; 0x28
}
 800236c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800236e:	4635      	mov	r5, r6
 8002370:	e7ca      	b.n	8002308 <HAL_ADC_Init+0x54>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002372:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002374:	f042 0220 	orr.w	r2, r2, #32
 8002378:	62a2      	str	r2, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800237a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800237c:	f042 0201 	orr.w	r2, r2, #1
 8002380:	62e2      	str	r2, [r4, #44]	; 0x2c
 8002382:	e7cb      	b.n	800231c <HAL_ADC_Init+0x68>
      ADC_STATE_CLR_SET(hadc->State,
 8002384:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002386:	f023 0312 	bic.w	r3, r3, #18
 800238a:	f043 0310 	orr.w	r3, r3, #16
 800238e:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002390:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002392:	f043 0301 	orr.w	r3, r3, #1
 8002396:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 8002398:	2001      	movs	r0, #1
 800239a:	e7e7      	b.n	800236c <HAL_ADC_Init+0xb8>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800239c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800239e:	f043 0310 	orr.w	r3, r3, #16
 80023a2:	62a3      	str	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 80023a4:	e7f8      	b.n	8002398 <HAL_ADC_Init+0xe4>
 80023a6:	bf00      	nop
 80023a8:	ffe1f7fd 	.word	0xffe1f7fd
 80023ac:	ff1f0efe 	.word	0xff1f0efe

080023b0 <HAL_ADC_Stop>:
{
 80023b0:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 80023b2:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 80023b6:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d011      	beq.n	80023e0 <HAL_ADC_Stop+0x30>
 80023bc:	2301      	movs	r3, #1
 80023be:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80023c2:	f7ff ff51 	bl	8002268 <ADC_ConversionStop_Disable>
  if (tmp_hal_status == HAL_OK)
 80023c6:	b938      	cbnz	r0, 80023d8 <HAL_ADC_Stop+0x28>
    ADC_STATE_CLR_SET(hadc->State,
 80023c8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80023ca:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80023ce:	f023 0301 	bic.w	r3, r3, #1
 80023d2:	f043 0301 	orr.w	r3, r3, #1
 80023d6:	62a3      	str	r3, [r4, #40]	; 0x28
  __HAL_UNLOCK(hadc);
 80023d8:	2300      	movs	r3, #0
 80023da:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 80023de:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 80023e0:	2002      	movs	r0, #2
 80023e2:	e7fc      	b.n	80023de <HAL_ADC_Stop+0x2e>

080023e4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023e4:	4907      	ldr	r1, [pc, #28]	; (8002404 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80023e6:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023e8:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80023ea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023ee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80023f2:	0412      	lsls	r2, r2, #16
 80023f4:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002400:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002402:	4770      	bx	lr
 8002404:	e000ed00 	.word	0xe000ed00

08002408 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002408:	4b15      	ldr	r3, [pc, #84]	; (8002460 <HAL_NVIC_SetPriority+0x58>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800240a:	b530      	push	{r4, r5, lr}
 800240c:	68dc      	ldr	r4, [r3, #12]
 800240e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002412:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002416:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002418:	2b04      	cmp	r3, #4
 800241a:	bf28      	it	cs
 800241c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800241e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002420:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002424:	bf94      	ite	ls
 8002426:	2400      	movls	r4, #0
 8002428:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800242a:	fa05 f303 	lsl.w	r3, r5, r3
 800242e:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002432:	40a5      	lsls	r5, r4
 8002434:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002438:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 800243a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800243c:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002440:	bfac      	ite	ge
 8002442:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002446:	4a07      	ldrlt	r2, [pc, #28]	; (8002464 <HAL_NVIC_SetPriority+0x5c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002448:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800244c:	b2db      	uxtb	r3, r3
 800244e:	bfab      	itete	ge
 8002450:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002454:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002458:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800245c:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800245e:	bd30      	pop	{r4, r5, pc}
 8002460:	e000ed00 	.word	0xe000ed00
 8002464:	e000ed14 	.word	0xe000ed14

08002468 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002468:	2800      	cmp	r0, #0
 800246a:	db07      	blt.n	800247c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800246c:	2301      	movs	r3, #1
 800246e:	0941      	lsrs	r1, r0, #5
 8002470:	4a03      	ldr	r2, [pc, #12]	; (8002480 <HAL_NVIC_EnableIRQ+0x18>)
 8002472:	f000 001f 	and.w	r0, r0, #31
 8002476:	4083      	lsls	r3, r0
 8002478:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	e000e100 	.word	0xe000e100

08002484 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002484:	3801      	subs	r0, #1
 8002486:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800248a:	d20b      	bcs.n	80024a4 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800248c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002490:	21f0      	movs	r1, #240	; 0xf0
 8002492:	4a05      	ldr	r2, [pc, #20]	; (80024a8 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002494:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002496:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800249a:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800249c:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800249e:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024a0:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024a2:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80024a4:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80024a6:	4770      	bx	lr
 80024a8:	e000ed00 	.word	0xe000ed00

080024ac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80024ac:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80024ae:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d003      	beq.n	80024be <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024b6:	2304      	movs	r3, #4
 80024b8:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 80024ba:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 80024bc:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024be:	6803      	ldr	r3, [r0, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	f022 020e 	bic.w	r2, r2, #14
 80024c6:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	f022 0201 	bic.w	r2, r2, #1
 80024ce:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80024d0:	4a18      	ldr	r2, [pc, #96]	; (8002534 <HAL_DMA_Abort_IT+0x88>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d01f      	beq.n	8002516 <HAL_DMA_Abort_IT+0x6a>
 80024d6:	3214      	adds	r2, #20
 80024d8:	4293      	cmp	r3, r2
 80024da:	d01e      	beq.n	800251a <HAL_DMA_Abort_IT+0x6e>
 80024dc:	3214      	adds	r2, #20
 80024de:	4293      	cmp	r3, r2
 80024e0:	d01d      	beq.n	800251e <HAL_DMA_Abort_IT+0x72>
 80024e2:	3214      	adds	r2, #20
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d01d      	beq.n	8002524 <HAL_DMA_Abort_IT+0x78>
 80024e8:	3214      	adds	r2, #20
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d01d      	beq.n	800252a <HAL_DMA_Abort_IT+0x7e>
 80024ee:	3214      	adds	r2, #20
 80024f0:	4293      	cmp	r3, r2
 80024f2:	bf0c      	ite	eq
 80024f4:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 80024f8:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 80024fc:	4a0e      	ldr	r2, [pc, #56]	; (8002538 <HAL_DMA_Abort_IT+0x8c>)
    __HAL_UNLOCK(hdma);
 80024fe:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002500:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8002502:	2301      	movs	r3, #1
 8002504:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    if(hdma->XferAbortCallback != NULL)
 8002508:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 800250a:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 800250e:	b17b      	cbz	r3, 8002530 <HAL_DMA_Abort_IT+0x84>
      hdma->XferAbortCallback(hdma);
 8002510:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8002512:	4620      	mov	r0, r4
 8002514:	e7d2      	b.n	80024bc <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002516:	2301      	movs	r3, #1
 8002518:	e7f0      	b.n	80024fc <HAL_DMA_Abort_IT+0x50>
 800251a:	2310      	movs	r3, #16
 800251c:	e7ee      	b.n	80024fc <HAL_DMA_Abort_IT+0x50>
 800251e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002522:	e7eb      	b.n	80024fc <HAL_DMA_Abort_IT+0x50>
 8002524:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002528:	e7e8      	b.n	80024fc <HAL_DMA_Abort_IT+0x50>
 800252a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800252e:	e7e5      	b.n	80024fc <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 8002530:	4618      	mov	r0, r3
 8002532:	e7c3      	b.n	80024bc <HAL_DMA_Abort_IT+0x10>
 8002534:	40020008 	.word	0x40020008
 8002538:	40020000 	.word	0x40020000

0800253c <HAL_DMA_GetState>:
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
  /* Return DMA handle state */
  return hdma->State;
 800253c:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
}
 8002540:	4770      	bx	lr
	...

08002544 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002544:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002548:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 800254a:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800254c:	4f61      	ldr	r7, [pc, #388]	; (80026d4 <HAL_GPIO_Init+0x190>)
 800254e:	4b62      	ldr	r3, [pc, #392]	; (80026d8 <HAL_GPIO_Init+0x194>)
      switch (GPIO_Init->Mode)
 8002550:	f8df c188 	ldr.w	ip, [pc, #392]	; 80026dc <HAL_GPIO_Init+0x198>
 8002554:	f8df e188 	ldr.w	lr, [pc, #392]	; 80026e0 <HAL_GPIO_Init+0x19c>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002558:	680d      	ldr	r5, [r1, #0]
 800255a:	fa35 f406 	lsrs.w	r4, r5, r6
 800255e:	d102      	bne.n	8002566 <HAL_GPIO_Init+0x22>
      }
    }

	position++;
  }
}
 8002560:	b003      	add	sp, #12
 8002562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8002566:	f04f 0801 	mov.w	r8, #1
 800256a:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800256e:	ea05 0408 	and.w	r4, r5, r8
    if (iocurrent == ioposition)
 8002572:	ea38 0505 	bics.w	r5, r8, r5
 8002576:	d176      	bne.n	8002666 <HAL_GPIO_Init+0x122>
      switch (GPIO_Init->Mode)
 8002578:	684d      	ldr	r5, [r1, #4]
 800257a:	2d03      	cmp	r5, #3
 800257c:	d807      	bhi.n	800258e <HAL_GPIO_Init+0x4a>
 800257e:	3d01      	subs	r5, #1
 8002580:	2d02      	cmp	r5, #2
 8002582:	f200 8081 	bhi.w	8002688 <HAL_GPIO_Init+0x144>
 8002586:	e8df f005 	tbb	[pc, r5]
 800258a:	9691      	.short	0x9691
 800258c:	9c          	.byte	0x9c
 800258d:	00          	.byte	0x00
 800258e:	2d12      	cmp	r5, #18
 8002590:	f000 8094 	beq.w	80026bc <HAL_GPIO_Init+0x178>
 8002594:	d869      	bhi.n	800266a <HAL_GPIO_Init+0x126>
 8002596:	2d11      	cmp	r5, #17
 8002598:	f000 808a 	beq.w	80026b0 <HAL_GPIO_Init+0x16c>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800259c:	2cff      	cmp	r4, #255	; 0xff
 800259e:	bf98      	it	ls
 80025a0:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80025a2:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80025a6:	bf88      	it	hi
 80025a8:	f100 0a04 	addhi.w	sl, r0, #4
 80025ac:	ea4f 0586 	mov.w	r5, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80025b0:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80025b4:	bf88      	it	hi
 80025b6:	3d20      	subhi	r5, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80025b8:	fa09 fb05 	lsl.w	fp, r9, r5
 80025bc:	ea28 080b 	bic.w	r8, r8, fp
 80025c0:	fa02 f505 	lsl.w	r5, r2, r5
 80025c4:	ea48 0505 	orr.w	r5, r8, r5
 80025c8:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80025cc:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80025d0:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 80025d4:	d047      	beq.n	8002666 <HAL_GPIO_Init+0x122>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80025d6:	69bd      	ldr	r5, [r7, #24]
 80025d8:	f026 0803 	bic.w	r8, r6, #3
 80025dc:	f045 0501 	orr.w	r5, r5, #1
 80025e0:	61bd      	str	r5, [r7, #24]
 80025e2:	69bd      	ldr	r5, [r7, #24]
 80025e4:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80025e8:	f005 0501 	and.w	r5, r5, #1
 80025ec:	9501      	str	r5, [sp, #4]
 80025ee:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80025f2:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80025f6:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80025f8:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 80025fc:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002600:	fa09 f90b 	lsl.w	r9, r9, fp
 8002604:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002608:	4d36      	ldr	r5, [pc, #216]	; (80026e4 <HAL_GPIO_Init+0x1a0>)
 800260a:	42a8      	cmp	r0, r5
 800260c:	d05d      	beq.n	80026ca <HAL_GPIO_Init+0x186>
 800260e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002612:	42a8      	cmp	r0, r5
 8002614:	d05b      	beq.n	80026ce <HAL_GPIO_Init+0x18a>
 8002616:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800261a:	42a8      	cmp	r0, r5
 800261c:	bf0c      	ite	eq
 800261e:	2502      	moveq	r5, #2
 8002620:	2503      	movne	r5, #3
 8002622:	fa05 f50b 	lsl.w	r5, r5, fp
 8002626:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 800262a:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 800262e:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002630:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8002634:	bf14      	ite	ne
 8002636:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002638:	43a5      	biceq	r5, r4
 800263a:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 800263c:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800263e:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8002642:	bf14      	ite	ne
 8002644:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002646:	43a5      	biceq	r5, r4
 8002648:	60dd      	str	r5, [r3, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 800264a:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800264c:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8002650:	bf14      	ite	ne
 8002652:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002654:	43a5      	biceq	r5, r4
 8002656:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 8002658:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800265a:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 800265e:	bf14      	ite	ne
 8002660:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002662:	43a5      	biceq	r5, r4
 8002664:	601d      	str	r5, [r3, #0]
	position++;
 8002666:	3601      	adds	r6, #1
 8002668:	e776      	b.n	8002558 <HAL_GPIO_Init+0x14>
      switch (GPIO_Init->Mode)
 800266a:	f8df 907c 	ldr.w	r9, [pc, #124]	; 80026e8 <HAL_GPIO_Init+0x1a4>
 800266e:	454d      	cmp	r5, r9
 8002670:	d00a      	beq.n	8002688 <HAL_GPIO_Init+0x144>
 8002672:	d815      	bhi.n	80026a0 <HAL_GPIO_Init+0x15c>
 8002674:	4575      	cmp	r5, lr
 8002676:	d007      	beq.n	8002688 <HAL_GPIO_Init+0x144>
 8002678:	f5a9 3980 	sub.w	r9, r9, #65536	; 0x10000
 800267c:	454d      	cmp	r5, r9
 800267e:	d003      	beq.n	8002688 <HAL_GPIO_Init+0x144>
 8002680:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8002684:	454d      	cmp	r5, r9
 8002686:	d189      	bne.n	800259c <HAL_GPIO_Init+0x58>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002688:	688a      	ldr	r2, [r1, #8]
 800268a:	b1e2      	cbz	r2, 80026c6 <HAL_GPIO_Init+0x182>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800268c:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 800268e:	bf08      	it	eq
 8002690:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002694:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 8002698:	bf18      	it	ne
 800269a:	f8c0 8014 	strne.w	r8, [r0, #20]
 800269e:	e77d      	b.n	800259c <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 80026a0:	f8df 9048 	ldr.w	r9, [pc, #72]	; 80026ec <HAL_GPIO_Init+0x1a8>
 80026a4:	454d      	cmp	r5, r9
 80026a6:	d0ef      	beq.n	8002688 <HAL_GPIO_Init+0x144>
 80026a8:	4565      	cmp	r5, ip
 80026aa:	e7ec      	b.n	8002686 <HAL_GPIO_Init+0x142>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80026ac:	68ca      	ldr	r2, [r1, #12]
          break;
 80026ae:	e775      	b.n	800259c <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80026b0:	68ca      	ldr	r2, [r1, #12]
 80026b2:	3204      	adds	r2, #4
          break;
 80026b4:	e772      	b.n	800259c <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80026b6:	68ca      	ldr	r2, [r1, #12]
 80026b8:	3208      	adds	r2, #8
          break;
 80026ba:	e76f      	b.n	800259c <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80026bc:	68ca      	ldr	r2, [r1, #12]
 80026be:	320c      	adds	r2, #12
          break;
 80026c0:	e76c      	b.n	800259c <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 80026c2:	2200      	movs	r2, #0
 80026c4:	e76a      	b.n	800259c <HAL_GPIO_Init+0x58>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80026c6:	2204      	movs	r2, #4
 80026c8:	e768      	b.n	800259c <HAL_GPIO_Init+0x58>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80026ca:	2500      	movs	r5, #0
 80026cc:	e7a9      	b.n	8002622 <HAL_GPIO_Init+0xde>
 80026ce:	2501      	movs	r5, #1
 80026d0:	e7a7      	b.n	8002622 <HAL_GPIO_Init+0xde>
 80026d2:	bf00      	nop
 80026d4:	40021000 	.word	0x40021000
 80026d8:	40010400 	.word	0x40010400
 80026dc:	10320000 	.word	0x10320000
 80026e0:	10120000 	.word	0x10120000
 80026e4:	40010800 	.word	0x40010800
 80026e8:	10220000 	.word	0x10220000
 80026ec:	10310000 	.word	0x10310000

080026f0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80026f0:	6883      	ldr	r3, [r0, #8]
 80026f2:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80026f4:	bf14      	ite	ne
 80026f6:	2001      	movne	r0, #1
 80026f8:	2000      	moveq	r0, #0
 80026fa:	4770      	bx	lr

080026fc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026fc:	b10a      	cbz	r2, 8002702 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80026fe:	6101      	str	r1, [r0, #16]
  }
}
 8002700:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002702:	0409      	lsls	r1, r1, #16
 8002704:	e7fb      	b.n	80026fe <HAL_GPIO_WritePin+0x2>
	...

08002708 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002708:	b570      	push	{r4, r5, r6, lr}
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800270a:	4604      	mov	r4, r0
 800270c:	b908      	cbnz	r0, 8002712 <HAL_I2C_Init+0xa>
  {
    return HAL_ERROR;
 800270e:	2001      	movs	r0, #1
  hi2c->State = HAL_I2C_STATE_READY;
  hi2c->PreviousState = I2C_STATE_NONE;
  hi2c->Mode = HAL_I2C_MODE_NONE;

  return HAL_OK;
}
 8002710:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002712:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002716:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800271a:	b91b      	cbnz	r3, 8002724 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 800271c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8002720:	f7ff fb38 	bl	8001d94 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002724:	2324      	movs	r3, #36	; 0x24
 8002726:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 800272a:	6823      	ldr	r3, [r4, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	f022 0201 	bic.w	r2, r2, #1
 8002732:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800273a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002742:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002744:	f002 f85a 	bl	80047fc <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002748:	4b3f      	ldr	r3, [pc, #252]	; (8002848 <HAL_I2C_Init+0x140>)
 800274a:	6865      	ldr	r5, [r4, #4]
 800274c:	429d      	cmp	r5, r3
 800274e:	bf94      	ite	ls
 8002750:	4b3e      	ldrls	r3, [pc, #248]	; (800284c <HAL_I2C_Init+0x144>)
 8002752:	4b3f      	ldrhi	r3, [pc, #252]	; (8002850 <HAL_I2C_Init+0x148>)
 8002754:	4298      	cmp	r0, r3
 8002756:	bf8c      	ite	hi
 8002758:	2300      	movhi	r3, #0
 800275a:	2301      	movls	r3, #1
 800275c:	2b00      	cmp	r3, #0
 800275e:	d1d6      	bne.n	800270e <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002760:	4e39      	ldr	r6, [pc, #228]	; (8002848 <HAL_I2C_Init+0x140>)
  freqrange = I2C_FREQRANGE(pclk1);
 8002762:	4b3c      	ldr	r3, [pc, #240]	; (8002854 <HAL_I2C_Init+0x14c>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002764:	42b5      	cmp	r5, r6
  freqrange = I2C_FREQRANGE(pclk1);
 8002766:	fbb0 f3f3 	udiv	r3, r0, r3
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800276a:	bf88      	it	hi
 800276c:	f44f 7696 	movhi.w	r6, #300	; 0x12c
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002770:	6822      	ldr	r2, [r4, #0]
 8002772:	6851      	ldr	r1, [r2, #4]
 8002774:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8002778:	ea41 0103 	orr.w	r1, r1, r3
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800277c:	bf82      	ittt	hi
 800277e:	4373      	mulhi	r3, r6
 8002780:	f44f 767a 	movhi.w	r6, #1000	; 0x3e8
 8002784:	fbb3 f3f6 	udivhi	r3, r3, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002788:	6051      	str	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800278a:	6a11      	ldr	r1, [r2, #32]
 800278c:	3301      	adds	r3, #1
 800278e:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8002792:	430b      	orrs	r3, r1
 8002794:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002796:	69d1      	ldr	r1, [r2, #28]
 8002798:	1e43      	subs	r3, r0, #1
 800279a:	482b      	ldr	r0, [pc, #172]	; (8002848 <HAL_I2C_Init+0x140>)
 800279c:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80027a0:	4285      	cmp	r5, r0
 80027a2:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80027a6:	d832      	bhi.n	800280e <HAL_I2C_Init+0x106>
 80027a8:	006d      	lsls	r5, r5, #1
 80027aa:	fbb3 f3f5 	udiv	r3, r3, r5
 80027ae:	f640 70fc 	movw	r0, #4092	; 0xffc
 80027b2:	3301      	adds	r3, #1
 80027b4:	4203      	tst	r3, r0
 80027b6:	d042      	beq.n	800283e <HAL_I2C_Init+0x136>
 80027b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027bc:	4319      	orrs	r1, r3
 80027be:	61d1      	str	r1, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80027c0:	6811      	ldr	r1, [r2, #0]
 80027c2:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 80027c6:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 80027ca:	4303      	orrs	r3, r0
 80027cc:	430b      	orrs	r3, r1
 80027ce:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80027d0:	6891      	ldr	r1, [r2, #8]
 80027d2:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 80027d6:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 80027da:	4303      	orrs	r3, r0
 80027dc:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80027e0:	430b      	orrs	r3, r1
 80027e2:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80027e4:	68d1      	ldr	r1, [r2, #12]
 80027e6:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 80027ea:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80027ee:	4303      	orrs	r3, r0
 80027f0:	430b      	orrs	r3, r1
 80027f2:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 80027f4:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027f6:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 80027f8:	f043 0301 	orr.w	r3, r3, #1
 80027fc:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80027fe:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002800:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002802:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002806:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002808:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 800280c:	e780      	b.n	8002710 <HAL_I2C_Init+0x8>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800280e:	68a0      	ldr	r0, [r4, #8]
 8002810:	b950      	cbnz	r0, 8002828 <HAL_I2C_Init+0x120>
 8002812:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002816:	fbb3 f3f5 	udiv	r3, r3, r5
 800281a:	3301      	adds	r3, #1
 800281c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002820:	b17b      	cbz	r3, 8002842 <HAL_I2C_Init+0x13a>
 8002822:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002826:	e7c9      	b.n	80027bc <HAL_I2C_Init+0xb4>
 8002828:	2019      	movs	r0, #25
 800282a:	4368      	muls	r0, r5
 800282c:	fbb3 f3f0 	udiv	r3, r3, r0
 8002830:	3301      	adds	r3, #1
 8002832:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002836:	b123      	cbz	r3, 8002842 <HAL_I2C_Init+0x13a>
 8002838:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800283c:	e7be      	b.n	80027bc <HAL_I2C_Init+0xb4>
 800283e:	2304      	movs	r3, #4
 8002840:	e7bc      	b.n	80027bc <HAL_I2C_Init+0xb4>
 8002842:	2301      	movs	r3, #1
 8002844:	e7ba      	b.n	80027bc <HAL_I2C_Init+0xb4>
 8002846:	bf00      	nop
 8002848:	000186a0 	.word	0x000186a0
 800284c:	001e847f 	.word	0x001e847f
 8002850:	003d08ff 	.word	0x003d08ff
 8002854:	000f4240 	.word	0x000f4240

08002858 <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8002858:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800285a:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800285c:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
 8002860:	f000 0028 	and.w	r0, r0, #40	; 0x28
 8002864:	2828      	cmp	r0, #40	; 0x28
 8002866:	d130      	bne.n	80028ca <HAL_I2C_Slave_Seq_Transmit_IT+0x72>
  {
    if ((pData == NULL) || (Size == 0U))
 8002868:	2900      	cmp	r1, #0
 800286a:	d02c      	beq.n	80028c6 <HAL_I2C_Slave_Seq_Transmit_IT+0x6e>
 800286c:	2a00      	cmp	r2, #0
 800286e:	d02a      	beq.n	80028c6 <HAL_I2C_Slave_Seq_Transmit_IT+0x6e>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002870:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
 8002874:	2801      	cmp	r0, #1
 8002876:	d028      	beq.n	80028ca <HAL_I2C_Slave_Seq_Transmit_IT+0x72>

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002878:	6825      	ldr	r5, [r4, #0]
 800287a:	6828      	ldr	r0, [r5, #0]
 800287c:	07c0      	lsls	r0, r0, #31
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800287e:	bf5e      	ittt	pl
 8002880:	6828      	ldrpl	r0, [r5, #0]
 8002882:	f040 0001 	orrpl.w	r0, r0, #1
 8002886:	6028      	strpl	r0, [r5, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002888:	6828      	ldr	r0, [r5, #0]
 800288a:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
 800288e:	6028      	str	r0, [r5, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 8002890:	2029      	movs	r0, #41	; 0x29
 8002892:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8002896:	2020      	movs	r0, #32
 8002898:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800289c:	2000      	movs	r0, #0
 800289e:	6420      	str	r0, [r4, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
    hi2c->XferCount   = Size;
 80028a0:	8562      	strh	r2, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80028a2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->XferOptions = XferOptions;
 80028a4:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028a6:	9001      	str	r0, [sp, #4]
 80028a8:	696b      	ldr	r3, [r5, #20]
    hi2c->pBuffPtr    = pData;
 80028aa:	6261      	str	r1, [r4, #36]	; 0x24
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028ac:	9301      	str	r3, [sp, #4]
 80028ae:	69ab      	ldr	r3, [r5, #24]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028b0:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028b4:	9301      	str	r3, [sp, #4]
 80028b6:	9b01      	ldr	r3, [sp, #4]
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80028b8:	686b      	ldr	r3, [r5, #4]
    hi2c->XferSize    = hi2c->XferCount;
 80028ba:	8522      	strh	r2, [r4, #40]	; 0x28
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80028bc:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80028c0:	606b      	str	r3, [r5, #4]
  }
  else
  {
    return HAL_BUSY;
  }
}
 80028c2:	b003      	add	sp, #12
 80028c4:	bd30      	pop	{r4, r5, pc}
      return  HAL_ERROR;
 80028c6:	2001      	movs	r0, #1
 80028c8:	e7fb      	b.n	80028c2 <HAL_I2C_Slave_Seq_Transmit_IT+0x6a>
    return HAL_BUSY;
 80028ca:	2002      	movs	r0, #2
 80028cc:	e7f9      	b.n	80028c2 <HAL_I2C_Slave_Seq_Transmit_IT+0x6a>

080028ce <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 80028ce:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80028d0:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80028d2:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
 80028d6:	f000 0028 	and.w	r0, r0, #40	; 0x28
 80028da:	2828      	cmp	r0, #40	; 0x28
 80028dc:	d130      	bne.n	8002940 <HAL_I2C_Slave_Seq_Receive_IT+0x72>
  {
    if ((pData == NULL) || (Size == 0U))
 80028de:	2900      	cmp	r1, #0
 80028e0:	d02c      	beq.n	800293c <HAL_I2C_Slave_Seq_Receive_IT+0x6e>
 80028e2:	2a00      	cmp	r2, #0
 80028e4:	d02a      	beq.n	800293c <HAL_I2C_Slave_Seq_Receive_IT+0x6e>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028e6:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
 80028ea:	2801      	cmp	r0, #1
 80028ec:	d028      	beq.n	8002940 <HAL_I2C_Slave_Seq_Receive_IT+0x72>

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80028ee:	6825      	ldr	r5, [r4, #0]
 80028f0:	6828      	ldr	r0, [r5, #0]
 80028f2:	07c0      	lsls	r0, r0, #31
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80028f4:	bf5e      	ittt	pl
 80028f6:	6828      	ldrpl	r0, [r5, #0]
 80028f8:	f040 0001 	orrpl.w	r0, r0, #1
 80028fc:	6028      	strpl	r0, [r5, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028fe:	6828      	ldr	r0, [r5, #0]
 8002900:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
 8002904:	6028      	str	r0, [r5, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8002906:	202a      	movs	r0, #42	; 0x2a
 8002908:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800290c:	2020      	movs	r0, #32
 800290e:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002912:	2000      	movs	r0, #0
 8002914:	6420      	str	r0, [r4, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
    hi2c->XferCount   = Size;
 8002916:	8562      	strh	r2, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002918:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->XferOptions = XferOptions;
 800291a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800291c:	9001      	str	r0, [sp, #4]
 800291e:	696b      	ldr	r3, [r5, #20]
    hi2c->pBuffPtr    = pData;
 8002920:	6261      	str	r1, [r4, #36]	; 0x24
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002922:	9301      	str	r3, [sp, #4]
 8002924:	69ab      	ldr	r3, [r5, #24]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002926:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800292a:	9301      	str	r3, [sp, #4]
 800292c:	9b01      	ldr	r3, [sp, #4]
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800292e:	686b      	ldr	r3, [r5, #4]
    hi2c->XferSize    = hi2c->XferCount;
 8002930:	8522      	strh	r2, [r4, #40]	; 0x28
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002932:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002936:	606b      	str	r3, [r5, #4]
  }
  else
  {
    return HAL_BUSY;
  }
}
 8002938:	b003      	add	sp, #12
 800293a:	bd30      	pop	{r4, r5, pc}
      return  HAL_ERROR;
 800293c:	2001      	movs	r0, #1
 800293e:	e7fb      	b.n	8002938 <HAL_I2C_Slave_Seq_Receive_IT+0x6a>
    return HAL_BUSY;
 8002940:	2002      	movs	r0, #2
 8002942:	e7f9      	b.n	8002938 <HAL_I2C_Slave_Seq_Receive_IT+0x6a>

08002944 <HAL_I2C_EnableListen_IT>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002944:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002948:	2b20      	cmp	r3, #32
 800294a:	d114      	bne.n	8002976 <HAL_I2C_EnableListen_IT+0x32>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800294c:	2328      	movs	r3, #40	; 0x28
 800294e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002952:	6803      	ldr	r3, [r0, #0]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);

    return HAL_OK;
 8002954:	2000      	movs	r0, #0
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 800295a:	bf5e      	ittt	pl
 800295c:	681a      	ldrpl	r2, [r3, #0]
 800295e:	f042 0201 	orrpl.w	r2, r2, #1
 8002962:	601a      	strpl	r2, [r3, #0]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800296a:	601a      	str	r2, [r3, #0]
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800296c:	685a      	ldr	r2, [r3, #4]
 800296e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002972:	605a      	str	r2, [r3, #4]
    return HAL_OK;
 8002974:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8002976:	2002      	movs	r0, #2
  }
}
 8002978:	4770      	bx	lr

0800297a <HAL_I2C_MasterTxCpltCallback>:
 800297a:	4770      	bx	lr

0800297c <HAL_I2C_MasterRxCpltCallback>:
 800297c:	4770      	bx	lr

0800297e <HAL_I2C_SlaveTxCpltCallback>:
 800297e:	4770      	bx	lr

08002980 <HAL_I2C_MemTxCpltCallback>:
 8002980:	4770      	bx	lr

08002982 <I2C_MemoryTransmit_TXE_BTF>:
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002982:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
{
 8002986:	b508      	push	{r3, lr}

  if (hi2c->EventCount == 0U)
 8002988:	6d03      	ldr	r3, [r0, #80]	; 0x50
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800298a:	b2d2      	uxtb	r2, r2
  if (hi2c->EventCount == 0U)
 800298c:	b983      	cbnz	r3, 80029b0 <I2C_MemoryTransmit_TXE_BTF+0x2e>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800298e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002990:	6802      	ldr	r2, [r0, #0]
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002992:	2b01      	cmp	r3, #1
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002994:	6c83      	ldr	r3, [r0, #72]	; 0x48
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002996:	d105      	bne.n	80029a4 <I2C_MemoryTransmit_TXE_BTF+0x22>
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002998:	b2db      	uxtb	r3, r3
 800299a:	6113      	str	r3, [r2, #16]

      hi2c->EventCount += 2U;
 800299c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800299e:	3302      	adds	r3, #2
    else
    {
      /* Send MSB of Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);

      hi2c->EventCount++;
 80029a0:	6503      	str	r3, [r0, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 80029a2:	bd08      	pop	{r3, pc}
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80029a4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80029a8:	6113      	str	r3, [r2, #16]
      hi2c->EventCount++;
 80029aa:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80029ac:	3301      	adds	r3, #1
 80029ae:	e7f7      	b.n	80029a0 <I2C_MemoryTransmit_TXE_BTF+0x1e>
  else if (hi2c->EventCount == 1U)
 80029b0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d103      	bne.n	80029be <I2C_MemoryTransmit_TXE_BTF+0x3c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80029b6:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80029b8:	6802      	ldr	r2, [r0, #0]
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	e7f4      	b.n	80029a8 <I2C_MemoryTransmit_TXE_BTF+0x26>
  else if (hi2c->EventCount == 2U)
 80029be:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d12f      	bne.n	8002a24 <I2C_MemoryTransmit_TXE_BTF+0xa2>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80029c4:	2a22      	cmp	r2, #34	; 0x22
 80029c6:	d105      	bne.n	80029d4 <I2C_MemoryTransmit_TXE_BTF+0x52>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80029c8:	6802      	ldr	r2, [r0, #0]
 80029ca:	6813      	ldr	r3, [r2, #0]
 80029cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029d0:	6013      	str	r3, [r2, #0]
      hi2c->EventCount++;
 80029d2:	e7ea      	b.n	80029aa <I2C_MemoryTransmit_TXE_BTF+0x28>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80029d4:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	b163      	cbz	r3, 80029f4 <I2C_MemoryTransmit_TXE_BTF+0x72>
 80029da:	2a21      	cmp	r2, #33	; 0x21
 80029dc:	d10a      	bne.n	80029f4 <I2C_MemoryTransmit_TXE_BTF+0x72>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029de:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80029e0:	6802      	ldr	r2, [r0, #0]
 80029e2:	f813 1b01 	ldrb.w	r1, [r3], #1
 80029e6:	6111      	str	r1, [r2, #16]
      hi2c->pBuffPtr++;
 80029e8:	6243      	str	r3, [r0, #36]	; 0x24
      hi2c->XferCount--;
 80029ea:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80029ec:	3b01      	subs	r3, #1
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	8543      	strh	r3, [r0, #42]	; 0x2a
 80029f2:	e7d6      	b.n	80029a2 <I2C_MemoryTransmit_TXE_BTF+0x20>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80029f4:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d1d2      	bne.n	80029a2 <I2C_MemoryTransmit_TXE_BTF+0x20>
 80029fc:	2a21      	cmp	r2, #33	; 0x21
 80029fe:	d1d0      	bne.n	80029a2 <I2C_MemoryTransmit_TXE_BTF+0x20>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a00:	6802      	ldr	r2, [r0, #0]
 8002a02:	6851      	ldr	r1, [r2, #4]
 8002a04:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8002a08:	6051      	str	r1, [r2, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a0a:	6811      	ldr	r1, [r2, #0]
 8002a0c:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8002a10:	6011      	str	r1, [r2, #0]
      hi2c->State = HAL_I2C_STATE_READY;
 8002a12:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 8002a14:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002a16:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a1a:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002a1e:	f7ff ffaf 	bl	8002980 <HAL_I2C_MemTxCpltCallback>
 8002a22:	e7be      	b.n	80029a2 <I2C_MemoryTransmit_TXE_BTF+0x20>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8002a24:	6803      	ldr	r3, [r0, #0]
 8002a26:	695a      	ldr	r2, [r3, #20]
 8002a28:	0612      	lsls	r2, r2, #24
    hi2c->Instance->DR = 0x00U;
 8002a2a:	bf44      	itt	mi
 8002a2c:	2200      	movmi	r2, #0
 8002a2e:	611a      	strmi	r2, [r3, #16]
}
 8002a30:	e7b7      	b.n	80029a2 <I2C_MemoryTransmit_TXE_BTF+0x20>

08002a32 <HAL_I2C_MemRxCpltCallback>:
 8002a32:	4770      	bx	lr

08002a34 <HAL_I2C_AbortCpltCallback>:
 8002a34:	4770      	bx	lr
	...

08002a38 <I2C_DMAAbort>:
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
  __IO uint32_t count = 0U;
 8002a38:	2300      	movs	r3, #0
{
 8002a3a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002a3c:	f246 11a8 	movw	r1, #25000	; 0x61a8
  __IO uint32_t count = 0U;
 8002a40:	9301      	str	r3, [sp, #4]
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002a42:	4b2c      	ldr	r3, [pc, #176]	; (8002af4 <I2C_DMAAbort+0xbc>)
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002a44:	6a40      	ldr	r0, [r0, #36]	; 0x24
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002a46:	681b      	ldr	r3, [r3, #0]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002a48:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002a4c:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a50:	2123      	movs	r1, #35	; 0x23
 8002a52:	434b      	muls	r3, r1
 8002a54:	9301      	str	r3, [sp, #4]
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
      break;
    }
    count--;
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002a56:	6803      	ldr	r3, [r0, #0]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002a58:	b2d2      	uxtb	r2, r2
    if (count == 0U)
 8002a5a:	9901      	ldr	r1, [sp, #4]
 8002a5c:	bb41      	cbnz	r1, 8002ab0 <I2C_DMAAbort+0x78>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a5e:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002a60:	f041 0120 	orr.w	r1, r1, #32
 8002a64:	6401      	str	r1, [r0, #64]	; 0x40

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8002a66:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002a68:	b10c      	cbz	r4, 8002a6e <I2C_DMAAbort+0x36>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8002a6a:	2100      	movs	r1, #0
 8002a6c:	62a1      	str	r1, [r4, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8002a6e:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8002a70:	b109      	cbz	r1, 8002a76 <I2C_DMAAbort+0x3e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8002a72:	2500      	movs	r5, #0
 8002a74:	628d      	str	r5, [r1, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a76:	681d      	ldr	r5, [r3, #0]
 8002a78:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
 8002a7c:	601d      	str	r5, [r3, #0]

  hi2c->XferCount = 0U;
 8002a7e:	2500      	movs	r5, #0
 8002a80:	8545      	strh	r5, [r0, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8002a82:	b104      	cbz	r4, 8002a86 <I2C_DMAAbort+0x4e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002a84:	6365      	str	r5, [r4, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8002a86:	b101      	cbz	r1, 8002a8a <I2C_DMAAbort+0x52>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002a88:	634d      	str	r5, [r1, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8002a8a:	6819      	ldr	r1, [r3, #0]
 8002a8c:	f021 0101 	bic.w	r1, r1, #1
 8002a90:	6019      	str	r1, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002a92:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
 8002a96:	2960      	cmp	r1, #96	; 0x60
 8002a98:	d111      	bne.n	8002abe <I2C_DMAAbort+0x86>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002a9a:	2320      	movs	r3, #32
 8002a9c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002aa6:	6403      	str	r3, [r0, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002aa8:	f7ff ffc4 	bl	8002a34 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002aac:	b003      	add	sp, #12
 8002aae:	bd30      	pop	{r4, r5, pc}
    count--;
 8002ab0:	9901      	ldr	r1, [sp, #4]
 8002ab2:	3901      	subs	r1, #1
 8002ab4:	9101      	str	r1, [sp, #4]
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002ab6:	6819      	ldr	r1, [r3, #0]
 8002ab8:	0589      	lsls	r1, r1, #22
 8002aba:	d4ce      	bmi.n	8002a5a <I2C_DMAAbort+0x22>
 8002abc:	e7d3      	b.n	8002a66 <I2C_DMAAbort+0x2e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002abe:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8002ac2:	2a28      	cmp	r2, #40	; 0x28
 8002ac4:	d10e      	bne.n	8002ae4 <I2C_DMAAbort+0xac>
      __HAL_I2C_ENABLE(hi2c);
 8002ac6:	6819      	ldr	r1, [r3, #0]
 8002ac8:	f041 0101 	orr.w	r1, r1, #1
 8002acc:	6019      	str	r1, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ace:	6819      	ldr	r1, [r3, #0]
 8002ad0:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8002ad4:	6019      	str	r1, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002ada:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    HAL_I2C_ErrorCallback(hi2c);
 8002ade:	f7fe feb1 	bl	8001844 <HAL_I2C_ErrorCallback>
}
 8002ae2:	e7e3      	b.n	8002aac <I2C_DMAAbort+0x74>
      hi2c->State = HAL_I2C_STATE_READY;
 8002ae4:	2320      	movs	r3, #32
 8002ae6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aea:	2300      	movs	r3, #0
 8002aec:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 8002af0:	e7f5      	b.n	8002ade <I2C_DMAAbort+0xa6>
 8002af2:	bf00      	nop
 8002af4:	20000004 	.word	0x20000004

08002af8 <I2C_ITError>:
{
 8002af8:	b510      	push	{r4, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002afa:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8002afe:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
{
 8002b02:	4604      	mov	r4, r0
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002b04:	2b10      	cmp	r3, #16
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8002b06:	b2d9      	uxtb	r1, r3
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002b08:	b2d2      	uxtb	r2, r2
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002b0a:	6803      	ldr	r3, [r0, #0]
 8002b0c:	d001      	beq.n	8002b12 <I2C_ITError+0x1a>
 8002b0e:	2940      	cmp	r1, #64	; 0x40
 8002b10:	d113      	bne.n	8002b3a <I2C_ITError+0x42>
 8002b12:	2a22      	cmp	r2, #34	; 0x22
 8002b14:	d111      	bne.n	8002b3a <I2C_ITError+0x42>
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002b16:	6819      	ldr	r1, [r3, #0]
 8002b18:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8002b1c:	6019      	str	r1, [r3, #0]
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8002b1e:	6859      	ldr	r1, [r3, #4]
 8002b20:	f411 6100 	ands.w	r1, r1, #2048	; 0x800
 8002b24:	d106      	bne.n	8002b34 <I2C_ITError+0x3c>
 8002b26:	2a60      	cmp	r2, #96	; 0x60
      hi2c->State = HAL_I2C_STATE_READY;
 8002b28:	bf1e      	ittt	ne
 8002b2a:	2220      	movne	r2, #32
 8002b2c:	f884 203d 	strbne.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b30:	f884 103e 	strbne.w	r1, [r4, #62]	; 0x3e
    hi2c->PreviousState = I2C_STATE_NONE;
 8002b34:	2200      	movs	r2, #0
 8002b36:	6322      	str	r2, [r4, #48]	; 0x30
 8002b38:	e007      	b.n	8002b4a <I2C_ITError+0x52>
  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002b3a:	f002 0128 	and.w	r1, r2, #40	; 0x28
 8002b3e:	2928      	cmp	r1, #40	; 0x28
 8002b40:	d1ed      	bne.n	8002b1e <I2C_ITError+0x26>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002b42:	2200      	movs	r2, #0
 8002b44:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002b46:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002b4a:	685a      	ldr	r2, [r3, #4]
 8002b4c:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 8002b50:	d04f      	beq.n	8002bf2 <I2C_ITError+0xfa>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002b52:	685a      	ldr	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002b54:	6b60      	ldr	r0, [r4, #52]	; 0x34
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002b56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b5a:	605a      	str	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002b5c:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	4b37      	ldr	r3, [pc, #220]	; (8002c40 <I2C_ITError+0x148>)
 8002b64:	d02b      	beq.n	8002bbe <I2C_ITError+0xc6>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002b66:	6343      	str	r3, [r0, #52]	; 0x34
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002b68:	f7ff fca0 	bl	80024ac <HAL_DMA_Abort_IT>
 8002b6c:	b150      	cbz	r0, 8002b84 <I2C_ITError+0x8c>
        __HAL_I2C_DISABLE(hi2c);
 8002b6e:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002b70:	6b60      	ldr	r0, [r4, #52]	; 0x34
        __HAL_I2C_DISABLE(hi2c);
 8002b72:	6813      	ldr	r3, [r2, #0]
 8002b74:	f023 0301 	bic.w	r3, r3, #1
 8002b78:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8002b7a:	2320      	movs	r3, #32
 8002b7c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002b80:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002b82:	4798      	blx	r3
  CurrentError = hi2c->ErrorCode;
 8002b84:	6c23      	ldr	r3, [r4, #64]	; 0x40
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002b86:	0719      	lsls	r1, r3, #28
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002b88:	bf1f      	itttt	ne
 8002b8a:	6822      	ldrne	r2, [r4, #0]
 8002b8c:	6853      	ldrne	r3, [r2, #4]
 8002b8e:	f423 63e0 	bicne.w	r3, r3, #1792	; 0x700
 8002b92:	6053      	strne	r3, [r2, #4]
  CurrentState = hi2c->State;
 8002b94:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002b98:	6c22      	ldr	r2, [r4, #64]	; 0x40
  CurrentState = hi2c->State;
 8002b9a:	b2db      	uxtb	r3, r3
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002b9c:	0752      	lsls	r2, r2, #29
 8002b9e:	d50d      	bpl.n	8002bbc <I2C_ITError+0xc4>
 8002ba0:	2b28      	cmp	r3, #40	; 0x28
 8002ba2:	d10b      	bne.n	8002bbc <I2C_ITError+0xc4>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002ba4:	4b27      	ldr	r3, [pc, #156]	; (8002c44 <I2C_ITError+0x14c>)
    hi2c->State         = HAL_I2C_STATE_READY;
 8002ba6:	2220      	movs	r2, #32
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002ba8:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8002baa:	2300      	movs	r3, #0
    HAL_I2C_ListenCpltCallback(hi2c);
 8002bac:	4620      	mov	r0, r4
    hi2c->PreviousState = I2C_STATE_NONE;
 8002bae:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002bb0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002bb4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8002bb8:	f7fe fdee 	bl	8001798 <HAL_I2C_ListenCpltCallback>
}
 8002bbc:	bd10      	pop	{r4, pc}
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002bbe:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002bc0:	6343      	str	r3, [r0, #52]	; 0x34
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002bc2:	f7ff fc73 	bl	80024ac <HAL_DMA_Abort_IT>
 8002bc6:	2800      	cmp	r0, #0
 8002bc8:	d0dc      	beq.n	8002b84 <I2C_ITError+0x8c>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002bca:	6823      	ldr	r3, [r4, #0]
 8002bcc:	695a      	ldr	r2, [r3, #20]
 8002bce:	0651      	lsls	r1, r2, #25
 8002bd0:	d505      	bpl.n	8002bde <I2C_ITError+0xe6>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bd2:	691a      	ldr	r2, [r3, #16]
 8002bd4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002bd6:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8002bd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002bda:	3301      	adds	r3, #1
 8002bdc:	6263      	str	r3, [r4, #36]	; 0x24
        __HAL_I2C_DISABLE(hi2c);
 8002bde:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002be0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        __HAL_I2C_DISABLE(hi2c);
 8002be2:	6813      	ldr	r3, [r2, #0]
 8002be4:	f023 0301 	bic.w	r3, r3, #1
 8002be8:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8002bea:	2320      	movs	r3, #32
 8002bec:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002bf0:	e7c6      	b.n	8002b80 <I2C_ITError+0x88>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002bf2:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8002bf6:	2960      	cmp	r1, #96	; 0x60
 8002bf8:	d115      	bne.n	8002c26 <I2C_ITError+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8002bfa:	2120      	movs	r1, #32
 8002bfc:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c00:	6422      	str	r2, [r4, #64]	; 0x40
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002c02:	695a      	ldr	r2, [r3, #20]
 8002c04:	0652      	lsls	r2, r2, #25
 8002c06:	d505      	bpl.n	8002c14 <I2C_ITError+0x11c>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c08:	691a      	ldr	r2, [r3, #16]
 8002c0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002c0c:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8002c0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002c10:	3301      	adds	r3, #1
 8002c12:	6263      	str	r3, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE(hi2c);
 8002c14:	6822      	ldr	r2, [r4, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8002c16:	4620      	mov	r0, r4
    __HAL_I2C_DISABLE(hi2c);
 8002c18:	6813      	ldr	r3, [r2, #0]
 8002c1a:	f023 0301 	bic.w	r3, r3, #1
 8002c1e:	6013      	str	r3, [r2, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8002c20:	f7ff ff08 	bl	8002a34 <HAL_I2C_AbortCpltCallback>
 8002c24:	e7ae      	b.n	8002b84 <I2C_ITError+0x8c>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002c26:	695a      	ldr	r2, [r3, #20]
 8002c28:	0650      	lsls	r0, r2, #25
 8002c2a:	d505      	bpl.n	8002c38 <I2C_ITError+0x140>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c2c:	691a      	ldr	r2, [r3, #16]
 8002c2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002c30:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8002c32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002c34:	3301      	adds	r3, #1
 8002c36:	6263      	str	r3, [r4, #36]	; 0x24
    HAL_I2C_ErrorCallback(hi2c);
 8002c38:	4620      	mov	r0, r4
 8002c3a:	f7fe fe03 	bl	8001844 <HAL_I2C_ErrorCallback>
 8002c3e:	e7a1      	b.n	8002b84 <I2C_ITError+0x8c>
 8002c40:	08002a39 	.word	0x08002a39
 8002c44:	ffff0000 	.word	0xffff0000

08002c48 <HAL_I2C_EV_IRQHandler>:
{
 8002c48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c4a:	4604      	mov	r4, r0
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002c4c:	6803      	ldr	r3, [r0, #0]
{
 8002c4e:	b08f      	sub	sp, #60	; 0x3c
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002c50:	685a      	ldr	r2, [r3, #4]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002c52:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002c54:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c58:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002c5c:	2810      	cmp	r0, #16
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002c5e:	b2c5      	uxtb	r5, r0
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c60:	b2c9      	uxtb	r1, r1
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002c62:	d002      	beq.n	8002c6a <HAL_I2C_EV_IRQHandler+0x22>
 8002c64:	2d40      	cmp	r5, #64	; 0x40
 8002c66:	f040 82d5 	bne.w	8003214 <HAL_I2C_EV_IRQHandler+0x5cc>
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002c6a:	699f      	ldr	r7, [r3, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002c6c:	6958      	ldr	r0, [r3, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002c6e:	f010 0f01 	tst.w	r0, #1
 8002c72:	d107      	bne.n	8002c84 <HAL_I2C_EV_IRQHandler+0x3c>
 8002c74:	f5b6 0f2a 	cmp.w	r6, #11141120	; 0xaa0000
 8002c78:	d002      	beq.n	8002c80 <HAL_I2C_EV_IRQHandler+0x38>
 8002c7a:	f1b6 4f2a 	cmp.w	r6, #2852126720	; 0xaa000000
 8002c7e:	d151      	bne.n	8002d24 <HAL_I2C_EV_IRQHandler+0xdc>
}
 8002c80:	b00f      	add	sp, #60	; 0x3c
 8002c82:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c84:	0596      	lsls	r6, r2, #22
 8002c86:	d54d      	bpl.n	8002d24 <HAL_I2C_EV_IRQHandler+0xdc>
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8002c88:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002c8a:	f5b2 0f2a 	cmp.w	r2, #11141120	; 0xaa0000
 8002c8e:	d10c      	bne.n	8002caa <HAL_I2C_EV_IRQHandler+0x62>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8002c90:	2201      	movs	r2, #1
  /* it request implicitly to generate a restart condition    */
  /* then generate a stop condition at the end of transfer    */
  /* set XferOptions to I2C_FIRST_AND_LAST_FRAME              */
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
  {
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8002c92:	62e2      	str	r2, [r4, #44]	; 0x2c
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002c94:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8002c98:	2a40      	cmp	r2, #64	; 0x40
 8002c9a:	d111      	bne.n	8002cc0 <HAL_I2C_EV_IRQHandler+0x78>
    if (hi2c->EventCount == 0U)
 8002c9c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8002c9e:	b952      	cbnz	r2, 8002cb6 <HAL_I2C_EV_IRQHandler+0x6e>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002ca0:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002ca2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002ca6:	611a      	str	r2, [r3, #16]
 8002ca8:	e7ea      	b.n	8002c80 <HAL_I2C_EV_IRQHandler+0x38>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8002caa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002cac:	f1b2 4f2a 	cmp.w	r2, #2852126720	; 0xaa000000
 8002cb0:	d1f0      	bne.n	8002c94 <HAL_I2C_EV_IRQHandler+0x4c>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8002cb2:	2208      	movs	r2, #8
 8002cb4:	e7ed      	b.n	8002c92 <HAL_I2C_EV_IRQHandler+0x4a>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002cb6:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002cb8:	f042 0201 	orr.w	r2, r2, #1
 8002cbc:	b2d2      	uxtb	r2, r2
 8002cbe:	e7f2      	b.n	8002ca6 <HAL_I2C_EV_IRQHandler+0x5e>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002cc0:	6922      	ldr	r2, [r4, #16]
 8002cc2:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8002cc6:	d11a      	bne.n	8002cfe <HAL_I2C_EV_IRQHandler+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002cc8:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8002ccc:	2a21      	cmp	r2, #33	; 0x21
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002cce:	6c62      	ldr	r2, [r4, #68]	; 0x44
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002cd0:	d111      	bne.n	8002cf6 <HAL_I2C_EV_IRQHandler+0xae>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002cd2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002cd6:	611a      	str	r2, [r3, #16]
  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002cd8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8002cda:	b10a      	cbz	r2, 8002ce0 <HAL_I2C_EV_IRQHandler+0x98>
 8002cdc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002cde:	b92a      	cbnz	r2, 8002cec <HAL_I2C_EV_IRQHandler+0xa4>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002ce0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002ce2:	2a00      	cmp	r2, #0
 8002ce4:	d0cc      	beq.n	8002c80 <HAL_I2C_EV_IRQHandler+0x38>
 8002ce6:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002ce8:	2a00      	cmp	r2, #0
 8002cea:	d0c9      	beq.n	8002c80 <HAL_I2C_EV_IRQHandler+0x38>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002cec:	685a      	ldr	r2, [r3, #4]
 8002cee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002cf2:	605a      	str	r2, [r3, #4]
 8002cf4:	e7c4      	b.n	8002c80 <HAL_I2C_EV_IRQHandler+0x38>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002cf6:	f042 0201 	orr.w	r2, r2, #1
 8002cfa:	b2d2      	uxtb	r2, r2
 8002cfc:	e7eb      	b.n	8002cd6 <HAL_I2C_EV_IRQHandler+0x8e>
      if (hi2c->EventCount == 0U)
 8002cfe:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8002d00:	b932      	cbnz	r2, 8002d10 <HAL_I2C_EV_IRQHandler+0xc8>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002d02:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002d04:	11d2      	asrs	r2, r2, #7
 8002d06:	f002 0206 	and.w	r2, r2, #6
 8002d0a:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
 8002d0e:	e7ca      	b.n	8002ca6 <HAL_I2C_EV_IRQHandler+0x5e>
      else if (hi2c->EventCount == 1U)
 8002d10:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8002d12:	2a01      	cmp	r2, #1
 8002d14:	d1b4      	bne.n	8002c80 <HAL_I2C_EV_IRQHandler+0x38>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002d16:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002d18:	11d2      	asrs	r2, r2, #7
 8002d1a:	f002 0206 	and.w	r2, r2, #6
 8002d1e:	f042 02f1 	orr.w	r2, r2, #241	; 0xf1
 8002d22:	e7c0      	b.n	8002ca6 <HAL_I2C_EV_IRQHandler+0x5e>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d24:	0706      	lsls	r6, r0, #28
 8002d26:	d503      	bpl.n	8002d30 <HAL_I2C_EV_IRQHandler+0xe8>
 8002d28:	0596      	lsls	r6, r2, #22
 8002d2a:	d501      	bpl.n	8002d30 <HAL_I2C_EV_IRQHandler+0xe8>
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002d2c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002d2e:	e7e4      	b.n	8002cfa <HAL_I2C_EV_IRQHandler+0xb2>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d30:	0786      	lsls	r6, r0, #30
 8002d32:	f140 80f0 	bpl.w	8002f16 <HAL_I2C_EV_IRQHandler+0x2ce>
 8002d36:	0596      	lsls	r6, r2, #22
 8002d38:	f140 80ed 	bpl.w	8002f16 <HAL_I2C_EV_IRQHandler+0x2ce>
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002d3c:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002d40:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002d42:	6b25      	ldr	r5, [r4, #48]	; 0x30
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002d44:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002d48:	b2c9      	uxtb	r1, r1
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002d4a:	2822      	cmp	r0, #34	; 0x22
 8002d4c:	f040 80db 	bne.w	8002f06 <HAL_I2C_EV_IRQHandler+0x2be>
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002d50:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8002d52:	b940      	cbnz	r0, 8002d66 <HAL_I2C_EV_IRQHandler+0x11e>
 8002d54:	2940      	cmp	r1, #64	; 0x40
 8002d56:	d106      	bne.n	8002d66 <HAL_I2C_EV_IRQHandler+0x11e>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d58:	9000      	str	r0, [sp, #0]
 8002d5a:	695a      	ldr	r2, [r3, #20]
 8002d5c:	9200      	str	r2, [sp, #0]
 8002d5e:	699b      	ldr	r3, [r3, #24]
 8002d60:	9300      	str	r3, [sp, #0]
 8002d62:	9b00      	ldr	r3, [sp, #0]
 8002d64:	e78c      	b.n	8002c80 <HAL_I2C_EV_IRQHandler+0x38>
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002d66:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8002d68:	b989      	cbnz	r1, 8002d8e <HAL_I2C_EV_IRQHandler+0x146>
 8002d6a:	6920      	ldr	r0, [r4, #16]
 8002d6c:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
 8002d70:	d10d      	bne.n	8002d8e <HAL_I2C_EV_IRQHandler+0x146>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d72:	9101      	str	r1, [sp, #4]
 8002d74:	695a      	ldr	r2, [r3, #20]
 8002d76:	9201      	str	r2, [sp, #4]
 8002d78:	699a      	ldr	r2, [r3, #24]
 8002d7a:	9201      	str	r2, [sp, #4]
 8002d7c:	9a01      	ldr	r2, [sp, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d84:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002d86:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002d88:	3301      	adds	r3, #1
      hi2c->EventCount = 0U;
 8002d8a:	6523      	str	r3, [r4, #80]	; 0x50
 8002d8c:	e778      	b.n	8002c80 <HAL_I2C_EV_IRQHandler+0x38>
      if (hi2c->XferCount == 0U)
 8002d8e:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8002d90:	b289      	uxth	r1, r1
 8002d92:	b951      	cbnz	r1, 8002daa <HAL_I2C_EV_IRQHandler+0x162>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d94:	9102      	str	r1, [sp, #8]
 8002d96:	695a      	ldr	r2, [r3, #20]
 8002d98:	9202      	str	r2, [sp, #8]
 8002d9a:	699a      	ldr	r2, [r3, #24]
 8002d9c:	9202      	str	r2, [sp, #8]
 8002d9e:	9a02      	ldr	r2, [sp, #8]
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002da6:	601a      	str	r2, [r3, #0]
 8002da8:	e019      	b.n	8002dde <HAL_I2C_EV_IRQHandler+0x196>
      else if (hi2c->XferCount == 1U)
 8002daa:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8002dac:	b289      	uxth	r1, r1
 8002dae:	2901      	cmp	r1, #1
 8002db0:	d149      	bne.n	8002e46 <HAL_I2C_EV_IRQHandler+0x1fe>
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002db2:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8002db6:	d11b      	bne.n	8002df0 <HAL_I2C_EV_IRQHandler+0x1a8>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dbe:	601a      	str	r2, [r3, #0]
          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002dc0:	685a      	ldr	r2, [r3, #4]
 8002dc2:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 8002dc6:	d00c      	beq.n	8002de2 <HAL_I2C_EV_IRQHandler+0x19a>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dce:	601a      	str	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	9203      	str	r2, [sp, #12]
 8002dd4:	695a      	ldr	r2, [r3, #20]
 8002dd6:	9203      	str	r2, [sp, #12]
 8002dd8:	699b      	ldr	r3, [r3, #24]
 8002dda:	9303      	str	r3, [sp, #12]
 8002ddc:	9b03      	ldr	r3, [sp, #12]
      hi2c->EventCount = 0U;
 8002dde:	2300      	movs	r3, #0
 8002de0:	e7d3      	b.n	8002d8a <HAL_I2C_EV_IRQHandler+0x142>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002de2:	9204      	str	r2, [sp, #16]
 8002de4:	695a      	ldr	r2, [r3, #20]
 8002de6:	9204      	str	r2, [sp, #16]
 8002de8:	699a      	ldr	r2, [r3, #24]
 8002dea:	9204      	str	r2, [sp, #16]
 8002dec:	9a04      	ldr	r2, [sp, #16]
 8002dee:	e7d7      	b.n	8002da0 <HAL_I2C_EV_IRQHandler+0x158>
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002df0:	2a08      	cmp	r2, #8
 8002df2:	d01c      	beq.n	8002e2e <HAL_I2C_EV_IRQHandler+0x1e6>
 8002df4:	2a20      	cmp	r2, #32
 8002df6:	d01a      	beq.n	8002e2e <HAL_I2C_EV_IRQHandler+0x1e6>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002df8:	2d12      	cmp	r5, #18
 8002dfa:	d10d      	bne.n	8002e18 <HAL_I2C_EV_IRQHandler+0x1d0>
 8002dfc:	2a01      	cmp	r2, #1
 8002dfe:	d116      	bne.n	8002e2e <HAL_I2C_EV_IRQHandler+0x1e6>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e06:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e08:	2200      	movs	r2, #0
 8002e0a:	9205      	str	r2, [sp, #20]
 8002e0c:	695a      	ldr	r2, [r3, #20]
 8002e0e:	9205      	str	r2, [sp, #20]
 8002e10:	699b      	ldr	r3, [r3, #24]
 8002e12:	9305      	str	r3, [sp, #20]
 8002e14:	9b05      	ldr	r3, [sp, #20]
 8002e16:	e7e2      	b.n	8002dde <HAL_I2C_EV_IRQHandler+0x196>
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002e18:	2a10      	cmp	r2, #16
 8002e1a:	d8f1      	bhi.n	8002e00 <HAL_I2C_EV_IRQHandler+0x1b8>
 8002e1c:	4986      	ldr	r1, [pc, #536]	; (8003038 <HAL_I2C_EV_IRQHandler+0x3f0>)
 8002e1e:	fa21 f202 	lsr.w	r2, r1, r2
 8002e22:	07d7      	lsls	r7, r2, #31
 8002e24:	d5ec      	bpl.n	8002e00 <HAL_I2C_EV_IRQHandler+0x1b8>
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e2c:	e7eb      	b.n	8002e06 <HAL_I2C_EV_IRQHandler+0x1be>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e34:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e36:	2200      	movs	r2, #0
 8002e38:	9206      	str	r2, [sp, #24]
 8002e3a:	695a      	ldr	r2, [r3, #20]
 8002e3c:	9206      	str	r2, [sp, #24]
 8002e3e:	699a      	ldr	r2, [r3, #24]
 8002e40:	9206      	str	r2, [sp, #24]
 8002e42:	9a06      	ldr	r2, [sp, #24]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e44:	e7ac      	b.n	8002da0 <HAL_I2C_EV_IRQHandler+0x158>
      else if (hi2c->XferCount == 2U)
 8002e46:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8002e48:	b289      	uxth	r1, r1
 8002e4a:	2902      	cmp	r1, #2
 8002e4c:	d138      	bne.n	8002ec0 <HAL_I2C_EV_IRQHandler+0x278>
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002e4e:	2a10      	cmp	r2, #16
 8002e50:	d803      	bhi.n	8002e5a <HAL_I2C_EV_IRQHandler+0x212>
 8002e52:	4979      	ldr	r1, [pc, #484]	; (8003038 <HAL_I2C_EV_IRQHandler+0x3f0>)
 8002e54:	40d1      	lsrs	r1, r2
 8002e56:	07ce      	lsls	r6, r1, #31
 8002e58:	d418      	bmi.n	8002e8c <HAL_I2C_EV_IRQHandler+0x244>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e5a:	6819      	ldr	r1, [r3, #0]
 8002e5c:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8002e60:	6019      	str	r1, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e62:	2100      	movs	r1, #0
 8002e64:	9107      	str	r1, [sp, #28]
 8002e66:	6959      	ldr	r1, [r3, #20]
 8002e68:	9107      	str	r1, [sp, #28]
 8002e6a:	6999      	ldr	r1, [r3, #24]
 8002e6c:	9107      	str	r1, [sp, #28]
 8002e6e:	9907      	ldr	r1, [sp, #28]
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e70:	6819      	ldr	r1, [r3, #0]
 8002e72:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8002e76:	6019      	str	r1, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002e78:	6859      	ldr	r1, [r3, #4]
 8002e7a:	050d      	lsls	r5, r1, #20
 8002e7c:	d5af      	bpl.n	8002dde <HAL_I2C_EV_IRQHandler+0x196>
 8002e7e:	2a20      	cmp	r2, #32
 8002e80:	d81b      	bhi.n	8002eba <HAL_I2C_EV_IRQHandler+0x272>
 8002e82:	2a07      	cmp	r2, #7
 8002e84:	d80e      	bhi.n	8002ea4 <HAL_I2C_EV_IRQHandler+0x25c>
 8002e86:	2a01      	cmp	r2, #1
 8002e88:	d1a9      	bne.n	8002dde <HAL_I2C_EV_IRQHandler+0x196>
 8002e8a:	e011      	b.n	8002eb0 <HAL_I2C_EV_IRQHandler+0x268>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e8c:	6819      	ldr	r1, [r3, #0]
 8002e8e:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8002e92:	6019      	str	r1, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e94:	2100      	movs	r1, #0
 8002e96:	9108      	str	r1, [sp, #32]
 8002e98:	6959      	ldr	r1, [r3, #20]
 8002e9a:	9108      	str	r1, [sp, #32]
 8002e9c:	6999      	ldr	r1, [r3, #24]
 8002e9e:	9108      	str	r1, [sp, #32]
 8002ea0:	9908      	ldr	r1, [sp, #32]
 8002ea2:	e7e9      	b.n	8002e78 <HAL_I2C_EV_IRQHandler+0x230>
 8002ea4:	f1a2 0108 	sub.w	r1, r2, #8
 8002ea8:	4a64      	ldr	r2, [pc, #400]	; (800303c <HAL_I2C_EV_IRQHandler+0x3f4>)
 8002eaa:	40ca      	lsrs	r2, r1
 8002eac:	07d0      	lsls	r0, r2, #31
 8002eae:	d596      	bpl.n	8002dde <HAL_I2C_EV_IRQHandler+0x196>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002eb0:	685a      	ldr	r2, [r3, #4]
 8002eb2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002eb6:	605a      	str	r2, [r3, #4]
 8002eb8:	e791      	b.n	8002dde <HAL_I2C_EV_IRQHandler+0x196>
 8002eba:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8002ebe:	e7e3      	b.n	8002e88 <HAL_I2C_EV_IRQHandler+0x240>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ec0:	6819      	ldr	r1, [r3, #0]
 8002ec2:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8002ec6:	6019      	str	r1, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002ec8:	6859      	ldr	r1, [r3, #4]
 8002eca:	0509      	lsls	r1, r1, #20
 8002ecc:	d505      	bpl.n	8002eda <HAL_I2C_EV_IRQHandler+0x292>
 8002ece:	2a20      	cmp	r2, #32
 8002ed0:	d816      	bhi.n	8002f00 <HAL_I2C_EV_IRQHandler+0x2b8>
 8002ed2:	2a07      	cmp	r2, #7
 8002ed4:	d809      	bhi.n	8002eea <HAL_I2C_EV_IRQHandler+0x2a2>
 8002ed6:	2a01      	cmp	r2, #1
 8002ed8:	d00d      	beq.n	8002ef6 <HAL_I2C_EV_IRQHandler+0x2ae>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eda:	2200      	movs	r2, #0
 8002edc:	9209      	str	r2, [sp, #36]	; 0x24
 8002ede:	695a      	ldr	r2, [r3, #20]
 8002ee0:	9209      	str	r2, [sp, #36]	; 0x24
 8002ee2:	699b      	ldr	r3, [r3, #24]
 8002ee4:	9309      	str	r3, [sp, #36]	; 0x24
 8002ee6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ee8:	e779      	b.n	8002dde <HAL_I2C_EV_IRQHandler+0x196>
 8002eea:	f1a2 0108 	sub.w	r1, r2, #8
 8002eee:	4a53      	ldr	r2, [pc, #332]	; (800303c <HAL_I2C_EV_IRQHandler+0x3f4>)
 8002ef0:	40ca      	lsrs	r2, r1
 8002ef2:	07d2      	lsls	r2, r2, #31
 8002ef4:	d5f1      	bpl.n	8002eda <HAL_I2C_EV_IRQHandler+0x292>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002ef6:	685a      	ldr	r2, [r3, #4]
 8002ef8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002efc:	605a      	str	r2, [r3, #4]
 8002efe:	e7ec      	b.n	8002eda <HAL_I2C_EV_IRQHandler+0x292>
 8002f00:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8002f04:	e7e8      	b.n	8002ed8 <HAL_I2C_EV_IRQHandler+0x290>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f06:	2200      	movs	r2, #0
 8002f08:	920a      	str	r2, [sp, #40]	; 0x28
 8002f0a:	695a      	ldr	r2, [r3, #20]
 8002f0c:	920a      	str	r2, [sp, #40]	; 0x28
 8002f0e:	699b      	ldr	r3, [r3, #24]
 8002f10:	930a      	str	r3, [sp, #40]	; 0x28
 8002f12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002f14:	e6b4      	b.n	8002c80 <HAL_I2C_EV_IRQHandler+0x38>
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002f16:	077f      	lsls	r7, r7, #29
 8002f18:	f140 8092 	bpl.w	8003040 <HAL_I2C_EV_IRQHandler+0x3f8>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002f1c:	685e      	ldr	r6, [r3, #4]
 8002f1e:	0536      	lsls	r6, r6, #20
 8002f20:	f53f aeae 	bmi.w	8002c80 <HAL_I2C_EV_IRQHandler+0x38>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002f24:	0607      	lsls	r7, r0, #24
 8002f26:	f000 0604 	and.w	r6, r0, #4
 8002f2a:	d53e      	bpl.n	8002faa <HAL_I2C_EV_IRQHandler+0x362>
 8002f2c:	0550      	lsls	r0, r2, #21
 8002f2e:	d53c      	bpl.n	8002faa <HAL_I2C_EV_IRQHandler+0x362>
 8002f30:	2e00      	cmp	r6, #0
 8002f32:	d13d      	bne.n	8002fb0 <HAL_I2C_EV_IRQHandler+0x368>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002f34:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002f38:	8d25      	ldrh	r5, [r4, #40]	; 0x28
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002f3a:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002f3e:	b2d2      	uxtb	r2, r2
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002f40:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002f42:	b2c9      	uxtb	r1, r1
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002f44:	b9c5      	cbnz	r5, 8002f78 <HAL_I2C_EV_IRQHandler+0x330>
 8002f46:	2a21      	cmp	r2, #33	; 0x21
 8002f48:	d118      	bne.n	8002f7c <HAL_I2C_EV_IRQHandler+0x334>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002f4a:	2808      	cmp	r0, #8
 8002f4c:	d058      	beq.n	8003000 <HAL_I2C_EV_IRQHandler+0x3b8>
 8002f4e:	2820      	cmp	r0, #32
 8002f50:	d056      	beq.n	8003000 <HAL_I2C_EV_IRQHandler+0x3b8>
 8002f52:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 8002f56:	d053      	beq.n	8003000 <HAL_I2C_EV_IRQHandler+0x3b8>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f58:	685a      	ldr	r2, [r3, #4]
 8002f5a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002f5e:	605a      	str	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002f60:	2311      	movs	r3, #17
 8002f62:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f64:	2300      	movs	r3, #0
 8002f66:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002f6a:	2320      	movs	r3, #32
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002f6c:	4620      	mov	r0, r4
        hi2c->State = HAL_I2C_STATE_READY;
 8002f6e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002f72:	f7ff fd02 	bl	800297a <HAL_I2C_MasterTxCpltCallback>
 8002f76:	e683      	b.n	8002c80 <HAL_I2C_EV_IRQHandler+0x38>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002f78:	2a21      	cmp	r2, #33	; 0x21
 8002f7a:	d005      	beq.n	8002f88 <HAL_I2C_EV_IRQHandler+0x340>
 8002f7c:	2940      	cmp	r1, #64	; 0x40
 8002f7e:	f47f ae7f 	bne.w	8002c80 <HAL_I2C_EV_IRQHandler+0x38>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002f82:	2a22      	cmp	r2, #34	; 0x22
 8002f84:	f47f ae7c 	bne.w	8002c80 <HAL_I2C_EV_IRQHandler+0x38>
    if (hi2c->XferCount == 0U)
 8002f88:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002f8a:	b292      	uxth	r2, r2
 8002f8c:	b91a      	cbnz	r2, 8002f96 <HAL_I2C_EV_IRQHandler+0x34e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002f8e:	685a      	ldr	r2, [r3, #4]
 8002f90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f94:	e6ad      	b.n	8002cf2 <HAL_I2C_EV_IRQHandler+0xaa>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002f96:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8002f9a:	2a40      	cmp	r2, #64	; 0x40
 8002f9c:	d116      	bne.n	8002fcc <HAL_I2C_EV_IRQHandler+0x384>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002f9e:	4620      	mov	r0, r4
}
 8002fa0:	b00f      	add	sp, #60	; 0x3c
 8002fa2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002fa6:	f7ff bcec 	b.w	8002982 <I2C_MemoryTransmit_TXE_BTF>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002faa:	2e00      	cmp	r6, #0
 8002fac:	f43f ae68 	beq.w	8002c80 <HAL_I2C_EV_IRQHandler+0x38>
 8002fb0:	0597      	lsls	r7, r2, #22
 8002fb2:	f57f ae65 	bpl.w	8002c80 <HAL_I2C_EV_IRQHandler+0x38>
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002fb6:	2921      	cmp	r1, #33	; 0x21
 8002fb8:	d139      	bne.n	800302e <HAL_I2C_EV_IRQHandler+0x3e6>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002fba:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002fbc:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8002fc0:	2a21      	cmp	r2, #33	; 0x21
 8002fc2:	f47f ae5d 	bne.w	8002c80 <HAL_I2C_EV_IRQHandler+0x38>
    if (hi2c->XferCount != 0U)
 8002fc6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002fc8:	b292      	uxth	r2, r2
 8002fca:	b14a      	cbz	r2, 8002fe0 <HAL_I2C_EV_IRQHandler+0x398>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fcc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002fce:	f812 1b01 	ldrb.w	r1, [r2], #1
 8002fd2:	6119      	str	r1, [r3, #16]
    hi2c->pBuffPtr++;
 8002fd4:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8002fd6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002fd8:	3b01      	subs	r3, #1
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	8563      	strh	r3, [r4, #42]	; 0x2a
      }
 8002fde:	e64f      	b.n	8002c80 <HAL_I2C_EV_IRQHandler+0x38>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002fe0:	2908      	cmp	r1, #8
 8002fe2:	d00d      	beq.n	8003000 <HAL_I2C_EV_IRQHandler+0x3b8>
 8002fe4:	2920      	cmp	r1, #32
 8002fe6:	d00b      	beq.n	8003000 <HAL_I2C_EV_IRQHandler+0x3b8>
 8002fe8:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 8002fec:	d008      	beq.n	8003000 <HAL_I2C_EV_IRQHandler+0x3b8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002fee:	6859      	ldr	r1, [r3, #4]
 8002ff0:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8002ff4:	6059      	str	r1, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002ff6:	2311      	movs	r3, #17
 8002ff8:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ffa:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
 8002ffe:	e7b4      	b.n	8002f6a <HAL_I2C_EV_IRQHandler+0x322>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003000:	685a      	ldr	r2, [r3, #4]
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003002:	4620      	mov	r0, r4
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003004:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003008:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003010:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003012:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8003014:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8003016:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003018:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800301c:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003020:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003024:	2a40      	cmp	r2, #64	; 0x40
 8003026:	d1a4      	bne.n	8002f72 <HAL_I2C_EV_IRQHandler+0x32a>
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003028:	f7ff fcaa 	bl	8002980 <HAL_I2C_MemTxCpltCallback>
 800302c:	e628      	b.n	8002c80 <HAL_I2C_EV_IRQHandler+0x38>
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800302e:	2d40      	cmp	r5, #64	; 0x40
 8003030:	f47f ae26 	bne.w	8002c80 <HAL_I2C_EV_IRQHandler+0x38>
 8003034:	e7b3      	b.n	8002f9e <HAL_I2C_EV_IRQHandler+0x356>
 8003036:	bf00      	nop
 8003038:	00010014 	.word	0x00010014
 800303c:	01000101 	.word	0x01000101
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003040:	6859      	ldr	r1, [r3, #4]
 8003042:	050e      	lsls	r6, r1, #20
 8003044:	f53f ae1c 	bmi.w	8002c80 <HAL_I2C_EV_IRQHandler+0x38>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003048:	0645      	lsls	r5, r0, #25
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800304a:	f000 0104 	and.w	r1, r0, #4
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800304e:	d576      	bpl.n	800313e <HAL_I2C_EV_IRQHandler+0x4f6>
 8003050:	0550      	lsls	r0, r2, #21
 8003052:	d574      	bpl.n	800313e <HAL_I2C_EV_IRQHandler+0x4f6>
 8003054:	2900      	cmp	r1, #0
 8003056:	d175      	bne.n	8003144 <HAL_I2C_EV_IRQHandler+0x4fc>
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003058:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 800305c:	2a22      	cmp	r2, #34	; 0x22
 800305e:	f47f ae0f 	bne.w	8002c80 <HAL_I2C_EV_IRQHandler+0x38>
    tmp = hi2c->XferCount;
 8003062:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003064:	b292      	uxth	r2, r2
    if (tmp > 3U)
 8003066:	2a03      	cmp	r2, #3
 8003068:	d914      	bls.n	8003094 <HAL_I2C_EV_IRQHandler+0x44c>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800306a:	691a      	ldr	r2, [r3, #16]
 800306c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800306e:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8003070:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003072:	3301      	adds	r3, #1
 8003074:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003076:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003078:	3b01      	subs	r3, #1
 800307a:	b29b      	uxth	r3, r3
 800307c:	8563      	strh	r3, [r4, #42]	; 0x2a
      if (hi2c->XferCount == (uint16_t)3)
 800307e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003080:	b29b      	uxth	r3, r3
 8003082:	2b03      	cmp	r3, #3
 8003084:	f47f adfc 	bne.w	8002c80 <HAL_I2C_EV_IRQHandler+0x38>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003088:	6822      	ldr	r2, [r4, #0]
 800308a:	6853      	ldr	r3, [r2, #4]
 800308c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003090:	6053      	str	r3, [r2, #4]
 8003092:	e5f5      	b.n	8002c80 <HAL_I2C_EV_IRQHandler+0x38>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003094:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003096:	2802      	cmp	r0, #2
 8003098:	f43f af79 	beq.w	8002f8e <HAL_I2C_EV_IRQHandler+0x346>
 800309c:	2a01      	cmp	r2, #1
 800309e:	f63f af76 	bhi.w	8002f8e <HAL_I2C_EV_IRQHandler+0x346>
  __IO uint32_t count = 0U;
 80030a2:	910b      	str	r1, [sp, #44]	; 0x2c
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80030a4:	f246 11a8 	movw	r1, #25000	; 0x61a8
 80030a8:	4a73      	ldr	r2, [pc, #460]	; (8003278 <HAL_I2C_EV_IRQHandler+0x630>)
 80030aa:	6812      	ldr	r2, [r2, #0]
 80030ac:	fbb2 f2f1 	udiv	r2, r2, r1
 80030b0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80030b4:	920b      	str	r2, [sp, #44]	; 0x2c
    count--;
 80030b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80030b8:	3a01      	subs	r2, #1
 80030ba:	920b      	str	r2, [sp, #44]	; 0x2c
    if (count == 0U)
 80030bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80030be:	b9d1      	cbnz	r1, 80030f6 <HAL_I2C_EV_IRQHandler+0x4ae>
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030c0:	6c22      	ldr	r2, [r4, #64]	; 0x40
        HAL_I2C_ErrorCallback(hi2c);
 80030c2:	4620      	mov	r0, r4
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030c4:	f042 0220 	orr.w	r2, r2, #32
 80030c8:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80030ca:	685a      	ldr	r2, [r3, #4]
 80030cc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80030d0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030d2:	691a      	ldr	r2, [r3, #16]
 80030d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80030d6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80030d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80030da:	3301      	adds	r3, #1
 80030dc:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 80030de:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80030e0:	3b01      	subs	r3, #1
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80030e6:	2320      	movs	r3, #32
 80030e8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80030ec:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80030f0:	f7fe fba8 	bl	8001844 <HAL_I2C_ErrorCallback>
 80030f4:	e5c4      	b.n	8002c80 <HAL_I2C_EV_IRQHandler+0x38>
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	f412 7200 	ands.w	r2, r2, #512	; 0x200
 80030fc:	d1db      	bne.n	80030b6 <HAL_I2C_EV_IRQHandler+0x46e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030fe:	6819      	ldr	r1, [r3, #0]
 8003100:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8003104:	6019      	str	r1, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003106:	6859      	ldr	r1, [r3, #4]
 8003108:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 800310c:	6059      	str	r1, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800310e:	6919      	ldr	r1, [r3, #16]
 8003110:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003112:	7019      	strb	r1, [r3, #0]
        hi2c->pBuffPtr++;
 8003114:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003116:	3301      	adds	r3, #1
 8003118:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 800311a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800311c:	3b01      	subs	r3, #1
 800311e:	b29b      	uxth	r3, r3
 8003120:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003122:	2320      	movs	r3, #32
 8003124:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003128:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800312c:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003130:	2b40      	cmp	r3, #64	; 0x40
 8003132:	d169      	bne.n	8003208 <HAL_I2C_EV_IRQHandler+0x5c0>
          hi2c->PreviousState = I2C_STATE_NONE;
 8003134:	6322      	str	r2, [r4, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003136:	4620      	mov	r0, r4
 8003138:	f7ff fc7b 	bl	8002a32 <HAL_I2C_MemRxCpltCallback>
 800313c:	e5a0      	b.n	8002c80 <HAL_I2C_EV_IRQHandler+0x38>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800313e:	2900      	cmp	r1, #0
 8003140:	f43f ad9e 	beq.w	8002c80 <HAL_I2C_EV_IRQHandler+0x38>
 8003144:	0592      	lsls	r2, r2, #22
 8003146:	f57f ad9b 	bpl.w	8002c80 <HAL_I2C_EV_IRQHandler+0x38>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800314a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  if (hi2c->XferCount == 4U)
 800314c:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800314e:	6a61      	ldr	r1, [r4, #36]	; 0x24
  if (hi2c->XferCount == 4U)
 8003150:	b280      	uxth	r0, r0
 8003152:	2804      	cmp	r0, #4
 8003154:	d109      	bne.n	800316a <HAL_I2C_EV_IRQHandler+0x522>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003156:	685a      	ldr	r2, [r3, #4]
 8003158:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800315c:	605a      	str	r2, [r3, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800315e:	691b      	ldr	r3, [r3, #16]
 8003160:	700b      	strb	r3, [r1, #0]
    hi2c->pBuffPtr++;
 8003162:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003164:	3301      	adds	r3, #1
 8003166:	6263      	str	r3, [r4, #36]	; 0x24
 8003168:	e735      	b.n	8002fd6 <HAL_I2C_EV_IRQHandler+0x38e>
  else if (hi2c->XferCount == 3U)
 800316a:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 800316c:	b280      	uxth	r0, r0
 800316e:	2803      	cmp	r0, #3
 8003170:	d10c      	bne.n	800318c <HAL_I2C_EV_IRQHandler+0x544>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003172:	6858      	ldr	r0, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003174:	2a04      	cmp	r2, #4
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003176:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
 800317a:	6058      	str	r0, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800317c:	d0ef      	beq.n	800315e <HAL_I2C_EV_IRQHandler+0x516>
 800317e:	2a02      	cmp	r2, #2
 8003180:	d0ed      	beq.n	800315e <HAL_I2C_EV_IRQHandler+0x516>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003188:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800318a:	e7e8      	b.n	800315e <HAL_I2C_EV_IRQHandler+0x516>
  else if (hi2c->XferCount == 2U)
 800318c:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 800318e:	b280      	uxth	r0, r0
 8003190:	2802      	cmp	r0, #2
 8003192:	d1e4      	bne.n	800315e <HAL_I2C_EV_IRQHandler+0x516>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003194:	2a04      	cmp	r2, #4
 8003196:	d033      	beq.n	8003200 <HAL_I2C_EV_IRQHandler+0x5b8>
 8003198:	d807      	bhi.n	80031aa <HAL_I2C_EV_IRQHandler+0x562>
 800319a:	2a01      	cmp	r2, #1
 800319c:	d007      	beq.n	80031ae <HAL_I2C_EV_IRQHandler+0x566>
 800319e:	2a02      	cmp	r2, #2
 80031a0:	d02e      	beq.n	8003200 <HAL_I2C_EV_IRQHandler+0x5b8>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031a8:	e004      	b.n	80031b4 <HAL_I2C_EV_IRQHandler+0x56c>
 80031aa:	2a10      	cmp	r2, #16
 80031ac:	d1f9      	bne.n	80031a2 <HAL_I2C_EV_IRQHandler+0x55a>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031b4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031b6:	691b      	ldr	r3, [r3, #16]
 80031b8:	700b      	strb	r3, [r1, #0]
    hi2c->pBuffPtr++;
 80031ba:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80031bc:	1c53      	adds	r3, r2, #1
 80031be:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 80031c0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80031c2:	3b01      	subs	r3, #1
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	8563      	strh	r3, [r4, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031c8:	6823      	ldr	r3, [r4, #0]
 80031ca:	691b      	ldr	r3, [r3, #16]
 80031cc:	7053      	strb	r3, [r2, #1]
    hi2c->pBuffPtr++;
 80031ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80031d0:	6822      	ldr	r2, [r4, #0]
    hi2c->pBuffPtr++;
 80031d2:	3301      	adds	r3, #1
 80031d4:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 80031d6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80031d8:	3b01      	subs	r3, #1
 80031da:	b29b      	uxth	r3, r3
 80031dc:	8563      	strh	r3, [r4, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80031de:	6853      	ldr	r3, [r2, #4]
 80031e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031e4:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80031e6:	2320      	movs	r3, #32
 80031e8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80031ec:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 80031f0:	2b40      	cmp	r3, #64	; 0x40
 80031f2:	f04f 0300 	mov.w	r3, #0
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80031f6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80031fa:	d105      	bne.n	8003208 <HAL_I2C_EV_IRQHandler+0x5c0>
      hi2c->PreviousState = I2C_STATE_NONE;
 80031fc:	6323      	str	r3, [r4, #48]	; 0x30
 80031fe:	e79a      	b.n	8003136 <HAL_I2C_EV_IRQHandler+0x4ee>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003206:	e7d5      	b.n	80031b4 <HAL_I2C_EV_IRQHandler+0x56c>
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003208:	2312      	movs	r3, #18
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800320a:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800320c:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800320e:	f7ff fbb5 	bl	800297c <HAL_I2C_MasterRxCpltCallback>
 8003212:	e535      	b.n	8002c80 <HAL_I2C_EV_IRQHandler+0x38>
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003214:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8003216:	b310      	cbz	r0, 800325e <HAL_I2C_EV_IRQHandler+0x616>
  uint32_t sr2itflags               = 0U;
 8003218:	2500      	movs	r5, #0
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800321a:	6958      	ldr	r0, [r3, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800321c:	0787      	lsls	r7, r0, #30
 800321e:	d52d      	bpl.n	800327c <HAL_I2C_EV_IRQHandler+0x634>
 8003220:	0596      	lsls	r6, r2, #22
 8003222:	d52b      	bpl.n	800327c <HAL_I2C_EV_IRQHandler+0x634>
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003224:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003226:	b102      	cbz	r2, 800322a <HAL_I2C_EV_IRQHandler+0x5e2>
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003228:	699d      	ldr	r5, [r3, #24]
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800322a:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 800322e:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8003232:	2a28      	cmp	r2, #40	; 0x28
 8003234:	d116      	bne.n	8003264 <HAL_I2C_EV_IRQHandler+0x61c>
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003236:	685a      	ldr	r2, [r3, #4]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003238:	062f      	lsls	r7, r5, #24
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800323a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800323e:	605a      	str	r2, [r3, #4]
    __HAL_UNLOCK(hi2c);
 8003240:	f04f 0300 	mov.w	r3, #0
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003244:	f085 0104 	eor.w	r1, r5, #4
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003248:	4620      	mov	r0, r4
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800324a:	bf54      	ite	pl
 800324c:	89a2      	ldrhpl	r2, [r4, #12]
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800324e:	8b22      	ldrhmi	r2, [r4, #24]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003250:	f3c1 0180 	ubfx	r1, r1, #2, #1
    __HAL_UNLOCK(hi2c);
 8003254:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003258:	f7fe faa0 	bl	800179c <HAL_I2C_AddrCallback>
 800325c:	e510      	b.n	8002c80 <HAL_I2C_EV_IRQHandler+0x38>
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800325e:	699d      	ldr	r5, [r3, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003260:	6958      	ldr	r0, [r3, #20]
 8003262:	e7db      	b.n	800321c <HAL_I2C_EV_IRQHandler+0x5d4>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003264:	2200      	movs	r2, #0
 8003266:	920c      	str	r2, [sp, #48]	; 0x30
 8003268:	6959      	ldr	r1, [r3, #20]
 800326a:	910c      	str	r1, [sp, #48]	; 0x30
 800326c:	699b      	ldr	r3, [r3, #24]
    __HAL_UNLOCK(hi2c);
 800326e:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003272:	930c      	str	r3, [sp, #48]	; 0x30
 8003274:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003276:	e503      	b.n	8002c80 <HAL_I2C_EV_IRQHandler+0x38>
 8003278:	20000004 	.word	0x20000004
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800327c:	06c6      	lsls	r6, r0, #27
 800327e:	f140 80b1 	bpl.w	80033e4 <HAL_I2C_EV_IRQHandler+0x79c>
 8003282:	0595      	lsls	r5, r2, #22
 8003284:	f140 80ae 	bpl.w	80033e4 <HAL_I2C_EV_IRQHandler+0x79c>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003288:	f894 503d 	ldrb.w	r5, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800328c:	685a      	ldr	r2, [r3, #4]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800328e:	b2ed      	uxtb	r5, r5
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003290:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003294:	605a      	str	r2, [r3, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003296:	2200      	movs	r2, #0
 8003298:	920d      	str	r2, [sp, #52]	; 0x34
 800329a:	695a      	ldr	r2, [r3, #20]
 800329c:	920d      	str	r2, [sp, #52]	; 0x34
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	f042 0201 	orr.w	r2, r2, #1
 80032a4:	601a      	str	r2, [r3, #0]
 80032a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032ae:	601a      	str	r2, [r3, #0]
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80032b0:	685a      	ldr	r2, [r3, #4]
 80032b2:	0510      	lsls	r0, r2, #20
 80032b4:	d520      	bpl.n	80032f8 <HAL_I2C_EV_IRQHandler+0x6b0>
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80032b6:	f005 02f7 	and.w	r2, r5, #247	; 0xf7
 80032ba:	2a22      	cmp	r2, #34	; 0x22
 80032bc:	d14a      	bne.n	8003354 <HAL_I2C_EV_IRQHandler+0x70c>
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80032be:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80032c0:	6802      	ldr	r2, [r0, #0]
 80032c2:	6852      	ldr	r2, [r2, #4]
 80032c4:	b292      	uxth	r2, r2
 80032c6:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 80032c8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80032ca:	b292      	uxth	r2, r2
 80032cc:	b11a      	cbz	r2, 80032d6 <HAL_I2C_EV_IRQHandler+0x68e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80032ce:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80032d0:	f042 0204 	orr.w	r2, r2, #4
 80032d4:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80032d6:	685a      	ldr	r2, [r3, #4]
 80032d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032dc:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80032de:	f7ff f92d 	bl	800253c <HAL_DMA_GetState>
 80032e2:	2801      	cmp	r0, #1
 80032e4:	d008      	beq.n	80032f8 <HAL_I2C_EV_IRQHandler+0x6b0>
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80032e6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80032e8:	4b79      	ldr	r3, [pc, #484]	; (80034d0 <HAL_I2C_EV_IRQHandler+0x888>)
 80032ea:	6343      	str	r3, [r0, #52]	; 0x34
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80032ec:	f7ff f8de 	bl	80024ac <HAL_DMA_Abort_IT>
 80032f0:	b110      	cbz	r0, 80032f8 <HAL_I2C_EV_IRQHandler+0x6b0>
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80032f2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80032f4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80032f6:	4798      	blx	r3
  if (hi2c->XferCount != 0U)
 80032f8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	b313      	cbz	r3, 8003344 <HAL_I2C_EV_IRQHandler+0x6fc>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80032fe:	6823      	ldr	r3, [r4, #0]
 8003300:	695a      	ldr	r2, [r3, #20]
 8003302:	0751      	lsls	r1, r2, #29
 8003304:	d509      	bpl.n	800331a <HAL_I2C_EV_IRQHandler+0x6d2>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003306:	691a      	ldr	r2, [r3, #16]
 8003308:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800330a:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800330c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800330e:	3301      	adds	r3, #1
 8003310:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003312:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003314:	3b01      	subs	r3, #1
 8003316:	b29b      	uxth	r3, r3
 8003318:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800331a:	6823      	ldr	r3, [r4, #0]
 800331c:	695a      	ldr	r2, [r3, #20]
 800331e:	0652      	lsls	r2, r2, #25
 8003320:	d509      	bpl.n	8003336 <HAL_I2C_EV_IRQHandler+0x6ee>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003322:	691a      	ldr	r2, [r3, #16]
 8003324:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003326:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8003328:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800332a:	3301      	adds	r3, #1
 800332c:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800332e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003330:	3b01      	subs	r3, #1
 8003332:	b29b      	uxth	r3, r3
 8003334:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount != 0U)
 8003336:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003338:	b29b      	uxth	r3, r3
 800333a:	b11b      	cbz	r3, 8003344 <HAL_I2C_EV_IRQHandler+0x6fc>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800333c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800333e:	f043 0304 	orr.w	r3, r3, #4
 8003342:	6423      	str	r3, [r4, #64]	; 0x40
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003344:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003346:	b313      	cbz	r3, 800338e <HAL_I2C_EV_IRQHandler+0x746>
    I2C_ITError(hi2c);
 8003348:	4620      	mov	r0, r4
}
 800334a:	b00f      	add	sp, #60	; 0x3c
 800334c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    I2C_ITError(hi2c);
 8003350:	f7ff bbd2 	b.w	8002af8 <I2C_ITError>
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8003354:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003356:	6802      	ldr	r2, [r0, #0]
 8003358:	6852      	ldr	r2, [r2, #4]
 800335a:	b292      	uxth	r2, r2
 800335c:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 800335e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003360:	b292      	uxth	r2, r2
 8003362:	b11a      	cbz	r2, 800336c <HAL_I2C_EV_IRQHandler+0x724>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003364:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003366:	f042 0204 	orr.w	r2, r2, #4
 800336a:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800336c:	685a      	ldr	r2, [r3, #4]
 800336e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003372:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003374:	f7ff f8e2 	bl	800253c <HAL_DMA_GetState>
 8003378:	2801      	cmp	r0, #1
 800337a:	d0bd      	beq.n	80032f8 <HAL_I2C_EV_IRQHandler+0x6b0>
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800337c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800337e:	4b54      	ldr	r3, [pc, #336]	; (80034d0 <HAL_I2C_EV_IRQHandler+0x888>)
 8003380:	6343      	str	r3, [r0, #52]	; 0x34
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003382:	f7ff f893 	bl	80024ac <HAL_DMA_Abort_IT>
 8003386:	2800      	cmp	r0, #0
 8003388:	d0b6      	beq.n	80032f8 <HAL_I2C_EV_IRQHandler+0x6b0>
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800338a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800338c:	e7b2      	b.n	80032f4 <HAL_I2C_EV_IRQHandler+0x6ac>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800338e:	2d2a      	cmp	r5, #42	; 0x2a
 8003390:	d106      	bne.n	80033a0 <HAL_I2C_EV_IRQHandler+0x758>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003392:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003394:	2328      	movs	r3, #40	; 0x28
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003396:	4620      	mov	r0, r4
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003398:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800339c:	f7fe fa28 	bl	80017f0 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80033a0:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80033a4:	2b28      	cmp	r3, #40	; 0x28
 80033a6:	d10c      	bne.n	80033c2 <HAL_I2C_EV_IRQHandler+0x77a>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033a8:	4b4a      	ldr	r3, [pc, #296]	; (80034d4 <HAL_I2C_EV_IRQHandler+0x88c>)
      hi2c->State = HAL_I2C_STATE_READY;
 80033aa:	2220      	movs	r2, #32
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033ac:	62e3      	str	r3, [r4, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80033ae:	2300      	movs	r3, #0
      HAL_I2C_ListenCpltCallback(hi2c);
 80033b0:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_NONE;
 80033b2:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80033b4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80033b8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80033bc:	f7fe f9ec 	bl	8001798 <HAL_I2C_ListenCpltCallback>
 80033c0:	e45e      	b.n	8002c80 <HAL_I2C_EV_IRQHandler+0x38>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80033c2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80033c4:	2b22      	cmp	r3, #34	; 0x22
 80033c6:	d002      	beq.n	80033ce <HAL_I2C_EV_IRQHandler+0x786>
 80033c8:	2d22      	cmp	r5, #34	; 0x22
 80033ca:	f47f ac59 	bne.w	8002c80 <HAL_I2C_EV_IRQHandler+0x38>
        hi2c->PreviousState = I2C_STATE_NONE;
 80033ce:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 80033d0:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 80033d2:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80033d4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033d8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80033dc:	4620      	mov	r0, r4
 80033de:	f7fe fa07 	bl	80017f0 <HAL_I2C_SlaveRxCpltCallback>
 80033e2:	e44d      	b.n	8002c80 <HAL_I2C_EV_IRQHandler+0x38>
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80033e4:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
 80033e8:	2921      	cmp	r1, #33	; 0x21
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80033ea:	f000 0504 	and.w	r5, r0, #4
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80033ee:	d135      	bne.n	800345c <HAL_I2C_EV_IRQHandler+0x814>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80033f0:	0607      	lsls	r7, r0, #24
 80033f2:	d527      	bpl.n	8003444 <HAL_I2C_EV_IRQHandler+0x7fc>
 80033f4:	0556      	lsls	r6, r2, #21
 80033f6:	d525      	bpl.n	8003444 <HAL_I2C_EV_IRQHandler+0x7fc>
 80033f8:	bb3d      	cbnz	r5, 800344a <HAL_I2C_EV_IRQHandler+0x802>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80033fa:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
  if (hi2c->XferCount != 0U)
 80033fe:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003400:	b2c0      	uxtb	r0, r0
  if (hi2c->XferCount != 0U)
 8003402:	b292      	uxth	r2, r2
 8003404:	2a00      	cmp	r2, #0
 8003406:	f43f ac3b 	beq.w	8002c80 <HAL_I2C_EV_IRQHandler+0x38>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800340a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800340c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8003410:	611d      	str	r5, [r3, #16]
    hi2c->pBuffPtr++;
 8003412:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8003414:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003416:	3a01      	subs	r2, #1
 8003418:	b292      	uxth	r2, r2
 800341a:	8562      	strh	r2, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800341c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800341e:	b292      	uxth	r2, r2
 8003420:	2a00      	cmp	r2, #0
 8003422:	f47f ac2d 	bne.w	8002c80 <HAL_I2C_EV_IRQHandler+0x38>
 8003426:	2829      	cmp	r0, #41	; 0x29
 8003428:	f47f ac2a 	bne.w	8002c80 <HAL_I2C_EV_IRQHandler+0x38>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800342c:	685a      	ldr	r2, [r3, #4]
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800342e:	4620      	mov	r0, r4
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003430:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003434:	605a      	str	r2, [r3, #4]
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003436:	2328      	movs	r3, #40	; 0x28
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003438:	6321      	str	r1, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800343a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800343e:	f7ff fa9e 	bl	800297e <HAL_I2C_SlaveTxCpltCallback>
 8003442:	e41d      	b.n	8002c80 <HAL_I2C_EV_IRQHandler+0x38>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003444:	2d00      	cmp	r5, #0
 8003446:	f43f ac1b 	beq.w	8002c80 <HAL_I2C_EV_IRQHandler+0x38>
 800344a:	0595      	lsls	r5, r2, #22
 800344c:	f57f ac18 	bpl.w	8002c80 <HAL_I2C_EV_IRQHandler+0x38>
  if (hi2c->XferCount != 0U)
 8003450:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003452:	b292      	uxth	r2, r2
 8003454:	2a00      	cmp	r2, #0
 8003456:	f43f ac13 	beq.w	8002c80 <HAL_I2C_EV_IRQHandler+0x38>
 800345a:	e5b7      	b.n	8002fcc <HAL_I2C_EV_IRQHandler+0x384>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800345c:	0640      	lsls	r0, r0, #25
 800345e:	d527      	bpl.n	80034b0 <HAL_I2C_EV_IRQHandler+0x868>
 8003460:	0551      	lsls	r1, r2, #21
 8003462:	d525      	bpl.n	80034b0 <HAL_I2C_EV_IRQHandler+0x868>
 8003464:	bb3d      	cbnz	r5, 80034b6 <HAL_I2C_EV_IRQHandler+0x86e>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003466:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  if (hi2c->XferCount != 0U)
 800346a:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800346c:	b2d2      	uxtb	r2, r2
  if (hi2c->XferCount != 0U)
 800346e:	b289      	uxth	r1, r1
 8003470:	2900      	cmp	r1, #0
 8003472:	f43f ac05 	beq.w	8002c80 <HAL_I2C_EV_IRQHandler+0x38>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003476:	6919      	ldr	r1, [r3, #16]
 8003478:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800347a:	7019      	strb	r1, [r3, #0]
    hi2c->pBuffPtr++;
 800347c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800347e:	3301      	adds	r3, #1
 8003480:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8003482:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003484:	3b01      	subs	r3, #1
 8003486:	b29b      	uxth	r3, r3
 8003488:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800348a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800348c:	b29b      	uxth	r3, r3
 800348e:	2b00      	cmp	r3, #0
 8003490:	f47f abf6 	bne.w	8002c80 <HAL_I2C_EV_IRQHandler+0x38>
 8003494:	2a2a      	cmp	r2, #42	; 0x2a
 8003496:	f47f abf3 	bne.w	8002c80 <HAL_I2C_EV_IRQHandler+0x38>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800349a:	6822      	ldr	r2, [r4, #0]
 800349c:	6853      	ldr	r3, [r2, #4]
 800349e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034a2:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80034a4:	2322      	movs	r3, #34	; 0x22
 80034a6:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80034a8:	2328      	movs	r3, #40	; 0x28
 80034aa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 80034ae:	e795      	b.n	80033dc <HAL_I2C_EV_IRQHandler+0x794>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034b0:	2d00      	cmp	r5, #0
 80034b2:	f43f abe5 	beq.w	8002c80 <HAL_I2C_EV_IRQHandler+0x38>
 80034b6:	0592      	lsls	r2, r2, #22
 80034b8:	f57f abe2 	bpl.w	8002c80 <HAL_I2C_EV_IRQHandler+0x38>
  if (hi2c->XferCount != 0U)
 80034bc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80034be:	b292      	uxth	r2, r2
 80034c0:	2a00      	cmp	r2, #0
 80034c2:	f43f abdd 	beq.w	8002c80 <HAL_I2C_EV_IRQHandler+0x38>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034c6:	691a      	ldr	r2, [r3, #16]
 80034c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80034ca:	701a      	strb	r2, [r3, #0]
 80034cc:	e649      	b.n	8003162 <HAL_I2C_EV_IRQHandler+0x51a>
 80034ce:	bf00      	nop
 80034d0:	08002a39 	.word	0x08002a39
 80034d4:	ffff0000 	.word	0xffff0000

080034d8 <HAL_I2C_ER_IRQHandler>:
{
 80034d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80034da:	6803      	ldr	r3, [r0, #0]
{
 80034dc:	4604      	mov	r4, r0
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80034de:	695f      	ldr	r7, [r3, #20]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80034e0:	685e      	ldr	r6, [r3, #4]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80034e2:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80034e6:	f417 7580 	ands.w	r5, r7, #256	; 0x100
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80034ea:	b2d2      	uxtb	r2, r2
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80034ec:	d00a      	beq.n	8003504 <HAL_I2C_ER_IRQHandler+0x2c>
 80034ee:	f416 7580 	ands.w	r5, r6, #256	; 0x100
 80034f2:	d007      	beq.n	8003504 <HAL_I2C_ER_IRQHandler+0x2c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80034f4:	f46f 7180 	mvn.w	r1, #256	; 0x100
    error |= HAL_I2C_ERROR_BERR;
 80034f8:	2501      	movs	r5, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80034fa:	6159      	str	r1, [r3, #20]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 80034fc:	6819      	ldr	r1, [r3, #0]
 80034fe:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8003502:	6019      	str	r1, [r3, #0]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003504:	05b8      	lsls	r0, r7, #22
 8003506:	d506      	bpl.n	8003516 <HAL_I2C_ER_IRQHandler+0x3e>
 8003508:	05f1      	lsls	r1, r6, #23
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800350a:	bf42      	ittt	mi
 800350c:	f46f 7100 	mvnmi.w	r1, #512	; 0x200
    error |= HAL_I2C_ERROR_ARLO;
 8003510:	f045 0502 	orrmi.w	r5, r5, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003514:	6159      	strmi	r1, [r3, #20]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003516:	0578      	lsls	r0, r7, #21
 8003518:	d536      	bpl.n	8003588 <HAL_I2C_ER_IRQHandler+0xb0>
 800351a:	05f1      	lsls	r1, r6, #23
 800351c:	d534      	bpl.n	8003588 <HAL_I2C_ER_IRQHandler+0xb0>
    tmp2 = hi2c->XferCount;
 800351e:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
    tmp3 = hi2c->State;
 8003520:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003524:	2a20      	cmp	r2, #32
    tmp4 = hi2c->PreviousState;
 8003526:	f8d4 c030 	ldr.w	ip, [r4, #48]	; 0x30
    tmp2 = hi2c->XferCount;
 800352a:	b280      	uxth	r0, r0
    tmp3 = hi2c->State;
 800352c:	b2c9      	uxtb	r1, r1
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800352e:	d15f      	bne.n	80035f0 <HAL_I2C_ER_IRQHandler+0x118>
 8003530:	2800      	cmp	r0, #0
 8003532:	d15d      	bne.n	80035f0 <HAL_I2C_ER_IRQHandler+0x118>
 8003534:	f001 00f7 	and.w	r0, r1, #247	; 0xf7
 8003538:	2821      	cmp	r0, #33	; 0x21
 800353a:	d004      	beq.n	8003546 <HAL_I2C_ER_IRQHandler+0x6e>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800353c:	2928      	cmp	r1, #40	; 0x28
 800353e:	d157      	bne.n	80035f0 <HAL_I2C_ER_IRQHandler+0x118>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003540:	f1bc 0f21 	cmp.w	ip, #33	; 0x21
 8003544:	d154      	bne.n	80035f0 <HAL_I2C_ER_IRQHandler+0x118>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003546:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800354a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800354c:	b2d2      	uxtb	r2, r2
  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800354e:	2908      	cmp	r1, #8
 8003550:	d001      	beq.n	8003556 <HAL_I2C_ER_IRQHandler+0x7e>
 8003552:	2920      	cmp	r1, #32
 8003554:	d12a      	bne.n	80035ac <HAL_I2C_ER_IRQHandler+0xd4>
 8003556:	2a28      	cmp	r2, #40	; 0x28
 8003558:	d128      	bne.n	80035ac <HAL_I2C_ER_IRQHandler+0xd4>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800355a:	4a2e      	ldr	r2, [pc, #184]	; (8003614 <HAL_I2C_ER_IRQHandler+0x13c>)
    HAL_I2C_ListenCpltCallback(hi2c);
 800355c:	4620      	mov	r0, r4
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800355e:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003560:	685a      	ldr	r2, [r3, #4]
 8003562:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003566:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003568:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800356c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003574:	601a      	str	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 8003576:	2300      	movs	r3, #0
    hi2c->State         = HAL_I2C_STATE_READY;
 8003578:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 800357a:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800357c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003580:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8003584:	f7fe f908 	bl	8001798 <HAL_I2C_ListenCpltCallback>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003588:	053a      	lsls	r2, r7, #20
 800358a:	d53f      	bpl.n	800360c <HAL_I2C_ER_IRQHandler+0x134>
 800358c:	05f3      	lsls	r3, r6, #23
 800358e:	d53d      	bpl.n	800360c <HAL_I2C_ER_IRQHandler+0x134>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003590:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8003594:	6823      	ldr	r3, [r4, #0]
    error |= HAL_I2C_ERROR_OVR;
 8003596:	f045 0508 	orr.w	r5, r5, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800359a:	615a      	str	r2, [r3, #20]
    hi2c->ErrorCode |= error;
 800359c:	6c23      	ldr	r3, [r4, #64]	; 0x40
    I2C_ITError(hi2c);
 800359e:	4620      	mov	r0, r4
    hi2c->ErrorCode |= error;
 80035a0:	432b      	orrs	r3, r5
 80035a2:	6423      	str	r3, [r4, #64]	; 0x40
}
 80035a4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    I2C_ITError(hi2c);
 80035a8:	f7ff baa6 	b.w	8002af8 <I2C_ITError>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80035ac:	2a21      	cmp	r2, #33	; 0x21
 80035ae:	d11b      	bne.n	80035e8 <HAL_I2C_ER_IRQHandler+0x110>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80035b0:	4918      	ldr	r1, [pc, #96]	; (8003614 <HAL_I2C_ER_IRQHandler+0x13c>)
 80035b2:	62e1      	str	r1, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80035b4:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80035b6:	2100      	movs	r1, #0
    hi2c->State         = HAL_I2C_STATE_READY;
 80035b8:	2220      	movs	r2, #32
 80035ba:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80035be:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80035c2:	685a      	ldr	r2, [r3, #4]
 80035c4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80035c8:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035ca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80035ce:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035d6:	601a      	str	r2, [r3, #0]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80035d8:	695a      	ldr	r2, [r3, #20]
 80035da:	0610      	lsls	r0, r2, #24
    hi2c->Instance->DR = 0x00U;
 80035dc:	bf48      	it	mi
 80035de:	6119      	strmi	r1, [r3, #16]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80035e0:	4620      	mov	r0, r4
 80035e2:	f7ff f9cc 	bl	800297e <HAL_I2C_SlaveTxCpltCallback>
 80035e6:	e7cf      	b.n	8003588 <HAL_I2C_ER_IRQHandler+0xb0>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035e8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80035ec:	615a      	str	r2, [r3, #20]
 80035ee:	e7cb      	b.n	8003588 <HAL_I2C_ER_IRQHandler+0xb0>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035f0:	f46f 6180 	mvn.w	r1, #1024	; 0x400
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80035f4:	2a10      	cmp	r2, #16
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035f6:	6159      	str	r1, [r3, #20]
      error |= HAL_I2C_ERROR_AF;
 80035f8:	f045 0504 	orr.w	r5, r5, #4
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80035fc:	d001      	beq.n	8003602 <HAL_I2C_ER_IRQHandler+0x12a>
 80035fe:	2a40      	cmp	r2, #64	; 0x40
 8003600:	d1c2      	bne.n	8003588 <HAL_I2C_ER_IRQHandler+0xb0>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003608:	601a      	str	r2, [r3, #0]
 800360a:	e7bd      	b.n	8003588 <HAL_I2C_ER_IRQHandler+0xb0>
  if (error != HAL_I2C_ERROR_NONE)
 800360c:	2d00      	cmp	r5, #0
 800360e:	d1c5      	bne.n	800359c <HAL_I2C_ER_IRQHandler+0xc4>
}
 8003610:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003612:	bf00      	nop
 8003614:	ffff0000 	.word	0xffff0000

08003618 <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 8003618:	6c00      	ldr	r0, [r0, #64]	; 0x40
}
 800361a:	4770      	bx	lr

0800361c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800361c:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800361e:	4604      	mov	r4, r0
{
 8003620:	b087      	sub	sp, #28
  if (hpcd == NULL)
 8003622:	b310      	cbz	r0, 800366a <HAL_PCD_Init+0x4e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003624:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 8003628:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800362c:	b91b      	cbnz	r3, 8003636 <HAL_PCD_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800362e:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003632:	f002 ff09 	bl	8006448 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003636:	2303      	movs	r3, #3
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003638:	4625      	mov	r5, r4

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800363a:	466e      	mov	r6, sp
  hpcd->State = HAL_PCD_STATE_BUSY;
 800363c:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  __HAL_PCD_DISABLE(hpcd);
 8003640:	f855 0b10 	ldr.w	r0, [r5], #16
 8003644:	f001 fac2 	bl	8004bcc <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003648:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800364a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800364c:	682b      	ldr	r3, [r5, #0]
 800364e:	1d27      	adds	r7, r4, #4
 8003650:	6033      	str	r3, [r6, #0]
 8003652:	4626      	mov	r6, r4
 8003654:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8003658:	f856 0b10 	ldr.w	r0, [r6], #16
 800365c:	f001 faa6 	bl	8004bac <USB_CoreInit>
 8003660:	4605      	mov	r5, r0
 8003662:	b120      	cbz	r0, 800366e <HAL_PCD_Init+0x52>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003664:	2302      	movs	r3, #2
 8003666:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
    return HAL_ERROR;
 800366a:	2501      	movs	r5, #1
 800366c:	e04b      	b.n	8003706 <HAL_PCD_Init+0xea>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800366e:	4601      	mov	r1, r0
 8003670:	6820      	ldr	r0, [r4, #0]
 8003672:	f001 fab5 	bl	8004be0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003676:	4629      	mov	r1, r5
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003678:	f04f 0e01 	mov.w	lr, #1
 800367c:	2528      	movs	r5, #40	; 0x28
    hpcd->IN_ep[i].num = i;
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800367e:	460a      	mov	r2, r1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003680:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8003684:	b2c8      	uxtb	r0, r1
 8003686:	4584      	cmp	ip, r0
 8003688:	f101 0101 	add.w	r1, r1, #1
 800368c:	d81b      	bhi.n	80036c6 <HAL_PCD_Init+0xaa>
 800368e:	2300      	movs	r3, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003690:	2528      	movs	r5, #40	; 0x28
 8003692:	4619      	mov	r1, r3
 8003694:	b2d8      	uxtb	r0, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003696:	4584      	cmp	ip, r0
 8003698:	f103 0301 	add.w	r3, r3, #1
 800369c:	d81f      	bhi.n	80036de <HAL_PCD_Init+0xc2>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800369e:	46ec      	mov	ip, sp
 80036a0:	4635      	mov	r5, r6
 80036a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80036a4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80036a8:	682b      	ldr	r3, [r5, #0]
 80036aa:	f8cc 3000 	str.w	r3, [ip]
 80036ae:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80036b2:	6820      	ldr	r0, [r4, #0]
 80036b4:	f001 fa96 	bl	8004be4 <USB_DevInit>
 80036b8:	2301      	movs	r3, #1
 80036ba:	4605      	mov	r5, r0
 80036bc:	b1e0      	cbz	r0, 80036f8 <HAL_PCD_Init+0xdc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80036be:	2202      	movs	r2, #2
 80036c0:	f884 22a9 	strb.w	r2, [r4, #681]	; 0x2a9
    return HAL_ERROR;
 80036c4:	e7d1      	b.n	800366a <HAL_PCD_Init+0x4e>
    hpcd->IN_ep[i].is_in = 1U;
 80036c6:	fb05 4300 	mla	r3, r5, r0, r4
    hpcd->IN_ep[i].xfer_buff = 0U;
 80036ca:	e9c3 220e 	strd	r2, r2, [r3, #56]	; 0x38
    hpcd->IN_ep[i].is_in = 1U;
 80036ce:	f883 e029 	strb.w	lr, [r3, #41]	; 0x29
    hpcd->IN_ep[i].num = i;
 80036d2:	f883 0028 	strb.w	r0, [r3, #40]	; 0x28
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80036d6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    hpcd->IN_ep[i].xfer_len = 0U;
 80036da:	641a      	str	r2, [r3, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036dc:	e7d2      	b.n	8003684 <HAL_PCD_Init+0x68>
    hpcd->OUT_ep[i].is_in = 0U;
 80036de:	fb05 4200 	mla	r2, r5, r0, r4
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80036e2:	e9c2 115e 	strd	r1, r1, [r2, #376]	; 0x178
    hpcd->OUT_ep[i].is_in = 0U;
 80036e6:	f882 1169 	strb.w	r1, [r2, #361]	; 0x169
    hpcd->OUT_ep[i].num = i;
 80036ea:	f882 0168 	strb.w	r0, [r2, #360]	; 0x168
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80036ee:	f882 116b 	strb.w	r1, [r2, #363]	; 0x16b
    hpcd->OUT_ep[i].xfer_len = 0U;
 80036f2:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036f6:	e7cd      	b.n	8003694 <HAL_PCD_Init+0x78>
  }

  hpcd->USB_Address = 0U;
 80036f8:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
  (void)USB_DevDisconnect(hpcd->Instance);
 80036fc:	6820      	ldr	r0, [r4, #0]
  hpcd->State = HAL_PCD_STATE_READY;
 80036fe:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8003702:	f001 fd27 	bl	8005154 <USB_DevDisconnect>

  return HAL_OK;
}
 8003706:	4628      	mov	r0, r5
 8003708:	b007      	add	sp, #28
 800370a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800370c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800370c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 800370e:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
{
 8003712:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8003714:	2b01      	cmp	r3, #1
 8003716:	d010      	beq.n	800373a <HAL_PCD_Start+0x2e>
 8003718:	2501      	movs	r5, #1
 800371a:	f880 52a8 	strb.w	r5, [r0, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800371e:	6800      	ldr	r0, [r0, #0]
 8003720:	f001 fa4b 	bl	8004bba <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8003724:	4629      	mov	r1, r5
 8003726:	4620      	mov	r0, r4
 8003728:	f002 ff99 	bl	800665e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800372c:	6820      	ldr	r0, [r4, #0]
 800372e:	f001 fd0f 	bl	8005150 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003732:	2000      	movs	r0, #0
 8003734:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 8003738:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 800373a:	2002      	movs	r0, #2
 800373c:	e7fc      	b.n	8003738 <HAL_PCD_Start+0x2c>

0800373e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800373e:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8003740:	f890 22a8 	ldrb.w	r2, [r0, #680]	; 0x2a8
{
 8003744:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8003746:	2a01      	cmp	r2, #1
 8003748:	d00b      	beq.n	8003762 <HAL_PCD_SetAddress+0x24>
 800374a:	2201      	movs	r2, #1
  hpcd->USB_Address = address;
 800374c:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  __HAL_LOCK(hpcd);
 8003750:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003754:	6800      	ldr	r0, [r0, #0]
 8003756:	f001 fcf5 	bl	8005144 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800375a:	2000      	movs	r0, #0
 800375c:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 8003760:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8003762:	2002      	movs	r0, #2
 8003764:	e7fc      	b.n	8003760 <HAL_PCD_SetAddress+0x22>
	...

08003768 <HAL_PCD_IRQHandler>:
{
 8003768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800376c:	4604      	mov	r4, r0
 800376e:	b085      	sub	sp, #20
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003770:	6800      	ldr	r0, [r0, #0]
 8003772:	f001 fcf1 	bl	8005158 <USB_ReadInterrupts>
  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003776:	f410 4500 	ands.w	r5, r0, #32768	; 0x8000
 800377a:	f000 8424 	beq.w	8003fc6 <HAL_PCD_IRQHandler+0x85e>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800377e:	f8df 931c 	ldr.w	r9, [pc, #796]	; 8003a9c <HAL_PCD_IRQHandler+0x334>
 8003782:	f8df 831c 	ldr.w	r8, [pc, #796]	; 8003aa0 <HAL_PCD_IRQHandler+0x338>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003786:	6820      	ldr	r0, [r4, #0]
 8003788:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 800378c:	041f      	lsls	r7, r3, #16
 800378e:	d402      	bmi.n	8003796 <HAL_PCD_IRQHandler+0x2e>
}
 8003790:	b005      	add	sp, #20
 8003792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    wIstr = hpcd->Instance->ISTR;
 8003796:	f8b0 6044 	ldrh.w	r6, [r0, #68]	; 0x44
 800379a:	b2b1      	uxth	r1, r6
    if (epindex == 0U)
 800379c:	f016 060f 	ands.w	r6, r6, #15
 80037a0:	f040 80c6 	bne.w	8003930 <HAL_PCD_IRQHandler+0x1c8>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80037a4:	f011 0110 	ands.w	r1, r1, #16
 80037a8:	d12b      	bne.n	8003802 <HAL_PCD_IRQHandler+0x9a>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80037aa:	8803      	ldrh	r3, [r0, #0]
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	ea03 0309 	and.w	r3, r3, r9
 80037b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037b6:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80037b8:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80037bc:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80037c6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80037ca:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 80037ce:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80037d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
        ep->xfer_buff += ep->xfer_count;
 80037d4:	441a      	add	r2, r3
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80037d6:	6463      	str	r3, [r4, #68]	; 0x44
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80037d8:	4620      	mov	r0, r4
        ep->xfer_buff += ep->xfer_count;
 80037da:	63e2      	str	r2, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80037dc:	f002 fe63 	bl	80064a6 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80037e0:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d0ce      	beq.n	8003786 <HAL_PCD_IRQHandler+0x1e>
 80037e8:	6c22      	ldr	r2, [r4, #64]	; 0x40
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80037ea:	6821      	ldr	r1, [r4, #0]
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80037ec:	2a00      	cmp	r2, #0
 80037ee:	d1ca      	bne.n	8003786 <HAL_PCD_IRQHandler+0x1e>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80037f0:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80037f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037f8:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80037fc:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 8003800:	e7c1      	b.n	8003786 <HAL_PCD_IRQHandler+0x1e>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003802:	8805      	ldrh	r5, [r0, #0]
 8003804:	b2ab      	uxth	r3, r5
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003806:	f415 6500 	ands.w	r5, r5, #2048	; 0x800
 800380a:	d021      	beq.n	8003850 <HAL_PCD_IRQHandler+0xe8>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800380c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003810:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 8003814:	b29b      	uxth	r3, r3
 8003816:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800381a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800381e:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003822:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 8003826:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800382a:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800382e:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 8003832:	f001 febf 	bl	80055b4 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003836:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8003838:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800383a:	8813      	ldrh	r3, [r2, #0]
 800383c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003840:	051b      	lsls	r3, r3, #20
 8003842:	0d1b      	lsrs	r3, r3, #20
 8003844:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003848:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 800384a:	f002 fe1d 	bl	8006488 <HAL_PCD_SetupStageCallback>
 800384e:	e79a      	b.n	8003786 <HAL_PCD_IRQHandler+0x1e>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003850:	0419      	lsls	r1, r3, #16
 8003852:	d598      	bpl.n	8003786 <HAL_PCD_IRQHandler+0x1e>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003854:	8803      	ldrh	r3, [r0, #0]
 8003856:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800385a:	051b      	lsls	r3, r3, #20
 800385c:	0d1b      	lsrs	r3, r3, #20
 800385e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003862:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003864:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003868:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 800386c:	b29b      	uxth	r3, r3
 800386e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003872:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8003876:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 800387a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800387e:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003882:	b18b      	cbz	r3, 80038a8 <HAL_PCD_IRQHandler+0x140>
 8003884:	f8d4 117c 	ldr.w	r1, [r4, #380]	; 0x17c
 8003888:	b171      	cbz	r1, 80038a8 <HAL_PCD_IRQHandler+0x140>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800388a:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 800388e:	f001 fe91 	bl	80055b4 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8003892:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003896:	f8d4 2184 	ldr.w	r2, [r4, #388]	; 0x184
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800389a:	4629      	mov	r1, r5
            ep->xfer_buff += ep->xfer_count;
 800389c:	4413      	add	r3, r2
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800389e:	4620      	mov	r0, r4
            ep->xfer_buff += ep->xfer_count;
 80038a0:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80038a4:	f002 fdf6 	bl	8006494 <HAL_PCD_DataOutStageCallback>
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80038a8:	6821      	ldr	r1, [r4, #0]
 80038aa:	880a      	ldrh	r2, [r1, #0]
 80038ac:	b293      	uxth	r3, r2
          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80038ae:	0512      	lsls	r2, r2, #20
 80038b0:	f53f af69 	bmi.w	8003786 <HAL_PCD_IRQHandler+0x1e>
 80038b4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80038b8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80038bc:	f43f af63 	beq.w	8003786 <HAL_PCD_IRQHandler+0x1e>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80038c0:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 80038c4:	f201 400c 	addw	r0, r1, #1036	; 0x40c
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	5ac2      	ldrh	r2, [r0, r3]
 80038cc:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80038d0:	52c2      	strh	r2, [r0, r3]
 80038d2:	f8d4 2178 	ldr.w	r2, [r4, #376]	; 0x178
 80038d6:	2a3e      	cmp	r2, #62	; 0x3e
 80038d8:	d90c      	bls.n	80038f4 <HAL_PCD_IRQHandler+0x18c>
 80038da:	0955      	lsrs	r5, r2, #5
 80038dc:	06d7      	lsls	r7, r2, #27
 80038de:	5ac2      	ldrh	r2, [r0, r3]
 80038e0:	bf08      	it	eq
 80038e2:	f105 35ff 	addeq.w	r5, r5, #4294967295
 80038e6:	b292      	uxth	r2, r2
 80038e8:	ea42 2285 	orr.w	r2, r2, r5, lsl #10
 80038ec:	ea42 0208 	orr.w	r2, r2, r8
 80038f0:	b292      	uxth	r2, r2
 80038f2:	e004      	b.n	80038fe <HAL_PCD_IRQHandler+0x196>
 80038f4:	b99a      	cbnz	r2, 800391e <HAL_PCD_IRQHandler+0x1b6>
 80038f6:	5ac2      	ldrh	r2, [r0, r3]
 80038f8:	b292      	uxth	r2, r2
 80038fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80038fe:	52c2      	strh	r2, [r0, r3]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003900:	880b      	ldrh	r3, [r1, #0]
 8003902:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003906:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800390a:	041b      	lsls	r3, r3, #16
 800390c:	0c1b      	lsrs	r3, r3, #16
 800390e:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8003912:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003916:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800391a:	800b      	strh	r3, [r1, #0]
 800391c:	e733      	b.n	8003786 <HAL_PCD_IRQHandler+0x1e>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800391e:	0855      	lsrs	r5, r2, #1
 8003920:	07d6      	lsls	r6, r2, #31
 8003922:	5ac2      	ldrh	r2, [r0, r3]
 8003924:	bf48      	it	mi
 8003926:	3501      	addmi	r5, #1
 8003928:	b292      	uxth	r2, r2
 800392a:	ea42 2285 	orr.w	r2, r2, r5, lsl #10
 800392e:	e7df      	b.n	80038f0 <HAL_PCD_IRQHandler+0x188>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003930:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003934:	041a      	lsls	r2, r3, #16
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003936:	b29f      	uxth	r7, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003938:	f140 80f1 	bpl.w	8003b1e <HAL_PCD_IRQHandler+0x3b6>
        if (ep->doublebuffer == 0U)
 800393c:	2128      	movs	r1, #40	; 0x28
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800393e:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 8003942:	fb01 4106 	mla	r1, r1, r6, r4
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003946:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800394a:	051b      	lsls	r3, r3, #20
 800394c:	0d1b      	lsrs	r3, r3, #20
 800394e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003952:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 8003956:	f891 3174 	ldrb.w	r3, [r1, #372]	; 0x174
 800395a:	f500 6c80 	add.w	ip, r0, #1024	; 0x400
 800395e:	b9b3      	cbnz	r3, 800398e <HAL_PCD_IRQHandler+0x226>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003960:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003964:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8003968:	b29b      	uxth	r3, r3
 800396a:	3306      	adds	r3, #6
 800396c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003970:	f83c 5013 	ldrh.w	r5, [ip, r3, lsl #1]
 8003974:	f3c5 0509 	ubfx	r5, r5, #0, #10
          if (count != 0U)
 8003978:	2d00      	cmp	r5, #0
 800397a:	f000 80b4 	beq.w	8003ae6 <HAL_PCD_IRQHandler+0x37e>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800397e:	462b      	mov	r3, r5
 8003980:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003984:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8003988:	f001 fe14 	bl	80055b4 <USB_ReadPMA>
 800398c:	e0ab      	b.n	8003ae6 <HAL_PCD_IRQHandler+0x37e>
          if (ep->type == EP_TYPE_BULK)
 800398e:	f891 216b 	ldrb.w	r2, [r1, #363]	; 0x16b
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003992:	f891 3168 	ldrb.w	r3, [r1, #360]	; 0x168
          if (ep->type == EP_TYPE_BULK)
 8003996:	2a02      	cmp	r2, #2
 8003998:	f040 8084 	bne.w	8003aa4 <HAL_PCD_IRQHandler+0x33c>

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800399c:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80039a0:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80039a4:	b2ad      	uxth	r5, r5
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80039a6:	f417 4a80 	ands.w	sl, r7, #16384	; 0x4000

    if (ep->xfer_len >= count)
 80039aa:	f8d1 2180 	ldr.w	r2, [r1, #384]	; 0x180
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80039ae:	445d      	add	r5, fp
 80039b0:	f007 0e40 	and.w	lr, r7, #64	; 0x40
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80039b4:	d039      	beq.n	8003a2a <HAL_PCD_IRQHandler+0x2c2>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80039b6:	3502      	adds	r5, #2
 80039b8:	f83c 5015 	ldrh.w	r5, [ip, r5, lsl #1]
 80039bc:	f3c5 0509 	ubfx	r5, r5, #0, #10
    if (ep->xfer_len >= count)
 80039c0:	4295      	cmp	r5, r2
 80039c2:	d913      	bls.n	80039ec <HAL_PCD_IRQHandler+0x284>
 80039c4:	2200      	movs	r2, #0
 80039c6:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80039ca:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80039ce:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80039d2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80039d6:	0412      	lsls	r2, r2, #16
 80039d8:	0c12      	lsrs	r2, r2, #16
 80039da:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 80039de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039e2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80039e6:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
 80039ea:	e004      	b.n	80039f6 <HAL_PCD_IRQHandler+0x28e>
      ep->xfer_len -= count;
 80039ec:	1b52      	subs	r2, r2, r5
 80039ee:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 80039f2:	2a00      	cmp	r2, #0
 80039f4:	d0e9      	beq.n	80039ca <HAL_PCD_IRQHandler+0x262>
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80039f6:	f1be 0f00 	cmp.w	lr, #0
 80039fa:	d00d      	beq.n	8003a18 <HAL_PCD_IRQHandler+0x2b0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80039fc:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003a00:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003a04:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003a08:	0412      	lsls	r2, r2, #16
 8003a0a:	0c12      	lsrs	r2, r2, #16
 8003a0c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a10:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8003a14:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }

    if (count != 0U)
 8003a18:	2d00      	cmp	r5, #0
 8003a1a:	d064      	beq.n	8003ae6 <HAL_PCD_IRQHandler+0x37e>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003a1c:	2128      	movs	r1, #40	; 0x28
 8003a1e:	fb01 4106 	mla	r1, r1, r6, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003a22:	462b      	mov	r3, r5
 8003a24:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 8003a28:	e7ac      	b.n	8003984 <HAL_PCD_IRQHandler+0x21c>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003a2a:	3506      	adds	r5, #6
 8003a2c:	f83c 5015 	ldrh.w	r5, [ip, r5, lsl #1]
 8003a30:	f3c5 0509 	ubfx	r5, r5, #0, #10

    if (ep->xfer_len >= count)
 8003a34:	4295      	cmp	r5, r2
 8003a36:	d912      	bls.n	8003a5e <HAL_PCD_IRQHandler+0x2f6>
 8003a38:	f8c1 a180 	str.w	sl, [r1, #384]	; 0x180
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003a3c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003a40:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003a44:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003a48:	0412      	lsls	r2, r2, #16
 8003a4a:	0c12      	lsrs	r2, r2, #16
 8003a4c:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 8003a50:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a54:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003a58:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
 8003a5c:	e004      	b.n	8003a68 <HAL_PCD_IRQHandler+0x300>
      ep->xfer_len -= count;
 8003a5e:	1b52      	subs	r2, r2, r5
 8003a60:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 8003a64:	2a00      	cmp	r2, #0
 8003a66:	d0e9      	beq.n	8003a3c <HAL_PCD_IRQHandler+0x2d4>
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003a68:	f1be 0f00 	cmp.w	lr, #0
 8003a6c:	d10d      	bne.n	8003a8a <HAL_PCD_IRQHandler+0x322>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003a6e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003a72:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003a76:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003a7a:	0412      	lsls	r2, r2, #16
 8003a7c:	0c12      	lsrs	r2, r2, #16
 8003a7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a82:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8003a86:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }

    if (count != 0U)
 8003a8a:	b365      	cbz	r5, 8003ae6 <HAL_PCD_IRQHandler+0x37e>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003a8c:	2128      	movs	r1, #40	; 0x28
 8003a8e:	fb01 4106 	mla	r1, r1, r6, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003a92:	462b      	mov	r3, r5
 8003a94:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 8003a98:	e774      	b.n	8003984 <HAL_PCD_IRQHandler+0x21c>
 8003a9a:	bf00      	nop
 8003a9c:	ffff8f0f 	.word	0xffff8f0f
 8003aa0:	ffff8000 	.word	0xffff8000
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003aa4:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003aa8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003aac:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003ab0:	0412      	lsls	r2, r2, #16
 8003ab2:	0c12      	lsrs	r2, r2, #16
 8003ab4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ab8:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8003abc:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003ac0:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8003ac4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003ac8:	00d2      	lsls	r2, r2, #3
 8003aca:	f413 4f80 	tst.w	r3, #16384	; 0x4000
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003ace:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003ad2:	b29b      	uxth	r3, r3
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003ad4:	d055      	beq.n	8003b82 <HAL_PCD_IRQHandler+0x41a>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003ad6:	3302      	adds	r3, #2
 8003ad8:	4413      	add	r3, r2
 8003ada:	f83c 5013 	ldrh.w	r5, [ip, r3, lsl #1]
 8003ade:	f3c5 0509 	ubfx	r5, r5, #0, #10
              if (count != 0U)
 8003ae2:	2d00      	cmp	r5, #0
 8003ae4:	d19d      	bne.n	8003a22 <HAL_PCD_IRQHandler+0x2ba>
        ep->xfer_count += count;
 8003ae6:	2128      	movs	r1, #40	; 0x28
 8003ae8:	4371      	muls	r1, r6
 8003aea:	1863      	adds	r3, r4, r1
 8003aec:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 8003af0:	442a      	add	r2, r5
 8003af2:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        ep->xfer_buff += count;
 8003af6:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8003afa:	442a      	add	r2, r5
 8003afc:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003b00:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8003b04:	b11a      	cbz	r2, 8003b0e <HAL_PCD_IRQHandler+0x3a6>
 8003b06:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8003b0a:	429d      	cmp	r5, r3
 8003b0c:	d242      	bcs.n	8003b94 <HAL_PCD_IRQHandler+0x42c>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003b0e:	2328      	movs	r3, #40	; 0x28
 8003b10:	fb03 4306 	mla	r3, r3, r6, r4
 8003b14:	4620      	mov	r0, r4
 8003b16:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 8003b1a:	f002 fcbb 	bl	8006494 <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003b1e:	063b      	lsls	r3, r7, #24
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003b20:	6820      	ldr	r0, [r4, #0]
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003b22:	f57f ae30 	bpl.w	8003786 <HAL_PCD_IRQHandler+0x1e>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003b26:	2228      	movs	r2, #40	; 0x28
 8003b28:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
 8003b2c:	fb02 4506 	mla	r5, r2, r6, r4
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	ea03 0309 	and.w	r3, r3, r9
 8003b36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b3a:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if (ep->type == EP_TYPE_ISOC)
 8003b3e:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d150      	bne.n	8003be8 <HAL_PCD_IRQHandler+0x480>
          ep->xfer_len = 0U;
 8003b46:	2100      	movs	r1, #0
          if (ep->doublebuffer != 0U)
 8003b48:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
          ep->xfer_len = 0U;
 8003b4c:	6429      	str	r1, [r5, #64]	; 0x40
          if (ep->doublebuffer != 0U)
 8003b4e:	b393      	cbz	r3, 8003bb6 <HAL_PCD_IRQHandler+0x44e>
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003b50:	f017 0740 	ands.w	r7, r7, #64	; 0x40
 8003b54:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 8003b58:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 8003b5c:	d031      	beq.n	8003bc2 <HAL_PCD_IRQHandler+0x45a>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003b5e:	bb02      	cbnz	r2, 8003ba2 <HAL_PCD_IRQHandler+0x43a>
 8003b60:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003b64:	011b      	lsls	r3, r3, #4
 8003b66:	b292      	uxth	r2, r2
 8003b68:	f200 4004 	addw	r0, r0, #1028	; 0x404
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003b6c:	4410      	add	r0, r2
 8003b6e:	5a1a      	ldrh	r2, [r3, r0]
 8003b70:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003b74:	521a      	strh	r2, [r3, r0]
 8003b76:	5a1a      	ldrh	r2, [r3, r0]
 8003b78:	b292      	uxth	r2, r2
 8003b7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b7e:	521a      	strh	r2, [r3, r0]
 8003b80:	e019      	b.n	8003bb6 <HAL_PCD_IRQHandler+0x44e>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003b82:	3306      	adds	r3, #6
 8003b84:	441a      	add	r2, r3
 8003b86:	f83c 5012 	ldrh.w	r5, [ip, r2, lsl #1]
 8003b8a:	f3c5 0509 	ubfx	r5, r5, #0, #10
              if (count != 0U)
 8003b8e:	2d00      	cmp	r5, #0
 8003b90:	d0a9      	beq.n	8003ae6 <HAL_PCD_IRQHandler+0x37e>
 8003b92:	e77e      	b.n	8003a92 <HAL_PCD_IRQHandler+0x32a>
        ep = &hpcd->OUT_ep[epindex];
 8003b94:	f501 71b4 	add.w	r1, r1, #360	; 0x168
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003b98:	6820      	ldr	r0, [r4, #0]
 8003b9a:	4421      	add	r1, r4
 8003b9c:	f001 faf2 	bl	8005184 <USB_EPStartXfer>
 8003ba0:	e7bd      	b.n	8003b1e <HAL_PCD_IRQHandler+0x3b6>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003ba2:	2a01      	cmp	r2, #1
 8003ba4:	d107      	bne.n	8003bb6 <HAL_PCD_IRQHandler+0x44e>
 8003ba6:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003baa:	f200 4004 	addw	r0, r0, #1028	; 0x404
 8003bae:	b292      	uxth	r2, r2
 8003bb0:	011b      	lsls	r3, r3, #4
 8003bb2:	4410      	add	r0, r2
 8003bb4:	5219      	strh	r1, [r3, r0]
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003bb6:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003bba:	4620      	mov	r0, r4
 8003bbc:	f002 fc73 	bl	80064a6 <HAL_PCD_DataInStageCallback>
 8003bc0:	e5e1      	b.n	8003786 <HAL_PCD_IRQHandler+0x1e>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003bc2:	b932      	cbnz	r2, 8003bd2 <HAL_PCD_IRQHandler+0x46a>
 8003bc4:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003bc8:	011b      	lsls	r3, r3, #4
 8003bca:	b292      	uxth	r2, r2
 8003bcc:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 8003bd0:	e7cc      	b.n	8003b6c <HAL_PCD_IRQHandler+0x404>
 8003bd2:	2a01      	cmp	r2, #1
 8003bd4:	d1ef      	bne.n	8003bb6 <HAL_PCD_IRQHandler+0x44e>
 8003bd6:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003bda:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 8003bde:	b292      	uxth	r2, r2
 8003be0:	011b      	lsls	r3, r3, #4
 8003be2:	4410      	add	r0, r2
 8003be4:	521f      	strh	r7, [r3, r0]
 8003be6:	e7e6      	b.n	8003bb6 <HAL_PCD_IRQHandler+0x44e>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003be8:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003bec:	f417 7c80 	ands.w	ip, r7, #256	; 0x100
            if (ep->xfer_len > TxPctSize)
 8003bf0:	6c2b      	ldr	r3, [r5, #64]	; 0x40
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003bf2:	ea4f 0ac1 	mov.w	sl, r1, lsl #3
 8003bf6:	f500 6e80 	add.w	lr, r0, #1024	; 0x400
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003bfa:	d11b      	bne.n	8003c34 <HAL_PCD_IRQHandler+0x4cc>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003bfc:	f8b0 7050 	ldrh.w	r7, [r0, #80]	; 0x50
 8003c00:	b2bf      	uxth	r7, r7
 8003c02:	4457      	add	r7, sl
 8003c04:	3702      	adds	r7, #2
 8003c06:	f83e 7017 	ldrh.w	r7, [lr, r7, lsl #1]
            if (ep->xfer_len > TxPctSize)
 8003c0a:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8003c0e:	429f      	cmp	r7, r3
 8003c10:	d302      	bcc.n	8003c18 <HAL_PCD_IRQHandler+0x4b0>
 8003c12:	f8c5 c040 	str.w	ip, [r5, #64]	; 0x40
 8003c16:	e7d0      	b.n	8003bba <HAL_PCD_IRQHandler+0x452>
              ep->xfer_len -= TxPctSize;
 8003c18:	1bdb      	subs	r3, r3, r7
 8003c1a:	642b      	str	r3, [r5, #64]	; 0x40
              ep->xfer_buff += TxPctSize;
 8003c1c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
        ep = &hpcd->IN_ep[epindex];
 8003c1e:	fb06 2202 	mla	r2, r6, r2, r2
              ep->xfer_buff += TxPctSize;
 8003c22:	443b      	add	r3, r7
 8003c24:	63eb      	str	r3, [r5, #60]	; 0x3c
              ep->xfer_count += TxPctSize;
 8003c26:	6c6b      	ldr	r3, [r5, #68]	; 0x44
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003c28:	18a1      	adds	r1, r4, r2
              ep->xfer_count += TxPctSize;
 8003c2a:	443b      	add	r3, r7
 8003c2c:	646b      	str	r3, [r5, #68]	; 0x44
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003c2e:	f001 faa9 	bl	8005184 <USB_EPStartXfer>
 8003c32:	e5a8      	b.n	8003786 <HAL_PCD_IRQHandler+0x1e>

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003c34:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003c38:	f017 0c40 	ands.w	ip, r7, #64	; 0x40
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003c3c:	b292      	uxth	r2, r2
 8003c3e:	4452      	add	r2, sl
 8003c40:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003c44:	f000 80dc 	beq.w	8003e00 <HAL_PCD_IRQHandler+0x698>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003c48:	3202      	adds	r2, #2
 8003c4a:	f83e 2012 	ldrh.w	r2, [lr, r2, lsl #1]
 8003c4e:	f04f 0c28 	mov.w	ip, #40	; 0x28

    if (ep->xfer_len > TxPctSize)
 8003c52:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003c56:	429a      	cmp	r2, r3
    {
      ep->xfer_len -= TxPctSize;
    }
    else
    {
      ep->xfer_len = 0U;
 8003c58:	bf28      	it	cs
 8003c5a:	2300      	movcs	r3, #0
 8003c5c:	fb0c 4c06 	mla	ip, ip, r6, r4
      ep->xfer_len -= TxPctSize;
 8003c60:	bf38      	it	cc
 8003c62:	1a9b      	subcc	r3, r3, r2
 8003c64:	f8cc 3040 	str.w	r3, [ip, #64]	; 0x40
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003c68:	b2bf      	uxth	r7, r7
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d14d      	bne.n	8003d0a <HAL_PCD_IRQHandler+0x5a2>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003c6e:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 8003c72:	2a00      	cmp	r2, #0
 8003c74:	d136      	bne.n	8003ce4 <HAL_PCD_IRQHandler+0x57c>
 8003c76:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003c7a:	f200 4604 	addw	r6, r0, #1028	; 0x404
 8003c7e:	b292      	uxth	r2, r2
 8003c80:	010b      	lsls	r3, r1, #4
 8003c82:	4416      	add	r6, r2
 8003c84:	5af2      	ldrh	r2, [r6, r3]
 8003c86:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003c8a:	52f2      	strh	r2, [r6, r3]
 8003c8c:	5af2      	ldrh	r2, [r6, r3]
 8003c8e:	b292      	uxth	r2, r2
 8003c90:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c94:	52f2      	strh	r2, [r6, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003c96:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003c9a:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 8003c9e:	b292      	uxth	r2, r2
 8003ca0:	4410      	add	r0, r2
 8003ca2:	5ac2      	ldrh	r2, [r0, r3]
 8003ca4:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003ca8:	52c2      	strh	r2, [r0, r3]
 8003caa:	5ac2      	ldrh	r2, [r0, r3]
 8003cac:	b292      	uxth	r2, r2
 8003cae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003cb2:	52c2      	strh	r2, [r0, r3]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003cb4:	4620      	mov	r0, r4
 8003cb6:	f002 fbf6 	bl	80064a6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003cba:	2f00      	cmp	r7, #0
 8003cbc:	f000 80dc 	beq.w	8003e78 <HAL_PCD_IRQHandler+0x710>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003cc0:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 8003cc4:	6822      	ldr	r2, [r4, #0]
 8003cc6:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8003cca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cd2:	041b      	lsls	r3, r3, #16
 8003cd4:	0c1b      	lsrs	r3, r3, #16
 8003cd6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003cda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cde:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8003ce2:	e0c9      	b.n	8003e78 <HAL_PCD_IRQHandler+0x710>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003ce4:	2a01      	cmp	r2, #1
 8003ce6:	d1e5      	bne.n	8003cb4 <HAL_PCD_IRQHandler+0x54c>
 8003ce8:	f8b0 c050 	ldrh.w	ip, [r0, #80]	; 0x50
 8003cec:	f200 4604 	addw	r6, r0, #1028	; 0x404
 8003cf0:	fa1f fc8c 	uxth.w	ip, ip
 8003cf4:	010a      	lsls	r2, r1, #4
 8003cf6:	4466      	add	r6, ip
 8003cf8:	52b3      	strh	r3, [r6, r2]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003cfa:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
 8003cfe:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 8003d02:	b2b6      	uxth	r6, r6
 8003d04:	4430      	add	r0, r6
 8003d06:	5283      	strh	r3, [r0, r2]
 8003d08:	e7d4      	b.n	8003cb4 <HAL_PCD_IRQHandler+0x54c>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003d0a:	b16f      	cbz	r7, 8003d28 <HAL_PCD_IRQHandler+0x5c0>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003d0c:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8003d10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d18:	041b      	lsls	r3, r3, #16
 8003d1a:	0c1b      	lsrs	r3, r3, #16
 8003d1c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d24:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8003d28:	2728      	movs	r7, #40	; 0x28
 8003d2a:	fb07 4706 	mla	r7, r7, r6, r4
 8003d2e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	f040 80a0 	bne.w	8003e78 <HAL_PCD_IRQHandler+0x710>
        ep->xfer_buff += TxPctSize;
 8003d38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 8003d3a:	f8d7 e048 	ldr.w	lr, [r7, #72]	; 0x48
        ep->xfer_buff += TxPctSize;
 8003d3e:	eb03 0c02 	add.w	ip, r3, r2
        ep->xfer_count += TxPctSize;
 8003d42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
        ep->xfer_buff += TxPctSize;
 8003d44:	f8c7 c03c 	str.w	ip, [r7, #60]	; 0x3c
        ep->xfer_count += TxPctSize;
 8003d48:	4413      	add	r3, r2
 8003d4a:	647b      	str	r3, [r7, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 8003d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d4e:	459e      	cmp	lr, r3
 8003d50:	d32c      	bcc.n	8003dac <HAL_PCD_IRQHandler+0x644>
          ep->xfer_len_db -= len;
 8003d52:	ebae 0203 	sub.w	r2, lr, r3
 8003d56:	64ba      	str	r2, [r7, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003d58:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 8003d5c:	fa1f fe83 	uxth.w	lr, r3
 8003d60:	2a00      	cmp	r2, #0
 8003d62:	d141      	bne.n	8003de8 <HAL_PCD_IRQHandler+0x680>
 8003d64:	f8b0 7050 	ldrh.w	r7, [r0, #80]	; 0x50
 8003d68:	f200 4204 	addw	r2, r0, #1028	; 0x404
 8003d6c:	b2bf      	uxth	r7, r7
 8003d6e:	443a      	add	r2, r7
 8003d70:	0109      	lsls	r1, r1, #4
 8003d72:	5a57      	ldrh	r7, [r2, r1]
 8003d74:	2b3e      	cmp	r3, #62	; 0x3e
 8003d76:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8003d7a:	5257      	strh	r7, [r2, r1]
 8003d7c:	d923      	bls.n	8003dc6 <HAL_PCD_IRQHandler+0x65e>
 8003d7e:	06df      	lsls	r7, r3, #27
 8003d80:	5a57      	ldrh	r7, [r2, r1]
 8003d82:	ea4f 1a53 	mov.w	sl, r3, lsr #5
 8003d86:	bf08      	it	eq
 8003d88:	f10a 3aff 	addeq.w	sl, sl, #4294967295
 8003d8c:	b2bf      	uxth	r7, r7
 8003d8e:	ea47 278a 	orr.w	r7, r7, sl, lsl #10
 8003d92:	ea47 0708 	orr.w	r7, r7, r8
 8003d96:	b2bf      	uxth	r7, r7
 8003d98:	5257      	strh	r7, [r2, r1]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003d9a:	2228      	movs	r2, #40	; 0x28
 8003d9c:	4673      	mov	r3, lr
 8003d9e:	4661      	mov	r1, ip
 8003da0:	fb02 4206 	mla	r2, r2, r6, r4
 8003da4:	8e12      	ldrh	r2, [r2, #48]	; 0x30

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003da6:	f001 f9dd 	bl	8005164 <USB_WritePMA>
 8003daa:	e065      	b.n	8003e78 <HAL_PCD_IRQHandler+0x710>
        else if (ep->xfer_len_db == 0U)
 8003dac:	f1be 0f00 	cmp.w	lr, #0
 8003db0:	d103      	bne.n	8003dba <HAL_PCD_IRQHandler+0x652>
    if (ep->xfer_len > TxPctSize)
 8003db2:	4613      	mov	r3, r2
          ep->xfer_fill_db = 0U;
 8003db4:	f887 e04c 	strb.w	lr, [r7, #76]	; 0x4c
 8003db8:	e7ce      	b.n	8003d58 <HAL_PCD_IRQHandler+0x5f0>
          ep->xfer_fill_db = 0U;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
          ep->xfer_len_db = 0U;
 8003dc0:	64bb      	str	r3, [r7, #72]	; 0x48
 8003dc2:	4673      	mov	r3, lr
 8003dc4:	e7c8      	b.n	8003d58 <HAL_PCD_IRQHandler+0x5f0>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003dc6:	b92b      	cbnz	r3, 8003dd4 <HAL_PCD_IRQHandler+0x66c>
 8003dc8:	5a53      	ldrh	r3, [r2, r1]
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dd0:	5253      	strh	r3, [r2, r1]
 8003dd2:	e7e2      	b.n	8003d9a <HAL_PCD_IRQHandler+0x632>
 8003dd4:	085f      	lsrs	r7, r3, #1
 8003dd6:	07db      	lsls	r3, r3, #31
 8003dd8:	5a53      	ldrh	r3, [r2, r1]
 8003dda:	bf48      	it	mi
 8003ddc:	3701      	addmi	r7, #1
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	ea43 2387 	orr.w	r3, r3, r7, lsl #10
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	e7f3      	b.n	8003dd0 <HAL_PCD_IRQHandler+0x668>
 8003de8:	2a01      	cmp	r2, #1
 8003dea:	d1d6      	bne.n	8003d9a <HAL_PCD_IRQHandler+0x632>
 8003dec:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003df0:	f200 4304 	addw	r3, r0, #1028	; 0x404
 8003df4:	b292      	uxth	r2, r2
 8003df6:	4413      	add	r3, r2
 8003df8:	0109      	lsls	r1, r1, #4
 8003dfa:	f823 e001 	strh.w	lr, [r3, r1]
 8003dfe:	e7cc      	b.n	8003d9a <HAL_PCD_IRQHandler+0x632>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003e00:	3206      	adds	r2, #6
 8003e02:	f83e 2012 	ldrh.w	r2, [lr, r2, lsl #1]
 8003e06:	b2bf      	uxth	r7, r7
    if (ep->xfer_len >= TxPctSize)
 8003e08:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003e0c:	429a      	cmp	r2, r3
      ep->xfer_len = 0U;
 8003e0e:	bf88      	it	hi
 8003e10:	4663      	movhi	r3, ip
 8003e12:	f04f 0c28 	mov.w	ip, #40	; 0x28
 8003e16:	fb0c 4c06 	mla	ip, ip, r6, r4
      ep->xfer_len -= TxPctSize;
 8003e1a:	bf98      	it	ls
 8003e1c:	1a9b      	subls	r3, r3, r2
 8003e1e:	f8cc 3040 	str.w	r3, [ip, #64]	; 0x40
    if (ep->xfer_len == 0U)
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d14e      	bne.n	8003ec4 <HAL_PCD_IRQHandler+0x75c>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003e26:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 8003e2a:	2a00      	cmp	r2, #0
 8003e2c:	d137      	bne.n	8003e9e <HAL_PCD_IRQHandler+0x736>
 8003e2e:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003e32:	f200 4604 	addw	r6, r0, #1028	; 0x404
 8003e36:	b292      	uxth	r2, r2
 8003e38:	010b      	lsls	r3, r1, #4
 8003e3a:	4416      	add	r6, r2
 8003e3c:	5af2      	ldrh	r2, [r6, r3]
 8003e3e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003e42:	52f2      	strh	r2, [r6, r3]
 8003e44:	5af2      	ldrh	r2, [r6, r3]
 8003e46:	b292      	uxth	r2, r2
 8003e48:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e4c:	52f2      	strh	r2, [r6, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003e4e:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003e52:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 8003e56:	b292      	uxth	r2, r2
 8003e58:	4410      	add	r0, r2
 8003e5a:	5ac2      	ldrh	r2, [r0, r3]
 8003e5c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003e60:	52c2      	strh	r2, [r0, r3]
 8003e62:	5ac2      	ldrh	r2, [r0, r3]
 8003e64:	b292      	uxth	r2, r2
 8003e66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e6a:	52c2      	strh	r2, [r0, r3]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003e6c:	4620      	mov	r0, r4
 8003e6e:	f002 fb1a 	bl	80064a6 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003e72:	2f00      	cmp	r7, #0
 8003e74:	f43f af24 	beq.w	8003cc0 <HAL_PCD_IRQHandler+0x558>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003e78:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 8003e7c:	6822      	ldr	r2, [r4, #0]
 8003e7e:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e8c:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8003e90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e98:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 8003e9c:	e473      	b.n	8003786 <HAL_PCD_IRQHandler+0x1e>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003e9e:	2a01      	cmp	r2, #1
 8003ea0:	d1e4      	bne.n	8003e6c <HAL_PCD_IRQHandler+0x704>
 8003ea2:	f8b0 c050 	ldrh.w	ip, [r0, #80]	; 0x50
 8003ea6:	f200 4604 	addw	r6, r0, #1028	; 0x404
 8003eaa:	fa1f fc8c 	uxth.w	ip, ip
 8003eae:	010a      	lsls	r2, r1, #4
 8003eb0:	4466      	add	r6, ip
 8003eb2:	52b3      	strh	r3, [r6, r2]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003eb4:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
 8003eb8:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 8003ebc:	b2b6      	uxth	r6, r6
 8003ebe:	4430      	add	r0, r6
 8003ec0:	5283      	strh	r3, [r0, r2]
 8003ec2:	e7d3      	b.n	8003e6c <HAL_PCD_IRQHandler+0x704>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003ec4:	b96f      	cbnz	r7, 8003ee2 <HAL_PCD_IRQHandler+0x77a>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003ec6:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8003eca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ece:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ed2:	041b      	lsls	r3, r3, #16
 8003ed4:	0c1b      	lsrs	r3, r3, #16
 8003ed6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003eda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ede:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8003ee2:	f04f 0c28 	mov.w	ip, #40	; 0x28
 8003ee6:	fb0c 4c06 	mla	ip, ip, r6, r4
 8003eea:	f89c 304c 	ldrb.w	r3, [ip, #76]	; 0x4c
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d1c2      	bne.n	8003e78 <HAL_PCD_IRQHandler+0x710>
        ep->xfer_count += TxPctSize;
 8003ef2:	f8dc 3044 	ldr.w	r3, [ip, #68]	; 0x44
        ep->xfer_buff += TxPctSize;
 8003ef6:	f8dc 703c 	ldr.w	r7, [ip, #60]	; 0x3c
        ep->xfer_count += TxPctSize;
 8003efa:	4413      	add	r3, r2
        if (ep->xfer_len_db >= ep->maxpacket)
 8003efc:	f8dc e048 	ldr.w	lr, [ip, #72]	; 0x48
        ep->xfer_count += TxPctSize;
 8003f00:	f8cc 3044 	str.w	r3, [ip, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 8003f04:	f8dc 3038 	ldr.w	r3, [ip, #56]	; 0x38
        ep->xfer_buff += TxPctSize;
 8003f08:	4417      	add	r7, r2
        if (ep->xfer_len_db >= ep->maxpacket)
 8003f0a:	459e      	cmp	lr, r3
        ep->xfer_buff += TxPctSize;
 8003f0c:	f8cc 703c 	str.w	r7, [ip, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 8003f10:	d327      	bcc.n	8003f62 <HAL_PCD_IRQHandler+0x7fa>
          ep->xfer_len_db -= len;
 8003f12:	ebae 0203 	sub.w	r2, lr, r3
 8003f16:	f8cc 2048 	str.w	r2, [ip, #72]	; 0x48
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003f1a:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 8003f1e:	fa1f fc83 	uxth.w	ip, r3
 8003f22:	2a00      	cmp	r2, #0
 8003f24:	d143      	bne.n	8003fae <HAL_PCD_IRQHandler+0x846>
 8003f26:	f8b0 e050 	ldrh.w	lr, [r0, #80]	; 0x50
 8003f2a:	f200 420c 	addw	r2, r0, #1036	; 0x40c
 8003f2e:	fa1f fe8e 	uxth.w	lr, lr
 8003f32:	4472      	add	r2, lr
 8003f34:	0109      	lsls	r1, r1, #4
 8003f36:	f832 e001 	ldrh.w	lr, [r2, r1]
 8003f3a:	2b3e      	cmp	r3, #62	; 0x3e
 8003f3c:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8003f40:	f822 e001 	strh.w	lr, [r2, r1]
 8003f44:	d91b      	bls.n	8003f7e <HAL_PCD_IRQHandler+0x816>
 8003f46:	ea4f 1e53 	mov.w	lr, r3, lsr #5
 8003f4a:	06db      	lsls	r3, r3, #27
 8003f4c:	5a53      	ldrh	r3, [r2, r1]
 8003f4e:	bf08      	it	eq
 8003f50:	f10e 3eff 	addeq.w	lr, lr, #4294967295
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	ea43 238e 	orr.w	r3, r3, lr, lsl #10
 8003f5a:	ea43 0308 	orr.w	r3, r3, r8
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	e012      	b.n	8003f88 <HAL_PCD_IRQHandler+0x820>
        else if (ep->xfer_len_db == 0U)
 8003f62:	f1be 0f00 	cmp.w	lr, #0
 8003f66:	d103      	bne.n	8003f70 <HAL_PCD_IRQHandler+0x808>
    if (ep->xfer_len >= TxPctSize)
 8003f68:	4613      	mov	r3, r2
          ep->xfer_fill_db = 0U;
 8003f6a:	f88c e04c 	strb.w	lr, [ip, #76]	; 0x4c
 8003f6e:	e7d4      	b.n	8003f1a <HAL_PCD_IRQHandler+0x7b2>
          ep->xfer_len_db = 0U;
 8003f70:	2300      	movs	r3, #0
 8003f72:	f8cc 3048 	str.w	r3, [ip, #72]	; 0x48
          ep->xfer_fill_db = 0;
 8003f76:	f88c 304c 	strb.w	r3, [ip, #76]	; 0x4c
 8003f7a:	4673      	mov	r3, lr
 8003f7c:	e7cd      	b.n	8003f1a <HAL_PCD_IRQHandler+0x7b2>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003f7e:	b95b      	cbnz	r3, 8003f98 <HAL_PCD_IRQHandler+0x830>
 8003f80:	5a53      	ldrh	r3, [r2, r1]
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f88:	5253      	strh	r3, [r2, r1]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003f8a:	2328      	movs	r3, #40	; 0x28
 8003f8c:	fb03 4606 	mla	r6, r3, r6, r4
 8003f90:	4639      	mov	r1, r7
 8003f92:	4663      	mov	r3, ip
 8003f94:	8e72      	ldrh	r2, [r6, #50]	; 0x32
 8003f96:	e706      	b.n	8003da6 <HAL_PCD_IRQHandler+0x63e>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003f98:	ea4f 0e53 	mov.w	lr, r3, lsr #1
 8003f9c:	07db      	lsls	r3, r3, #31
 8003f9e:	5a53      	ldrh	r3, [r2, r1]
 8003fa0:	bf48      	it	mi
 8003fa2:	f10e 0e01 	addmi.w	lr, lr, #1
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	ea43 238e 	orr.w	r3, r3, lr, lsl #10
 8003fac:	e7d7      	b.n	8003f5e <HAL_PCD_IRQHandler+0x7f6>
 8003fae:	2a01      	cmp	r2, #1
 8003fb0:	d1eb      	bne.n	8003f8a <HAL_PCD_IRQHandler+0x822>
 8003fb2:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003fb6:	f200 430c 	addw	r3, r0, #1036	; 0x40c
 8003fba:	b292      	uxth	r2, r2
 8003fbc:	4413      	add	r3, r2
 8003fbe:	010a      	lsls	r2, r1, #4
 8003fc0:	f823 c002 	strh.w	ip, [r3, r2]
 8003fc4:	e7e1      	b.n	8003f8a <HAL_PCD_IRQHandler+0x822>
  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003fc6:	0546      	lsls	r6, r0, #21
 8003fc8:	d512      	bpl.n	8003ff0 <HAL_PCD_IRQHandler+0x888>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003fca:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 8003fcc:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003fce:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8003fd2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003fd6:	041b      	lsls	r3, r3, #16
 8003fd8:	0c1b      	lsrs	r3, r3, #16
 8003fda:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8003fde:	f002 fa6e 	bl	80064be <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003fe2:	4629      	mov	r1, r5
 8003fe4:	4620      	mov	r0, r4
}
 8003fe6:	b005      	add	sp, #20
 8003fe8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003fec:	f7ff bba7 	b.w	800373e <HAL_PCD_SetAddress>
  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003ff0:	0441      	lsls	r1, r0, #17
 8003ff2:	d50a      	bpl.n	800400a <HAL_PCD_IRQHandler+0x8a2>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003ff4:	6822      	ldr	r2, [r4, #0]
 8003ff6:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8003ffa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003ffe:	041b      	lsls	r3, r3, #16
 8004000:	0c1b      	lsrs	r3, r3, #16
 8004002:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    return;
 8004006:	f7ff bbc3 	b.w	8003790 <HAL_PCD_IRQHandler+0x28>
  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800400a:	0482      	lsls	r2, r0, #18
 800400c:	d505      	bpl.n	800401a <HAL_PCD_IRQHandler+0x8b2>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800400e:	6822      	ldr	r2, [r4, #0]
 8004010:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8004014:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004018:	e7f1      	b.n	8003ffe <HAL_PCD_IRQHandler+0x896>
  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800401a:	04c3      	lsls	r3, r0, #19
 800401c:	d519      	bpl.n	8004052 <HAL_PCD_IRQHandler+0x8ea>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800401e:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 8004020:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8004022:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8004026:	f023 0304 	bic.w	r3, r3, #4
 800402a:	041b      	lsls	r3, r3, #16
 800402c:	0c1b      	lsrs	r3, r3, #16
 800402e:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004032:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8004036:	f023 0308 	bic.w	r3, r3, #8
 800403a:	041b      	lsls	r3, r3, #16
 800403c:	0c1b      	lsrs	r3, r3, #16
 800403e:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8004042:	f002 fa5f 	bl	8006504 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004046:	6822      	ldr	r2, [r4, #0]
 8004048:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800404c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004050:	e7d5      	b.n	8003ffe <HAL_PCD_IRQHandler+0x896>
  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8004052:	0507      	lsls	r7, r0, #20
 8004054:	d548      	bpl.n	80040e8 <HAL_PCD_IRQHandler+0x980>
 8004056:	4668      	mov	r0, sp
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8004058:	6822      	ldr	r2, [r4, #0]
 800405a:	4606      	mov	r6, r0
 800405c:	4611      	mov	r1, r2
 800405e:	4613      	mov	r3, r2
 8004060:	f102 0520 	add.w	r5, r2, #32
 8004064:	f833 7b04 	ldrh.w	r7, [r3], #4
    for (i = 0U; i < 8U; i++)
 8004068:	429d      	cmp	r5, r3
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800406a:	f826 7b02 	strh.w	r7, [r6], #2
    for (i = 0U; i < 8U; i++)
 800406e:	d1f9      	bne.n	8004064 <HAL_PCD_IRQHandler+0x8fc>
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8004070:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8004074:	b29b      	uxth	r3, r3
 8004076:	f043 0301 	orr.w	r3, r3, #1
 800407a:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800407e:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8004082:	f023 0301 	bic.w	r3, r3, #1
 8004086:	041b      	lsls	r3, r3, #16
 8004088:	0c1b      	lsrs	r3, r3, #16
 800408a:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800408e:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8004092:	055e      	lsls	r6, r3, #21
 8004094:	d5fb      	bpl.n	800408e <HAL_PCD_IRQHandler+0x926>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004096:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800409a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800409e:	041b      	lsls	r3, r3, #16
 80040a0:	0c1b      	lsrs	r3, r3, #16
 80040a2:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80040a6:	f830 3b02 	ldrh.w	r3, [r0], #2
 80040aa:	f821 3b04 	strh.w	r3, [r1], #4
    for (i = 0U; i < 8U; i++)
 80040ae:	428d      	cmp	r5, r1
 80040b0:	d1f9      	bne.n	80040a6 <HAL_PCD_IRQHandler+0x93e>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80040b2:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 80040b6:	4620      	mov	r0, r4
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	f043 0308 	orr.w	r3, r3, #8
 80040be:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80040c2:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80040c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80040ca:	041b      	lsls	r3, r3, #16
 80040cc:	0c1b      	lsrs	r3, r3, #16
 80040ce:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80040d2:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	f043 0304 	orr.w	r3, r3, #4
 80040dc:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 80040e0:	f002 fa00 	bl	80064e4 <HAL_PCD_SuspendCallback>
    return;
 80040e4:	f7ff bb54 	b.w	8003790 <HAL_PCD_IRQHandler+0x28>
  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80040e8:	0582      	lsls	r2, r0, #22
 80040ea:	d50d      	bpl.n	8004108 <HAL_PCD_IRQHandler+0x9a0>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80040ec:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 80040ee:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80040f0:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80040f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80040f8:	041b      	lsls	r3, r3, #16
 80040fa:	0c1b      	lsrs	r3, r3, #16
 80040fc:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8004100:	f002 f9d9 	bl	80064b6 <HAL_PCD_SOFCallback>
    return;
 8004104:	f7ff bb44 	b.w	8003790 <HAL_PCD_IRQHandler+0x28>
  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8004108:	05c3      	lsls	r3, r0, #23
 800410a:	f57f ab41 	bpl.w	8003790 <HAL_PCD_IRQHandler+0x28>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800410e:	6822      	ldr	r2, [r4, #0]
 8004110:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8004114:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004118:	e771      	b.n	8003ffe <HAL_PCD_IRQHandler+0x896>
 800411a:	bf00      	nop

0800411c <HAL_PCD_EP_Open>:
  if ((ep_addr & 0x80U) == 0x80U)
 800411c:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 8004120:	b570      	push	{r4, r5, r6, lr}
 8004122:	4605      	mov	r5, r0
 8004124:	f001 0007 	and.w	r0, r1, #7
 8004128:	f04f 0128 	mov.w	r1, #40	; 0x28
  if ((ep_addr & 0x80U) == 0x80U)
 800412c:	d01a      	beq.n	8004164 <HAL_PCD_EP_Open+0x48>
    ep->is_in = 1U;
 800412e:	2401      	movs	r4, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004130:	fb00 1101 	mla	r1, r0, r1, r1
 8004134:	4429      	add	r1, r5
    ep->is_in = 1U;
 8004136:	704c      	strb	r4, [r1, #1]
  if (ep_type == EP_TYPE_BULK)
 8004138:	2b02      	cmp	r3, #2
  ep->type = ep_type;
 800413a:	70cb      	strb	r3, [r1, #3]
    ep->data_pid_start = 0U;
 800413c:	bf08      	it	eq
 800413e:	2300      	moveq	r3, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 8004140:	7008      	strb	r0, [r1, #0]
    ep->data_pid_start = 0U;
 8004142:	bf08      	it	eq
 8004144:	710b      	strbeq	r3, [r1, #4]
  ep->maxpacket = ep_mps;
 8004146:	610a      	str	r2, [r1, #16]
  __HAL_LOCK(hpcd);
 8004148:	f895 32a8 	ldrb.w	r3, [r5, #680]	; 0x2a8
 800414c:	2b01      	cmp	r3, #1
 800414e:	d013      	beq.n	8004178 <HAL_PCD_EP_Open+0x5c>
 8004150:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004152:	6828      	ldr	r0, [r5, #0]
  __HAL_LOCK(hpcd);
 8004154:	f885 32a8 	strb.w	r3, [r5, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004158:	f000 fd58 	bl	8004c0c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800415c:	2000      	movs	r0, #0
 800415e:	f885 02a8 	strb.w	r0, [r5, #680]	; 0x2a8
}
 8004162:	bd70      	pop	{r4, r5, r6, pc}
    ep->is_in = 0U;
 8004164:	2600      	movs	r6, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004166:	fb01 f400 	mul.w	r4, r1, r0
 800416a:	f504 71b4 	add.w	r1, r4, #360	; 0x168
    ep->is_in = 0U;
 800416e:	442c      	add	r4, r5
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004170:	4429      	add	r1, r5
    ep->is_in = 0U;
 8004172:	f884 6169 	strb.w	r6, [r4, #361]	; 0x169
 8004176:	e7df      	b.n	8004138 <HAL_PCD_EP_Open+0x1c>
  __HAL_LOCK(hpcd);
 8004178:	2002      	movs	r0, #2
 800417a:	e7f2      	b.n	8004162 <HAL_PCD_EP_Open+0x46>

0800417c <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 800417c:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 8004180:	b510      	push	{r4, lr}
 8004182:	f001 0207 	and.w	r2, r1, #7
 8004186:	4604      	mov	r4, r0
 8004188:	f04f 0128 	mov.w	r1, #40	; 0x28
  if ((ep_addr & 0x80U) == 0x80U)
 800418c:	d013      	beq.n	80041b6 <HAL_PCD_EP_Close+0x3a>
    ep->is_in = 1U;
 800418e:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004190:	fb02 1101 	mla	r1, r2, r1, r1
 8004194:	4401      	add	r1, r0
    ep->is_in = 1U;
 8004196:	704b      	strb	r3, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004198:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 800419a:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d013      	beq.n	80041ca <HAL_PCD_EP_Close+0x4e>
 80041a2:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80041a4:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80041a6:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80041aa:	f000 fe8f 	bl	8004ecc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80041ae:	2000      	movs	r0, #0
 80041b0:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 80041b4:	bd10      	pop	{r4, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041b6:	fb01 f302 	mul.w	r3, r1, r2
 80041ba:	f503 71b4 	add.w	r1, r3, #360	; 0x168
 80041be:	4401      	add	r1, r0
    ep->is_in = 0U;
 80041c0:	4403      	add	r3, r0
 80041c2:	2000      	movs	r0, #0
 80041c4:	f883 0169 	strb.w	r0, [r3, #361]	; 0x169
 80041c8:	e7e6      	b.n	8004198 <HAL_PCD_EP_Close+0x1c>
  __HAL_LOCK(hpcd);
 80041ca:	2002      	movs	r0, #2
 80041cc:	e7f2      	b.n	80041b4 <HAL_PCD_EP_Close+0x38>

080041ce <HAL_PCD_EP_Receive>:
{
 80041ce:	b570      	push	{r4, r5, r6, lr}
  ep->xfer_buff = pBuf;
 80041d0:	2428      	movs	r4, #40	; 0x28
  ep->xfer_count = 0U;
 80041d2:	2600      	movs	r6, #0
 80041d4:	f001 0107 	and.w	r1, r1, #7
  ep->xfer_buff = pBuf;
 80041d8:	434c      	muls	r4, r1
 80041da:	1905      	adds	r5, r0, r4
  ep->num = ep_addr & EP_ADDR_MSK;
 80041dc:	f885 1168 	strb.w	r1, [r5, #360]	; 0x168
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041e0:	f504 71b4 	add.w	r1, r4, #360	; 0x168
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80041e4:	4401      	add	r1, r0
  ep->xfer_len = len;
 80041e6:	e9c5 235f 	strd	r2, r3, [r5, #380]	; 0x17c
  ep->xfer_count = 0U;
 80041ea:	f8c5 6184 	str.w	r6, [r5, #388]	; 0x184
  ep->is_in = 0U;
 80041ee:	f885 6169 	strb.w	r6, [r5, #361]	; 0x169
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80041f2:	6800      	ldr	r0, [r0, #0]
 80041f4:	f000 ffc6 	bl	8005184 <USB_EPStartXfer>
}
 80041f8:	4630      	mov	r0, r6
 80041fa:	bd70      	pop	{r4, r5, r6, pc}

080041fc <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80041fc:	2328      	movs	r3, #40	; 0x28
 80041fe:	f001 0107 	and.w	r1, r1, #7
 8004202:	fb03 0001 	mla	r0, r3, r1, r0
}
 8004206:	f8d0 0184 	ldr.w	r0, [r0, #388]	; 0x184
 800420a:	4770      	bx	lr

0800420c <HAL_PCD_EP_Transmit>:
{
 800420c:	b570      	push	{r4, r5, r6, lr}
 800420e:	f001 0507 	and.w	r5, r1, #7
  ep->xfer_buff = pBuf;
 8004212:	2128      	movs	r1, #40	; 0x28
 8004214:	fb01 0405 	mla	r4, r1, r5, r0
  ep->xfer_count = 0U;
 8004218:	2600      	movs	r6, #0
  ep->xfer_len = len;
 800421a:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
  ep->xfer_fill_db = 1U;
 800421e:	2201      	movs	r2, #1
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004220:	fb05 1101 	mla	r1, r5, r1, r1
  ep->xfer_fill_db = 1U;
 8004224:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004228:	4401      	add	r1, r0
  ep->xfer_len_db = len;
 800422a:	64a3      	str	r3, [r4, #72]	; 0x48
  ep->xfer_count = 0U;
 800422c:	6466      	str	r6, [r4, #68]	; 0x44
  ep->is_in = 1U;
 800422e:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
  ep->num = ep_addr & EP_ADDR_MSK;
 8004232:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004236:	6800      	ldr	r0, [r0, #0]
 8004238:	f000 ffa4 	bl	8005184 <USB_EPStartXfer>
}
 800423c:	4630      	mov	r0, r6
 800423e:	bd70      	pop	{r4, r5, r6, pc}

08004240 <HAL_PCD_EP_SetStall>:
{
 8004240:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004242:	6843      	ldr	r3, [r0, #4]
 8004244:	f001 0507 	and.w	r5, r1, #7
 8004248:	429d      	cmp	r5, r3
{
 800424a:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800424c:	d828      	bhi.n	80042a0 <HAL_PCD_EP_SetStall+0x60>
  if ((0x80U & ep_addr) == 0x80U)
 800424e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8004252:	f04f 0328 	mov.w	r3, #40	; 0x28
 8004256:	d01a      	beq.n	800428e <HAL_PCD_EP_SetStall+0x4e>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004258:	fb05 3303 	mla	r3, r5, r3, r3
 800425c:	18c1      	adds	r1, r0, r3
    ep->is_in = 1U;
 800425e:	2301      	movs	r3, #1
 8004260:	704b      	strb	r3, [r1, #1]
  ep->is_stall = 1U;
 8004262:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8004264:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8004266:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8004268:	f894 22a8 	ldrb.w	r2, [r4, #680]	; 0x2a8
 800426c:	429a      	cmp	r2, r3
 800426e:	d019      	beq.n	80042a4 <HAL_PCD_EP_SetStall+0x64>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004270:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8004272:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004276:	f000 fefc 	bl	8005072 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800427a:	b925      	cbnz	r5, 8004286 <HAL_PCD_EP_SetStall+0x46>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800427c:	6820      	ldr	r0, [r4, #0]
 800427e:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 8004282:	f000 ff6d 	bl	8005160 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 8004286:	2000      	movs	r0, #0
 8004288:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 800428c:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 0U;
 800428e:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 8004290:	434b      	muls	r3, r1
 8004292:	f503 71b4 	add.w	r1, r3, #360	; 0x168
    ep->is_in = 0U;
 8004296:	4403      	add	r3, r0
    ep = &hpcd->OUT_ep[ep_addr];
 8004298:	4401      	add	r1, r0
    ep->is_in = 0U;
 800429a:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
 800429e:	e7e0      	b.n	8004262 <HAL_PCD_EP_SetStall+0x22>
    return HAL_ERROR;
 80042a0:	2001      	movs	r0, #1
 80042a2:	e7f3      	b.n	800428c <HAL_PCD_EP_SetStall+0x4c>
  __HAL_LOCK(hpcd);
 80042a4:	2002      	movs	r0, #2
 80042a6:	e7f1      	b.n	800428c <HAL_PCD_EP_SetStall+0x4c>

080042a8 <HAL_PCD_EP_ClrStall>:
{
 80042a8:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80042aa:	6843      	ldr	r3, [r0, #4]
 80042ac:	f001 020f 	and.w	r2, r1, #15
 80042b0:	429a      	cmp	r2, r3
{
 80042b2:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80042b4:	d826      	bhi.n	8004304 <HAL_PCD_EP_ClrStall+0x5c>
  if ((0x80U & ep_addr) == 0x80U)
 80042b6:	f011 0f80 	tst.w	r1, #128	; 0x80
 80042ba:	f001 0207 	and.w	r2, r1, #7
 80042be:	f04f 0128 	mov.w	r1, #40	; 0x28
 80042c2:	d015      	beq.n	80042f0 <HAL_PCD_EP_ClrStall+0x48>
    ep->is_in = 1U;
 80042c4:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042c6:	fb02 1101 	mla	r1, r2, r1, r1
 80042ca:	4401      	add	r1, r0
    ep->is_in = 1U;
 80042cc:	704b      	strb	r3, [r1, #1]
  ep->is_stall = 0U;
 80042ce:	2500      	movs	r5, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 80042d0:	700a      	strb	r2, [r1, #0]
  ep->is_stall = 0U;
 80042d2:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 80042d4:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d015      	beq.n	8004308 <HAL_PCD_EP_ClrStall+0x60>
 80042dc:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80042de:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80042e0:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80042e4:	f000 fee5 	bl	80050b2 <USB_EPClearStall>
  return HAL_OK;
 80042e8:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 80042ea:	f884 52a8 	strb.w	r5, [r4, #680]	; 0x2a8
}
 80042ee:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80042f0:	fb01 f302 	mul.w	r3, r1, r2
 80042f4:	f503 71b4 	add.w	r1, r3, #360	; 0x168
 80042f8:	4401      	add	r1, r0
    ep->is_in = 0U;
 80042fa:	4403      	add	r3, r0
 80042fc:	2000      	movs	r0, #0
 80042fe:	f883 0169 	strb.w	r0, [r3, #361]	; 0x169
 8004302:	e7e4      	b.n	80042ce <HAL_PCD_EP_ClrStall+0x26>
    return HAL_ERROR;
 8004304:	2001      	movs	r0, #1
 8004306:	e7f2      	b.n	80042ee <HAL_PCD_EP_ClrStall+0x46>
  __HAL_LOCK(hpcd);
 8004308:	2002      	movs	r0, #2
 800430a:	e7f0      	b.n	80042ee <HAL_PCD_EP_ClrStall+0x46>

0800430c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800430c:	b510      	push	{r4, lr}
 800430e:	2428      	movs	r4, #40	; 0x28
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004310:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004314:	bf1b      	ittet	ne
 8004316:	f001 0107 	andne.w	r1, r1, #7
 800431a:	fb01 4404 	mlane	r4, r1, r4, r4
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800431e:	fb04 0001 	mlaeq	r0, r4, r1, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004322:	1900      	addne	r0, r0, r4
    ep = &hpcd->OUT_ep[ep_addr];
 8004324:	bf08      	it	eq
 8004326:	f500 70b4 	addeq.w	r0, r0, #360	; 0x168
  if (ep_kind == PCD_SNG_BUF)
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800432a:	b299      	uxth	r1, r3
  if (ep_kind == PCD_SNG_BUF)
 800432c:	b91a      	cbnz	r2, 8004336 <HAL_PCDEx_PMAConfig+0x2a>
    ep->doublebuffer = 0U;
 800432e:	7302      	strb	r2, [r0, #12]
    ep->pmaadress = (uint16_t)pmaadress;
 8004330:	80c1      	strh	r1, [r0, #6]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8004332:	2000      	movs	r0, #0
 8004334:	bd10      	pop	{r4, pc}
    ep->doublebuffer = 1U;
 8004336:	2201      	movs	r2, #1
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004338:	6083      	str	r3, [r0, #8]
    ep->doublebuffer = 1U;
 800433a:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800433c:	e7f9      	b.n	8004332 <HAL_PCDEx_PMAConfig+0x26>
	...

08004340 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004340:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004344:	4605      	mov	r5, r0
 8004346:	b338      	cbz	r0, 8004398 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004348:	6803      	ldr	r3, [r0, #0]
 800434a:	07db      	lsls	r3, r3, #31
 800434c:	d410      	bmi.n	8004370 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800434e:	682b      	ldr	r3, [r5, #0]
 8004350:	079f      	lsls	r7, r3, #30
 8004352:	d45e      	bmi.n	8004412 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004354:	682b      	ldr	r3, [r5, #0]
 8004356:	0719      	lsls	r1, r3, #28
 8004358:	f100 8095 	bmi.w	8004486 <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800435c:	682b      	ldr	r3, [r5, #0]
 800435e:	075a      	lsls	r2, r3, #29
 8004360:	f100 80c1 	bmi.w	80044e6 <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004364:	69e8      	ldr	r0, [r5, #28]
 8004366:	2800      	cmp	r0, #0
 8004368:	f040 812c 	bne.w	80045c4 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 800436c:	2000      	movs	r0, #0
 800436e:	e029      	b.n	80043c4 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004370:	4c90      	ldr	r4, [pc, #576]	; (80045b4 <HAL_RCC_OscConfig+0x274>)
 8004372:	6863      	ldr	r3, [r4, #4]
 8004374:	f003 030c 	and.w	r3, r3, #12
 8004378:	2b04      	cmp	r3, #4
 800437a:	d007      	beq.n	800438c <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800437c:	6863      	ldr	r3, [r4, #4]
 800437e:	f003 030c 	and.w	r3, r3, #12
 8004382:	2b08      	cmp	r3, #8
 8004384:	d10a      	bne.n	800439c <HAL_RCC_OscConfig+0x5c>
 8004386:	6863      	ldr	r3, [r4, #4]
 8004388:	03de      	lsls	r6, r3, #15
 800438a:	d507      	bpl.n	800439c <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800438c:	6823      	ldr	r3, [r4, #0]
 800438e:	039c      	lsls	r4, r3, #14
 8004390:	d5dd      	bpl.n	800434e <HAL_RCC_OscConfig+0xe>
 8004392:	686b      	ldr	r3, [r5, #4]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d1da      	bne.n	800434e <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 8004398:	2001      	movs	r0, #1
 800439a:	e013      	b.n	80043c4 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800439c:	686b      	ldr	r3, [r5, #4]
 800439e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043a2:	d112      	bne.n	80043ca <HAL_RCC_OscConfig+0x8a>
 80043a4:	6823      	ldr	r3, [r4, #0]
 80043a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043aa:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80043ac:	f7fd fe24 	bl	8001ff8 <HAL_GetTick>
 80043b0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043b2:	6823      	ldr	r3, [r4, #0]
 80043b4:	0398      	lsls	r0, r3, #14
 80043b6:	d4ca      	bmi.n	800434e <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043b8:	f7fd fe1e 	bl	8001ff8 <HAL_GetTick>
 80043bc:	1b80      	subs	r0, r0, r6
 80043be:	2864      	cmp	r0, #100	; 0x64
 80043c0:	d9f7      	bls.n	80043b2 <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 80043c2:	2003      	movs	r0, #3
}
 80043c4:	b002      	add	sp, #8
 80043c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043ca:	b99b      	cbnz	r3, 80043f4 <HAL_RCC_OscConfig+0xb4>
 80043cc:	6823      	ldr	r3, [r4, #0]
 80043ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043d2:	6023      	str	r3, [r4, #0]
 80043d4:	6823      	ldr	r3, [r4, #0]
 80043d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043da:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80043dc:	f7fd fe0c 	bl	8001ff8 <HAL_GetTick>
 80043e0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043e2:	6823      	ldr	r3, [r4, #0]
 80043e4:	0399      	lsls	r1, r3, #14
 80043e6:	d5b2      	bpl.n	800434e <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043e8:	f7fd fe06 	bl	8001ff8 <HAL_GetTick>
 80043ec:	1b80      	subs	r0, r0, r6
 80043ee:	2864      	cmp	r0, #100	; 0x64
 80043f0:	d9f7      	bls.n	80043e2 <HAL_RCC_OscConfig+0xa2>
 80043f2:	e7e6      	b.n	80043c2 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043f8:	6823      	ldr	r3, [r4, #0]
 80043fa:	d103      	bne.n	8004404 <HAL_RCC_OscConfig+0xc4>
 80043fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004400:	6023      	str	r3, [r4, #0]
 8004402:	e7cf      	b.n	80043a4 <HAL_RCC_OscConfig+0x64>
 8004404:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004408:	6023      	str	r3, [r4, #0]
 800440a:	6823      	ldr	r3, [r4, #0]
 800440c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004410:	e7cb      	b.n	80043aa <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004412:	4c68      	ldr	r4, [pc, #416]	; (80045b4 <HAL_RCC_OscConfig+0x274>)
 8004414:	6863      	ldr	r3, [r4, #4]
 8004416:	f013 0f0c 	tst.w	r3, #12
 800441a:	d007      	beq.n	800442c <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800441c:	6863      	ldr	r3, [r4, #4]
 800441e:	f003 030c 	and.w	r3, r3, #12
 8004422:	2b08      	cmp	r3, #8
 8004424:	d110      	bne.n	8004448 <HAL_RCC_OscConfig+0x108>
 8004426:	6863      	ldr	r3, [r4, #4]
 8004428:	03da      	lsls	r2, r3, #15
 800442a:	d40d      	bmi.n	8004448 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800442c:	6823      	ldr	r3, [r4, #0]
 800442e:	079b      	lsls	r3, r3, #30
 8004430:	d502      	bpl.n	8004438 <HAL_RCC_OscConfig+0xf8>
 8004432:	692b      	ldr	r3, [r5, #16]
 8004434:	2b01      	cmp	r3, #1
 8004436:	d1af      	bne.n	8004398 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004438:	6823      	ldr	r3, [r4, #0]
 800443a:	696a      	ldr	r2, [r5, #20]
 800443c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004440:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004444:	6023      	str	r3, [r4, #0]
 8004446:	e785      	b.n	8004354 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004448:	692a      	ldr	r2, [r5, #16]
 800444a:	4b5b      	ldr	r3, [pc, #364]	; (80045b8 <HAL_RCC_OscConfig+0x278>)
 800444c:	b16a      	cbz	r2, 800446a <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 800444e:	2201      	movs	r2, #1
 8004450:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004452:	f7fd fdd1 	bl	8001ff8 <HAL_GetTick>
 8004456:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004458:	6823      	ldr	r3, [r4, #0]
 800445a:	079f      	lsls	r7, r3, #30
 800445c:	d4ec      	bmi.n	8004438 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800445e:	f7fd fdcb 	bl	8001ff8 <HAL_GetTick>
 8004462:	1b80      	subs	r0, r0, r6
 8004464:	2802      	cmp	r0, #2
 8004466:	d9f7      	bls.n	8004458 <HAL_RCC_OscConfig+0x118>
 8004468:	e7ab      	b.n	80043c2 <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 800446a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800446c:	f7fd fdc4 	bl	8001ff8 <HAL_GetTick>
 8004470:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004472:	6823      	ldr	r3, [r4, #0]
 8004474:	0798      	lsls	r0, r3, #30
 8004476:	f57f af6d 	bpl.w	8004354 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800447a:	f7fd fdbd 	bl	8001ff8 <HAL_GetTick>
 800447e:	1b80      	subs	r0, r0, r6
 8004480:	2802      	cmp	r0, #2
 8004482:	d9f6      	bls.n	8004472 <HAL_RCC_OscConfig+0x132>
 8004484:	e79d      	b.n	80043c2 <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004486:	69aa      	ldr	r2, [r5, #24]
 8004488:	4e4a      	ldr	r6, [pc, #296]	; (80045b4 <HAL_RCC_OscConfig+0x274>)
 800448a:	4b4b      	ldr	r3, [pc, #300]	; (80045b8 <HAL_RCC_OscConfig+0x278>)
 800448c:	b1e2      	cbz	r2, 80044c8 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 800448e:	2201      	movs	r2, #1
 8004490:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8004494:	f7fd fdb0 	bl	8001ff8 <HAL_GetTick>
 8004498:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800449a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800449c:	079b      	lsls	r3, r3, #30
 800449e:	d50d      	bpl.n	80044bc <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80044a0:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80044a4:	4b45      	ldr	r3, [pc, #276]	; (80045bc <HAL_RCC_OscConfig+0x27c>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80044ac:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80044ae:	bf00      	nop
  }
  while (Delay --);
 80044b0:	9b01      	ldr	r3, [sp, #4]
 80044b2:	1e5a      	subs	r2, r3, #1
 80044b4:	9201      	str	r2, [sp, #4]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d1f9      	bne.n	80044ae <HAL_RCC_OscConfig+0x16e>
 80044ba:	e74f      	b.n	800435c <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044bc:	f7fd fd9c 	bl	8001ff8 <HAL_GetTick>
 80044c0:	1b00      	subs	r0, r0, r4
 80044c2:	2802      	cmp	r0, #2
 80044c4:	d9e9      	bls.n	800449a <HAL_RCC_OscConfig+0x15a>
 80044c6:	e77c      	b.n	80043c2 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 80044c8:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 80044cc:	f7fd fd94 	bl	8001ff8 <HAL_GetTick>
 80044d0:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044d2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80044d4:	079f      	lsls	r7, r3, #30
 80044d6:	f57f af41 	bpl.w	800435c <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044da:	f7fd fd8d 	bl	8001ff8 <HAL_GetTick>
 80044de:	1b00      	subs	r0, r0, r4
 80044e0:	2802      	cmp	r0, #2
 80044e2:	d9f6      	bls.n	80044d2 <HAL_RCC_OscConfig+0x192>
 80044e4:	e76d      	b.n	80043c2 <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044e6:	4c33      	ldr	r4, [pc, #204]	; (80045b4 <HAL_RCC_OscConfig+0x274>)
 80044e8:	69e3      	ldr	r3, [r4, #28]
 80044ea:	00d8      	lsls	r0, r3, #3
 80044ec:	d424      	bmi.n	8004538 <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 80044ee:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80044f0:	69e3      	ldr	r3, [r4, #28]
 80044f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044f6:	61e3      	str	r3, [r4, #28]
 80044f8:	69e3      	ldr	r3, [r4, #28]
 80044fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044fe:	9300      	str	r3, [sp, #0]
 8004500:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004502:	4e2f      	ldr	r6, [pc, #188]	; (80045c0 <HAL_RCC_OscConfig+0x280>)
 8004504:	6833      	ldr	r3, [r6, #0]
 8004506:	05d9      	lsls	r1, r3, #23
 8004508:	d518      	bpl.n	800453c <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800450a:	68eb      	ldr	r3, [r5, #12]
 800450c:	2b01      	cmp	r3, #1
 800450e:	d126      	bne.n	800455e <HAL_RCC_OscConfig+0x21e>
 8004510:	6a23      	ldr	r3, [r4, #32]
 8004512:	f043 0301 	orr.w	r3, r3, #1
 8004516:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8004518:	f7fd fd6e 	bl	8001ff8 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800451c:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8004520:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004522:	6a23      	ldr	r3, [r4, #32]
 8004524:	079b      	lsls	r3, r3, #30
 8004526:	d53f      	bpl.n	80045a8 <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 8004528:	2f00      	cmp	r7, #0
 800452a:	f43f af1b 	beq.w	8004364 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 800452e:	69e3      	ldr	r3, [r4, #28]
 8004530:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004534:	61e3      	str	r3, [r4, #28]
 8004536:	e715      	b.n	8004364 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8004538:	2700      	movs	r7, #0
 800453a:	e7e2      	b.n	8004502 <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800453c:	6833      	ldr	r3, [r6, #0]
 800453e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004542:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8004544:	f7fd fd58 	bl	8001ff8 <HAL_GetTick>
 8004548:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800454a:	6833      	ldr	r3, [r6, #0]
 800454c:	05da      	lsls	r2, r3, #23
 800454e:	d4dc      	bmi.n	800450a <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004550:	f7fd fd52 	bl	8001ff8 <HAL_GetTick>
 8004554:	eba0 0008 	sub.w	r0, r0, r8
 8004558:	2864      	cmp	r0, #100	; 0x64
 800455a:	d9f6      	bls.n	800454a <HAL_RCC_OscConfig+0x20a>
 800455c:	e731      	b.n	80043c2 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800455e:	b9ab      	cbnz	r3, 800458c <HAL_RCC_OscConfig+0x24c>
 8004560:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004562:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004566:	f023 0301 	bic.w	r3, r3, #1
 800456a:	6223      	str	r3, [r4, #32]
 800456c:	6a23      	ldr	r3, [r4, #32]
 800456e:	f023 0304 	bic.w	r3, r3, #4
 8004572:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8004574:	f7fd fd40 	bl	8001ff8 <HAL_GetTick>
 8004578:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800457a:	6a23      	ldr	r3, [r4, #32]
 800457c:	0798      	lsls	r0, r3, #30
 800457e:	d5d3      	bpl.n	8004528 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004580:	f7fd fd3a 	bl	8001ff8 <HAL_GetTick>
 8004584:	1b80      	subs	r0, r0, r6
 8004586:	4540      	cmp	r0, r8
 8004588:	d9f7      	bls.n	800457a <HAL_RCC_OscConfig+0x23a>
 800458a:	e71a      	b.n	80043c2 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800458c:	2b05      	cmp	r3, #5
 800458e:	6a23      	ldr	r3, [r4, #32]
 8004590:	d103      	bne.n	800459a <HAL_RCC_OscConfig+0x25a>
 8004592:	f043 0304 	orr.w	r3, r3, #4
 8004596:	6223      	str	r3, [r4, #32]
 8004598:	e7ba      	b.n	8004510 <HAL_RCC_OscConfig+0x1d0>
 800459a:	f023 0301 	bic.w	r3, r3, #1
 800459e:	6223      	str	r3, [r4, #32]
 80045a0:	6a23      	ldr	r3, [r4, #32]
 80045a2:	f023 0304 	bic.w	r3, r3, #4
 80045a6:	e7b6      	b.n	8004516 <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045a8:	f7fd fd26 	bl	8001ff8 <HAL_GetTick>
 80045ac:	1b80      	subs	r0, r0, r6
 80045ae:	4540      	cmp	r0, r8
 80045b0:	d9b7      	bls.n	8004522 <HAL_RCC_OscConfig+0x1e2>
 80045b2:	e706      	b.n	80043c2 <HAL_RCC_OscConfig+0x82>
 80045b4:	40021000 	.word	0x40021000
 80045b8:	42420000 	.word	0x42420000
 80045bc:	20000004 	.word	0x20000004
 80045c0:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045c4:	4c2a      	ldr	r4, [pc, #168]	; (8004670 <HAL_RCC_OscConfig+0x330>)
 80045c6:	6863      	ldr	r3, [r4, #4]
 80045c8:	f003 030c 	and.w	r3, r3, #12
 80045cc:	2b08      	cmp	r3, #8
 80045ce:	d03e      	beq.n	800464e <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045d0:	2200      	movs	r2, #0
 80045d2:	4b28      	ldr	r3, [pc, #160]	; (8004674 <HAL_RCC_OscConfig+0x334>)
 80045d4:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80045d6:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045d8:	d12c      	bne.n	8004634 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 80045da:	f7fd fd0d 	bl	8001ff8 <HAL_GetTick>
 80045de:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045e0:	6823      	ldr	r3, [r4, #0]
 80045e2:	0199      	lsls	r1, r3, #6
 80045e4:	d420      	bmi.n	8004628 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80045e6:	6a2b      	ldr	r3, [r5, #32]
 80045e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045ec:	d105      	bne.n	80045fa <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80045ee:	6862      	ldr	r2, [r4, #4]
 80045f0:	68a9      	ldr	r1, [r5, #8]
 80045f2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80045f6:	430a      	orrs	r2, r1
 80045f8:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045fa:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80045fc:	6862      	ldr	r2, [r4, #4]
 80045fe:	430b      	orrs	r3, r1
 8004600:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8004604:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 8004606:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004608:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800460a:	4b1a      	ldr	r3, [pc, #104]	; (8004674 <HAL_RCC_OscConfig+0x334>)
 800460c:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 800460e:	f7fd fcf3 	bl	8001ff8 <HAL_GetTick>
 8004612:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004614:	6823      	ldr	r3, [r4, #0]
 8004616:	019a      	lsls	r2, r3, #6
 8004618:	f53f aea8 	bmi.w	800436c <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800461c:	f7fd fcec 	bl	8001ff8 <HAL_GetTick>
 8004620:	1b40      	subs	r0, r0, r5
 8004622:	2802      	cmp	r0, #2
 8004624:	d9f6      	bls.n	8004614 <HAL_RCC_OscConfig+0x2d4>
 8004626:	e6cc      	b.n	80043c2 <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004628:	f7fd fce6 	bl	8001ff8 <HAL_GetTick>
 800462c:	1b80      	subs	r0, r0, r6
 800462e:	2802      	cmp	r0, #2
 8004630:	d9d6      	bls.n	80045e0 <HAL_RCC_OscConfig+0x2a0>
 8004632:	e6c6      	b.n	80043c2 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8004634:	f7fd fce0 	bl	8001ff8 <HAL_GetTick>
 8004638:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800463a:	6823      	ldr	r3, [r4, #0]
 800463c:	019b      	lsls	r3, r3, #6
 800463e:	f57f ae95 	bpl.w	800436c <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004642:	f7fd fcd9 	bl	8001ff8 <HAL_GetTick>
 8004646:	1b40      	subs	r0, r0, r5
 8004648:	2802      	cmp	r0, #2
 800464a:	d9f6      	bls.n	800463a <HAL_RCC_OscConfig+0x2fa>
 800464c:	e6b9      	b.n	80043c2 <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800464e:	2801      	cmp	r0, #1
 8004650:	f43f aeb8 	beq.w	80043c4 <HAL_RCC_OscConfig+0x84>
        pll_config = RCC->CFGR;
 8004654:	6863      	ldr	r3, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004656:	6a2a      	ldr	r2, [r5, #32]
 8004658:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 800465c:	4291      	cmp	r1, r2
 800465e:	f47f ae9b 	bne.w	8004398 <HAL_RCC_OscConfig+0x58>
 8004662:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004664:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004668:	4293      	cmp	r3, r2
 800466a:	f43f ae7f 	beq.w	800436c <HAL_RCC_OscConfig+0x2c>
 800466e:	e693      	b.n	8004398 <HAL_RCC_OscConfig+0x58>
 8004670:	40021000 	.word	0x40021000
 8004674:	42420000 	.word	0x42420000

08004678 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8004678:	4a0d      	ldr	r2, [pc, #52]	; (80046b0 <HAL_RCC_GetSysClockFreq+0x38>)
 800467a:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800467c:	f003 010c 	and.w	r1, r3, #12
 8004680:	2908      	cmp	r1, #8
 8004682:	d112      	bne.n	80046aa <HAL_RCC_GetSysClockFreq+0x32>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004684:	480b      	ldr	r0, [pc, #44]	; (80046b4 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004686:	f3c3 4183 	ubfx	r1, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800468a:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800468c:	5c40      	ldrb	r0, [r0, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800468e:	d509      	bpl.n	80046a4 <HAL_RCC_GetSysClockFreq+0x2c>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004690:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004692:	4a09      	ldr	r2, [pc, #36]	; (80046b8 <HAL_RCC_GetSysClockFreq+0x40>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004694:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004698:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800469a:	4a08      	ldr	r2, [pc, #32]	; (80046bc <HAL_RCC_GetSysClockFreq+0x44>)
 800469c:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800469e:	fbb0 f0f3 	udiv	r0, r0, r3
 80046a2:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80046a4:	4b06      	ldr	r3, [pc, #24]	; (80046c0 <HAL_RCC_GetSysClockFreq+0x48>)
 80046a6:	4358      	muls	r0, r3
 80046a8:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 80046aa:	4803      	ldr	r0, [pc, #12]	; (80046b8 <HAL_RCC_GetSysClockFreq+0x40>)
}
 80046ac:	4770      	bx	lr
 80046ae:	bf00      	nop
 80046b0:	40021000 	.word	0x40021000
 80046b4:	08007c93 	.word	0x08007c93
 80046b8:	007a1200 	.word	0x007a1200
 80046bc:	08007ca3 	.word	0x08007ca3
 80046c0:	003d0900 	.word	0x003d0900

080046c4 <HAL_RCC_ClockConfig>:
{
 80046c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046c8:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80046ca:	4604      	mov	r4, r0
 80046cc:	b910      	cbnz	r0, 80046d4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80046ce:	2001      	movs	r0, #1
}
 80046d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80046d4:	4a44      	ldr	r2, [pc, #272]	; (80047e8 <HAL_RCC_ClockConfig+0x124>)
 80046d6:	6813      	ldr	r3, [r2, #0]
 80046d8:	f003 0307 	and.w	r3, r3, #7
 80046dc:	428b      	cmp	r3, r1
 80046de:	d328      	bcc.n	8004732 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046e0:	6821      	ldr	r1, [r4, #0]
 80046e2:	078e      	lsls	r6, r1, #30
 80046e4:	d430      	bmi.n	8004748 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046e6:	07ca      	lsls	r2, r1, #31
 80046e8:	d443      	bmi.n	8004772 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80046ea:	4a3f      	ldr	r2, [pc, #252]	; (80047e8 <HAL_RCC_ClockConfig+0x124>)
 80046ec:	6813      	ldr	r3, [r2, #0]
 80046ee:	f003 0307 	and.w	r3, r3, #7
 80046f2:	42ab      	cmp	r3, r5
 80046f4:	d865      	bhi.n	80047c2 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046f6:	6822      	ldr	r2, [r4, #0]
 80046f8:	4d3c      	ldr	r5, [pc, #240]	; (80047ec <HAL_RCC_ClockConfig+0x128>)
 80046fa:	f012 0f04 	tst.w	r2, #4
 80046fe:	d16c      	bne.n	80047da <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004700:	0713      	lsls	r3, r2, #28
 8004702:	d506      	bpl.n	8004712 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004704:	686b      	ldr	r3, [r5, #4]
 8004706:	6922      	ldr	r2, [r4, #16]
 8004708:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800470c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004710:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004712:	f7ff ffb1 	bl	8004678 <HAL_RCC_GetSysClockFreq>
 8004716:	686b      	ldr	r3, [r5, #4]
 8004718:	4a35      	ldr	r2, [pc, #212]	; (80047f0 <HAL_RCC_ClockConfig+0x12c>)
 800471a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800471e:	5cd3      	ldrb	r3, [r2, r3]
 8004720:	40d8      	lsrs	r0, r3
 8004722:	4b34      	ldr	r3, [pc, #208]	; (80047f4 <HAL_RCC_ClockConfig+0x130>)
 8004724:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8004726:	4b34      	ldr	r3, [pc, #208]	; (80047f8 <HAL_RCC_ClockConfig+0x134>)
 8004728:	6818      	ldr	r0, [r3, #0]
 800472a:	f7fd fc23 	bl	8001f74 <HAL_InitTick>
  return HAL_OK;
 800472e:	2000      	movs	r0, #0
 8004730:	e7ce      	b.n	80046d0 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004732:	6813      	ldr	r3, [r2, #0]
 8004734:	f023 0307 	bic.w	r3, r3, #7
 8004738:	430b      	orrs	r3, r1
 800473a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800473c:	6813      	ldr	r3, [r2, #0]
 800473e:	f003 0307 	and.w	r3, r3, #7
 8004742:	428b      	cmp	r3, r1
 8004744:	d1c3      	bne.n	80046ce <HAL_RCC_ClockConfig+0xa>
 8004746:	e7cb      	b.n	80046e0 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004748:	4b28      	ldr	r3, [pc, #160]	; (80047ec <HAL_RCC_ClockConfig+0x128>)
 800474a:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800474e:	bf1e      	ittt	ne
 8004750:	685a      	ldrne	r2, [r3, #4]
 8004752:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8004756:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004758:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800475a:	bf42      	ittt	mi
 800475c:	685a      	ldrmi	r2, [r3, #4]
 800475e:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8004762:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004764:	685a      	ldr	r2, [r3, #4]
 8004766:	68a0      	ldr	r0, [r4, #8]
 8004768:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800476c:	4302      	orrs	r2, r0
 800476e:	605a      	str	r2, [r3, #4]
 8004770:	e7b9      	b.n	80046e6 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004772:	6862      	ldr	r2, [r4, #4]
 8004774:	4e1d      	ldr	r6, [pc, #116]	; (80047ec <HAL_RCC_ClockConfig+0x128>)
 8004776:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004778:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800477a:	d11a      	bne.n	80047b2 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800477c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004780:	d0a5      	beq.n	80046ce <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004782:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004784:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004788:	f023 0303 	bic.w	r3, r3, #3
 800478c:	4313      	orrs	r3, r2
 800478e:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8004790:	f7fd fc32 	bl	8001ff8 <HAL_GetTick>
 8004794:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004796:	6873      	ldr	r3, [r6, #4]
 8004798:	6862      	ldr	r2, [r4, #4]
 800479a:	f003 030c 	and.w	r3, r3, #12
 800479e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80047a2:	d0a2      	beq.n	80046ea <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047a4:	f7fd fc28 	bl	8001ff8 <HAL_GetTick>
 80047a8:	1bc0      	subs	r0, r0, r7
 80047aa:	4540      	cmp	r0, r8
 80047ac:	d9f3      	bls.n	8004796 <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 80047ae:	2003      	movs	r0, #3
 80047b0:	e78e      	b.n	80046d0 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047b2:	2a02      	cmp	r2, #2
 80047b4:	d102      	bne.n	80047bc <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047b6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80047ba:	e7e1      	b.n	8004780 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047bc:	f013 0f02 	tst.w	r3, #2
 80047c0:	e7de      	b.n	8004780 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047c2:	6813      	ldr	r3, [r2, #0]
 80047c4:	f023 0307 	bic.w	r3, r3, #7
 80047c8:	432b      	orrs	r3, r5
 80047ca:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047cc:	6813      	ldr	r3, [r2, #0]
 80047ce:	f003 0307 	and.w	r3, r3, #7
 80047d2:	42ab      	cmp	r3, r5
 80047d4:	f47f af7b 	bne.w	80046ce <HAL_RCC_ClockConfig+0xa>
 80047d8:	e78d      	b.n	80046f6 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047da:	686b      	ldr	r3, [r5, #4]
 80047dc:	68e1      	ldr	r1, [r4, #12]
 80047de:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80047e2:	430b      	orrs	r3, r1
 80047e4:	606b      	str	r3, [r5, #4]
 80047e6:	e78b      	b.n	8004700 <HAL_RCC_ClockConfig+0x3c>
 80047e8:	40022000 	.word	0x40022000
 80047ec:	40021000 	.word	0x40021000
 80047f0:	08007c7b 	.word	0x08007c7b
 80047f4:	20000004 	.word	0x20000004
 80047f8:	2000000c 	.word	0x2000000c

080047fc <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80047fc:	4b04      	ldr	r3, [pc, #16]	; (8004810 <HAL_RCC_GetPCLK1Freq+0x14>)
 80047fe:	4a05      	ldr	r2, [pc, #20]	; (8004814 <HAL_RCC_GetPCLK1Freq+0x18>)
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8004806:	5cd3      	ldrb	r3, [r2, r3]
 8004808:	4a03      	ldr	r2, [pc, #12]	; (8004818 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800480a:	6810      	ldr	r0, [r2, #0]
}
 800480c:	40d8      	lsrs	r0, r3
 800480e:	4770      	bx	lr
 8004810:	40021000 	.word	0x40021000
 8004814:	08007c8b 	.word	0x08007c8b
 8004818:	20000004 	.word	0x20000004

0800481c <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800481c:	6803      	ldr	r3, [r0, #0]
{
 800481e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004822:	07d9      	lsls	r1, r3, #31
{
 8004824:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004826:	d521      	bpl.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x50>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004828:	4c36      	ldr	r4, [pc, #216]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800482a:	69e3      	ldr	r3, [r4, #28]
 800482c:	00da      	lsls	r2, r3, #3
 800482e:	d433      	bmi.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8004830:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8004832:	69e3      	ldr	r3, [r4, #28]
 8004834:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004838:	61e3      	str	r3, [r4, #28]
 800483a:	69e3      	ldr	r3, [r4, #28]
 800483c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004840:	9301      	str	r3, [sp, #4]
 8004842:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004844:	4f30      	ldr	r7, [pc, #192]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0xec>)
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	05db      	lsls	r3, r3, #23
 800484a:	d527      	bpl.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x80>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800484c:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800484e:	686a      	ldr	r2, [r5, #4]
 8004850:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8004854:	d136      	bne.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004856:	6a23      	ldr	r3, [r4, #32]
 8004858:	686a      	ldr	r2, [r5, #4]
 800485a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800485e:	4313      	orrs	r3, r2
 8004860:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004862:	b11e      	cbz	r6, 800486c <HAL_RCCEx_PeriphCLKConfig+0x50>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004864:	69e3      	ldr	r3, [r4, #28]
 8004866:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800486a:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800486c:	6828      	ldr	r0, [r5, #0]
 800486e:	0783      	lsls	r3, r0, #30
 8004870:	d506      	bpl.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004872:	4924      	ldr	r1, [pc, #144]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004874:	68ab      	ldr	r3, [r5, #8]
 8004876:	684a      	ldr	r2, [r1, #4]
 8004878:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800487c:	431a      	orrs	r2, r3
 800487e:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004880:	f010 0010 	ands.w	r0, r0, #16
 8004884:	d01b      	beq.n	80048be <HAL_RCCEx_PeriphCLKConfig+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004886:	4a1f      	ldr	r2, [pc, #124]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004888:	68e9      	ldr	r1, [r5, #12]
 800488a:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800488c:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800488e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8004892:	430b      	orrs	r3, r1
 8004894:	6053      	str	r3, [r2, #4]
 8004896:	e012      	b.n	80048be <HAL_RCCEx_PeriphCLKConfig+0xa2>
    FlagStatus pwrclkchanged = RESET;
 8004898:	2600      	movs	r6, #0
 800489a:	e7d3      	b.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048a2:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80048a4:	f7fd fba8 	bl	8001ff8 <HAL_GetTick>
 80048a8:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	05d8      	lsls	r0, r3, #23
 80048ae:	d4cd      	bmi.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048b0:	f7fd fba2 	bl	8001ff8 <HAL_GetTick>
 80048b4:	eba0 0008 	sub.w	r0, r0, r8
 80048b8:	2864      	cmp	r0, #100	; 0x64
 80048ba:	d9f6      	bls.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x8e>
          return HAL_TIMEOUT;
 80048bc:	2003      	movs	r0, #3
}
 80048be:	b002      	add	sp, #8
 80048c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80048c4:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d0c4      	beq.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x3a>
      __HAL_RCC_BACKUPRESET_FORCE();
 80048cc:	2001      	movs	r0, #1
 80048ce:	4a0f      	ldr	r2, [pc, #60]	; (800490c <HAL_RCCEx_PeriphCLKConfig+0xf0>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80048d0:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80048d2:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 80048d6:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80048d8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 80048dc:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      RCC->BDCR = temp_reg;
 80048e0:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80048e2:	07d9      	lsls	r1, r3, #31
 80048e4:	d5b7      	bpl.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        tickstart = HAL_GetTick();
 80048e6:	f7fd fb87 	bl	8001ff8 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048ea:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80048ee:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048f0:	6a23      	ldr	r3, [r4, #32]
 80048f2:	079a      	lsls	r2, r3, #30
 80048f4:	d4af      	bmi.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x3a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048f6:	f7fd fb7f 	bl	8001ff8 <HAL_GetTick>
 80048fa:	1bc0      	subs	r0, r0, r7
 80048fc:	4540      	cmp	r0, r8
 80048fe:	d9f7      	bls.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004900:	e7dc      	b.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8004902:	bf00      	nop
 8004904:	40021000 	.word	0x40021000
 8004908:	40007000 	.word	0x40007000
 800490c:	42420000 	.word	0x42420000

08004910 <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004910:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004914:	2b01      	cmp	r3, #1
 8004916:	d118      	bne.n	800494a <HAL_TIM_Base_Start+0x3a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004918:	2302      	movs	r3, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800491a:	4a0d      	ldr	r2, [pc, #52]	; (8004950 <HAL_TIM_Base_Start+0x40>)
  htim->State = HAL_TIM_STATE_BUSY;
 800491c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004920:	6803      	ldr	r3, [r0, #0]
 8004922:	4293      	cmp	r3, r2
 8004924:	d006      	beq.n	8004934 <HAL_TIM_Base_Start+0x24>
 8004926:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800492a:	d003      	beq.n	8004934 <HAL_TIM_Base_Start+0x24>
 800492c:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8004930:	4293      	cmp	r3, r2
 8004932:	d104      	bne.n	800493e <HAL_TIM_Base_Start+0x2e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004934:	689a      	ldr	r2, [r3, #8]
 8004936:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800493a:	2a06      	cmp	r2, #6
 800493c:	d003      	beq.n	8004946 <HAL_TIM_Base_Start+0x36>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	f042 0201 	orr.w	r2, r2, #1
 8004944:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004946:	2000      	movs	r0, #0
}
 8004948:	4770      	bx	lr
    return HAL_ERROR;
 800494a:	2001      	movs	r0, #1
 800494c:	4770      	bx	lr
 800494e:	bf00      	nop
 8004950:	40012c00 	.word	0x40012c00

08004954 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004954:	4a16      	ldr	r2, [pc, #88]	; (80049b0 <TIM_Base_SetConfig+0x5c>)
{
 8004956:	b510      	push	{r4, lr}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004958:	4290      	cmp	r0, r2
  tmpcr1 = TIMx->CR1;
 800495a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800495c:	d005      	beq.n	800496a <TIM_Base_SetConfig+0x16>
 800495e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004962:	d002      	beq.n	800496a <TIM_Base_SetConfig+0x16>
 8004964:	4c13      	ldr	r4, [pc, #76]	; (80049b4 <TIM_Base_SetConfig+0x60>)
 8004966:	42a0      	cmp	r0, r4
 8004968:	d110      	bne.n	800498c <TIM_Base_SetConfig+0x38>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800496a:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800496c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004970:	4290      	cmp	r0, r2
    tmpcr1 |= Structure->CounterMode;
 8004972:	ea43 0304 	orr.w	r3, r3, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004976:	d005      	beq.n	8004984 <TIM_Base_SetConfig+0x30>
 8004978:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800497c:	d002      	beq.n	8004984 <TIM_Base_SetConfig+0x30>
 800497e:	4a0d      	ldr	r2, [pc, #52]	; (80049b4 <TIM_Base_SetConfig+0x60>)
 8004980:	4290      	cmp	r0, r2
 8004982:	d103      	bne.n	800498c <TIM_Base_SetConfig+0x38>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004984:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004986:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800498a:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800498c:	694a      	ldr	r2, [r1, #20]
 800498e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004992:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8004994:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004996:	688b      	ldr	r3, [r1, #8]
 8004998:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800499a:	680b      	ldr	r3, [r1, #0]
 800499c:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800499e:	4b04      	ldr	r3, [pc, #16]	; (80049b0 <TIM_Base_SetConfig+0x5c>)
 80049a0:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049a2:	bf04      	itt	eq
 80049a4:	690b      	ldreq	r3, [r1, #16]
 80049a6:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049a8:	2301      	movs	r3, #1
 80049aa:	6143      	str	r3, [r0, #20]
}
 80049ac:	bd10      	pop	{r4, pc}
 80049ae:	bf00      	nop
 80049b0:	40012c00 	.word	0x40012c00
 80049b4:	40000400 	.word	0x40000400

080049b8 <HAL_TIM_Base_Init>:
{
 80049b8:	b510      	push	{r4, lr}
  if (htim == NULL)
 80049ba:	4604      	mov	r4, r0
 80049bc:	b330      	cbz	r0, 8004a0c <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 80049be:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80049c2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80049c6:	b91b      	cbnz	r3, 80049d0 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80049c8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80049cc:	f7fd fa24 	bl	8001e18 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80049d0:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049d2:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80049d4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049d8:	1d21      	adds	r1, r4, #4
 80049da:	f7ff ffbb 	bl	8004954 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049de:	2301      	movs	r3, #1
  return HAL_OK;
 80049e0:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049e2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049e6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80049ea:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80049ee:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80049f2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049f6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80049fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049fe:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8004a02:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8004a06:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8004a0a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004a0c:	2001      	movs	r0, #1
 8004a0e:	e7fc      	b.n	8004a0a <HAL_TIM_Base_Init+0x52>

08004a10 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a10:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a12:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a14:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a16:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a1a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8004a1e:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a20:	6082      	str	r2, [r0, #8]
}
 8004a22:	bd10      	pop	{r4, pc}

08004a24 <HAL_TIM_ConfigClockSource>:
{
 8004a24:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8004a26:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8004a2a:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	f04f 0002 	mov.w	r0, #2
 8004a32:	f000 808e 	beq.w	8004b52 <HAL_TIM_ConfigClockSource+0x12e>
 8004a36:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8004a38:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8004a3c:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8004a3e:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8004a42:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a44:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a48:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8004a4c:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8004a4e:	680b      	ldr	r3, [r1, #0]
 8004a50:	2b60      	cmp	r3, #96	; 0x60
 8004a52:	d04f      	beq.n	8004af4 <HAL_TIM_ConfigClockSource+0xd0>
 8004a54:	d832      	bhi.n	8004abc <HAL_TIM_ConfigClockSource+0x98>
 8004a56:	2b40      	cmp	r3, #64	; 0x40
 8004a58:	d064      	beq.n	8004b24 <HAL_TIM_ConfigClockSource+0x100>
 8004a5a:	d816      	bhi.n	8004a8a <HAL_TIM_ConfigClockSource+0x66>
 8004a5c:	2b20      	cmp	r3, #32
 8004a5e:	d00d      	beq.n	8004a7c <HAL_TIM_ConfigClockSource+0x58>
 8004a60:	d80a      	bhi.n	8004a78 <HAL_TIM_ConfigClockSource+0x54>
 8004a62:	f033 0110 	bics.w	r1, r3, #16
 8004a66:	d009      	beq.n	8004a7c <HAL_TIM_ConfigClockSource+0x58>
  htim->State = HAL_TIM_STATE_READY;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004a6e:	2300      	movs	r3, #0
 8004a70:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8004a74:	4610      	mov	r0, r2
 8004a76:	bd38      	pop	{r3, r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 8004a78:	2b30      	cmp	r3, #48	; 0x30
 8004a7a:	d1f5      	bne.n	8004a68 <HAL_TIM_ConfigClockSource+0x44>
  tmpsmcr = TIMx->SMCR;
 8004a7c:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a7e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a82:	4313      	orrs	r3, r2
 8004a84:	f043 0307 	orr.w	r3, r3, #7
 8004a88:	e028      	b.n	8004adc <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 8004a8a:	2b50      	cmp	r3, #80	; 0x50
 8004a8c:	d1ec      	bne.n	8004a68 <HAL_TIM_ConfigClockSource+0x44>
                               sClockSourceConfig->ClockPolarity,
 8004a8e:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8004a90:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8004a92:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a94:	6a03      	ldr	r3, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a96:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a9a:	f023 0301 	bic.w	r3, r3, #1
 8004a9e:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004aa0:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8004aa2:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004aa4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004aa8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8004aac:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8004aae:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8004ab0:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ab2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ab6:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8004aba:	e00f      	b.n	8004adc <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 8004abc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ac0:	d00d      	beq.n	8004ade <HAL_TIM_ConfigClockSource+0xba>
 8004ac2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ac6:	d00c      	beq.n	8004ae2 <HAL_TIM_ConfigClockSource+0xbe>
 8004ac8:	2b70      	cmp	r3, #112	; 0x70
 8004aca:	d1cd      	bne.n	8004a68 <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 8004acc:	68cb      	ldr	r3, [r1, #12]
 8004ace:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8004ad2:	f7ff ff9d 	bl	8004a10 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004ad6:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ad8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
  TIMx->SMCR = tmpsmcr;
 8004adc:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004ade:	2200      	movs	r2, #0
 8004ae0:	e7c2      	b.n	8004a68 <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 8004ae2:	68cb      	ldr	r3, [r1, #12]
 8004ae4:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8004ae8:	f7ff ff92 	bl	8004a10 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004aec:	6883      	ldr	r3, [r0, #8]
 8004aee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004af2:	e7f3      	b.n	8004adc <HAL_TIM_ConfigClockSource+0xb8>
  tmpccer = TIMx->CCER;
 8004af4:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004af6:	6a02      	ldr	r2, [r0, #32]
                               sClockSourceConfig->ClockPolarity,
 8004af8:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004afa:	f022 0210 	bic.w	r2, r2, #16
                               sClockSourceConfig->ClockFilter);
 8004afe:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b00:	6202      	str	r2, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b02:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b04:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b08:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b0c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b10:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8004b14:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8004b16:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8004b18:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b1e:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8004b22:	e7db      	b.n	8004adc <HAL_TIM_ConfigClockSource+0xb8>
                               sClockSourceConfig->ClockPolarity,
 8004b24:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8004b26:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8004b28:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b2a:	6a03      	ldr	r3, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b2c:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b30:	f023 0301 	bic.w	r3, r3, #1
 8004b34:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b36:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8004b38:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b3e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8004b42:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8004b44:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8004b46:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b4c:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8004b50:	e7c4      	b.n	8004adc <HAL_TIM_ConfigClockSource+0xb8>
  __HAL_LOCK(htim);
 8004b52:	4602      	mov	r2, r0
 8004b54:	e78e      	b.n	8004a74 <HAL_TIM_ConfigClockSource+0x50>
	...

08004b58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b58:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b5a:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
{
 8004b5e:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8004b60:	2a01      	cmp	r2, #1
 8004b62:	f04f 0002 	mov.w	r0, #2
 8004b66:	d01e      	beq.n	8004ba6 <HAL_TIMEx_MasterConfigSynchronization+0x4e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b68:	681a      	ldr	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004b6a:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8004b6e:	6854      	ldr	r4, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b70:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b72:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b76:	432c      	orrs	r4, r5
  tmpsmcr = htim->Instance->SMCR;
 8004b78:	6890      	ldr	r0, [r2, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b7a:	6054      	str	r4, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b7c:	4c0a      	ldr	r4, [pc, #40]	; (8004ba8 <HAL_TIMEx_MasterConfigSynchronization+0x50>)
 8004b7e:	42a2      	cmp	r2, r4
 8004b80:	d006      	beq.n	8004b90 <HAL_TIMEx_MasterConfigSynchronization+0x38>
 8004b82:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8004b86:	d003      	beq.n	8004b90 <HAL_TIMEx_MasterConfigSynchronization+0x38>
 8004b88:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 8004b8c:	42a2      	cmp	r2, r4
 8004b8e:	d104      	bne.n	8004b9a <HAL_TIMEx_MasterConfigSynchronization+0x42>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b90:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b92:	f020 0080 	bic.w	r0, r0, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b96:	4301      	orrs	r1, r0

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b98:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b9a:	2201      	movs	r2, #1

  __HAL_UNLOCK(htim);
 8004b9c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8004b9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004ba2:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c

  return HAL_OK;
}
 8004ba6:	bd30      	pop	{r4, r5, pc}
 8004ba8:	40012c00 	.word	0x40012c00

08004bac <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004bac:	b084      	sub	sp, #16
 8004bae:	a801      	add	r0, sp, #4
 8004bb0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8004bb4:	b004      	add	sp, #16
 8004bb6:	2000      	movs	r0, #0
 8004bb8:	4770      	bx	lr

08004bba <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004bba:	4603      	mov	r3, r0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004bbc:	f44f 423f 	mov.w	r2, #48896	; 0xbf00
  USBx->ISTR = 0U;
 8004bc0:	2000      	movs	r0, #0
 8004bc2:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
  USBx->CNTR = (uint16_t)winterruptmask;
 8004bc6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
}
 8004bca:	4770      	bx	lr

08004bcc <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004bcc:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8004bd0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004bd4:	045b      	lsls	r3, r3, #17
 8004bd6:	0c5b      	lsrs	r3, r3, #17
 8004bd8:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 8004bdc:	2000      	movs	r0, #0
 8004bde:	4770      	bx	lr

08004be0 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8004be0:	2000      	movs	r0, #0
 8004be2:	4770      	bx	lr

08004be4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004be4:	b084      	sub	sp, #16
 8004be6:	b510      	push	{r4, lr}
 8004be8:	4604      	mov	r4, r0
 8004bea:	a803      	add	r0, sp, #12
 8004bec:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004bf0:	2000      	movs	r0, #0
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
  USBx->CNTR = 0U;
 8004bf8:	f8a4 0040 	strh.w	r0, [r4, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004bfc:	f8a4 0044 	strh.w	r0, [r4, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004c00:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50

  return HAL_OK;
}
 8004c04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c08:	b004      	add	sp, #16
 8004c0a:	4770      	bx	lr

08004c0c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004c0e:	780a      	ldrb	r2, [r1, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8004c10:	78cd      	ldrb	r5, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004c12:	f830 4022 	ldrh.w	r4, [r0, r2, lsl #2]
{
 8004c16:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004c18:	f424 44ec 	bic.w	r4, r4, #30208	; 0x7600
 8004c1c:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 8004c20:	0424      	lsls	r4, r4, #16
 8004c22:	0c24      	lsrs	r4, r4, #16
  switch (ep->type)
 8004c24:	2d03      	cmp	r5, #3
 8004c26:	d84b      	bhi.n	8004cc0 <USB_ActivateEndpoint+0xb4>
 8004c28:	e8df f005 	tbb	[pc, r5]
 8004c2c:	43454702 	.word	0x43454702
  HAL_StatusTypeDef ret = HAL_OK;
 8004c30:	4628      	mov	r0, r5
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004c32:	f444 7400 	orr.w	r4, r4, #512	; 0x200
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004c36:	f248 0680 	movw	r6, #32896	; 0x8080
 8004c3a:	4334      	orrs	r4, r6
 8004c3c:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004c40:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8004c44:	4f9e      	ldr	r7, [pc, #632]	; (8004ec0 <USB_ActivateEndpoint+0x2b4>)
 8004c46:	b2a4      	uxth	r4, r4
 8004c48:	403c      	ands	r4, r7
 8004c4a:	4314      	orrs	r4, r2
 8004c4c:	4334      	orrs	r4, r6
 8004c4e:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]

  if (ep->doublebuffer == 0U)
 8004c52:	7b0c      	ldrb	r4, [r1, #12]
 8004c54:	eb03 1c02 	add.w	ip, r3, r2, lsl #4
 8004c58:	2c00      	cmp	r4, #0
 8004c5a:	f040 808b 	bne.w	8004d74 <USB_ActivateEndpoint+0x168>
  {
    if (ep->is_in != 0U)
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004c5e:	88cc      	ldrh	r4, [r1, #6]
    if (ep->is_in != 0U)
 8004c60:	784e      	ldrb	r6, [r1, #1]
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004c62:	0864      	lsrs	r4, r4, #1
 8004c64:	0064      	lsls	r4, r4, #1
    if (ep->is_in != 0U)
 8004c66:	b36e      	cbz	r6, 8004cc4 <USB_ActivateEndpoint+0xb8>
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004c68:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 8004c6c:	b289      	uxth	r1, r1
 8004c6e:	4461      	add	r1, ip
 8004c70:	f8a1 4400 	strh.w	r4, [r1, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c74:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004c78:	0649      	lsls	r1, r1, #25
 8004c7a:	d509      	bpl.n	8004c90 <USB_ActivateEndpoint+0x84>
 8004c7c:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004c80:	b289      	uxth	r1, r1
 8004c82:	4039      	ands	r1, r7
 8004c84:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8004c88:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 8004c8c:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004c90:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004c94:	4c8b      	ldr	r4, [pc, #556]	; (8004ec4 <USB_ActivateEndpoint+0x2b8>)
 8004c96:	b289      	uxth	r1, r1
      if (ep->type != EP_TYPE_ISOC)
 8004c98:	2d01      	cmp	r5, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004c9a:	ea01 0104 	and.w	r1, r1, r4
      if (ep->type != EP_TYPE_ISOC)
 8004c9e:	d001      	beq.n	8004ca4 <USB_ActivateEndpoint+0x98>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004ca0:	f081 0120 	eor.w	r1, r1, #32
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004ca4:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8004ca8:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8004cac:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
 8004cb0:	e04a      	b.n	8004d48 <USB_ActivateEndpoint+0x13c>
      wEpRegVal |= USB_EP_INTERRUPT;
 8004cb2:	f444 64c0 	orr.w	r4, r4, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 8004cb6:	2000      	movs	r0, #0
      break;
 8004cb8:	e7bd      	b.n	8004c36 <USB_ActivateEndpoint+0x2a>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004cba:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
      break;
 8004cbe:	e7fa      	b.n	8004cb6 <USB_ActivateEndpoint+0xaa>
  switch (ep->type)
 8004cc0:	2001      	movs	r0, #1
 8004cc2:	e7b8      	b.n	8004c36 <USB_ActivateEndpoint+0x2a>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004cc4:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004cc8:	6909      	ldr	r1, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004cca:	b2ad      	uxth	r5, r5
 8004ccc:	4465      	add	r5, ip
 8004cce:	f8a5 4408 	strh.w	r4, [r5, #1032]	; 0x408
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004cd2:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 8004cd6:	293e      	cmp	r1, #62	; 0x3e
 8004cd8:	b2a4      	uxth	r4, r4
 8004cda:	4464      	add	r4, ip
 8004cdc:	f8b4 540c 	ldrh.w	r5, [r4, #1036]	; 0x40c
 8004ce0:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8004ce4:	f8a4 540c 	strh.w	r5, [r4, #1036]	; 0x40c
 8004ce8:	d92f      	bls.n	8004d4a <USB_ActivateEndpoint+0x13e>
 8004cea:	094d      	lsrs	r5, r1, #5
 8004cec:	06ce      	lsls	r6, r1, #27
 8004cee:	f8b4 140c 	ldrh.w	r1, [r4, #1036]	; 0x40c
 8004cf2:	bf08      	it	eq
 8004cf4:	f105 35ff 	addeq.w	r5, r5, #4294967295
 8004cf8:	b289      	uxth	r1, r1
 8004cfa:	ea41 2185 	orr.w	r1, r1, r5, lsl #10
 8004cfe:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8004d02:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8004d06:	b289      	uxth	r1, r1
 8004d08:	f8a4 140c 	strh.w	r1, [r4, #1036]	; 0x40c
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d0c:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004d10:	044f      	lsls	r7, r1, #17
 8004d12:	d50d      	bpl.n	8004d30 <USB_ActivateEndpoint+0x124>
 8004d14:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004d18:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8004d1c:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8004d20:	0409      	lsls	r1, r1, #16
 8004d22:	0c09      	lsrs	r1, r1, #16
 8004d24:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8004d28:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8004d2c:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      if (ep->num == 0U)
 8004d30:	4c65      	ldr	r4, [pc, #404]	; (8004ec8 <USB_ActivateEndpoint+0x2bc>)
 8004d32:	b9c2      	cbnz	r2, 8004d66 <USB_ActivateEndpoint+0x15a>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004d34:	881a      	ldrh	r2, [r3, #0]
 8004d36:	b292      	uxth	r2, r2
 8004d38:	4022      	ands	r2, r4
 8004d3a:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8004d3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d42:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004d46:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
}
 8004d48:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004d4a:	b911      	cbnz	r1, 8004d52 <USB_ActivateEndpoint+0x146>
 8004d4c:	f8b4 140c 	ldrh.w	r1, [r4, #1036]	; 0x40c
 8004d50:	e7d5      	b.n	8004cfe <USB_ActivateEndpoint+0xf2>
 8004d52:	084d      	lsrs	r5, r1, #1
 8004d54:	07c9      	lsls	r1, r1, #31
 8004d56:	f8b4 140c 	ldrh.w	r1, [r4, #1036]	; 0x40c
 8004d5a:	bf48      	it	mi
 8004d5c:	3501      	addmi	r5, #1
 8004d5e:	b289      	uxth	r1, r1
 8004d60:	ea41 2185 	orr.w	r1, r1, r5, lsl #10
 8004d64:	e7cf      	b.n	8004d06 <USB_ActivateEndpoint+0xfa>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004d66:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004d6a:	b289      	uxth	r1, r1
 8004d6c:	4021      	ands	r1, r4
 8004d6e:	f481 5100 	eor.w	r1, r1, #8192	; 0x2000
 8004d72:	e797      	b.n	8004ca4 <USB_ActivateEndpoint+0x98>
    if (ep->type == EP_TYPE_BULK)
 8004d74:	2d02      	cmp	r5, #2
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004d76:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
    if (ep->type == EP_TYPE_BULK)
 8004d7a:	d15b      	bne.n	8004e34 <USB_ActivateEndpoint+0x228>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004d7c:	b2a4      	uxth	r4, r4
 8004d7e:	403c      	ands	r4, r7
 8004d80:	f444 4401 	orr.w	r4, r4, #33024	; 0x8100
 8004d84:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8004d88:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004d8c:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 8004d90:	890e      	ldrh	r6, [r1, #8]
 8004d92:	b2a4      	uxth	r4, r4
 8004d94:	0876      	lsrs	r6, r6, #1
 8004d96:	4464      	add	r4, ip
 8004d98:	0076      	lsls	r6, r6, #1
 8004d9a:	f8a4 6400 	strh.w	r6, [r4, #1024]	; 0x400
 8004d9e:	894e      	ldrh	r6, [r1, #10]
 8004da0:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 8004da4:	0876      	lsrs	r6, r6, #1
 8004da6:	b2a4      	uxth	r4, r4
 8004da8:	4464      	add	r4, ip
 8004daa:	0076      	lsls	r6, r6, #1
 8004dac:	f8a4 6408 	strh.w	r6, [r4, #1032]	; 0x408
    if (ep->is_in == 0U)
 8004db0:	7849      	ldrb	r1, [r1, #1]
 8004db2:	2900      	cmp	r1, #0
 8004db4:	d148      	bne.n	8004e48 <USB_ActivateEndpoint+0x23c>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004db6:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004dba:	044e      	lsls	r6, r1, #17
 8004dbc:	d50d      	bpl.n	8004dda <USB_ActivateEndpoint+0x1ce>
 8004dbe:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004dc2:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8004dc6:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8004dca:	0409      	lsls	r1, r1, #16
 8004dcc:	0c09      	lsrs	r1, r1, #16
 8004dce:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8004dd2:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8004dd6:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004dda:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004dde:	064d      	lsls	r5, r1, #25
 8004de0:	d50d      	bpl.n	8004dfe <USB_ActivateEndpoint+0x1f2>
 8004de2:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004de6:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8004dea:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8004dee:	0409      	lsls	r1, r1, #16
 8004df0:	0c09      	lsrs	r1, r1, #16
 8004df2:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8004df6:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 8004dfa:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004dfe:	f248 0480 	movw	r4, #32896	; 0x8080
 8004e02:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004e06:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8004e0a:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8004e0e:	0409      	lsls	r1, r1, #16
 8004e10:	0c09      	lsrs	r1, r1, #16
 8004e12:	f481 5140 	eor.w	r1, r1, #12288	; 0x3000
 8004e16:	4321      	orrs	r1, r4
 8004e18:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e1c:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004e20:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8004e24:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8004e28:	0409      	lsls	r1, r1, #16
 8004e2a:	0c09      	lsrs	r1, r1, #16
 8004e2c:	430c      	orrs	r4, r1
 8004e2e:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
 8004e32:	e789      	b.n	8004d48 <USB_ActivateEndpoint+0x13c>
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004e34:	f424 44e2 	bic.w	r4, r4, #28928	; 0x7100
 8004e38:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 8004e3c:	0424      	lsls	r4, r4, #16
 8004e3e:	0c24      	lsrs	r4, r4, #16
 8004e40:	4326      	orrs	r6, r4
 8004e42:	f823 6022 	strh.w	r6, [r3, r2, lsl #2]
 8004e46:	e7a1      	b.n	8004d8c <USB_ActivateEndpoint+0x180>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e48:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004e4c:	044c      	lsls	r4, r1, #17
 8004e4e:	d50d      	bpl.n	8004e6c <USB_ActivateEndpoint+0x260>
 8004e50:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004e54:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8004e58:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8004e5c:	0409      	lsls	r1, r1, #16
 8004e5e:	0c09      	lsrs	r1, r1, #16
 8004e60:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8004e64:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8004e68:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e6c:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004e70:	0649      	lsls	r1, r1, #25
 8004e72:	d50d      	bpl.n	8004e90 <USB_ActivateEndpoint+0x284>
 8004e74:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004e78:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8004e7c:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8004e80:	0409      	lsls	r1, r1, #16
 8004e82:	0c09      	lsrs	r1, r1, #16
 8004e84:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8004e88:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 8004e8c:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004e90:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004e94:	4c0b      	ldr	r4, [pc, #44]	; (8004ec4 <USB_ActivateEndpoint+0x2b8>)
 8004e96:	b289      	uxth	r1, r1
 8004e98:	4021      	ands	r1, r4
      if (ep->type != EP_TYPE_ISOC)
 8004e9a:	2d01      	cmp	r5, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004e9c:	bf18      	it	ne
 8004e9e:	f081 0120 	eorne.w	r1, r1, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ea2:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8004ea6:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8004eaa:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004eae:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004eb2:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8004eb6:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8004eba:	0409      	lsls	r1, r1, #16
 8004ebc:	0c09      	lsrs	r1, r1, #16
 8004ebe:	e6f1      	b.n	8004ca4 <USB_ActivateEndpoint+0x98>
 8004ec0:	ffff8f8f 	.word	0xffff8f8f
 8004ec4:	ffff8fbf 	.word	0xffff8fbf
 8004ec8:	ffffbf8f 	.word	0xffffbf8f

08004ecc <USB_DeactivateEndpoint>:
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
  {
    if (ep->is_in != 0U)
 8004ecc:	784a      	ldrb	r2, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ece:	780b      	ldrb	r3, [r1, #0]
  if (ep->doublebuffer == 0U)
 8004ed0:	7b09      	ldrb	r1, [r1, #12]
 8004ed2:	bbd9      	cbnz	r1, 8004f4c <USB_DeactivateEndpoint+0x80>
    if (ep->is_in != 0U)
 8004ed4:	b30a      	cbz	r2, 8004f1a <USB_DeactivateEndpoint+0x4e>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ed6:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004eda:	0651      	lsls	r1, r2, #25
 8004edc:	d50d      	bpl.n	8004efa <USB_DeactivateEndpoint+0x2e>
 8004ede:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004ee2:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004ee6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004eea:	0412      	lsls	r2, r2, #16
 8004eec:	0c12      	lsrs	r2, r2, #16
 8004eee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ef2:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8004ef6:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004efa:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004efe:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004f02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004f06:	0412      	lsls	r2, r2, #16
 8004f08:	0c12      	lsrs	r2, r2, #16
 8004f0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f0e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004f12:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8004f16:	2000      	movs	r0, #0
 8004f18:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f1a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004f1e:	0452      	lsls	r2, r2, #17
 8004f20:	d50d      	bpl.n	8004f3e <USB_DeactivateEndpoint+0x72>
 8004f22:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004f26:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004f2a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004f2e:	0412      	lsls	r2, r2, #16
 8004f30:	0c12      	lsrs	r2, r2, #16
 8004f32:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8004f36:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004f3a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004f3e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004f42:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004f46:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004f4a:	e7dc      	b.n	8004f06 <USB_DeactivateEndpoint+0x3a>
    if (ep->is_in == 0U)
 8004f4c:	2a00      	cmp	r2, #0
 8004f4e:	d14a      	bne.n	8004fe6 <USB_DeactivateEndpoint+0x11a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f50:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004f54:	0451      	lsls	r1, r2, #17
 8004f56:	d50d      	bpl.n	8004f74 <USB_DeactivateEndpoint+0xa8>
 8004f58:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004f5c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004f60:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004f64:	0412      	lsls	r2, r2, #16
 8004f66:	0c12      	lsrs	r2, r2, #16
 8004f68:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8004f6c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004f70:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004f74:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004f78:	0652      	lsls	r2, r2, #25
 8004f7a:	d50d      	bpl.n	8004f98 <USB_DeactivateEndpoint+0xcc>
 8004f7c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004f80:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004f84:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004f88:	0412      	lsls	r2, r2, #16
 8004f8a:	0c12      	lsrs	r2, r2, #16
 8004f8c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f90:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8004f94:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004f98:	f248 0180 	movw	r1, #32896	; 0x8080
      PCD_TX_DTOG(USBx, ep->num);
 8004f9c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004fa0:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004fa4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004fa8:	0412      	lsls	r2, r2, #16
 8004faa:	0c12      	lsrs	r2, r2, #16
 8004fac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004fb0:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8004fb4:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004fb8:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004fbc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004fc0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004fc4:	0412      	lsls	r2, r2, #16
 8004fc6:	0c12      	lsrs	r2, r2, #16
 8004fc8:	430a      	orrs	r2, r1
 8004fca:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004fce:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004fd2:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004fd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004fda:	0412      	lsls	r2, r2, #16
 8004fdc:	0c12      	lsrs	r2, r2, #16
 8004fde:	4311      	orrs	r1, r2
 8004fe0:	f820 1023 	strh.w	r1, [r0, r3, lsl #2]
 8004fe4:	e797      	b.n	8004f16 <USB_DeactivateEndpoint+0x4a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004fe6:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004fea:	0451      	lsls	r1, r2, #17
 8004fec:	d50d      	bpl.n	800500a <USB_DeactivateEndpoint+0x13e>
 8004fee:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004ff2:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004ff6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004ffa:	0412      	lsls	r2, r2, #16
 8004ffc:	0c12      	lsrs	r2, r2, #16
 8004ffe:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8005002:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005006:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800500a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800500e:	0652      	lsls	r2, r2, #25
 8005010:	d50d      	bpl.n	800502e <USB_DeactivateEndpoint+0x162>
 8005012:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005016:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800501a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800501e:	0412      	lsls	r2, r2, #16
 8005020:	0c12      	lsrs	r2, r2, #16
 8005022:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005026:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800502a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800502e:	f248 0180 	movw	r1, #32896	; 0x8080
      PCD_RX_DTOG(USBx, ep->num);
 8005032:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005036:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800503a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800503e:	0412      	lsls	r2, r2, #16
 8005040:	0c12      	lsrs	r2, r2, #16
 8005042:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8005046:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800504a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800504e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005052:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8005056:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800505a:	0412      	lsls	r2, r2, #16
 800505c:	0c12      	lsrs	r2, r2, #16
 800505e:	430a      	orrs	r2, r1
 8005060:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005064:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005068:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800506c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005070:	e7b3      	b.n	8004fda <USB_DeactivateEndpoint+0x10e>

08005072 <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 8005072:	784b      	ldrb	r3, [r1, #1]
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005074:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in != 0U)
 8005076:	b18b      	cbz	r3, 800509c <USB_EPSetStall+0x2a>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005078:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800507c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005080:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005084:	041b      	lsls	r3, r3, #16
 8005086:	0c1b      	lsrs	r3, r3, #16
 8005088:	f083 0310 	eor.w	r3, r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800508c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005090:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005094:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 8005098:	2000      	movs	r0, #0
 800509a:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800509c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80050a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050a8:	041b      	lsls	r3, r3, #16
 80050aa:	0c1b      	lsrs	r3, r3, #16
 80050ac:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80050b0:	e7ec      	b.n	800508c <USB_EPSetStall+0x1a>

080050b2 <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 80050b2:	7b0b      	ldrb	r3, [r1, #12]
 80050b4:	bb3b      	cbnz	r3, 8005106 <USB_EPClearStall+0x54>
  {
    if (ep->is_in != 0U)
 80050b6:	784b      	ldrb	r3, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80050b8:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in != 0U)
 80050ba:	b333      	cbz	r3, 800510a <USB_EPClearStall+0x58>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80050bc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80050c0:	065b      	lsls	r3, r3, #25
 80050c2:	d50d      	bpl.n	80050e0 <USB_EPClearStall+0x2e>
 80050c4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80050c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050d0:	041b      	lsls	r3, r3, #16
 80050d2:	0c1b      	lsrs	r3, r3, #16
 80050d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050d8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80050dc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 80050e0:	78cb      	ldrb	r3, [r1, #3]
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d00f      	beq.n	8005106 <USB_EPClearStall+0x54>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80050e6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80050ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050f2:	041b      	lsls	r3, r3, #16
 80050f4:	0c1b      	lsrs	r3, r3, #16
 80050f6:	f083 0320 	eor.w	r3, r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80050fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005102:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 8005106:	2000      	movs	r0, #0
 8005108:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800510a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800510e:	045b      	lsls	r3, r3, #17
 8005110:	d50d      	bpl.n	800512e <USB_EPClearStall+0x7c>
 8005112:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005116:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800511a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800511e:	041b      	lsls	r3, r3, #16
 8005120:	0c1b      	lsrs	r3, r3, #16
 8005122:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005126:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800512a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800512e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005132:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005136:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800513a:	041b      	lsls	r3, r3, #16
 800513c:	0c1b      	lsrs	r3, r3, #16
 800513e:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8005142:	e7da      	b.n	80050fa <USB_EPClearStall+0x48>

08005144 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8005144:	b911      	cbnz	r1, 800514c <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005146:	2380      	movs	r3, #128	; 0x80
 8005148:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 800514c:	2000      	movs	r0, #0
 800514e:	4770      	bx	lr

08005150 <USB_DevConnect>:
 8005150:	2000      	movs	r0, #0
 8005152:	4770      	bx	lr

08005154 <USB_DevDisconnect>:
 8005154:	2000      	movs	r0, #0
 8005156:	4770      	bx	lr

08005158 <USB_ReadInterrupts>:
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005158:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 800515c:	b280      	uxth	r0, r0
 800515e:	4770      	bx	lr

08005160 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8005160:	2000      	movs	r0, #0
 8005162:	4770      	bx	lr

08005164 <USB_WritePMA>:
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005164:	eb00 0042 	add.w	r0, r0, r2, lsl #1
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005168:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800516a:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800516e:	085b      	lsrs	r3, r3, #1
 8005170:	eb00 0383 	add.w	r3, r0, r3, lsl #2

  for (count = n; count != 0U; count--)
 8005174:	4283      	cmp	r3, r0
 8005176:	d100      	bne.n	800517a <USB_WritePMA+0x16>
#endif /* PMA_ACCESS */

    pBuf++;
    pBuf++;
  }
}
 8005178:	4770      	bx	lr
    WrVal |= (uint16_t)pBuf[1] << 8;
 800517a:	f831 2b02 	ldrh.w	r2, [r1], #2
    *pdwVal = (WrVal & 0xFFFFU);
 800517e:	f820 2b04 	strh.w	r2, [r0], #4
  for (count = n; count != 0U; count--)
 8005182:	e7f7      	b.n	8005174 <USB_WritePMA+0x10>

08005184 <USB_EPStartXfer>:
{
 8005184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005188:	460c      	mov	r4, r1
  if (ep->is_in == 1U)
 800518a:	7849      	ldrb	r1, [r1, #1]
{
 800518c:	4605      	mov	r5, r0
  if (ep->is_in == 1U)
 800518e:	2901      	cmp	r1, #1
    if (ep->doublebuffer == 0U)
 8005190:	7b22      	ldrb	r2, [r4, #12]
  if (ep->is_in == 1U)
 8005192:	f040 8118 	bne.w	80053c6 <USB_EPStartXfer+0x242>
    if (ep->xfer_len > ep->maxpacket)
 8005196:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800519a:	69a7      	ldr	r7, [r4, #24]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800519c:	6961      	ldr	r1, [r4, #20]
 800519e:	454f      	cmp	r7, r9
 80051a0:	bf28      	it	cs
 80051a2:	464f      	movcs	r7, r9
    if (ep->doublebuffer == 0U)
 80051a4:	bb0a      	cbnz	r2, 80051ea <USB_EPStartXfer+0x66>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80051a6:	b2bf      	uxth	r7, r7
 80051a8:	88e2      	ldrh	r2, [r4, #6]
 80051aa:	463b      	mov	r3, r7
 80051ac:	f7ff ffda 	bl	8005164 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80051b0:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 80051b4:	7821      	ldrb	r1, [r4, #0]
 80051b6:	b280      	uxth	r0, r0
 80051b8:	f205 4204 	addw	r2, r5, #1028	; 0x404
 80051bc:	0109      	lsls	r1, r1, #4
 80051be:	4402      	add	r2, r0
 80051c0:	528f      	strh	r7, [r1, r2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80051c2:	7822      	ldrb	r2, [r4, #0]
 80051c4:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 80051c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051d0:	041b      	lsls	r3, r3, #16
 80051d2:	0c1b      	lsrs	r3, r3, #16
 80051d4:	f083 0330 	eor.w	r3, r3, #48	; 0x30
  return HAL_OK;
 80051d8:	2000      	movs	r0, #0
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80051da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051e2:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
}
 80051e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (ep->type == EP_TYPE_BULK)
 80051ea:	78e3      	ldrb	r3, [r4, #3]
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80051ec:	f894 e000 	ldrb.w	lr, [r4]
      if (ep->type == EP_TYPE_BULK)
 80051f0:	2b02      	cmp	r3, #2
        if (ep->xfer_len_db > ep->maxpacket)
 80051f2:	6a26      	ldr	r6, [r4, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80051f4:	ea4f 1c0e 	mov.w	ip, lr, lsl #4
      if (ep->type == EP_TYPE_BULK)
 80051f8:	f040 80d0 	bne.w	800539c <USB_EPStartXfer+0x218>
        if (ep->xfer_len_db > ep->maxpacket)
 80051fc:	45b1      	cmp	r9, r6
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80051fe:	f830 202e 	ldrh.w	r2, [r0, lr, lsl #2]
        if (ep->xfer_len_db > ep->maxpacket)
 8005202:	f080 80b4 	bcs.w	800536e <USB_EPStartXfer+0x1ea>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005206:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800520a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800520e:	0412      	lsls	r2, r2, #16
 8005210:	0c12      	lsrs	r2, r2, #16
 8005212:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 8005216:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800521a:	f820 202e 	strh.w	r2, [r0, lr, lsl #2]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800521e:	f830 802e 	ldrh.w	r8, [r0, lr, lsl #2]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005222:	f8b0 e050 	ldrh.w	lr, [r0, #80]	; 0x50
          ep->xfer_len_db -= len;
 8005226:	1bf6      	subs	r6, r6, r7
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005228:	f018 0840 	ands.w	r8, r8, #64	; 0x40
          ep->xfer_len_db -= len;
 800522c:	6226      	str	r6, [r4, #32]
            ep->xfer_buff += len;
 800522e:	eb01 0a07 	add.w	sl, r1, r7
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005232:	b2bb      	uxth	r3, r7
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005234:	fa1f fe8e 	uxth.w	lr, lr
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005238:	d04e      	beq.n	80052d8 <USB_EPStartXfer+0x154>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800523a:	f200 420c 	addw	r2, r0, #1036	; 0x40c
 800523e:	4472      	add	r2, lr
 8005240:	f822 300c 	strh.w	r3, [r2, ip]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005244:	8962      	ldrh	r2, [r4, #10]
 8005246:	f7ff ff8d 	bl	8005164 <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 800524a:	45b1      	cmp	r9, r6
              ep->xfer_len_db -= len;
 800524c:	bf36      	itet	cc
 800524e:	1bf3      	subcc	r3, r6, r7
              ep->xfer_len_db = 0U;
 8005250:	2300      	movcs	r3, #0
 8005252:	463e      	movcc	r6, r7
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005254:	7862      	ldrb	r2, [r4, #1]
 8005256:	6223      	str	r3, [r4, #32]
            ep->xfer_buff += len;
 8005258:	f8c4 a014 	str.w	sl, [r4, #20]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800525c:	b2b3      	uxth	r3, r6
 800525e:	bb7a      	cbnz	r2, 80052c0 <USB_EPStartXfer+0x13c>
 8005260:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8005264:	7820      	ldrb	r0, [r4, #0]
 8005266:	b292      	uxth	r2, r2
 8005268:	f205 4104 	addw	r1, r5, #1028	; 0x404
 800526c:	0100      	lsls	r0, r0, #4
 800526e:	4411      	add	r1, r2
 8005270:	5a42      	ldrh	r2, [r0, r1]
 8005272:	2e3e      	cmp	r6, #62	; 0x3e
 8005274:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8005278:	5242      	strh	r2, [r0, r1]
 800527a:	d915      	bls.n	80052a8 <USB_EPStartXfer+0x124>
 800527c:	06f2      	lsls	r2, r6, #27
 800527e:	5a42      	ldrh	r2, [r0, r1]
 8005280:	ea4f 1756 	mov.w	r7, r6, lsr #5
 8005284:	bf08      	it	eq
 8005286:	f107 37ff 	addeq.w	r7, r7, #4294967295
 800528a:	b292      	uxth	r2, r2
 800528c:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 8005290:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8005294:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8005298:	b292      	uxth	r2, r2
 800529a:	5242      	strh	r2, [r0, r1]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800529c:	8922      	ldrh	r2, [r4, #8]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800529e:	4651      	mov	r1, sl
 80052a0:	4628      	mov	r0, r5
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80052a2:	f7ff ff5f 	bl	8005164 <USB_WritePMA>
 80052a6:	e78c      	b.n	80051c2 <USB_EPStartXfer+0x3e>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80052a8:	b90e      	cbnz	r6, 80052ae <USB_EPStartXfer+0x12a>
 80052aa:	5a42      	ldrh	r2, [r0, r1]
 80052ac:	e7f0      	b.n	8005290 <USB_EPStartXfer+0x10c>
 80052ae:	5a42      	ldrh	r2, [r0, r1]
 80052b0:	0877      	lsrs	r7, r6, #1
 80052b2:	07f6      	lsls	r6, r6, #31
 80052b4:	bf48      	it	mi
 80052b6:	3701      	addmi	r7, #1
 80052b8:	b292      	uxth	r2, r2
 80052ba:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 80052be:	e7eb      	b.n	8005298 <USB_EPStartXfer+0x114>
 80052c0:	2a01      	cmp	r2, #1
 80052c2:	d1eb      	bne.n	800529c <USB_EPStartXfer+0x118>
 80052c4:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 80052c8:	7821      	ldrb	r1, [r4, #0]
 80052ca:	b280      	uxth	r0, r0
 80052cc:	f205 4204 	addw	r2, r5, #1028	; 0x404
 80052d0:	0109      	lsls	r1, r1, #4
 80052d2:	4402      	add	r2, r0
 80052d4:	528b      	strh	r3, [r1, r2]
 80052d6:	e7e1      	b.n	800529c <USB_EPStartXfer+0x118>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80052d8:	f200 4204 	addw	r2, r0, #1028	; 0x404
 80052dc:	4472      	add	r2, lr
 80052de:	f822 300c 	strh.w	r3, [r2, ip]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80052e2:	8922      	ldrh	r2, [r4, #8]
 80052e4:	f7ff ff3e 	bl	8005164 <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 80052e8:	45b1      	cmp	r9, r6
              ep->xfer_len_db -= len;
 80052ea:	bf36      	itet	cc
 80052ec:	1bf3      	subcc	r3, r6, r7
              ep->xfer_len_db = 0U;
 80052ee:	4643      	movcs	r3, r8
 80052f0:	463e      	movcc	r6, r7
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80052f2:	7862      	ldrb	r2, [r4, #1]
 80052f4:	6223      	str	r3, [r4, #32]
            ep->xfer_buff += len;
 80052f6:	f8c4 a014 	str.w	sl, [r4, #20]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80052fa:	b2b3      	uxth	r3, r6
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80052fc:	bb5a      	cbnz	r2, 8005356 <USB_EPStartXfer+0x1d2>
 80052fe:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8005302:	7820      	ldrb	r0, [r4, #0]
 8005304:	b292      	uxth	r2, r2
 8005306:	f205 410c 	addw	r1, r5, #1036	; 0x40c
 800530a:	0100      	lsls	r0, r0, #4
 800530c:	4411      	add	r1, r2
 800530e:	5a42      	ldrh	r2, [r0, r1]
 8005310:	2e3e      	cmp	r6, #62	; 0x3e
 8005312:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8005316:	5242      	strh	r2, [r0, r1]
 8005318:	d911      	bls.n	800533e <USB_EPStartXfer+0x1ba>
 800531a:	06f2      	lsls	r2, r6, #27
 800531c:	5a42      	ldrh	r2, [r0, r1]
 800531e:	ea4f 1756 	mov.w	r7, r6, lsr #5
 8005322:	bf08      	it	eq
 8005324:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8005328:	b292      	uxth	r2, r2
 800532a:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 800532e:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8005332:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8005336:	b292      	uxth	r2, r2
 8005338:	5242      	strh	r2, [r0, r1]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800533a:	8962      	ldrh	r2, [r4, #10]
 800533c:	e7af      	b.n	800529e <USB_EPStartXfer+0x11a>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800533e:	b90e      	cbnz	r6, 8005344 <USB_EPStartXfer+0x1c0>
 8005340:	5a42      	ldrh	r2, [r0, r1]
 8005342:	e7f4      	b.n	800532e <USB_EPStartXfer+0x1aa>
 8005344:	5a42      	ldrh	r2, [r0, r1]
 8005346:	0877      	lsrs	r7, r6, #1
 8005348:	07f6      	lsls	r6, r6, #31
 800534a:	bf48      	it	mi
 800534c:	3701      	addmi	r7, #1
 800534e:	b292      	uxth	r2, r2
 8005350:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 8005354:	e7ef      	b.n	8005336 <USB_EPStartXfer+0x1b2>
 8005356:	2a01      	cmp	r2, #1
 8005358:	d1ef      	bne.n	800533a <USB_EPStartXfer+0x1b6>
 800535a:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 800535e:	7821      	ldrb	r1, [r4, #0]
 8005360:	b280      	uxth	r0, r0
 8005362:	f205 420c 	addw	r2, r5, #1036	; 0x40c
 8005366:	0109      	lsls	r1, r1, #4
 8005368:	4402      	add	r2, r0
 800536a:	528b      	strh	r3, [r1, r2]
 800536c:	e7e5      	b.n	800533a <USB_EPStartXfer+0x1b6>
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800536e:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 8005372:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005376:	0412      	lsls	r2, r2, #16
 8005378:	0c12      	lsrs	r2, r2, #16
 800537a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800537e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005382:	f820 202e 	strh.w	r2, [r0, lr, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005386:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800538a:	f200 4204 	addw	r2, r0, #1028	; 0x404
 800538e:	b29b      	uxth	r3, r3
 8005390:	441a      	add	r2, r3
 8005392:	b2b3      	uxth	r3, r6
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005394:	f822 300c 	strh.w	r3, [r2, ip]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005398:	8922      	ldrh	r2, [r4, #8]
 800539a:	e782      	b.n	80052a2 <USB_EPStartXfer+0x11e>
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800539c:	f830 202e 	ldrh.w	r2, [r0, lr, lsl #2]
        ep->xfer_len_db -= len;
 80053a0:	1bf6      	subs	r6, r6, r7
 80053a2:	6226      	str	r6, [r4, #32]
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80053a4:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80053a8:	0652      	lsls	r2, r2, #25
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80053aa:	b2bb      	uxth	r3, r7
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80053ac:	b2b6      	uxth	r6, r6
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80053ae:	d506      	bpl.n	80053be <USB_EPStartXfer+0x23a>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80053b0:	f200 420c 	addw	r2, r0, #1036	; 0x40c
 80053b4:	4432      	add	r2, r6
 80053b6:	f822 300c 	strh.w	r3, [r2, ip]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80053ba:	8962      	ldrh	r2, [r4, #10]
 80053bc:	e771      	b.n	80052a2 <USB_EPStartXfer+0x11e>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80053be:	f200 4204 	addw	r2, r0, #1028	; 0x404
 80053c2:	4432      	add	r2, r6
 80053c4:	e7e6      	b.n	8005394 <USB_EPStartXfer+0x210>
    if (ep->doublebuffer == 0U)
 80053c6:	b9d2      	cbnz	r2, 80053fe <USB_EPStartXfer+0x27a>
      if (ep->xfer_len > ep->maxpacket)
 80053c8:	69a3      	ldr	r3, [r4, #24]
 80053ca:	6921      	ldr	r1, [r4, #16]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80053cc:	f8b0 0050 	ldrh.w	r0, [r0, #80]	; 0x50
      if (ep->xfer_len > ep->maxpacket)
 80053d0:	428b      	cmp	r3, r1
        ep->xfer_len -= len;
 80053d2:	bf84      	itt	hi
 80053d4:	1a5a      	subhi	r2, r3, r1
 80053d6:	460b      	movhi	r3, r1
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80053d8:	7821      	ldrb	r1, [r4, #0]
 80053da:	61a2      	str	r2, [r4, #24]
 80053dc:	b280      	uxth	r0, r0
 80053de:	f205 420c 	addw	r2, r5, #1036	; 0x40c
 80053e2:	0109      	lsls	r1, r1, #4
 80053e4:	4402      	add	r2, r0
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80053e6:	5a50      	ldrh	r0, [r2, r1]
 80053e8:	2b3e      	cmp	r3, #62	; 0x3e
 80053ea:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80053ee:	5250      	strh	r0, [r2, r1]
 80053f0:	f200 80c5 	bhi.w	800557e <USB_EPStartXfer+0x3fa>
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	f040 80d2 	bne.w	800559e <USB_EPStartXfer+0x41a>
 80053fa:	5a53      	ldrh	r3, [r2, r1]
 80053fc:	e0c8      	b.n	8005590 <USB_EPStartXfer+0x40c>
      if (ep->type == EP_TYPE_BULK)
 80053fe:	78e3      	ldrb	r3, [r4, #3]
 8005400:	2b02      	cmp	r3, #2
 8005402:	d17c      	bne.n	80054fe <USB_EPStartXfer+0x37a>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005404:	2900      	cmp	r1, #0
 8005406:	d14b      	bne.n	80054a0 <USB_EPStartXfer+0x31c>
 8005408:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800540c:	7820      	ldrb	r0, [r4, #0]
 800540e:	b29b      	uxth	r3, r3
 8005410:	f205 4104 	addw	r1, r5, #1028	; 0x404
 8005414:	0100      	lsls	r0, r0, #4
 8005416:	4419      	add	r1, r3
 8005418:	5a43      	ldrh	r3, [r0, r1]
 800541a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800541e:	5243      	strh	r3, [r0, r1]
 8005420:	6923      	ldr	r3, [r4, #16]
 8005422:	2b3e      	cmp	r3, #62	; 0x3e
 8005424:	d920      	bls.n	8005468 <USB_EPStartXfer+0x2e4>
 8005426:	5a42      	ldrh	r2, [r0, r1]
 8005428:	095e      	lsrs	r6, r3, #5
 800542a:	06df      	lsls	r7, r3, #27
 800542c:	bf08      	it	eq
 800542e:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8005432:	b292      	uxth	r2, r2
 8005434:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 8005438:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800543c:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8005440:	b292      	uxth	r2, r2
 8005442:	5242      	strh	r2, [r0, r1]
 8005444:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 8005448:	7822      	ldrb	r2, [r4, #0]
 800544a:	b280      	uxth	r0, r0
 800544c:	f205 410c 	addw	r1, r5, #1036	; 0x40c
 8005450:	0112      	lsls	r2, r2, #4
 8005452:	4401      	add	r1, r0
 8005454:	5a50      	ldrh	r0, [r2, r1]
 8005456:	2b3e      	cmp	r3, #62	; 0x3e
 8005458:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800545c:	5250      	strh	r0, [r2, r1]
 800545e:	d810      	bhi.n	8005482 <USB_EPStartXfer+0x2fe>
 8005460:	2b00      	cmp	r3, #0
 8005462:	d143      	bne.n	80054ec <USB_EPStartXfer+0x368>
 8005464:	5a53      	ldrh	r3, [r2, r1]
 8005466:	e015      	b.n	8005494 <USB_EPStartXfer+0x310>
 8005468:	b90b      	cbnz	r3, 800546e <USB_EPStartXfer+0x2ea>
 800546a:	5a42      	ldrh	r2, [r0, r1]
 800546c:	e7e4      	b.n	8005438 <USB_EPStartXfer+0x2b4>
 800546e:	07da      	lsls	r2, r3, #31
 8005470:	5a42      	ldrh	r2, [r0, r1]
 8005472:	ea4f 0653 	mov.w	r6, r3, lsr #1
 8005476:	bf48      	it	mi
 8005478:	3601      	addmi	r6, #1
 800547a:	b292      	uxth	r2, r2
 800547c:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 8005480:	e7de      	b.n	8005440 <USB_EPStartXfer+0x2bc>
 8005482:	0958      	lsrs	r0, r3, #5
 8005484:	06df      	lsls	r7, r3, #27
 8005486:	5a53      	ldrh	r3, [r2, r1]
 8005488:	bf08      	it	eq
 800548a:	f100 30ff 	addeq.w	r0, r0, #4294967295
 800548e:	b29b      	uxth	r3, r3
 8005490:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 8005494:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005498:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800549c:	b29b      	uxth	r3, r3
 800549e:	5253      	strh	r3, [r2, r1]
        if (ep->xfer_count != 0U)
 80054a0:	69e3      	ldr	r3, [r4, #28]
 80054a2:	b1bb      	cbz	r3, 80054d4 <USB_EPStartXfer+0x350>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80054a4:	f244 0340 	movw	r3, #16448	; 0x4040
 80054a8:	7822      	ldrb	r2, [r4, #0]
 80054aa:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80054ae:	ea03 0001 	and.w	r0, r3, r1
 80054b2:	438b      	bics	r3, r1
 80054b4:	d000      	beq.n	80054b8 <USB_EPStartXfer+0x334>
 80054b6:	b968      	cbnz	r0, 80054d4 <USB_EPStartXfer+0x350>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80054b8:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 80054bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054c4:	041b      	lsls	r3, r3, #16
 80054c6:	0c1b      	lsrs	r3, r3, #16
 80054c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054cc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80054d0:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80054d4:	7822      	ldrb	r2, [r4, #0]
 80054d6:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 80054da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054e2:	041b      	lsls	r3, r3, #16
 80054e4:	0c1b      	lsrs	r3, r3, #16
 80054e6:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80054ea:	e675      	b.n	80051d8 <USB_EPStartXfer+0x54>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80054ec:	0858      	lsrs	r0, r3, #1
 80054ee:	07de      	lsls	r6, r3, #31
 80054f0:	5a53      	ldrh	r3, [r2, r1]
 80054f2:	bf48      	it	mi
 80054f4:	3001      	addmi	r0, #1
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 80054fc:	e7ce      	b.n	800549c <USB_EPStartXfer+0x318>
      else if (ep->type == EP_TYPE_ISOC)
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d156      	bne.n	80055b0 <USB_EPStartXfer+0x42c>
        if (ep->xfer_len > ep->maxpacket)
 8005502:	69a3      	ldr	r3, [r4, #24]
 8005504:	6922      	ldr	r2, [r4, #16]
 8005506:	4293      	cmp	r3, r2
          ep->xfer_len = 0U;
 8005508:	bf94      	ite	ls
 800550a:	2000      	movls	r0, #0
          ep->xfer_len -= len;
 800550c:	1a98      	subhi	r0, r3, r2
 800550e:	61a0      	str	r0, [r4, #24]
 8005510:	bf88      	it	hi
 8005512:	4613      	movhi	r3, r2
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005514:	2900      	cmp	r1, #0
 8005516:	d1dd      	bne.n	80054d4 <USB_EPStartXfer+0x350>
 8005518:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800551c:	7820      	ldrb	r0, [r4, #0]
 800551e:	b292      	uxth	r2, r2
 8005520:	f205 4104 	addw	r1, r5, #1028	; 0x404
 8005524:	0100      	lsls	r0, r0, #4
 8005526:	4411      	add	r1, r2
 8005528:	5a42      	ldrh	r2, [r0, r1]
 800552a:	2b3e      	cmp	r3, #62	; 0x3e
 800552c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8005530:	5242      	strh	r2, [r0, r1]
 8005532:	d918      	bls.n	8005566 <USB_EPStartXfer+0x3e2>
 8005534:	06da      	lsls	r2, r3, #27
 8005536:	5a42      	ldrh	r2, [r0, r1]
 8005538:	ea4f 1653 	mov.w	r6, r3, lsr #5
 800553c:	bf08      	it	eq
 800553e:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8005542:	b292      	uxth	r2, r2
 8005544:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 8005548:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800554c:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8005550:	b292      	uxth	r2, r2
 8005552:	5242      	strh	r2, [r0, r1]
 8005554:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 8005558:	7822      	ldrb	r2, [r4, #0]
 800555a:	b280      	uxth	r0, r0
 800555c:	f205 410c 	addw	r1, r5, #1036	; 0x40c
 8005560:	0112      	lsls	r2, r2, #4
 8005562:	4401      	add	r1, r0
 8005564:	e73f      	b.n	80053e6 <USB_EPStartXfer+0x262>
 8005566:	b90b      	cbnz	r3, 800556c <USB_EPStartXfer+0x3e8>
 8005568:	5a42      	ldrh	r2, [r0, r1]
 800556a:	e7ed      	b.n	8005548 <USB_EPStartXfer+0x3c4>
 800556c:	5a42      	ldrh	r2, [r0, r1]
 800556e:	085e      	lsrs	r6, r3, #1
 8005570:	07df      	lsls	r7, r3, #31
 8005572:	bf48      	it	mi
 8005574:	3601      	addmi	r6, #1
 8005576:	b292      	uxth	r2, r2
 8005578:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 800557c:	e7e8      	b.n	8005550 <USB_EPStartXfer+0x3cc>
 800557e:	0958      	lsrs	r0, r3, #5
 8005580:	06de      	lsls	r6, r3, #27
 8005582:	5a53      	ldrh	r3, [r2, r1]
 8005584:	bf08      	it	eq
 8005586:	f100 30ff 	addeq.w	r0, r0, #4294967295
 800558a:	b29b      	uxth	r3, r3
 800558c:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 8005590:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005594:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005598:	b29b      	uxth	r3, r3
 800559a:	5253      	strh	r3, [r2, r1]
 800559c:	e79a      	b.n	80054d4 <USB_EPStartXfer+0x350>
 800559e:	0858      	lsrs	r0, r3, #1
 80055a0:	07db      	lsls	r3, r3, #31
 80055a2:	5a53      	ldrh	r3, [r2, r1]
 80055a4:	bf48      	it	mi
 80055a6:	3001      	addmi	r0, #1
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 80055ae:	e7f3      	b.n	8005598 <USB_EPStartXfer+0x414>
        return HAL_ERROR;
 80055b0:	2001      	movs	r0, #1
 80055b2:	e618      	b.n	80051e6 <USB_EPStartXfer+0x62>

080055b4 <USB_ReadPMA>:
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80055b4:	eb00 0042 	add.w	r0, r0, r2, lsl #1
{
 80055b8:	b5f0      	push	{r4, r5, r6, r7, lr}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80055ba:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  uint32_t n = (uint32_t)wNBytes >> 1;
 80055be:	085d      	lsrs	r5, r3, #1

  for (count = n; count != 0U; count--)
 80055c0:	460c      	mov	r4, r1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80055c2:	4607      	mov	r7, r0
  for (count = n; count != 0U; count--)
 80055c4:	462e      	mov	r6, r5
 80055c6:	3402      	adds	r4, #2
 80055c8:	b936      	cbnz	r6, 80055d8 <USB_ReadPMA+0x24>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80055ca:	07db      	lsls	r3, r3, #31
  {
    RdVal = *pdwVal;
 80055cc:	bf44      	itt	mi
 80055ce:	f830 3025 	ldrhmi.w	r3, [r0, r5, lsl #2]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80055d2:	f801 3015 	strbmi.w	r3, [r1, r5, lsl #1]
  }
}
 80055d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    RdVal = *(__IO uint16_t *)pdwVal;
 80055d8:	f837 2b04 	ldrh.w	r2, [r7], #4
  for (count = n; count != 0U; count--)
 80055dc:	3e01      	subs	r6, #1
    RdVal = *(__IO uint16_t *)pdwVal;
 80055de:	b292      	uxth	r2, r2
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80055e0:	f804 2c02 	strb.w	r2, [r4, #-2]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80055e4:	0a12      	lsrs	r2, r2, #8
 80055e6:	f804 2c01 	strb.w	r2, [r4, #-1]
  for (count = n; count != 0U; count--)
 80055ea:	e7ec      	b.n	80055c6 <USB_ReadPMA+0x12>

080055ec <DefaultFreeElementCallback>:
// TODO: Remove at the end
#include <stdio.h>

static void DefaultFreeElementCallback(HashMap_Node *sNode)
{
}
 80055ec:	4770      	bx	lr
	...

080055f0 <HashMap_Init>:

HashMap *HashMap_Init()
{
 80055f0:	b508      	push	{r3, lr}
    HashMap *sHashMap = (HashMap *)malloc(sizeof(HashMap));
 80055f2:	200c      	movs	r0, #12
 80055f4:	f001 f834 	bl	8006660 <malloc>
    sHashMap->sHead = NULL;
 80055f8:	2200      	movs	r2, #0
    sHashMap->sTail = NULL;
 80055fa:	e9c0 2200 	strd	r2, r2, [r0]
    sHashMap->fFreeElementCallback = DefaultFreeElementCallback;
 80055fe:	4a01      	ldr	r2, [pc, #4]	; (8005604 <HashMap_Init+0x14>)
 8005600:	6082      	str	r2, [r0, #8]
    return sHashMap;
}
 8005602:	bd08      	pop	{r3, pc}
 8005604:	080055ed 	.word	0x080055ed

08005608 <HashMap_Set>:

void HashMap_Set(HashMap *sHashMap, char *chKey, void *pData)
{
 8005608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    HashMap_Node *ptr = sHashMap->sHead;
 800560c:	f8d0 8000 	ldr.w	r8, [r0]
{
 8005610:	4604      	mov	r4, r0
 8005612:	460f      	mov	r7, r1
 8005614:	4616      	mov	r6, r2
    HashMap_Node *ptr = sHashMap->sHead;
 8005616:	4645      	mov	r5, r8

    while (ptr != NULL)
 8005618:	b95d      	cbnz	r5, 8005632 <HashMap_Set+0x2a>
            return;
        }
        ptr = ptr->sNextNode;
    }

    HashMap_Node *sNewNode = (HashMap_Node *)malloc(sizeof(HashMap_Node));
 800561a:	200c      	movs	r0, #12
 800561c:	f001 f820 	bl	8006660 <malloc>
    sNewNode->chKey = chKey;
    sNewNode->pData = pData;
 8005620:	e9c0 7600 	strd	r7, r6, [r0]
    sNewNode->sNextNode = NULL;
 8005624:	6085      	str	r5, [r0, #8]

    if (sHashMap->sHead == NULL)
 8005626:	f1b8 0f00 	cmp.w	r8, #0
 800562a:	d10c      	bne.n	8005646 <HashMap_Set+0x3e>
    {
        sHashMap->sHead = sNewNode;
 800562c:	6020      	str	r0, [r4, #0]
        sHashMap->sTail = sNewNode;
    }
    else
    {
        sHashMap->sTail->sNextNode = sNewNode;
        sHashMap->sTail = sNewNode;
 800562e:	6060      	str	r0, [r4, #4]
 8005630:	e005      	b.n	800563e <HashMap_Set+0x36>
        if (strcmp(ptr->chKey, chKey) == 0)
 8005632:	4639      	mov	r1, r7
 8005634:	6828      	ldr	r0, [r5, #0]
 8005636:	f7fa fd8b 	bl	8000150 <strcmp>
 800563a:	b910      	cbnz	r0, 8005642 <HashMap_Set+0x3a>
            ptr->pData = pData;
 800563c:	606e      	str	r6, [r5, #4]
    }
}
 800563e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ptr = ptr->sNextNode;
 8005642:	68ad      	ldr	r5, [r5, #8]
 8005644:	e7e8      	b.n	8005618 <HashMap_Set+0x10>
        sHashMap->sTail->sNextNode = sNewNode;
 8005646:	6863      	ldr	r3, [r4, #4]
 8005648:	6098      	str	r0, [r3, #8]
 800564a:	e7f0      	b.n	800562e <HashMap_Set+0x26>

0800564c <HashMap_Get>:

void *HashMap_Get(HashMap *sHashMap, char *chKey)
{
 800564c:	b538      	push	{r3, r4, r5, lr}
 800564e:	460d      	mov	r5, r1
    HashMap_Node *ptr = sHashMap->sHead;
 8005650:	6804      	ldr	r4, [r0, #0]

    while (ptr != NULL)
 8005652:	b12c      	cbz	r4, 8005660 <HashMap_Get+0x14>
    {
        if (!strcmp(ptr->chKey, chKey))
 8005654:	4629      	mov	r1, r5
 8005656:	6820      	ldr	r0, [r4, #0]
 8005658:	f7fa fd7a 	bl	8000150 <strcmp>
 800565c:	b910      	cbnz	r0, 8005664 <HashMap_Get+0x18>
        {
            return ptr->pData;
 800565e:	6864      	ldr	r4, [r4, #4]
            ptr = ptr->sNextNode;
        }
    }

    return NULL;
}
 8005660:	4620      	mov	r0, r4
 8005662:	bd38      	pop	{r3, r4, r5, pc}
            ptr = ptr->sNextNode;
 8005664:	68a4      	ldr	r4, [r4, #8]
 8005666:	e7f4      	b.n	8005652 <HashMap_Get+0x6>

08005668 <HashMap_Contains>:

    free(sHashMap);
}

uint8_t HashMap_Contains(HashMap *sHashMap, char *chKey)
{
 8005668:	b538      	push	{r3, r4, r5, lr}
 800566a:	460d      	mov	r5, r1
    HashMap_Node *ptr = sHashMap->sHead;
 800566c:	6804      	ldr	r4, [r0, #0]

    while (ptr != NULL)
 800566e:	b90c      	cbnz	r4, 8005674 <HashMap_Contains+0xc>
        }

        ptr = ptr->sNextNode;
    }

    return HASH_MAP_NOT_CONTAIN;
 8005670:	4620      	mov	r0, r4
}
 8005672:	bd38      	pop	{r3, r4, r5, pc}
        if (!strcmp(ptr->chKey, chKey))
 8005674:	4629      	mov	r1, r5
 8005676:	6820      	ldr	r0, [r4, #0]
 8005678:	f7fa fd6a 	bl	8000150 <strcmp>
 800567c:	b108      	cbz	r0, 8005682 <HashMap_Contains+0x1a>
        ptr = ptr->sNextNode;
 800567e:	68a4      	ldr	r4, [r4, #8]
 8005680:	e7f5      	b.n	800566e <HashMap_Contains+0x6>
            return HASH_MAP_CONTAIN;
 8005682:	2001      	movs	r0, #1
 8005684:	e7f5      	b.n	8005672 <HashMap_Contains+0xa>

08005686 <HashMap_SetFreeElementCallback>:

void HashMap_SetFreeElementCallback(HashMap *sHashMap, FreeElementCallback fCallback)
{
    sHashMap->fFreeElementCallback = fCallback;
 8005686:	6081      	str	r1, [r0, #8]
}
 8005688:	4770      	bx	lr

0800568a <EmptyFreeElement>:
    free(sDeleted);
}

void EmptyFreeElement(LinkList_Node *sNode)
{
}
 800568a:	4770      	bx	lr

0800568c <LinkList_Init>:
{
 800568c:	b508      	push	{r3, lr}
	LinkList *sList = (LinkList *)malloc(sizeof(LinkList));
 800568e:	2010      	movs	r0, #16
 8005690:	f000 ffe6 	bl	8006660 <malloc>
    sList->sHead = NULL;
 8005694:	2200      	movs	r2, #0
    sList->sTail = NULL;
 8005696:	e9c0 2200 	strd	r2, r2, [r0]
    sList->u8Size = 0;
 800569a:	7202      	strb	r2, [r0, #8]
    sList->fFreeElement = EmptyFreeElement;
 800569c:	4a01      	ldr	r2, [pc, #4]	; (80056a4 <LinkList_Init+0x18>)
 800569e:	60c2      	str	r2, [r0, #12]
}
 80056a0:	bd08      	pop	{r3, pc}
 80056a2:	bf00      	nop
 80056a4:	0800568b 	.word	0x0800568b

080056a8 <LinkList_GetSize>:
}
 80056a8:	7a00      	ldrb	r0, [r0, #8]
 80056aa:	4770      	bx	lr

080056ac <LinkList_Append>:
{
 80056ac:	b538      	push	{r3, r4, r5, lr}
 80056ae:	4604      	mov	r4, r0
    LinkList_Node *sNode = (LinkList_Node *)malloc(sizeof(LinkList_Node));
 80056b0:	2008      	movs	r0, #8
{
 80056b2:	460d      	mov	r5, r1
    LinkList_Node *sNode = (LinkList_Node *)malloc(sizeof(LinkList_Node));
 80056b4:	f000 ffd4 	bl	8006660 <malloc>
    sNode->sNextNode = NULL;
 80056b8:	2300      	movs	r3, #0
 80056ba:	6043      	str	r3, [r0, #4]
    if (sList->u8Size == 0)
 80056bc:	7a23      	ldrb	r3, [r4, #8]
    sNode->pData = pData;
 80056be:	6005      	str	r5, [r0, #0]
    if (sList->u8Size == 0)
 80056c0:	b923      	cbnz	r3, 80056cc <LinkList_Append+0x20>
        sList->sHead = sNode;
 80056c2:	6020      	str	r0, [r4, #0]
    sList->u8Size++;
 80056c4:	3301      	adds	r3, #1
        sList->sTail = sNode;
 80056c6:	6060      	str	r0, [r4, #4]
    sList->u8Size++;
 80056c8:	7223      	strb	r3, [r4, #8]
}
 80056ca:	bd38      	pop	{r3, r4, r5, pc}
        sList->sTail->sNextNode = sNode;
 80056cc:	6862      	ldr	r2, [r4, #4]
 80056ce:	6050      	str	r0, [r2, #4]
        sList->sTail = sNode;
 80056d0:	e7f8      	b.n	80056c4 <LinkList_Append+0x18>

080056d2 <LinkList_Get>:
    LinkList_Node *ptrNode = sList->sHead;
 80056d2:	6800      	ldr	r0, [r0, #0]
    while (u8Index != 0 && ptrNode != NULL)
 80056d4:	b129      	cbz	r1, 80056e2 <LinkList_Get+0x10>
 80056d6:	b900      	cbnz	r0, 80056da <LinkList_Get+0x8>
 80056d8:	4770      	bx	lr
        u8Index--;
 80056da:	3901      	subs	r1, #1
        ptrNode = ptrNode->sNextNode;
 80056dc:	6840      	ldr	r0, [r0, #4]
        u8Index--;
 80056de:	b2c9      	uxtb	r1, r1
 80056e0:	e7f8      	b.n	80056d4 <LinkList_Get+0x2>
        return ptrNode->pData;
 80056e2:	6800      	ldr	r0, [r0, #0]
}
 80056e4:	4770      	bx	lr

080056e6 <LinkList_SetFreeElement>:
    sList->fFreeElement = fCallback;
 80056e6:	60c1      	str	r1, [r0, #12]
}
 80056e8:	4770      	bx	lr

080056ea <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80056ea:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
{
 80056ee:	b510      	push	{r4, lr}
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80056f0:	b16b      	cbz	r3, 800570e <USBD_CDC_EP0_RxReady+0x24>
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80056f2:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80056f6:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 80056fa:	28ff      	cmp	r0, #255	; 0xff
 80056fc:	d007      	beq.n	800570e <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	4621      	mov	r1, r4
 8005702:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8005706:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8005708:	23ff      	movs	r3, #255	; 0xff
 800570a:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 800570e:	2000      	movs	r0, #0
 8005710:	bd10      	pop	{r4, pc}
	...

08005714 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8005714:	2343      	movs	r3, #67	; 0x43
 8005716:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8005718:	4800      	ldr	r0, [pc, #0]	; (800571c <USBD_CDC_GetFSCfgDesc+0x8>)
 800571a:	4770      	bx	lr
 800571c:	20000048 	.word	0x20000048

08005720 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8005720:	2343      	movs	r3, #67	; 0x43
 8005722:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8005724:	4800      	ldr	r0, [pc, #0]	; (8005728 <USBD_CDC_GetHSCfgDesc+0x8>)
 8005726:	4770      	bx	lr
 8005728:	2000008c 	.word	0x2000008c

0800572c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800572c:	2343      	movs	r3, #67	; 0x43
 800572e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8005730:	4800      	ldr	r0, [pc, #0]	; (8005734 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8005732:	4770      	bx	lr
 8005734:	200000dc 	.word	0x200000dc

08005738 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8005738:	230a      	movs	r3, #10
 800573a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 800573c:	4800      	ldr	r0, [pc, #0]	; (8005740 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 800573e:	4770      	bx	lr
 8005740:	200000d0 	.word	0x200000d0

08005744 <USBD_CDC_DataOut>:
{
 8005744:	b538      	push	{r3, r4, r5, lr}
 8005746:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005748:	f8d0 52b8 	ldr.w	r5, [r0, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800574c:	f000 ff7d 	bl	800664a <USBD_LL_GetRxDataSize>
  if (pdev->pClassData != NULL)
 8005750:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005754:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  if (pdev->pClassData != NULL)
 8005758:	b14b      	cbz	r3, 800576e <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800575a:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 800575e:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 8005768:	4798      	blx	r3
    return USBD_OK;
 800576a:	2000      	movs	r0, #0
}
 800576c:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 800576e:	2002      	movs	r0, #2
 8005770:	e7fc      	b.n	800576c <USBD_CDC_DataOut+0x28>

08005772 <USBD_CDC_DataIn>:
{
 8005772:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005774:	f8d0 62b8 	ldr.w	r6, [r0, #696]	; 0x2b8
  if (pdev->pClassData != NULL)
 8005778:	b1d6      	cbz	r6, 80057b0 <USBD_CDC_DataIn+0x3e>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800577a:	2414      	movs	r4, #20
 800577c:	fb04 0301 	mla	r3, r4, r1, r0
 8005780:	69dc      	ldr	r4, [r3, #28]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005782:	f8d0 52c0 	ldr.w	r5, [r0, #704]	; 0x2c0
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005786:	b17c      	cbz	r4, 80057a8 <USBD_CDC_DataIn+0x36>
 8005788:	2728      	movs	r7, #40	; 0x28
 800578a:	fb07 5201 	mla	r2, r7, r1, r5
 800578e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005790:	fbb4 f5f2 	udiv	r5, r4, r2
 8005794:	fb02 4415 	mls	r4, r2, r5, r4
 8005798:	b934      	cbnz	r4, 80057a8 <USBD_CDC_DataIn+0x36>
      pdev->ep_in[epnum].total_length = 0U;
 800579a:	61dc      	str	r4, [r3, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800579c:	4622      	mov	r2, r4
 800579e:	4623      	mov	r3, r4
 80057a0:	f000 ff41 	bl	8006626 <USBD_LL_Transmit>
    return USBD_OK;
 80057a4:	4620      	mov	r0, r4
}
 80057a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hcdc->TxState = 0U;
 80057a8:	2000      	movs	r0, #0
 80057aa:	f8c6 0214 	str.w	r0, [r6, #532]	; 0x214
 80057ae:	e7fa      	b.n	80057a6 <USBD_CDC_DataIn+0x34>
    return USBD_FAIL;
 80057b0:	2002      	movs	r0, #2
 80057b2:	e7f8      	b.n	80057a6 <USBD_CDC_DataIn+0x34>

080057b4 <USBD_CDC_Setup>:
{
 80057b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  uint8_t ifalt = 0U;
 80057b8:	f04f 0800 	mov.w	r8, #0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80057bc:	780a      	ldrb	r2, [r1, #0]
{
 80057be:	4605      	mov	r5, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80057c0:	f012 0460 	ands.w	r4, r2, #96	; 0x60
{
 80057c4:	460e      	mov	r6, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80057c6:	f8d0 72b8 	ldr.w	r7, [r0, #696]	; 0x2b8
  uint8_t ifalt = 0U;
 80057ca:	f88d 8005 	strb.w	r8, [sp, #5]
  uint16_t status_info = 0U;
 80057ce:	f8ad 8006 	strh.w	r8, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80057d2:	d028      	beq.n	8005826 <USBD_CDC_Setup+0x72>
 80057d4:	2c20      	cmp	r4, #32
 80057d6:	d142      	bne.n	800585e <USBD_CDC_Setup+0xaa>
      if (req->wLength)
 80057d8:	88cc      	ldrh	r4, [r1, #6]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80057da:	784b      	ldrb	r3, [r1, #1]
      if (req->wLength)
 80057dc:	b1e4      	cbz	r4, 8005818 <USBD_CDC_Setup+0x64>
        if (req->bmRequest & 0x80U)
 80057de:	0612      	lsls	r2, r2, #24
 80057e0:	d511      	bpl.n	8005806 <USBD_CDC_Setup+0x52>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80057e2:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 80057e6:	4639      	mov	r1, r7
 80057e8:	f8d2 9008 	ldr.w	r9, [r2, #8]
 80057ec:	4618      	mov	r0, r3
 80057ee:	4622      	mov	r2, r4
 80057f0:	47c8      	blx	r9
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80057f2:	4639      	mov	r1, r7
 80057f4:	4628      	mov	r0, r5
 80057f6:	88f2      	ldrh	r2, [r6, #6]
 80057f8:	f000 fc47 	bl	800608a <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 80057fc:	4644      	mov	r4, r8
}
 80057fe:	4620      	mov	r0, r4
 8005800:	b003      	add	sp, #12
 8005802:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005806:	4622      	mov	r2, r4
 8005808:	4639      	mov	r1, r7
          hcdc->CmdOpCode = req->bRequest;
 800580a:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800580e:	f887 4201 	strb.w	r4, [r7, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005812:	f000 fc4f 	bl	80060b4 <USBD_CtlPrepareRx>
 8005816:	e7f1      	b.n	80057fc <USBD_CDC_Setup+0x48>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005818:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 800581c:	4618      	mov	r0, r3
 800581e:	6895      	ldr	r5, [r2, #8]
 8005820:	4622      	mov	r2, r4
 8005822:	47a8      	blx	r5
 8005824:	e7eb      	b.n	80057fe <USBD_CDC_Setup+0x4a>
      switch (req->bRequest)
 8005826:	784b      	ldrb	r3, [r1, #1]
 8005828:	2b0a      	cmp	r3, #10
 800582a:	d00c      	beq.n	8005846 <USBD_CDC_Setup+0x92>
 800582c:	2b0b      	cmp	r3, #11
 800582e:	d012      	beq.n	8005856 <USBD_CDC_Setup+0xa2>
 8005830:	b9ab      	cbnz	r3, 800585e <USBD_CDC_Setup+0xaa>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005832:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005836:	2b03      	cmp	r3, #3
 8005838:	d111      	bne.n	800585e <USBD_CDC_Setup+0xaa>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800583a:	2202      	movs	r2, #2
 800583c:	f10d 0106 	add.w	r1, sp, #6
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8005840:	f000 fc23 	bl	800608a <USBD_CtlSendData>
 8005844:	e7db      	b.n	80057fe <USBD_CDC_Setup+0x4a>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005846:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800584a:	2b03      	cmp	r3, #3
 800584c:	d107      	bne.n	800585e <USBD_CDC_Setup+0xaa>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800584e:	2201      	movs	r2, #1
 8005850:	f10d 0105 	add.w	r1, sp, #5
 8005854:	e7f4      	b.n	8005840 <USBD_CDC_Setup+0x8c>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005856:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800585a:	2b03      	cmp	r3, #3
 800585c:	d0cf      	beq.n	80057fe <USBD_CDC_Setup+0x4a>
          USBD_CtlError(pdev, req);
 800585e:	4631      	mov	r1, r6
 8005860:	4628      	mov	r0, r5
 8005862:	f000 fbeb 	bl	800603c <USBD_CtlError>
          ret = USBD_FAIL;
 8005866:	2402      	movs	r4, #2
          break;
 8005868:	e7c9      	b.n	80057fe <USBD_CDC_Setup+0x4a>

0800586a <USBD_CDC_DeInit>:
{
 800586a:	b538      	push	{r3, r4, r5, lr}
 800586c:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800586e:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005870:	2181      	movs	r1, #129	; 0x81
 8005872:	f000 fea2 	bl	80065ba <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005876:	2101      	movs	r1, #1
 8005878:	4620      	mov	r0, r4
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800587a:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800587c:	f000 fe9d 	bl	80065ba <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005880:	2182      	movs	r1, #130	; 0x82
 8005882:	4620      	mov	r0, r4
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005884:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005888:	f000 fe97 	bl	80065ba <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 800588c:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005890:	6425      	str	r5, [r4, #64]	; 0x40
  if (pdev->pClassData != NULL)
 8005892:	b14b      	cbz	r3, 80058a8 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005894:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800589c:	f8d4 02b8 	ldr.w	r0, [r4, #696]	; 0x2b8
 80058a0:	f000 fedc 	bl	800665c <USBD_static_free>
    pdev->pClassData = NULL;
 80058a4:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
}
 80058a8:	2000      	movs	r0, #0
 80058aa:	bd38      	pop	{r3, r4, r5, pc}

080058ac <USBD_CDC_Init>:
{
 80058ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80058b0:	7c03      	ldrb	r3, [r0, #16]
{
 80058b2:	4604      	mov	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80058b4:	bbb3      	cbnz	r3, 8005924 <USBD_CDC_Init+0x78>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80058b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80058ba:	2181      	movs	r1, #129	; 0x81
 80058bc:	2202      	movs	r2, #2
 80058be:	f000 fe70 	bl	80065a2 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80058c2:	2101      	movs	r1, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80058c4:	f44f 7300 	mov.w	r3, #512	; 0x200
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80058c8:	62e1      	str	r1, [r4, #44]	; 0x2c
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80058ca:	2601      	movs	r6, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80058cc:	2202      	movs	r2, #2
 80058ce:	4620      	mov	r0, r4
 80058d0:	f000 fe67 	bl	80065a2 <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80058d4:	2308      	movs	r3, #8
 80058d6:	2203      	movs	r2, #3
 80058d8:	2182      	movs	r1, #130	; 0x82
 80058da:	4620      	mov	r0, r4
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80058dc:	f8c4 616c 	str.w	r6, [r4, #364]	; 0x16c
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80058e0:	f000 fe5f 	bl	80065a2 <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80058e4:	f44f 7007 	mov.w	r0, #540	; 0x21c
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80058e8:	6426      	str	r6, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80058ea:	f000 feb3 	bl	8006654 <USBD_static_malloc>
 80058ee:	4605      	mov	r5, r0
 80058f0:	f8c4 02b8 	str.w	r0, [r4, #696]	; 0x2b8
  if (pdev->pClassData == NULL)
 80058f4:	b340      	cbz	r0, 8005948 <USBD_CDC_Init+0x9c>
    hcdc->TxState = 0U;
 80058f6:	f04f 0800 	mov.w	r8, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80058fa:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4798      	blx	r3
    hcdc->TxState = 0U;
 8005902:	f8c5 8214 	str.w	r8, [r5, #532]	; 0x214
    hcdc->RxState = 0U;
 8005906:	f8c5 8218 	str.w	r8, [r5, #536]	; 0x218
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800590a:	7c27      	ldrb	r7, [r4, #16]
 800590c:	b99f      	cbnz	r7, 8005936 <USBD_CDC_Init+0x8a>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800590e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005912:	4631      	mov	r1, r6
 8005914:	4620      	mov	r0, r4
 8005916:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 800591a:	f000 fe8d 	bl	8006638 <USBD_LL_PrepareReceive>
}
 800591e:	4638      	mov	r0, r7
 8005920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005924:	2340      	movs	r3, #64	; 0x40
 8005926:	2181      	movs	r1, #129	; 0x81
 8005928:	2202      	movs	r2, #2
 800592a:	f000 fe3a 	bl	80065a2 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800592e:	2101      	movs	r1, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005930:	2340      	movs	r3, #64	; 0x40
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005932:	62e1      	str	r1, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005934:	e7c9      	b.n	80058ca <USBD_CDC_Init+0x1e>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005936:	2340      	movs	r3, #64	; 0x40
 8005938:	4631      	mov	r1, r6
 800593a:	4620      	mov	r0, r4
 800593c:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8005940:	f000 fe7a 	bl	8006638 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8005944:	4647      	mov	r7, r8
 8005946:	e7ea      	b.n	800591e <USBD_CDC_Init+0x72>
    ret = 1U;
 8005948:	4637      	mov	r7, r6
 800594a:	e7e8      	b.n	800591e <USBD_CDC_Init+0x72>

0800594c <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 800594c:	b119      	cbz	r1, 8005956 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 800594e:	f8c0 12bc 	str.w	r1, [r0, #700]	; 0x2bc
    ret = USBD_OK;
 8005952:	2000      	movs	r0, #0
 8005954:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8005956:	2002      	movs	r0, #2
  }

  return ret;
}
 8005958:	4770      	bx	lr

0800595a <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800595a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 800595e:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 8005960:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005964:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 8005968:	4770      	bx	lr

0800596a <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 800596a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  return USBD_OK;
}
 800596e:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8005970:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 8005974:	4770      	bx	lr

08005976 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005976:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 800597a:	b510      	push	{r4, lr}

  if (pdev->pClassData != NULL)
 800597c:	b182      	cbz	r2, 80059a0 <USBD_CDC_TransmitPacket+0x2a>
  {
    if (hcdc->TxState == 0U)
 800597e:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 8005982:	2301      	movs	r3, #1
 8005984:	b974      	cbnz	r4, 80059a4 <USBD_CDC_TransmitPacket+0x2e>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8005986:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800598a:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800598e:	2181      	movs	r1, #129	; 0x81
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005990:	6303      	str	r3, [r0, #48]	; 0x30
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005992:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 8005996:	b29b      	uxth	r3, r3
 8005998:	f000 fe45 	bl	8006626 <USBD_LL_Transmit>
                       (uint16_t)hcdc->TxLength);

      return USBD_OK;
 800599c:	4620      	mov	r0, r4
  }
  else
  {
    return USBD_FAIL;
  }
}
 800599e:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 80059a0:	2002      	movs	r0, #2
 80059a2:	e7fc      	b.n	800599e <USBD_CDC_TransmitPacket+0x28>
      return USBD_BUSY;
 80059a4:	4618      	mov	r0, r3
 80059a6:	e7fa      	b.n	800599e <USBD_CDC_TransmitPacket+0x28>

080059a8 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80059a8:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 80059ac:	b510      	push	{r4, lr}

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80059ae:	b182      	cbz	r2, 80059d2 <USBD_CDC_ReceivePacket+0x2a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80059b0:	7c04      	ldrb	r4, [r0, #16]
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80059b2:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80059b6:	b934      	cbnz	r4, 80059c6 <USBD_CDC_ReceivePacket+0x1e>
      USBD_LL_PrepareReceive(pdev,
 80059b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80059bc:	2101      	movs	r1, #1
 80059be:	f000 fe3b 	bl	8006638 <USBD_LL_PrepareReceive>
  }
  else
  {
    return USBD_FAIL;
  }
}
 80059c2:	4620      	mov	r0, r4
 80059c4:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 80059c6:	2340      	movs	r3, #64	; 0x40
 80059c8:	2101      	movs	r1, #1
 80059ca:	f000 fe35 	bl	8006638 <USBD_LL_PrepareReceive>
    return USBD_OK;
 80059ce:	2400      	movs	r4, #0
 80059d0:	e7f7      	b.n	80059c2 <USBD_CDC_ReceivePacket+0x1a>
    return USBD_FAIL;
 80059d2:	2402      	movs	r4, #2
 80059d4:	e7f5      	b.n	80059c2 <USBD_CDC_ReceivePacket+0x1a>

080059d6 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80059d6:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80059d8:	b180      	cbz	r0, 80059fc <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80059da:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80059de:	b113      	cbz	r3, 80059e6 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 80059e0:	2300      	movs	r3, #0
 80059e2:	f8c0 32b4 	str.w	r3, [r0, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80059e6:	b109      	cbz	r1, 80059ec <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 80059e8:	f8c0 12b0 	str.w	r1, [r0, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80059ec:	2301      	movs	r3, #1
  pdev->id = id;
 80059ee:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 80059f0:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80059f4:	f000 fd8a 	bl	800650c <USBD_LL_Init>

  return USBD_OK;
 80059f8:	2000      	movs	r0, #0
}
 80059fa:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 80059fc:	2002      	movs	r0, #2
 80059fe:	e7fc      	b.n	80059fa <USBD_Init+0x24>

08005a00 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 8005a00:	b119      	cbz	r1, 8005a0a <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005a02:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
    status = USBD_OK;
 8005a06:	2000      	movs	r0, #0
 8005a08:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005a0a:	2002      	movs	r0, #2
  }

  return status;
}
 8005a0c:	4770      	bx	lr

08005a0e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005a0e:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005a10:	f000 fdbe 	bl	8006590 <USBD_LL_Start>

  return USBD_OK;
}
 8005a14:	2000      	movs	r0, #0
 8005a16:	bd08      	pop	{r3, pc}

08005a18 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005a18:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8005a1a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005a1e:	b133      	cbz	r3, 8005a2e <USBD_SetClassConfig+0x16>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4798      	blx	r3
 8005a24:	3800      	subs	r0, #0
 8005a26:	bf18      	it	ne
 8005a28:	2001      	movne	r0, #1
 8005a2a:	0040      	lsls	r0, r0, #1
      ret = USBD_OK;
    }
  }

  return ret;
}
 8005a2c:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005a2e:	2002      	movs	r0, #2
 8005a30:	e7fc      	b.n	8005a2c <USBD_SetClassConfig+0x14>

08005a32 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005a32:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005a34:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	4798      	blx	r3

  return USBD_OK;
}
 8005a3c:	2000      	movs	r0, #0
 8005a3e:	bd08      	pop	{r3, pc}

08005a40 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005a40:	b538      	push	{r3, r4, r5, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005a42:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
{
 8005a46:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005a48:	4628      	mov	r0, r5
 8005a4a:	f000 fae3 	bl	8006014 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005a4e:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8005a50:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
  pdev->ep0_state = USBD_EP0_SETUP;
 8005a54:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 8005a58:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	; 0x2ae
 8005a5c:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 8005a60:	f001 031f 	and.w	r3, r1, #31
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d008      	beq.n	8005a7a <USBD_LL_SetupStage+0x3a>
 8005a68:	2b02      	cmp	r3, #2
 8005a6a:	d00b      	beq.n	8005a84 <USBD_LL_SetupStage+0x44>
 8005a6c:	b97b      	cbnz	r3, 8005a8e <USBD_LL_SetupStage+0x4e>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8005a6e:	4629      	mov	r1, r5
 8005a70:	4620      	mov	r0, r4
 8005a72:	f000 f8fb 	bl	8005c6c <USBD_StdDevReq>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return USBD_OK;
}
 8005a76:	2000      	movs	r0, #0
 8005a78:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 8005a7a:	4629      	mov	r1, r5
 8005a7c:	4620      	mov	r0, r4
 8005a7e:	f000 fa1d 	bl	8005ebc <USBD_StdItfReq>
      break;
 8005a82:	e7f8      	b.n	8005a76 <USBD_LL_SetupStage+0x36>
      USBD_StdEPReq(pdev, &pdev->request);
 8005a84:	4629      	mov	r1, r5
 8005a86:	4620      	mov	r0, r4
 8005a88:	f000 fa3c 	bl	8005f04 <USBD_StdEPReq>
      break;
 8005a8c:	e7f3      	b.n	8005a76 <USBD_LL_SetupStage+0x36>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005a8e:	4620      	mov	r0, r4
 8005a90:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8005a94:	f000 fd9a 	bl	80065cc <USBD_LL_StallEP>
      break;
 8005a98:	e7ed      	b.n	8005a76 <USBD_LL_SetupStage+0x36>

08005a9a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005a9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a9c:	4604      	mov	r4, r0
 8005a9e:	4617      	mov	r7, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005aa0:	460d      	mov	r5, r1
 8005aa2:	bb39      	cbnz	r1, 8005af4 <USBD_LL_DataOutStage+0x5a>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005aa4:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8005aa8:	2b03      	cmp	r3, #3
 8005aaa:	d11c      	bne.n	8005ae6 <USBD_LL_DataOutStage+0x4c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005aac:	e9d0 6258 	ldrd	r6, r2, [r0, #352]	; 0x160
 8005ab0:	4296      	cmp	r6, r2
 8005ab2:	d90b      	bls.n	8005acc <USBD_LL_DataOutStage+0x32>
      {
        pep->rem_length -= pep->maxpacket;
 8005ab4:	1ab6      	subs	r6, r6, r2

        USBD_CtlContinueRx(pdev, pdata,
 8005ab6:	42b2      	cmp	r2, r6
 8005ab8:	4639      	mov	r1, r7
        pep->rem_length -= pep->maxpacket;
 8005aba:	f8c0 6160 	str.w	r6, [r0, #352]	; 0x160
        USBD_CtlContinueRx(pdev, pdata,
 8005abe:	bf8c      	ite	hi
 8005ac0:	b2b2      	uxthhi	r2, r6
 8005ac2:	b292      	uxthls	r2, r2
 8005ac4:	f000 fb03 	bl	80060ce <USBD_CtlContinueRx>
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 8005ac8:	4628      	mov	r0, r5
 8005aca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005acc:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005ad0:	691b      	ldr	r3, [r3, #16]
 8005ad2:	b123      	cbz	r3, 8005ade <USBD_LL_DataOutStage+0x44>
 8005ad4:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8005ad8:	2a03      	cmp	r2, #3
 8005ada:	d100      	bne.n	8005ade <USBD_LL_DataOutStage+0x44>
          pdev->pClass->EP0_RxReady(pdev);
 8005adc:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8005ade:	4620      	mov	r0, r4
 8005ae0:	f000 fafd 	bl	80060de <USBD_CtlSendStatus>
 8005ae4:	e7f0      	b.n	8005ac8 <USBD_LL_DataOutStage+0x2e>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005ae6:	2b05      	cmp	r3, #5
 8005ae8:	d1ee      	bne.n	8005ac8 <USBD_LL_DataOutStage+0x2e>
        pdev->ep0_state = USBD_EP0_IDLE;
 8005aea:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8005aee:	f000 fd6d 	bl	80065cc <USBD_LL_StallEP>
 8005af2:	e7e9      	b.n	8005ac8 <USBD_LL_DataOutStage+0x2e>
  else if ((pdev->pClass->DataOut != NULL) &&
 8005af4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005af8:	699b      	ldr	r3, [r3, #24]
 8005afa:	b133      	cbz	r3, 8005b0a <USBD_LL_DataOutStage+0x70>
 8005afc:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8005b00:	2a03      	cmp	r2, #3
 8005b02:	d102      	bne.n	8005b0a <USBD_LL_DataOutStage+0x70>
    pdev->pClass->DataOut(pdev, epnum);
 8005b04:	4798      	blx	r3
  return USBD_OK;
 8005b06:	2500      	movs	r5, #0
    pdev->pClass->DataOut(pdev, epnum);
 8005b08:	e7de      	b.n	8005ac8 <USBD_LL_DataOutStage+0x2e>
    return USBD_FAIL;
 8005b0a:	2502      	movs	r5, #2
 8005b0c:	e7dc      	b.n	8005ac8 <USBD_LL_DataOutStage+0x2e>

08005b0e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005b0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b10:	4604      	mov	r4, r0
 8005b12:	4617      	mov	r7, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005b14:	460d      	mov	r5, r1
 8005b16:	2900      	cmp	r1, #0
 8005b18:	d147      	bne.n	8005baa <USBD_LL_DataInStage+0x9c>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005b1a:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8005b1e:	2b02      	cmp	r3, #2
 8005b20:	d13c      	bne.n	8005b9c <USBD_LL_DataInStage+0x8e>
    {
      if (pep->rem_length > pep->maxpacket)
 8005b22:	e9d0 6308 	ldrd	r6, r3, [r0, #32]
 8005b26:	429e      	cmp	r6, r3
 8005b28:	d914      	bls.n	8005b54 <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -= pep->maxpacket;
 8005b2a:	1af6      	subs	r6, r6, r3

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8005b2c:	4639      	mov	r1, r7
        pep->rem_length -= pep->maxpacket;
 8005b2e:	6206      	str	r6, [r0, #32]
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8005b30:	b2b2      	uxth	r2, r6
 8005b32:	f000 fab7 	bl	80060a4 <USBD_CtlContinueSendData>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005b36:	462b      	mov	r3, r5
 8005b38:	462a      	mov	r2, r5
 8005b3a:	4629      	mov	r1, r5
 8005b3c:	4620      	mov	r0, r4
 8005b3e:	f000 fd7b 	bl	8006638 <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 8005b42:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8005b46:	2b01      	cmp	r3, #1
 8005b48:	d102      	bne.n	8005b50 <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 8005b50:	4628      	mov	r0, r5
 8005b52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005b54:	69c2      	ldr	r2, [r0, #28]
 8005b56:	fbb2 f6f3 	udiv	r6, r2, r3
 8005b5a:	fb03 2616 	mls	r6, r3, r6, r2
 8005b5e:	b95e      	cbnz	r6, 8005b78 <USBD_LL_DataInStage+0x6a>
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d809      	bhi.n	8005b78 <USBD_LL_DataInStage+0x6a>
            (pep->total_length >= pep->maxpacket) &&
 8005b64:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d205      	bcs.n	8005b78 <USBD_LL_DataInStage+0x6a>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005b6c:	460a      	mov	r2, r1
 8005b6e:	f000 fa99 	bl	80060a4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005b72:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
 8005b76:	e7de      	b.n	8005b36 <USBD_LL_DataInStage+0x28>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005b78:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8005b7c:	68db      	ldr	r3, [r3, #12]
 8005b7e:	b12b      	cbz	r3, 8005b8c <USBD_LL_DataInStage+0x7e>
 8005b80:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 8005b84:	2a03      	cmp	r2, #3
 8005b86:	d101      	bne.n	8005b8c <USBD_LL_DataInStage+0x7e>
            pdev->pClass->EP0_TxSent(pdev);
 8005b88:	4620      	mov	r0, r4
 8005b8a:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 8005b8c:	2180      	movs	r1, #128	; 0x80
 8005b8e:	4620      	mov	r0, r4
 8005b90:	f000 fd1c 	bl	80065cc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8005b94:	4620      	mov	r0, r4
 8005b96:	f000 faad 	bl	80060f4 <USBD_CtlReceiveStatus>
 8005b9a:	e7d2      	b.n	8005b42 <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005b9c:	f033 0304 	bics.w	r3, r3, #4
 8005ba0:	d1cf      	bne.n	8005b42 <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 8005ba2:	2180      	movs	r1, #128	; 0x80
 8005ba4:	f000 fd12 	bl	80065cc <USBD_LL_StallEP>
 8005ba8:	e7cb      	b.n	8005b42 <USBD_LL_DataInStage+0x34>
  else if ((pdev->pClass->DataIn != NULL) &&
 8005baa:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005bae:	695b      	ldr	r3, [r3, #20]
 8005bb0:	b133      	cbz	r3, 8005bc0 <USBD_LL_DataInStage+0xb2>
 8005bb2:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8005bb6:	2a03      	cmp	r2, #3
 8005bb8:	d102      	bne.n	8005bc0 <USBD_LL_DataInStage+0xb2>
    pdev->pClass->DataIn(pdev, epnum);
 8005bba:	4798      	blx	r3
  return USBD_OK;
 8005bbc:	2500      	movs	r5, #0
    pdev->pClass->DataIn(pdev, epnum);
 8005bbe:	e7c7      	b.n	8005b50 <USBD_LL_DataInStage+0x42>
    return USBD_FAIL;
 8005bc0:	2502      	movs	r5, #2
 8005bc2:	e7c5      	b.n	8005b50 <USBD_LL_DataInStage+0x42>

08005bc4 <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005bc4:	2200      	movs	r2, #0
{
 8005bc6:	b570      	push	{r4, r5, r6, lr}
 8005bc8:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005bca:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005bcc:	2640      	movs	r6, #64	; 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005bce:	4611      	mov	r1, r2
 8005bd0:	2340      	movs	r3, #64	; 0x40
 8005bd2:	f000 fce6 	bl	80065a2 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005bd6:	4633      	mov	r3, r6
 8005bd8:	2180      	movs	r1, #128	; 0x80
 8005bda:	2200      	movs	r2, #0
 8005bdc:	4620      	mov	r0, r4
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005bde:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005be2:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005be6:	f000 fcdc 	bl	80065a2 <USBD_LL_OpenEP>

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 8005bea:	2100      	movs	r1, #0
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 8005bec:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005bf0:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005bf2:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005bf4:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005bf8:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
  pdev->dev_config = 0U;
 8005bfc:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8005bfe:	f8c4 12a4 	str.w	r1, [r4, #676]	; 0x2a4
  if (pdev->pClassData)
 8005c02:	b123      	cbz	r3, 8005c0e <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005c04:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8005c08:	4620      	mov	r0, r4
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	4798      	blx	r3
  }

  return USBD_OK;
}
 8005c0e:	2000      	movs	r0, #0
 8005c10:	bd70      	pop	{r4, r5, r6, pc}

08005c12 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8005c12:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8005c14:	2000      	movs	r0, #0
 8005c16:	4770      	bx	lr

08005c18 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8005c18:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005c1c:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005c20:	2304      	movs	r3, #4
 8005c22:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 8005c26:	2000      	movs	r0, #0
 8005c28:	4770      	bx	lr

08005c2a <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005c2a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005c2e:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 8005c30:	bf04      	itt	eq
 8005c32:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 8005c36:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 8005c3a:	2000      	movs	r0, #0
 8005c3c:	4770      	bx	lr

08005c3e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005c3e:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c40:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8005c44:	2a03      	cmp	r2, #3
 8005c46:	d104      	bne.n	8005c52 <USBD_LL_SOF+0x14>
  {
    if (pdev->pClass->SOF != NULL)
 8005c48:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005c4c:	69db      	ldr	r3, [r3, #28]
 8005c4e:	b103      	cbz	r3, 8005c52 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8005c50:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 8005c52:	2000      	movs	r0, #0
 8005c54:	bd08      	pop	{r3, pc}

08005c56 <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
 8005c56:	b510      	push	{r4, lr}
 8005c58:	4604      	mov	r4, r0
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 8005c5a:	2180      	movs	r1, #128	; 0x80
 8005c5c:	f000 fcb6 	bl	80065cc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8005c60:	4620      	mov	r0, r4
}
 8005c62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 8005c66:	2100      	movs	r1, #0
 8005c68:	f000 bcb0 	b.w	80065cc <USBD_LL_StallEP>

08005c6c <USBD_StdDevReq>:
{
 8005c6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005c6e:	780b      	ldrb	r3, [r1, #0]
 8005c70:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c72:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005c76:	2b20      	cmp	r3, #32
{
 8005c78:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c7a:	d012      	beq.n	8005ca2 <USBD_StdDevReq+0x36>
 8005c7c:	2b40      	cmp	r3, #64	; 0x40
 8005c7e:	d010      	beq.n	8005ca2 <USBD_StdDevReq+0x36>
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d151      	bne.n	8005d28 <USBD_StdDevReq+0xbc>
      switch (req->bRequest)
 8005c84:	784b      	ldrb	r3, [r1, #1]
 8005c86:	2b09      	cmp	r3, #9
 8005c88:	d84e      	bhi.n	8005d28 <USBD_StdDevReq+0xbc>
 8005c8a:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005c8e:	00ee      	.short	0x00ee
 8005c90:	004d0109 	.word	0x004d0109
 8005c94:	004d0102 	.word	0x004d0102
 8005c98:	00130087 	.word	0x00130087
 8005c9c:	00d6004d 	.word	0x00d6004d
 8005ca0:	00a3      	.short	0x00a3
      pdev->pClass->Setup(pdev, req);
 8005ca2:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8005ca6:	4629      	mov	r1, r5
 8005ca8:	4620      	mov	r0, r4
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	4798      	blx	r3
}
 8005cae:	2000      	movs	r0, #0
 8005cb0:	b003      	add	sp, #12
 8005cb2:	bd30      	pop	{r4, r5, pc}
  uint16_t len = 0U;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8005cba:	884b      	ldrh	r3, [r1, #2]
 8005cbc:	0a1a      	lsrs	r2, r3, #8
 8005cbe:	3a01      	subs	r2, #1
 8005cc0:	2a06      	cmp	r2, #6
 8005cc2:	d831      	bhi.n	8005d28 <USBD_StdDevReq+0xbc>
 8005cc4:	e8df f002 	tbb	[pc, r2]
 8005cc8:	30231604 	.word	0x30231604
 8005ccc:	4830      	.short	0x4830
 8005cce:	52          	.byte	0x52
 8005ccf:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005cd0:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8005cd4:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005cd6:	7c20      	ldrb	r0, [r4, #16]
 8005cd8:	f10d 0106 	add.w	r1, sp, #6
 8005cdc:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 8005cde:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8005ce2:	88eb      	ldrh	r3, [r5, #6]
 8005ce4:	2a00      	cmp	r2, #0
 8005ce6:	d055      	beq.n	8005d94 <USBD_StdDevReq+0x128>
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d14a      	bne.n	8005d82 <USBD_StdDevReq+0x116>
        USBD_CtlSendStatus(pdev);
 8005cec:	4620      	mov	r0, r4
 8005cee:	f000 f9f6 	bl	80060de <USBD_CtlSendStatus>
 8005cf2:	e7dc      	b.n	8005cae <USBD_StdDevReq+0x42>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005cf4:	7c02      	ldrb	r2, [r0, #16]
      pdev->pClass->Setup(pdev, req);
 8005cf6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005cfa:	b932      	cbnz	r2, 8005d0a <USBD_StdDevReq+0x9e>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005cfe:	f10d 0006 	add.w	r0, sp, #6
 8005d02:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005d04:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005d06:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8005d08:	e7e9      	b.n	8005cde <USBD_StdDevReq+0x72>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d0c:	e7f7      	b.n	8005cfe <USBD_StdDevReq+0x92>
      switch ((uint8_t)(req->wValue))
 8005d0e:	b2db      	uxtb	r3, r3
 8005d10:	2b05      	cmp	r3, #5
 8005d12:	d809      	bhi.n	8005d28 <USBD_StdDevReq+0xbc>
 8005d14:	e8df f003 	tbb	[pc, r3]
 8005d18:	14100c03 	.word	0x14100c03
 8005d1c:	1c18      	.short	0x1c18
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005d1e:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8005d22:	685b      	ldr	r3, [r3, #4]
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d1d6      	bne.n	8005cd6 <USBD_StdDevReq+0x6a>
        USBD_CtlError(pdev, req);
 8005d28:	4620      	mov	r0, r4
 8005d2a:	f7ff ff94 	bl	8005c56 <USBD_CtlError.constprop.0>
        break;
 8005d2e:	e7be      	b.n	8005cae <USBD_StdDevReq+0x42>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005d30:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8005d34:	689b      	ldr	r3, [r3, #8]
 8005d36:	e7f5      	b.n	8005d24 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005d38:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8005d3c:	68db      	ldr	r3, [r3, #12]
 8005d3e:	e7f1      	b.n	8005d24 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005d40:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8005d44:	691b      	ldr	r3, [r3, #16]
 8005d46:	e7ed      	b.n	8005d24 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005d48:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8005d4c:	695b      	ldr	r3, [r3, #20]
 8005d4e:	e7e9      	b.n	8005d24 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005d50:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8005d54:	699b      	ldr	r3, [r3, #24]
 8005d56:	e7e5      	b.n	8005d24 <USBD_StdDevReq+0xb8>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d58:	7c03      	ldrb	r3, [r0, #16]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d1e4      	bne.n	8005d28 <USBD_StdDevReq+0xbc>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005d5e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005d62:	f10d 0006 	add.w	r0, sp, #6
 8005d66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d68:	4798      	blx	r3
  if (err != 0U)
 8005d6a:	e7b8      	b.n	8005cde <USBD_StdDevReq+0x72>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d6c:	7c03      	ldrb	r3, [r0, #16]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d1da      	bne.n	8005d28 <USBD_StdDevReq+0xbc>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005d72:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005d76:	f10d 0006 	add.w	r0, sp, #6
 8005d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d7c:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005d7e:	2307      	movs	r3, #7
 8005d80:	e7c1      	b.n	8005d06 <USBD_StdDevReq+0x9a>
      len = MIN(len, req->wLength);
 8005d82:	429a      	cmp	r2, r3
 8005d84:	bf28      	it	cs
 8005d86:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005d88:	4601      	mov	r1, r0
 8005d8a:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 8005d8c:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005d90:	f000 f97b 	bl	800608a <USBD_CtlSendData>
    if (req->wLength == 0U)
 8005d94:	88eb      	ldrh	r3, [r5, #6]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d189      	bne.n	8005cae <USBD_StdDevReq+0x42>
 8005d9a:	e7a7      	b.n	8005cec <USBD_StdDevReq+0x80>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005d9c:	888b      	ldrh	r3, [r1, #4]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d1c2      	bne.n	8005d28 <USBD_StdDevReq+0xbc>
 8005da2:	88cb      	ldrh	r3, [r1, #6]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d1bf      	bne.n	8005d28 <USBD_StdDevReq+0xbc>
 8005da8:	884d      	ldrh	r5, [r1, #2]
 8005daa:	2d7f      	cmp	r5, #127	; 0x7f
 8005dac:	d8bc      	bhi.n	8005d28 <USBD_StdDevReq+0xbc>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005dae:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005db2:	2b03      	cmp	r3, #3
 8005db4:	d0b8      	beq.n	8005d28 <USBD_StdDevReq+0xbc>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005db6:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 8005db8:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005dbc:	f000 fc2a 	bl	8006614 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8005dc0:	4620      	mov	r0, r4
 8005dc2:	f000 f98c 	bl	80060de <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8005dc6:	b11d      	cbz	r5, 8005dd0 <USBD_StdDevReq+0x164>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005dc8:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005dca:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8005dce:	e76e      	b.n	8005cae <USBD_StdDevReq+0x42>
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	e7fa      	b.n	8005dca <USBD_StdDevReq+0x15e>
  cfgidx = (uint8_t)(req->wValue);
 8005dd4:	7889      	ldrb	r1, [r1, #2]
 8005dd6:	4d38      	ldr	r5, [pc, #224]	; (8005eb8 <USBD_StdDevReq+0x24c>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005dd8:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 8005dda:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005ddc:	d8a4      	bhi.n	8005d28 <USBD_StdDevReq+0xbc>
    switch (pdev->dev_state)
 8005dde:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005de2:	2b02      	cmp	r3, #2
 8005de4:	d008      	beq.n	8005df8 <USBD_StdDevReq+0x18c>
 8005de6:	2b03      	cmp	r3, #3
 8005de8:	d015      	beq.n	8005e16 <USBD_StdDevReq+0x1aa>
        USBD_CtlError(pdev, req);
 8005dea:	f7ff ff34 	bl	8005c56 <USBD_CtlError.constprop.0>
        USBD_ClrClassConfig(pdev, cfgidx);
 8005dee:	4620      	mov	r0, r4
 8005df0:	7829      	ldrb	r1, [r5, #0]
 8005df2:	f7ff fe1e 	bl	8005a32 <USBD_ClrClassConfig>
        break;
 8005df6:	e75a      	b.n	8005cae <USBD_StdDevReq+0x42>
        if (cfgidx)
 8005df8:	2900      	cmp	r1, #0
 8005dfa:	f43f af77 	beq.w	8005cec <USBD_StdDevReq+0x80>
          pdev->dev_config = cfgidx;
 8005dfe:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005e00:	2303      	movs	r3, #3
          pdev->dev_config = cfgidx;
 8005e02:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005e04:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005e08:	4620      	mov	r0, r4
 8005e0a:	f7ff fe05 	bl	8005a18 <USBD_SetClassConfig>
 8005e0e:	2802      	cmp	r0, #2
 8005e10:	f47f af6c 	bne.w	8005cec <USBD_StdDevReq+0x80>
 8005e14:	e788      	b.n	8005d28 <USBD_StdDevReq+0xbc>
        if (cfgidx == 0U)
 8005e16:	b931      	cbnz	r1, 8005e26 <USBD_StdDevReq+0x1ba>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005e18:	2302      	movs	r3, #2
          pdev->dev_config = cfgidx;
 8005e1a:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005e1c:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          USBD_ClrClassConfig(pdev, cfgidx);
 8005e20:	f7ff fe07 	bl	8005a32 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8005e24:	e762      	b.n	8005cec <USBD_StdDevReq+0x80>
        else if (cfgidx != pdev->dev_config)
 8005e26:	6841      	ldr	r1, [r0, #4]
 8005e28:	2901      	cmp	r1, #1
 8005e2a:	f43f af5f 	beq.w	8005cec <USBD_StdDevReq+0x80>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005e2e:	b2c9      	uxtb	r1, r1
 8005e30:	f7ff fdff 	bl	8005a32 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8005e34:	7829      	ldrb	r1, [r5, #0]
 8005e36:	6061      	str	r1, [r4, #4]
 8005e38:	e7e6      	b.n	8005e08 <USBD_StdDevReq+0x19c>
  if (req->wLength != 1U)
 8005e3a:	88ca      	ldrh	r2, [r1, #6]
 8005e3c:	2a01      	cmp	r2, #1
 8005e3e:	f47f af73 	bne.w	8005d28 <USBD_StdDevReq+0xbc>
    switch (pdev->dev_state)
 8005e42:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005e46:	2b02      	cmp	r3, #2
 8005e48:	d80a      	bhi.n	8005e60 <USBD_StdDevReq+0x1f4>
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	f43f af6c 	beq.w	8005d28 <USBD_StdDevReq+0xbc>
        pdev->dev_default_config = 0U;
 8005e50:	4601      	mov	r1, r0
 8005e52:	2300      	movs	r3, #0
 8005e54:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8005e58:	4620      	mov	r0, r4
 8005e5a:	f000 f916 	bl	800608a <USBD_CtlSendData>
      break;
 8005e5e:	e726      	b.n	8005cae <USBD_StdDevReq+0x42>
    switch (pdev->dev_state)
 8005e60:	2b03      	cmp	r3, #3
 8005e62:	f47f af61 	bne.w	8005d28 <USBD_StdDevReq+0xbc>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8005e66:	1d01      	adds	r1, r0, #4
 8005e68:	e7f6      	b.n	8005e58 <USBD_StdDevReq+0x1ec>
  switch (pdev->dev_state)
 8005e6a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005e6e:	3b01      	subs	r3, #1
 8005e70:	2b02      	cmp	r3, #2
 8005e72:	f63f af59 	bhi.w	8005d28 <USBD_StdDevReq+0xbc>
      if (req->wLength != 0x2U)
 8005e76:	88ca      	ldrh	r2, [r1, #6]
 8005e78:	2a02      	cmp	r2, #2
 8005e7a:	f47f af55 	bne.w	8005d28 <USBD_StdDevReq+0xbc>
      if (pdev->dev_remote_wakeup)
 8005e7e:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 8005e82:	4601      	mov	r1, r0
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	bf14      	ite	ne
 8005e88:	2303      	movne	r3, #3
 8005e8a:	2301      	moveq	r3, #1
 8005e8c:	f841 3f0c 	str.w	r3, [r1, #12]!
 8005e90:	e7e2      	b.n	8005e58 <USBD_StdDevReq+0x1ec>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005e92:	884b      	ldrh	r3, [r1, #2]
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	f47f af0a 	bne.w	8005cae <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 8005e9a:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4
 8005e9e:	e725      	b.n	8005cec <USBD_StdDevReq+0x80>
  switch (pdev->dev_state)
 8005ea0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005ea4:	3b01      	subs	r3, #1
 8005ea6:	2b02      	cmp	r3, #2
 8005ea8:	f63f af3e 	bhi.w	8005d28 <USBD_StdDevReq+0xbc>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005eac:	884b      	ldrh	r3, [r1, #2]
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	f47f aefd 	bne.w	8005cae <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	e7f0      	b.n	8005e9a <USBD_StdDevReq+0x22e>
 8005eb8:	2000030c 	.word	0x2000030c

08005ebc <USBD_StdItfReq>:
{
 8005ebc:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005ebe:	780b      	ldrb	r3, [r1, #0]
{
 8005ec0:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005ec2:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8005ec6:	2a40      	cmp	r2, #64	; 0x40
{
 8005ec8:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005eca:	d001      	beq.n	8005ed0 <USBD_StdItfReq+0x14>
 8005ecc:	065b      	lsls	r3, r3, #25
 8005ece:	d415      	bmi.n	8005efc <USBD_StdItfReq+0x40>
      switch (pdev->dev_state)
 8005ed0:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8005ed4:	3b01      	subs	r3, #1
 8005ed6:	2b02      	cmp	r3, #2
 8005ed8:	d810      	bhi.n	8005efc <USBD_StdItfReq+0x40>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005eda:	792b      	ldrb	r3, [r5, #4]
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d80d      	bhi.n	8005efc <USBD_StdItfReq+0x40>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005ee0:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8005ee4:	4629      	mov	r1, r5
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	4620      	mov	r0, r4
 8005eea:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005eec:	88eb      	ldrh	r3, [r5, #6]
 8005eee:	b91b      	cbnz	r3, 8005ef8 <USBD_StdItfReq+0x3c>
 8005ef0:	b910      	cbnz	r0, 8005ef8 <USBD_StdItfReq+0x3c>
              USBD_CtlSendStatus(pdev);
 8005ef2:	4620      	mov	r0, r4
 8005ef4:	f000 f8f3 	bl	80060de <USBD_CtlSendStatus>
}
 8005ef8:	2000      	movs	r0, #0
 8005efa:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev, req);
 8005efc:	4620      	mov	r0, r4
 8005efe:	f7ff feaa 	bl	8005c56 <USBD_CtlError.constprop.0>
          break;
 8005f02:	e7f9      	b.n	8005ef8 <USBD_StdItfReq+0x3c>

08005f04 <USBD_StdEPReq>:
{
 8005f04:	b538      	push	{r3, r4, r5, lr}
 8005f06:	780a      	ldrb	r2, [r1, #0]
 8005f08:	4604      	mov	r4, r0
  ep_addr  = LOBYTE(req->wIndex);
 8005f0a:	f002 0260 	and.w	r2, r2, #96	; 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005f0e:	2a20      	cmp	r2, #32
{
 8005f10:	460b      	mov	r3, r1
  ep_addr  = LOBYTE(req->wIndex);
 8005f12:	888d      	ldrh	r5, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005f14:	d02c      	beq.n	8005f70 <USBD_StdEPReq+0x6c>
 8005f16:	2a40      	cmp	r2, #64	; 0x40
 8005f18:	d02a      	beq.n	8005f70 <USBD_StdEPReq+0x6c>
 8005f1a:	bbba      	cbnz	r2, 8005f8c <USBD_StdEPReq+0x88>
      switch (req->bRequest)
 8005f1c:	785a      	ldrb	r2, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 8005f1e:	b2e9      	uxtb	r1, r5
      switch (req->bRequest)
 8005f20:	2a01      	cmp	r2, #1
 8005f22:	d043      	beq.n	8005fac <USBD_StdEPReq+0xa8>
 8005f24:	2a03      	cmp	r2, #3
 8005f26:	d02b      	beq.n	8005f80 <USBD_StdEPReq+0x7c>
 8005f28:	bb82      	cbnz	r2, 8005f8c <USBD_StdEPReq+0x88>
          switch (pdev->dev_state)
 8005f2a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005f2e:	2b02      	cmp	r3, #2
 8005f30:	d053      	beq.n	8005fda <USBD_StdEPReq+0xd6>
 8005f32:	2b03      	cmp	r3, #3
 8005f34:	d12a      	bne.n	8005f8c <USBD_StdEPReq+0x88>
              if ((ep_addr & 0x80U) == 0x80U)
 8005f36:	2214      	movs	r2, #20
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005f38:	f001 030f 	and.w	r3, r1, #15
              if ((ep_addr & 0x80U) == 0x80U)
 8005f3c:	f015 0f80 	tst.w	r5, #128	; 0x80
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005f40:	fb02 0303 	mla	r3, r2, r3, r0
              if ((ep_addr & 0x80U) == 0x80U)
 8005f44:	d05a      	beq.n	8005ffc <USBD_StdEPReq+0xf8>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005f46:	699b      	ldr	r3, [r3, #24]
 8005f48:	b303      	cbz	r3, 8005f8c <USBD_StdEPReq+0x88>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005f4a:	2514      	movs	r5, #20
 8005f4c:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8005f50:	fb03 5505 	mla	r5, r3, r5, r5
 8005f54:	4405      	add	r5, r0
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005f56:	f011 007f 	ands.w	r0, r1, #127	; 0x7f
 8005f5a:	d005      	beq.n	8005f68 <USBD_StdEPReq+0x64>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8005f5c:	4620      	mov	r0, r4
 8005f5e:	f000 fb47 	bl	80065f0 <USBD_LL_IsStallEP>
 8005f62:	3800      	subs	r0, #0
 8005f64:	bf18      	it	ne
 8005f66:	2001      	movne	r0, #1
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005f68:	2202      	movs	r2, #2
 8005f6a:	4629      	mov	r1, r5
                pep->status = 0x0000U;
 8005f6c:	6028      	str	r0, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005f6e:	e041      	b.n	8005ff4 <USBD_StdEPReq+0xf0>
      pdev->pClass->Setup(pdev, req);
 8005f70:	f8d4 22b4 	ldr.w	r2, [r4, #692]	; 0x2b4
 8005f74:	4619      	mov	r1, r3
 8005f76:	4620      	mov	r0, r4
 8005f78:	6892      	ldr	r2, [r2, #8]
 8005f7a:	4790      	blx	r2
}
 8005f7c:	2000      	movs	r0, #0
 8005f7e:	bd38      	pop	{r3, r4, r5, pc}
          switch (pdev->dev_state)
 8005f80:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8005f84:	2a02      	cmp	r2, #2
 8005f86:	d01f      	beq.n	8005fc8 <USBD_StdEPReq+0xc4>
 8005f88:	2a03      	cmp	r2, #3
 8005f8a:	d003      	beq.n	8005f94 <USBD_StdEPReq+0x90>
              USBD_CtlError(pdev, req);
 8005f8c:	4620      	mov	r0, r4
 8005f8e:	f7ff fe62 	bl	8005c56 <USBD_CtlError.constprop.0>
              break;
 8005f92:	e7f3      	b.n	8005f7c <USBD_StdEPReq+0x78>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005f94:	885a      	ldrh	r2, [r3, #2]
 8005f96:	b92a      	cbnz	r2, 8005fa4 <USBD_StdEPReq+0xa0>
                if ((ep_addr != 0x00U) &&
 8005f98:	064a      	lsls	r2, r1, #25
 8005f9a:	d003      	beq.n	8005fa4 <USBD_StdEPReq+0xa0>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005f9c:	88db      	ldrh	r3, [r3, #6]
 8005f9e:	b90b      	cbnz	r3, 8005fa4 <USBD_StdEPReq+0xa0>
                  USBD_LL_StallEP(pdev, ep_addr);
 8005fa0:	f000 fb14 	bl	80065cc <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 8005fa4:	4620      	mov	r0, r4
 8005fa6:	f000 f89a 	bl	80060de <USBD_CtlSendStatus>
              break;
 8005faa:	e7e7      	b.n	8005f7c <USBD_StdEPReq+0x78>
          switch (pdev->dev_state)
 8005fac:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8005fb0:	2a02      	cmp	r2, #2
 8005fb2:	d009      	beq.n	8005fc8 <USBD_StdEPReq+0xc4>
 8005fb4:	2a03      	cmp	r2, #3
 8005fb6:	d1e9      	bne.n	8005f8c <USBD_StdEPReq+0x88>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005fb8:	885b      	ldrh	r3, [r3, #2]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d1de      	bne.n	8005f7c <USBD_StdEPReq+0x78>
                if ((ep_addr & 0x7FU) != 0x00U)
 8005fbe:	064d      	lsls	r5, r1, #25
 8005fc0:	d0f0      	beq.n	8005fa4 <USBD_StdEPReq+0xa0>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8005fc2:	f000 fb0c 	bl	80065de <USBD_LL_ClearStallEP>
 8005fc6:	e7ed      	b.n	8005fa4 <USBD_StdEPReq+0xa0>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005fc8:	064b      	lsls	r3, r1, #25
 8005fca:	d0df      	beq.n	8005f8c <USBD_StdEPReq+0x88>
                USBD_LL_StallEP(pdev, ep_addr);
 8005fcc:	f000 fafe 	bl	80065cc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005fd0:	2180      	movs	r1, #128	; 0x80
 8005fd2:	4620      	mov	r0, r4
 8005fd4:	f000 fafa 	bl	80065cc <USBD_LL_StallEP>
 8005fd8:	e7d0      	b.n	8005f7c <USBD_StdEPReq+0x78>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005fda:	064a      	lsls	r2, r1, #25
 8005fdc:	d1d6      	bne.n	8005f8c <USBD_StdEPReq+0x88>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005fde:	062b      	lsls	r3, r5, #24
              pep->status = 0x0000U;
 8005fe0:	f04f 0300 	mov.w	r3, #0
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005fe4:	f04f 0202 	mov.w	r2, #2
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005fe8:	bf4c      	ite	mi
 8005fea:	f100 0114 	addmi.w	r1, r0, #20
 8005fee:	f500 71aa 	addpl.w	r1, r0, #340	; 0x154
              pep->status = 0x0000U;
 8005ff2:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005ff4:	4620      	mov	r0, r4
 8005ff6:	f000 f848 	bl	800608a <USBD_CtlSendData>
              break;
 8005ffa:	e7bf      	b.n	8005f7c <USBD_StdEPReq+0x78>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005ffc:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8006000:	2b00      	cmp	r3, #0
 8006002:	d0c3      	beq.n	8005f8c <USBD_StdEPReq+0x88>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006004:	2314      	movs	r3, #20
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006006:	f001 057f 	and.w	r5, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800600a:	fb03 0505 	mla	r5, r3, r5, r0
 800600e:	f505 75aa 	add.w	r5, r5, #340	; 0x154
 8006012:	e7a0      	b.n	8005f56 <USBD_StdEPReq+0x52>

08006014 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 8006014:	780b      	ldrb	r3, [r1, #0]
 8006016:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006018:	784b      	ldrb	r3, [r1, #1]
 800601a:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800601c:	78ca      	ldrb	r2, [r1, #3]
 800601e:	788b      	ldrb	r3, [r1, #2]
 8006020:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8006024:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006026:	794a      	ldrb	r2, [r1, #5]
 8006028:	790b      	ldrb	r3, [r1, #4]
 800602a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800602e:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006030:	79ca      	ldrb	r2, [r1, #7]
 8006032:	798b      	ldrb	r3, [r1, #6]
 8006034:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8006038:	80c3      	strh	r3, [r0, #6]
}
 800603a:	4770      	bx	lr

0800603c <USBD_CtlError>:
{
 800603c:	b510      	push	{r4, lr}
 800603e:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 8006040:	2180      	movs	r1, #128	; 0x80
 8006042:	f000 fac3 	bl	80065cc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006046:	4620      	mov	r0, r4
}
 8006048:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 800604c:	2100      	movs	r1, #0
 800604e:	f000 babd 	b.w	80065cc <USBD_LL_StallEP>

08006052 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006052:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;

  if (desc != NULL)
 8006054:	b188      	cbz	r0, 800607a <USBD_GetString+0x28>
 8006056:	2400      	movs	r4, #0
 8006058:	3801      	subs	r0, #1
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 800605a:	4623      	mov	r3, r4
 800605c:	3401      	adds	r4, #1
 800605e:	5d05      	ldrb	r5, [r0, r4]
 8006060:	2d00      	cmp	r5, #0
 8006062:	d1fa      	bne.n	800605a <USBD_GetString+0x8>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006064:	b2db      	uxtb	r3, r3
 8006066:	3301      	adds	r3, #1
 8006068:	005b      	lsls	r3, r3, #1
 800606a:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800606c:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800606e:	2303      	movs	r3, #3
 8006070:	704b      	strb	r3, [r1, #1]
 8006072:	2302      	movs	r3, #2
    while (*desc != '\0')
 8006074:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 8006078:	b904      	cbnz	r4, 800607c <USBD_GetString+0x2a>
}
 800607a:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 800607c:	1c5a      	adds	r2, r3, #1
 800607e:	54cc      	strb	r4, [r1, r3]
 8006080:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0U;
 8006082:	3302      	adds	r3, #2
 8006084:	b2db      	uxtb	r3, r3
 8006086:	548d      	strb	r5, [r1, r2]
 8006088:	e7f4      	b.n	8006074 <USBD_GetString+0x22>

0800608a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800608a:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800608c:	2202      	movs	r2, #2
{
 800608e:	b510      	push	{r4, lr}
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 8006090:	e9c0 3307 	strd	r3, r3, [r0, #28]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006094:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006098:	460a      	mov	r2, r1
 800609a:	2100      	movs	r1, #0
 800609c:	f000 fac3 	bl	8006626 <USBD_LL_Transmit>

  return USBD_OK;
}
 80060a0:	2000      	movs	r0, #0
 80060a2:	bd10      	pop	{r4, pc}

080060a4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80060a4:	b508      	push	{r3, lr}
 80060a6:	4613      	mov	r3, r2
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80060a8:	460a      	mov	r2, r1
 80060aa:	2100      	movs	r1, #0
 80060ac:	f000 fabb 	bl	8006626 <USBD_LL_Transmit>

  return USBD_OK;
}
 80060b0:	2000      	movs	r0, #0
 80060b2:	bd08      	pop	{r3, pc}

080060b4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80060b4:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80060b6:	2203      	movs	r2, #3
{
 80060b8:	b510      	push	{r4, lr}
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length   = len;
 80060ba:	e9c0 3357 	strd	r3, r3, [r0, #348]	; 0x15c
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80060be:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80060c2:	460a      	mov	r2, r1
 80060c4:	2100      	movs	r1, #0
 80060c6:	f000 fab7 	bl	8006638 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80060ca:	2000      	movs	r0, #0
 80060cc:	bd10      	pop	{r4, pc}

080060ce <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80060ce:	b508      	push	{r3, lr}
 80060d0:	4613      	mov	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80060d2:	460a      	mov	r2, r1
 80060d4:	2100      	movs	r1, #0
 80060d6:	f000 faaf 	bl	8006638 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80060da:	2000      	movs	r0, #0
 80060dc:	bd08      	pop	{r3, pc}

080060de <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80060de:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80060e0:	2304      	movs	r3, #4
 80060e2:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80060e6:	2300      	movs	r3, #0
 80060e8:	461a      	mov	r2, r3
 80060ea:	4619      	mov	r1, r3
 80060ec:	f000 fa9b 	bl	8006626 <USBD_LL_Transmit>

  return USBD_OK;
}
 80060f0:	2000      	movs	r0, #0
 80060f2:	bd08      	pop	{r3, pc}

080060f4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80060f4:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80060f6:	2305      	movs	r3, #5
 80060f8:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80060fc:	2300      	movs	r3, #0
 80060fe:	461a      	mov	r2, r3
 8006100:	4619      	mov	r1, r3
 8006102:	f000 fa99 	bl	8006638 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8006106:	2000      	movs	r0, #0
 8006108:	bd08      	pop	{r3, pc}

0800610a <EmptyFreeNodeFunction>:
    return pData;
}

void EmptyFreeNodeFunction(Queue_Node *sNode)
{
 800610a:	4770      	bx	lr

0800610c <Queue_Init>:
{
 800610c:	b508      	push	{r3, lr}
    Queue *sQueue = (Queue *)malloc(sizeof(Queue));
 800610e:	2010      	movs	r0, #16
 8006110:	f000 faa6 	bl	8006660 <malloc>
    sQueue->sHead = NULL;
 8006114:	2200      	movs	r2, #0
 8006116:	6042      	str	r2, [r0, #4]
    sQueue->u8Size = 0;
 8006118:	7002      	strb	r2, [r0, #0]
    sQueue->sTail = NULL;
 800611a:	6082      	str	r2, [r0, #8]
    sQueue->fFreeNode = EmptyFreeNodeFunction;
 800611c:	4a01      	ldr	r2, [pc, #4]	; (8006124 <Queue_Init+0x18>)
 800611e:	60c2      	str	r2, [r0, #12]
}
 8006120:	bd08      	pop	{r3, pc}
 8006122:	bf00      	nop
 8006124:	0800610b 	.word	0x0800610b

08006128 <Queue_SetFreeElement>:
    sQueue->fFreeNode = fFreeElementFunction;
 8006128:	60c1      	str	r1, [r0, #12]
}
 800612a:	4770      	bx	lr

0800612c <Queue_IsEmpty>:
    return (sQueue->u8Size == 0) * QUEUE_BOOL_TRUE + (1 - (sQueue->u8Size == 0)) * QUEUE_BOOL_FALSE;
 800612c:	7800      	ldrb	r0, [r0, #0]
}
 800612e:	fab0 f080 	clz	r0, r0
 8006132:	0940      	lsrs	r0, r0, #5
 8006134:	4770      	bx	lr

08006136 <Queue_EnQueue>:
{
 8006136:	b538      	push	{r3, r4, r5, lr}
 8006138:	4604      	mov	r4, r0
    Queue_Node *sNewNode = (Queue_Node *)malloc(sizeof(Queue_Node));
 800613a:	2008      	movs	r0, #8
{
 800613c:	460d      	mov	r5, r1
    Queue_Node *sNewNode = (Queue_Node *)malloc(sizeof(Queue_Node));
 800613e:	f000 fa8f 	bl	8006660 <malloc>
    sNewNode->sNextNode = NULL;
 8006142:	2300      	movs	r3, #0
 8006144:	6043      	str	r3, [r0, #4]
    if (sQueue->u8Size == 0)
 8006146:	7823      	ldrb	r3, [r4, #0]
    sNewNode->pData = data;
 8006148:	6005      	str	r5, [r0, #0]
    if (sQueue->u8Size == 0)
 800614a:	b923      	cbnz	r3, 8006156 <Queue_EnQueue+0x20>
        sQueue->sTail = sNewNode;
 800614c:	e9c4 0001 	strd	r0, r0, [r4, #4]
    sQueue->u8Size++;
 8006150:	3301      	adds	r3, #1
 8006152:	7023      	strb	r3, [r4, #0]
}
 8006154:	bd38      	pop	{r3, r4, r5, pc}
        sQueue->sTail->sNextNode = sNewNode;
 8006156:	68a2      	ldr	r2, [r4, #8]
 8006158:	6050      	str	r0, [r2, #4]
 800615a:	e7f9      	b.n	8006150 <Queue_EnQueue+0x1a>

0800615c <Queue_DeQueue>:
{
 800615c:	4603      	mov	r3, r0
    if (sQueue->u8Size == 1)
 800615e:	781a      	ldrb	r2, [r3, #0]
    void *pData = sQueue->sHead->pData;
 8006160:	6840      	ldr	r0, [r0, #4]
    if (sQueue->u8Size == 1)
 8006162:	2a01      	cmp	r2, #1
        sQueue->sHead = NULL;
 8006164:	bf08      	it	eq
 8006166:	2100      	moveq	r1, #0
{
 8006168:	b510      	push	{r4, lr}
        sQueue->sHead = sQueue->sHead->sNextNode;
 800616a:	bf18      	it	ne
 800616c:	6841      	ldrne	r1, [r0, #4]
    void *pData = sQueue->sHead->pData;
 800616e:	6804      	ldr	r4, [r0, #0]
    sQueue->u8Size--;
 8006170:	f102 32ff 	add.w	r2, r2, #4294967295
        sQueue->sTail = NULL;
 8006174:	bf0c      	ite	eq
 8006176:	e9c3 1101 	strdeq	r1, r1, [r3, #4]
        sQueue->sHead = sQueue->sHead->sNextNode;
 800617a:	6059      	strne	r1, [r3, #4]
    sQueue->u8Size--;
 800617c:	701a      	strb	r2, [r3, #0]
    free(sHead);
 800617e:	f000 fa77 	bl	8006670 <free>
}
 8006182:	4620      	mov	r0, r4
 8006184:	bd10      	pop	{r4, pc}
	...

08006188 <SplitString>:
#include <stdarg.h>

#include "main.h"

char **SplitString(char *str, uint8_t *argc)
{
 8006188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    *argc = 0;
 800618c:	2300      	movs	r3, #0
 800618e:	700b      	strb	r3, [r1, #0]
{
 8006190:	460d      	mov	r5, r1
 8006192:	4606      	mov	r6, r0
    char *token;

    char *copy = strdup(str);
 8006194:	f000 fc54 	bl	8006a40 <strdup>
    token = strtok(copy, " ");
 8006198:	4919      	ldr	r1, [pc, #100]	; (8006200 <SplitString+0x78>)
 800619a:	f000 fc6d 	bl	8006a78 <strtok>
 800619e:	4604      	mov	r4, r0

    while (token != NULL)
    {
        (*argc)++;
        token = strtok(NULL, " ");
 80061a0:	4f17      	ldr	r7, [pc, #92]	; (8006200 <SplitString+0x78>)
    while (token != NULL)
 80061a2:	b9bc      	cbnz	r4, 80061d4 <SplitString+0x4c>
    }

    copy = strdup(str);
 80061a4:	4630      	mov	r0, r6
 80061a6:	f000 fc4b 	bl	8006a40 <strdup>
    token = strtok(copy, " ");
 80061aa:	4915      	ldr	r1, [pc, #84]	; (8006200 <SplitString+0x78>)
    copy = strdup(str);
 80061ac:	4680      	mov	r8, r0
    token = strtok(copy, " ");
 80061ae:	f000 fc63 	bl	8006a78 <strtok>
 80061b2:	4606      	mov	r6, r0
    char **argv = (char **)malloc((*argc) * sizeof(char *));
 80061b4:	7828      	ldrb	r0, [r5, #0]

    for (int i = 0; i < *argc; ++i)
    {
        argv[i] = strdup(token);
        token = strtok(NULL, " ");
 80061b6:	f8df 9048 	ldr.w	r9, [pc, #72]	; 8006200 <SplitString+0x78>
    char **argv = (char **)malloc((*argc) * sizeof(char *));
 80061ba:	0080      	lsls	r0, r0, #2
 80061bc:	f000 fa50 	bl	8006660 <malloc>
 80061c0:	4607      	mov	r7, r0
    for (int i = 0; i < *argc; ++i)
 80061c2:	782b      	ldrb	r3, [r5, #0]
 80061c4:	42a3      	cmp	r3, r4
 80061c6:	dc0e      	bgt.n	80061e6 <SplitString+0x5e>
    }

    free(copy);
 80061c8:	4640      	mov	r0, r8
 80061ca:	f000 fa51 	bl	8006670 <free>
    return argv;
}
 80061ce:	4638      	mov	r0, r7
 80061d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        (*argc)++;
 80061d4:	782b      	ldrb	r3, [r5, #0]
        token = strtok(NULL, " ");
 80061d6:	4639      	mov	r1, r7
        (*argc)++;
 80061d8:	3301      	adds	r3, #1
        token = strtok(NULL, " ");
 80061da:	2000      	movs	r0, #0
        (*argc)++;
 80061dc:	702b      	strb	r3, [r5, #0]
        token = strtok(NULL, " ");
 80061de:	f000 fc4b 	bl	8006a78 <strtok>
 80061e2:	4604      	mov	r4, r0
 80061e4:	e7dd      	b.n	80061a2 <SplitString+0x1a>
        argv[i] = strdup(token);
 80061e6:	4630      	mov	r0, r6
 80061e8:	f000 fc2a 	bl	8006a40 <strdup>
        token = strtok(NULL, " ");
 80061ec:	4649      	mov	r1, r9
        argv[i] = strdup(token);
 80061ee:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
        token = strtok(NULL, " ");
 80061f2:	2000      	movs	r0, #0
 80061f4:	f000 fc40 	bl	8006a78 <strtok>
    for (int i = 0; i < *argc; ++i)
 80061f8:	3401      	adds	r4, #1
        token = strtok(NULL, " ");
 80061fa:	4606      	mov	r6, r0
    for (int i = 0; i < *argc; ++i)
 80061fc:	e7e1      	b.n	80061c2 <SplitString+0x3a>
 80061fe:	bf00      	nop
 8006200:	08007d9c 	.word	0x08007d9c

08006204 <Free2DArray>:

void Free2DArray(int argc, char **argv)
{
 8006204:	b570      	push	{r4, r5, r6, lr}
    for (uint8_t i = 0; i < argc; i++)
 8006206:	2300      	movs	r3, #0
{
 8006208:	4605      	mov	r5, r0
 800620a:	460c      	mov	r4, r1
    for (uint8_t i = 0; i < argc; i++)
 800620c:	1c5e      	adds	r6, r3, #1
 800620e:	b2db      	uxtb	r3, r3
 8006210:	42ab      	cmp	r3, r5
 8006212:	db04      	blt.n	800621e <Free2DArray+0x1a>
    {
        free(argv[i]);
    }

    free(argv);
 8006214:	4620      	mov	r0, r4
}
 8006216:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    free(argv);
 800621a:	f000 ba29 	b.w	8006670 <free>
        free(argv[i]);
 800621e:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8006222:	f000 fa25 	bl	8006670 <free>
 8006226:	4633      	mov	r3, r6
 8006228:	e7f0      	b.n	800620c <Free2DArray+0x8>

0800622a <FormatString>:

void FormatString(char *buffer, char *format, ...)
{
 800622a:	b40e      	push	{r1, r2, r3}
 800622c:	b503      	push	{r0, r1, lr}
 800622e:	ab03      	add	r3, sp, #12
 8006230:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list args;
    va_start(args, format);

    vsnprintf(buffer, 256, format, args);
 8006234:	f44f 7180 	mov.w	r1, #256	; 0x100
    va_start(args, format);
 8006238:	9301      	str	r3, [sp, #4]
    vsnprintf(buffer, 256, format, args);
 800623a:	f000 fbeb 	bl	8006a14 <vsniprintf>

    va_end(args);
}
 800623e:	b002      	add	sp, #8
 8006240:	f85d eb04 	ldr.w	lr, [sp], #4
 8006244:	b003      	add	sp, #12
 8006246:	4770      	bx	lr

08006248 <TimeTrigger_Reset>:
#include "TimeTrigger.h"
#include "main.h"


void TimeTrigger_Reset(TimeTrigger_Ins* ins)
{
 8006248:	b510      	push	{r4, lr}
 800624a:	4604      	mov	r4, r0
	ins->u32CurrentTick = HAL_GetTick();
 800624c:	f7fb fed4 	bl	8001ff8 <HAL_GetTick>
 8006250:	6060      	str	r0, [r4, #4]
}
 8006252:	bd10      	pop	{r4, pc}

08006254 <TimeTrigger_IsTrigger>:

uint8_t TimeTrigger_IsTrigger(TimeTrigger_Ins* ins)
{
 8006254:	b510      	push	{r4, lr}
 8006256:	4604      	mov	r4, r0
	uint32_t u32NewCurrent = HAL_GetTick();
 8006258:	f7fb fece 	bl	8001ff8 <HAL_GetTick>

	if (u32NewCurrent > ins->u32CurrentTick || u32NewCurrent < ins->u32CurrentTick)
 800625c:	6863      	ldr	r3, [r4, #4]
	}
	else
	{
		return TIME_NOT_TRIGGERED;
	}
}
 800625e:	1a18      	subs	r0, r3, r0
 8006260:	bf18      	it	ne
 8006262:	2001      	movne	r0, #1
 8006264:	bd10      	pop	{r4, pc}
	...

08006268 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006268:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800626a:	2200      	movs	r2, #0
 800626c:	490e      	ldr	r1, [pc, #56]	; (80062a8 <MX_USB_DEVICE_Init+0x40>)
 800626e:	480f      	ldr	r0, [pc, #60]	; (80062ac <MX_USB_DEVICE_Init+0x44>)
 8006270:	f7ff fbb1 	bl	80059d6 <USBD_Init>
 8006274:	b108      	cbz	r0, 800627a <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 8006276:	f7fb fd3b 	bl	8001cf0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800627a:	490d      	ldr	r1, [pc, #52]	; (80062b0 <MX_USB_DEVICE_Init+0x48>)
 800627c:	480b      	ldr	r0, [pc, #44]	; (80062ac <MX_USB_DEVICE_Init+0x44>)
 800627e:	f7ff fbbf 	bl	8005a00 <USBD_RegisterClass>
 8006282:	b108      	cbz	r0, 8006288 <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 8006284:	f7fb fd34 	bl	8001cf0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006288:	490a      	ldr	r1, [pc, #40]	; (80062b4 <MX_USB_DEVICE_Init+0x4c>)
 800628a:	4808      	ldr	r0, [pc, #32]	; (80062ac <MX_USB_DEVICE_Init+0x44>)
 800628c:	f7ff fb5e 	bl	800594c <USBD_CDC_RegisterInterface>
 8006290:	b108      	cbz	r0, 8006296 <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 8006292:	f7fb fd2d 	bl	8001cf0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006296:	4805      	ldr	r0, [pc, #20]	; (80062ac <MX_USB_DEVICE_Init+0x44>)
 8006298:	f7ff fbb9 	bl	8005a0e <USBD_Start>
 800629c:	b118      	cbz	r0, 80062a6 <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800629e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80062a2:	f7fb bd25 	b.w	8001cf0 <Error_Handler>
}
 80062a6:	bd08      	pop	{r3, pc}
 80062a8:	20000130 	.word	0x20000130
 80062ac:	20000310 	.word	0x20000310
 80062b0:	20000010 	.word	0x20000010
 80062b4:	20000120 	.word	0x20000120

080062b8 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 80062b8:	2000      	movs	r0, #0
 80062ba:	4770      	bx	lr

080062bc <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 80062bc:	2000      	movs	r0, #0
 80062be:	4770      	bx	lr

080062c0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80062c0:	b538      	push	{r3, r4, r5, lr}
 80062c2:	460c      	mov	r4, r1
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80062c4:	4d09      	ldr	r5, [pc, #36]	; (80062ec <CDC_Receive_FS+0x2c>)
 80062c6:	4601      	mov	r1, r0
 80062c8:	4628      	mov	r0, r5
 80062ca:	f7ff fb4e 	bl	800596a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80062ce:	4628      	mov	r0, r5
  Command_ReceiveData((char *)UserRxBufferFS, *Len);
 80062d0:	4d07      	ldr	r5, [pc, #28]	; (80062f0 <CDC_Receive_FS+0x30>)
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80062d2:	f7ff fb69 	bl	80059a8 <USBD_CDC_ReceivePacket>
  Command_ReceiveData((char *)UserRxBufferFS, *Len);
 80062d6:	4628      	mov	r0, r5
 80062d8:	7821      	ldrb	r1, [r4, #0]
 80062da:	f7fa ffbb 	bl	8001254 <Command_ReceiveData>
  memset(UserRxBufferFS, 0, *Len);
 80062de:	2100      	movs	r1, #0
 80062e0:	4628      	mov	r0, r5
 80062e2:	6822      	ldr	r2, [r4, #0]
 80062e4:	f000 fba4 	bl	8006a30 <memset>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 80062e8:	2000      	movs	r0, #0
 80062ea:	bd38      	pop	{r3, r4, r5, pc}
 80062ec:	20000310 	.word	0x20000310
 80062f0:	200005d4 	.word	0x200005d4

080062f4 <CDC_Init_FS>:
{
 80062f4:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80062f6:	4c06      	ldr	r4, [pc, #24]	; (8006310 <CDC_Init_FS+0x1c>)
 80062f8:	2200      	movs	r2, #0
 80062fa:	4620      	mov	r0, r4
 80062fc:	4905      	ldr	r1, [pc, #20]	; (8006314 <CDC_Init_FS+0x20>)
 80062fe:	f7ff fb2c 	bl	800595a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006302:	4620      	mov	r0, r4
 8006304:	4904      	ldr	r1, [pc, #16]	; (8006318 <CDC_Init_FS+0x24>)
 8006306:	f7ff fb30 	bl	800596a <USBD_CDC_SetRxBuffer>
}
 800630a:	2000      	movs	r0, #0
 800630c:	bd10      	pop	{r4, pc}
 800630e:	bf00      	nop
 8006310:	20000310 	.word	0x20000310
 8006314:	20000654 	.word	0x20000654
 8006318:	200005d4 	.word	0x200005d4

0800631c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800631c:	b510      	push	{r4, lr}
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800631e:	4c09      	ldr	r4, [pc, #36]	; (8006344 <CDC_Transmit_FS+0x28>)
{
 8006320:	460a      	mov	r2, r1
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006322:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  if (hcdc->TxState != 0){
 8006326:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800632a:	b943      	cbnz	r3, 800633e <CDC_Transmit_FS+0x22>
    return USBD_BUSY;
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800632c:	4601      	mov	r1, r0
 800632e:	4620      	mov	r0, r4
 8006330:	f7ff fb13 	bl	800595a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006334:	4620      	mov	r0, r4
  /* USER CODE END 7 */
  return result;
}
 8006336:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800633a:	f7ff bb1c 	b.w	8005976 <USBD_CDC_TransmitPacket>
}
 800633e:	2001      	movs	r0, #1
 8006340:	bd10      	pop	{r4, pc}
 8006342:	bf00      	nop
 8006344:	20000310 	.word	0x20000310

08006348 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006348:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 800634a:	4801      	ldr	r0, [pc, #4]	; (8006350 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 800634c:	800b      	strh	r3, [r1, #0]
}
 800634e:	4770      	bx	lr
 8006350:	2000014c 	.word	0x2000014c

08006354 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006354:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8006356:	4801      	ldr	r0, [pc, #4]	; (800635c <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8006358:	800b      	strh	r3, [r1, #0]
}
 800635a:	4770      	bx	lr
 800635c:	20000160 	.word	0x20000160

08006360 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006360:	2300      	movs	r3, #0
 8006362:	b570      	push	{r4, r5, r6, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8006364:	461e      	mov	r6, r3
 8006366:	1c4d      	adds	r5, r1, #1
      pbuf[2 * idx] = (value >> 28) + '0';
 8006368:	0f04      	lsrs	r4, r0, #28
    if (((value >> 28)) < 0xA)
 800636a:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
      pbuf[2 * idx] = (value >> 28) + '0';
 800636e:	bf34      	ite	cc
 8006370:	3430      	addcc	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006372:	3437      	addcs	r4, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8006374:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 8006378:	f805 6013 	strb.w	r6, [r5, r3, lsl #1]
  for (idx = 0; idx < len; idx++)
 800637c:	3301      	adds	r3, #1
 800637e:	b2dc      	uxtb	r4, r3
 8006380:	42a2      	cmp	r2, r4
    value = value << 4;
 8006382:	ea4f 1000 	mov.w	r0, r0, lsl #4
  for (idx = 0; idx < len; idx++)
 8006386:	d8ef      	bhi.n	8006368 <IntToUnicode+0x8>
  }
}
 8006388:	bd70      	pop	{r4, r5, r6, pc}
	...

0800638c <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 800638c:	231a      	movs	r3, #26
{
 800638e:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8006390:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006392:	4b0a      	ldr	r3, [pc, #40]	; (80063bc <USBD_FS_SerialStrDescriptor+0x30>)
 8006394:	f8d3 07e8 	ldr.w	r0, [r3, #2024]	; 0x7e8
  deviceserial0 += deviceserial2;
 8006398:	f8d3 27f0 	ldr.w	r2, [r3, #2032]	; 0x7f0
  if (deviceserial0 != 0)
 800639c:	1880      	adds	r0, r0, r2
 800639e:	d00a      	beq.n	80063b6 <USBD_FS_SerialStrDescriptor+0x2a>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80063a0:	f8d3 47ec 	ldr.w	r4, [r3, #2028]	; 0x7ec
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80063a4:	4906      	ldr	r1, [pc, #24]	; (80063c0 <USBD_FS_SerialStrDescriptor+0x34>)
 80063a6:	2208      	movs	r2, #8
 80063a8:	f7ff ffda 	bl	8006360 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80063ac:	2204      	movs	r2, #4
 80063ae:	4620      	mov	r0, r4
 80063b0:	3110      	adds	r1, #16
 80063b2:	f7ff ffd5 	bl	8006360 <IntToUnicode>
}
 80063b6:	4803      	ldr	r0, [pc, #12]	; (80063c4 <USBD_FS_SerialStrDescriptor+0x38>)
 80063b8:	bd10      	pop	{r4, pc}
 80063ba:	bf00      	nop
 80063bc:	1ffff000 	.word	0x1ffff000
 80063c0:	20000166 	.word	0x20000166
 80063c4:	20000164 	.word	0x20000164

080063c8 <USBD_FS_ManufacturerStrDescriptor>:
{
 80063c8:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80063ca:	4c04      	ldr	r4, [pc, #16]	; (80063dc <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 80063cc:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80063ce:	4804      	ldr	r0, [pc, #16]	; (80063e0 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 80063d0:	4621      	mov	r1, r4
 80063d2:	f7ff fe3e 	bl	8006052 <USBD_GetString>
}
 80063d6:	4620      	mov	r0, r4
 80063d8:	bd10      	pop	{r4, pc}
 80063da:	bf00      	nop
 80063dc:	200006d4 	.word	0x200006d4
 80063e0:	08007ca5 	.word	0x08007ca5

080063e4 <USBD_FS_ProductStrDescriptor>:
{
 80063e4:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80063e6:	4c04      	ldr	r4, [pc, #16]	; (80063f8 <USBD_FS_ProductStrDescriptor+0x14>)
{
 80063e8:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80063ea:	4804      	ldr	r0, [pc, #16]	; (80063fc <USBD_FS_ProductStrDescriptor+0x18>)
 80063ec:	4621      	mov	r1, r4
 80063ee:	f7ff fe30 	bl	8006052 <USBD_GetString>
}
 80063f2:	4620      	mov	r0, r4
 80063f4:	bd10      	pop	{r4, pc}
 80063f6:	bf00      	nop
 80063f8:	200006d4 	.word	0x200006d4
 80063fc:	08007cb8 	.word	0x08007cb8

08006400 <USBD_FS_ConfigStrDescriptor>:
{
 8006400:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006402:	4c04      	ldr	r4, [pc, #16]	; (8006414 <USBD_FS_ConfigStrDescriptor+0x14>)
{
 8006404:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006406:	4804      	ldr	r0, [pc, #16]	; (8006418 <USBD_FS_ConfigStrDescriptor+0x18>)
 8006408:	4621      	mov	r1, r4
 800640a:	f7ff fe22 	bl	8006052 <USBD_GetString>
}
 800640e:	4620      	mov	r0, r4
 8006410:	bd10      	pop	{r4, pc}
 8006412:	bf00      	nop
 8006414:	200006d4 	.word	0x200006d4
 8006418:	08007cce 	.word	0x08007cce

0800641c <USBD_FS_InterfaceStrDescriptor>:
{
 800641c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800641e:	4c04      	ldr	r4, [pc, #16]	; (8006430 <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 8006420:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006422:	4804      	ldr	r0, [pc, #16]	; (8006434 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8006424:	4621      	mov	r1, r4
 8006426:	f7ff fe14 	bl	8006052 <USBD_GetString>
}
 800642a:	4620      	mov	r0, r4
 800642c:	bd10      	pop	{r4, pc}
 800642e:	bf00      	nop
 8006430:	200006d4 	.word	0x200006d4
 8006434:	08007cd9 	.word	0x08007cd9

08006438 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8006438:	2803      	cmp	r0, #3
 800643a:	bf9a      	itte	ls
 800643c:	4b01      	ldrls	r3, [pc, #4]	; (8006444 <USBD_Get_USB_Status+0xc>)
 800643e:	5c18      	ldrbls	r0, [r3, r0]
{
 8006440:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8006442:	4770      	bx	lr
 8006444:	08007ce7 	.word	0x08007ce7

08006448 <HAL_PCD_MspInit>:
{
 8006448:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 800644a:	4b0e      	ldr	r3, [pc, #56]	; (8006484 <HAL_PCD_MspInit+0x3c>)
 800644c:	6802      	ldr	r2, [r0, #0]
 800644e:	429a      	cmp	r2, r3
 8006450:	d115      	bne.n	800647e <HAL_PCD_MspInit+0x36>
    __HAL_RCC_USB_CLK_ENABLE();
 8006452:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8006456:	69da      	ldr	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8006458:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_ENABLE();
 800645a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800645e:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8006460:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 8006462:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8006464:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 8006466:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800646a:	9301      	str	r3, [sp, #4]
 800646c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800646e:	f7fb ffcb 	bl	8002408 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8006472:	2014      	movs	r0, #20
}
 8006474:	b003      	add	sp, #12
 8006476:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800647a:	f7fb bff5 	b.w	8002468 <HAL_NVIC_EnableIRQ>
}
 800647e:	b003      	add	sp, #12
 8006480:	f85d fb04 	ldr.w	pc, [sp], #4
 8006484:	40005c00 	.word	0x40005c00

08006488 <HAL_PCD_SetupStageCallback>:
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006488:	f500 712c 	add.w	r1, r0, #688	; 0x2b0
 800648c:	f8d0 02ec 	ldr.w	r0, [r0, #748]	; 0x2ec
 8006490:	f7ff bad6 	b.w	8005a40 <USBD_LL_SetupStage>

08006494 <HAL_PCD_DataOutStageCallback>:
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006494:	2328      	movs	r3, #40	; 0x28
 8006496:	fb03 0301 	mla	r3, r3, r1, r0
 800649a:	f8d0 02ec 	ldr.w	r0, [r0, #748]	; 0x2ec
 800649e:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 80064a2:	f7ff bafa 	b.w	8005a9a <USBD_LL_DataOutStage>

080064a6 <HAL_PCD_DataInStageCallback>:
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80064a6:	2328      	movs	r3, #40	; 0x28
 80064a8:	fb03 0301 	mla	r3, r3, r1, r0
 80064ac:	f8d0 02ec 	ldr.w	r0, [r0, #748]	; 0x2ec
 80064b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80064b2:	f7ff bb2c 	b.w	8005b0e <USBD_LL_DataInStage>

080064b6 <HAL_PCD_SOFCallback>:
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80064b6:	f8d0 02ec 	ldr.w	r0, [r0, #748]	; 0x2ec
 80064ba:	f7ff bbc0 	b.w	8005c3e <USBD_LL_SOF>

080064be <HAL_PCD_ResetCallback>:
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80064be:	6883      	ldr	r3, [r0, #8]
{
 80064c0:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80064c2:	2b02      	cmp	r3, #2
{
 80064c4:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80064c6:	d001      	beq.n	80064cc <HAL_PCD_ResetCallback+0xe>
    Error_Handler();
 80064c8:	f7fb fc12 	bl	8001cf0 <Error_Handler>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80064cc:	f8d4 02ec 	ldr.w	r0, [r4, #748]	; 0x2ec
 80064d0:	2101      	movs	r1, #1
 80064d2:	f7ff fb9e 	bl	8005c12 <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80064d6:	f8d4 02ec 	ldr.w	r0, [r4, #748]	; 0x2ec
}
 80064da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80064de:	f7ff bb71 	b.w	8005bc4 <USBD_LL_Reset>
	...

080064e4 <HAL_PCD_SuspendCallback>:
{
 80064e4:	b510      	push	{r4, lr}
 80064e6:	4604      	mov	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80064e8:	f8d0 02ec 	ldr.w	r0, [r0, #748]	; 0x2ec
 80064ec:	f7ff fb94 	bl	8005c18 <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 80064f0:	69a3      	ldr	r3, [r4, #24]
 80064f2:	b123      	cbz	r3, 80064fe <HAL_PCD_SuspendCallback+0x1a>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80064f4:	4a02      	ldr	r2, [pc, #8]	; (8006500 <HAL_PCD_SuspendCallback+0x1c>)
 80064f6:	6913      	ldr	r3, [r2, #16]
 80064f8:	f043 0306 	orr.w	r3, r3, #6
 80064fc:	6113      	str	r3, [r2, #16]
}
 80064fe:	bd10      	pop	{r4, pc}
 8006500:	e000ed00 	.word	0xe000ed00

08006504 <HAL_PCD_ResumeCallback>:
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006504:	f8d0 02ec 	ldr.w	r0, [r0, #748]	; 0x2ec
 8006508:	f7ff bb8f 	b.w	8005c2a <USBD_LL_Resume>

0800650c <USBD_LL_Init>:
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800650c:	2308      	movs	r3, #8
{
 800650e:	b510      	push	{r4, lr}
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8006510:	4a1d      	ldr	r2, [pc, #116]	; (8006588 <USBD_LL_Init+0x7c>)
{
 8006512:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 8006514:	481d      	ldr	r0, [pc, #116]	; (800658c <USBD_LL_Init+0x80>)
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8006516:	e9c0 2300 	strd	r2, r3, [r0]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800651a:	2302      	movs	r3, #2
 800651c:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800651e:	2300      	movs	r3, #0
  hpcd_USB_FS.pData = pdev;
 8006520:	f8c0 42ec 	str.w	r4, [r0, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 8006524:	f8c4 02c0 	str.w	r0, [r4, #704]	; 0x2c0
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8006528:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800652c:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800652e:	f7fd f875 	bl	800361c <HAL_PCD_Init>
 8006532:	b108      	cbz	r0, 8006538 <USBD_LL_Init+0x2c>
    Error_Handler( );
 8006534:	f7fb fbdc 	bl	8001cf0 <Error_Handler>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8006538:	2200      	movs	r2, #0
 800653a:	2318      	movs	r3, #24
 800653c:	4611      	mov	r1, r2
 800653e:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8006542:	f7fd fee3 	bl	800430c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8006546:	2358      	movs	r3, #88	; 0x58
 8006548:	2200      	movs	r2, #0
 800654a:	2180      	movs	r1, #128	; 0x80
 800654c:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8006550:	f7fd fedc 	bl	800430c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8006554:	23c0      	movs	r3, #192	; 0xc0
 8006556:	2200      	movs	r2, #0
 8006558:	2181      	movs	r1, #129	; 0x81
 800655a:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 800655e:	f7fd fed5 	bl	800430c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8006562:	f44f 7388 	mov.w	r3, #272	; 0x110
 8006566:	2200      	movs	r2, #0
 8006568:	2101      	movs	r1, #1
 800656a:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 800656e:	f7fd fecd 	bl	800430c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8006572:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006576:	2200      	movs	r2, #0
 8006578:	2182      	movs	r1, #130	; 0x82
 800657a:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 800657e:	f7fd fec5 	bl	800430c <HAL_PCDEx_PMAConfig>
}
 8006582:	2000      	movs	r0, #0
 8006584:	bd10      	pop	{r4, pc}
 8006586:	bf00      	nop
 8006588:	40005c00 	.word	0x40005c00
 800658c:	200008d4 	.word	0x200008d4

08006590 <USBD_LL_Start>:
{
 8006590:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8006592:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8006596:	f7fd f8b9 	bl	800370c <HAL_PCD_Start>
}
 800659a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800659e:	f7ff bf4b 	b.w	8006438 <USBD_Get_USB_Status>

080065a2 <USBD_LL_OpenEP>:
{
 80065a2:	b510      	push	{r4, lr}
 80065a4:	4614      	mov	r4, r2
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80065a6:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
{
 80065aa:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80065ac:	4623      	mov	r3, r4
 80065ae:	f7fd fdb5 	bl	800411c <HAL_PCD_EP_Open>
}
 80065b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 80065b6:	f7ff bf3f 	b.w	8006438 <USBD_Get_USB_Status>

080065ba <USBD_LL_CloseEP>:
{
 80065ba:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80065bc:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80065c0:	f7fd fddc 	bl	800417c <HAL_PCD_EP_Close>
}
 80065c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 80065c8:	f7ff bf36 	b.w	8006438 <USBD_Get_USB_Status>

080065cc <USBD_LL_StallEP>:
{
 80065cc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80065ce:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80065d2:	f7fd fe35 	bl	8004240 <HAL_PCD_EP_SetStall>
}
 80065d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 80065da:	f7ff bf2d 	b.w	8006438 <USBD_Get_USB_Status>

080065de <USBD_LL_ClearStallEP>:
{
 80065de:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80065e0:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80065e4:	f7fd fe60 	bl	80042a8 <HAL_PCD_EP_ClrStall>
}
 80065e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 80065ec:	f7ff bf24 	b.w	8006438 <USBD_Get_USB_Status>

080065f0 <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80065f0:	2228      	movs	r2, #40	; 0x28
  if((ep_addr & 0x80) == 0x80)
 80065f2:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80065f6:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80065fa:	bf1b      	ittet	ne
 80065fc:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 8006600:	fb01 2202 	mlane	r2, r1, r2, r2
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006604:	fb02 3301 	mlaeq	r3, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006608:	189b      	addne	r3, r3, r2
 800660a:	bf14      	ite	ne
 800660c:	7898      	ldrbne	r0, [r3, #2]
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800660e:	f893 016a 	ldrbeq.w	r0, [r3, #362]	; 0x16a
}
 8006612:	4770      	bx	lr

08006614 <USBD_LL_SetUSBAddress>:
{
 8006614:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006616:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800661a:	f7fd f890 	bl	800373e <HAL_PCD_SetAddress>
}
 800661e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006622:	f7ff bf09 	b.w	8006438 <USBD_Get_USB_Status>

08006626 <USBD_LL_Transmit>:
{
 8006626:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006628:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800662c:	f7fd fdee 	bl	800420c <HAL_PCD_EP_Transmit>
}
 8006630:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006634:	f7ff bf00 	b.w	8006438 <USBD_Get_USB_Status>

08006638 <USBD_LL_PrepareReceive>:
{
 8006638:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800663a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800663e:	f7fd fdc6 	bl	80041ce <HAL_PCD_EP_Receive>
}
 8006642:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006646:	f7ff bef7 	b.w	8006438 <USBD_Get_USB_Status>

0800664a <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800664a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800664e:	f7fd bdd5 	b.w	80041fc <HAL_PCD_EP_GetRxCount>
	...

08006654 <USBD_static_malloc>:
}
 8006654:	4800      	ldr	r0, [pc, #0]	; (8006658 <USBD_static_malloc+0x4>)
 8006656:	4770      	bx	lr
 8006658:	20000bc4 	.word	0x20000bc4

0800665c <USBD_static_free>:
}
 800665c:	4770      	bx	lr

0800665e <HAL_PCDEx_SetConnectionState>:
}
 800665e:	4770      	bx	lr

08006660 <malloc>:
 8006660:	4b02      	ldr	r3, [pc, #8]	; (800666c <malloc+0xc>)
 8006662:	4601      	mov	r1, r0
 8006664:	6818      	ldr	r0, [r3, #0]
 8006666:	f000 b82b 	b.w	80066c0 <_malloc_r>
 800666a:	bf00      	nop
 800666c:	200001d8 	.word	0x200001d8

08006670 <free>:
 8006670:	4b02      	ldr	r3, [pc, #8]	; (800667c <free+0xc>)
 8006672:	4601      	mov	r1, r0
 8006674:	6818      	ldr	r0, [r3, #0]
 8006676:	f000 bb09 	b.w	8006c8c <_free_r>
 800667a:	bf00      	nop
 800667c:	200001d8 	.word	0x200001d8

08006680 <sbrk_aligned>:
 8006680:	b570      	push	{r4, r5, r6, lr}
 8006682:	4e0e      	ldr	r6, [pc, #56]	; (80066bc <sbrk_aligned+0x3c>)
 8006684:	460c      	mov	r4, r1
 8006686:	6831      	ldr	r1, [r6, #0]
 8006688:	4605      	mov	r5, r0
 800668a:	b911      	cbnz	r1, 8006692 <sbrk_aligned+0x12>
 800668c:	f000 fa84 	bl	8006b98 <_sbrk_r>
 8006690:	6030      	str	r0, [r6, #0]
 8006692:	4621      	mov	r1, r4
 8006694:	4628      	mov	r0, r5
 8006696:	f000 fa7f 	bl	8006b98 <_sbrk_r>
 800669a:	1c43      	adds	r3, r0, #1
 800669c:	d00a      	beq.n	80066b4 <sbrk_aligned+0x34>
 800669e:	1cc4      	adds	r4, r0, #3
 80066a0:	f024 0403 	bic.w	r4, r4, #3
 80066a4:	42a0      	cmp	r0, r4
 80066a6:	d007      	beq.n	80066b8 <sbrk_aligned+0x38>
 80066a8:	1a21      	subs	r1, r4, r0
 80066aa:	4628      	mov	r0, r5
 80066ac:	f000 fa74 	bl	8006b98 <_sbrk_r>
 80066b0:	3001      	adds	r0, #1
 80066b2:	d101      	bne.n	80066b8 <sbrk_aligned+0x38>
 80066b4:	f04f 34ff 	mov.w	r4, #4294967295
 80066b8:	4620      	mov	r0, r4
 80066ba:	bd70      	pop	{r4, r5, r6, pc}
 80066bc:	20000de8 	.word	0x20000de8

080066c0 <_malloc_r>:
 80066c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066c4:	1ccd      	adds	r5, r1, #3
 80066c6:	f025 0503 	bic.w	r5, r5, #3
 80066ca:	3508      	adds	r5, #8
 80066cc:	2d0c      	cmp	r5, #12
 80066ce:	bf38      	it	cc
 80066d0:	250c      	movcc	r5, #12
 80066d2:	2d00      	cmp	r5, #0
 80066d4:	4607      	mov	r7, r0
 80066d6:	db01      	blt.n	80066dc <_malloc_r+0x1c>
 80066d8:	42a9      	cmp	r1, r5
 80066da:	d905      	bls.n	80066e8 <_malloc_r+0x28>
 80066dc:	230c      	movs	r3, #12
 80066de:	2600      	movs	r6, #0
 80066e0:	603b      	str	r3, [r7, #0]
 80066e2:	4630      	mov	r0, r6
 80066e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066e8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80067bc <_malloc_r+0xfc>
 80066ec:	f000 f868 	bl	80067c0 <__malloc_lock>
 80066f0:	f8d8 3000 	ldr.w	r3, [r8]
 80066f4:	461c      	mov	r4, r3
 80066f6:	bb5c      	cbnz	r4, 8006750 <_malloc_r+0x90>
 80066f8:	4629      	mov	r1, r5
 80066fa:	4638      	mov	r0, r7
 80066fc:	f7ff ffc0 	bl	8006680 <sbrk_aligned>
 8006700:	1c43      	adds	r3, r0, #1
 8006702:	4604      	mov	r4, r0
 8006704:	d155      	bne.n	80067b2 <_malloc_r+0xf2>
 8006706:	f8d8 4000 	ldr.w	r4, [r8]
 800670a:	4626      	mov	r6, r4
 800670c:	2e00      	cmp	r6, #0
 800670e:	d145      	bne.n	800679c <_malloc_r+0xdc>
 8006710:	2c00      	cmp	r4, #0
 8006712:	d048      	beq.n	80067a6 <_malloc_r+0xe6>
 8006714:	6823      	ldr	r3, [r4, #0]
 8006716:	4631      	mov	r1, r6
 8006718:	4638      	mov	r0, r7
 800671a:	eb04 0903 	add.w	r9, r4, r3
 800671e:	f000 fa3b 	bl	8006b98 <_sbrk_r>
 8006722:	4581      	cmp	r9, r0
 8006724:	d13f      	bne.n	80067a6 <_malloc_r+0xe6>
 8006726:	6821      	ldr	r1, [r4, #0]
 8006728:	4638      	mov	r0, r7
 800672a:	1a6d      	subs	r5, r5, r1
 800672c:	4629      	mov	r1, r5
 800672e:	f7ff ffa7 	bl	8006680 <sbrk_aligned>
 8006732:	3001      	adds	r0, #1
 8006734:	d037      	beq.n	80067a6 <_malloc_r+0xe6>
 8006736:	6823      	ldr	r3, [r4, #0]
 8006738:	442b      	add	r3, r5
 800673a:	6023      	str	r3, [r4, #0]
 800673c:	f8d8 3000 	ldr.w	r3, [r8]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d038      	beq.n	80067b6 <_malloc_r+0xf6>
 8006744:	685a      	ldr	r2, [r3, #4]
 8006746:	42a2      	cmp	r2, r4
 8006748:	d12b      	bne.n	80067a2 <_malloc_r+0xe2>
 800674a:	2200      	movs	r2, #0
 800674c:	605a      	str	r2, [r3, #4]
 800674e:	e00f      	b.n	8006770 <_malloc_r+0xb0>
 8006750:	6822      	ldr	r2, [r4, #0]
 8006752:	1b52      	subs	r2, r2, r5
 8006754:	d41f      	bmi.n	8006796 <_malloc_r+0xd6>
 8006756:	2a0b      	cmp	r2, #11
 8006758:	d917      	bls.n	800678a <_malloc_r+0xca>
 800675a:	1961      	adds	r1, r4, r5
 800675c:	42a3      	cmp	r3, r4
 800675e:	6025      	str	r5, [r4, #0]
 8006760:	bf18      	it	ne
 8006762:	6059      	strne	r1, [r3, #4]
 8006764:	6863      	ldr	r3, [r4, #4]
 8006766:	bf08      	it	eq
 8006768:	f8c8 1000 	streq.w	r1, [r8]
 800676c:	5162      	str	r2, [r4, r5]
 800676e:	604b      	str	r3, [r1, #4]
 8006770:	4638      	mov	r0, r7
 8006772:	f104 060b 	add.w	r6, r4, #11
 8006776:	f000 f829 	bl	80067cc <__malloc_unlock>
 800677a:	f026 0607 	bic.w	r6, r6, #7
 800677e:	1d23      	adds	r3, r4, #4
 8006780:	1af2      	subs	r2, r6, r3
 8006782:	d0ae      	beq.n	80066e2 <_malloc_r+0x22>
 8006784:	1b9b      	subs	r3, r3, r6
 8006786:	50a3      	str	r3, [r4, r2]
 8006788:	e7ab      	b.n	80066e2 <_malloc_r+0x22>
 800678a:	42a3      	cmp	r3, r4
 800678c:	6862      	ldr	r2, [r4, #4]
 800678e:	d1dd      	bne.n	800674c <_malloc_r+0x8c>
 8006790:	f8c8 2000 	str.w	r2, [r8]
 8006794:	e7ec      	b.n	8006770 <_malloc_r+0xb0>
 8006796:	4623      	mov	r3, r4
 8006798:	6864      	ldr	r4, [r4, #4]
 800679a:	e7ac      	b.n	80066f6 <_malloc_r+0x36>
 800679c:	4634      	mov	r4, r6
 800679e:	6876      	ldr	r6, [r6, #4]
 80067a0:	e7b4      	b.n	800670c <_malloc_r+0x4c>
 80067a2:	4613      	mov	r3, r2
 80067a4:	e7cc      	b.n	8006740 <_malloc_r+0x80>
 80067a6:	230c      	movs	r3, #12
 80067a8:	4638      	mov	r0, r7
 80067aa:	603b      	str	r3, [r7, #0]
 80067ac:	f000 f80e 	bl	80067cc <__malloc_unlock>
 80067b0:	e797      	b.n	80066e2 <_malloc_r+0x22>
 80067b2:	6025      	str	r5, [r4, #0]
 80067b4:	e7dc      	b.n	8006770 <_malloc_r+0xb0>
 80067b6:	605b      	str	r3, [r3, #4]
 80067b8:	deff      	udf	#255	; 0xff
 80067ba:	bf00      	nop
 80067bc:	20000de4 	.word	0x20000de4

080067c0 <__malloc_lock>:
 80067c0:	4801      	ldr	r0, [pc, #4]	; (80067c8 <__malloc_lock+0x8>)
 80067c2:	f000 ba35 	b.w	8006c30 <__retarget_lock_acquire_recursive>
 80067c6:	bf00      	nop
 80067c8:	20000f2c 	.word	0x20000f2c

080067cc <__malloc_unlock>:
 80067cc:	4801      	ldr	r0, [pc, #4]	; (80067d4 <__malloc_unlock+0x8>)
 80067ce:	f000 ba30 	b.w	8006c32 <__retarget_lock_release_recursive>
 80067d2:	bf00      	nop
 80067d4:	20000f2c 	.word	0x20000f2c

080067d8 <std>:
 80067d8:	2300      	movs	r3, #0
 80067da:	b510      	push	{r4, lr}
 80067dc:	4604      	mov	r4, r0
 80067de:	e9c0 3300 	strd	r3, r3, [r0]
 80067e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80067e6:	6083      	str	r3, [r0, #8]
 80067e8:	8181      	strh	r1, [r0, #12]
 80067ea:	6643      	str	r3, [r0, #100]	; 0x64
 80067ec:	81c2      	strh	r2, [r0, #14]
 80067ee:	6183      	str	r3, [r0, #24]
 80067f0:	4619      	mov	r1, r3
 80067f2:	2208      	movs	r2, #8
 80067f4:	305c      	adds	r0, #92	; 0x5c
 80067f6:	f000 f91b 	bl	8006a30 <memset>
 80067fa:	4b05      	ldr	r3, [pc, #20]	; (8006810 <std+0x38>)
 80067fc:	6224      	str	r4, [r4, #32]
 80067fe:	6263      	str	r3, [r4, #36]	; 0x24
 8006800:	4b04      	ldr	r3, [pc, #16]	; (8006814 <std+0x3c>)
 8006802:	62a3      	str	r3, [r4, #40]	; 0x28
 8006804:	4b04      	ldr	r3, [pc, #16]	; (8006818 <std+0x40>)
 8006806:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006808:	4b04      	ldr	r3, [pc, #16]	; (800681c <std+0x44>)
 800680a:	6323      	str	r3, [r4, #48]	; 0x30
 800680c:	bd10      	pop	{r4, pc}
 800680e:	bf00      	nop
 8006810:	08006939 	.word	0x08006939
 8006814:	0800695b 	.word	0x0800695b
 8006818:	08006993 	.word	0x08006993
 800681c:	080069b7 	.word	0x080069b7

08006820 <stdio_exit_handler>:
 8006820:	4a02      	ldr	r2, [pc, #8]	; (800682c <stdio_exit_handler+0xc>)
 8006822:	4903      	ldr	r1, [pc, #12]	; (8006830 <stdio_exit_handler+0x10>)
 8006824:	4803      	ldr	r0, [pc, #12]	; (8006834 <stdio_exit_handler+0x14>)
 8006826:	f000 b869 	b.w	80068fc <_fwalk_sglue>
 800682a:	bf00      	nop
 800682c:	20000180 	.word	0x20000180
 8006830:	080073f9 	.word	0x080073f9
 8006834:	2000018c 	.word	0x2000018c

08006838 <cleanup_stdio>:
 8006838:	6841      	ldr	r1, [r0, #4]
 800683a:	4b0c      	ldr	r3, [pc, #48]	; (800686c <cleanup_stdio+0x34>)
 800683c:	b510      	push	{r4, lr}
 800683e:	4299      	cmp	r1, r3
 8006840:	4604      	mov	r4, r0
 8006842:	d001      	beq.n	8006848 <cleanup_stdio+0x10>
 8006844:	f000 fdd8 	bl	80073f8 <_fflush_r>
 8006848:	68a1      	ldr	r1, [r4, #8]
 800684a:	4b09      	ldr	r3, [pc, #36]	; (8006870 <cleanup_stdio+0x38>)
 800684c:	4299      	cmp	r1, r3
 800684e:	d002      	beq.n	8006856 <cleanup_stdio+0x1e>
 8006850:	4620      	mov	r0, r4
 8006852:	f000 fdd1 	bl	80073f8 <_fflush_r>
 8006856:	68e1      	ldr	r1, [r4, #12]
 8006858:	4b06      	ldr	r3, [pc, #24]	; (8006874 <cleanup_stdio+0x3c>)
 800685a:	4299      	cmp	r1, r3
 800685c:	d004      	beq.n	8006868 <cleanup_stdio+0x30>
 800685e:	4620      	mov	r0, r4
 8006860:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006864:	f000 bdc8 	b.w	80073f8 <_fflush_r>
 8006868:	bd10      	pop	{r4, pc}
 800686a:	bf00      	nop
 800686c:	20000dec 	.word	0x20000dec
 8006870:	20000e54 	.word	0x20000e54
 8006874:	20000ebc 	.word	0x20000ebc

08006878 <global_stdio_init.part.0>:
 8006878:	b510      	push	{r4, lr}
 800687a:	4b0b      	ldr	r3, [pc, #44]	; (80068a8 <global_stdio_init.part.0+0x30>)
 800687c:	4c0b      	ldr	r4, [pc, #44]	; (80068ac <global_stdio_init.part.0+0x34>)
 800687e:	4a0c      	ldr	r2, [pc, #48]	; (80068b0 <global_stdio_init.part.0+0x38>)
 8006880:	4620      	mov	r0, r4
 8006882:	601a      	str	r2, [r3, #0]
 8006884:	2104      	movs	r1, #4
 8006886:	2200      	movs	r2, #0
 8006888:	f7ff ffa6 	bl	80067d8 <std>
 800688c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006890:	2201      	movs	r2, #1
 8006892:	2109      	movs	r1, #9
 8006894:	f7ff ffa0 	bl	80067d8 <std>
 8006898:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800689c:	2202      	movs	r2, #2
 800689e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068a2:	2112      	movs	r1, #18
 80068a4:	f7ff bf98 	b.w	80067d8 <std>
 80068a8:	20000f24 	.word	0x20000f24
 80068ac:	20000dec 	.word	0x20000dec
 80068b0:	08006821 	.word	0x08006821

080068b4 <__sfp_lock_acquire>:
 80068b4:	4801      	ldr	r0, [pc, #4]	; (80068bc <__sfp_lock_acquire+0x8>)
 80068b6:	f000 b9bb 	b.w	8006c30 <__retarget_lock_acquire_recursive>
 80068ba:	bf00      	nop
 80068bc:	20000f2d 	.word	0x20000f2d

080068c0 <__sfp_lock_release>:
 80068c0:	4801      	ldr	r0, [pc, #4]	; (80068c8 <__sfp_lock_release+0x8>)
 80068c2:	f000 b9b6 	b.w	8006c32 <__retarget_lock_release_recursive>
 80068c6:	bf00      	nop
 80068c8:	20000f2d 	.word	0x20000f2d

080068cc <__sinit>:
 80068cc:	b510      	push	{r4, lr}
 80068ce:	4604      	mov	r4, r0
 80068d0:	f7ff fff0 	bl	80068b4 <__sfp_lock_acquire>
 80068d4:	6a23      	ldr	r3, [r4, #32]
 80068d6:	b11b      	cbz	r3, 80068e0 <__sinit+0x14>
 80068d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068dc:	f7ff bff0 	b.w	80068c0 <__sfp_lock_release>
 80068e0:	4b04      	ldr	r3, [pc, #16]	; (80068f4 <__sinit+0x28>)
 80068e2:	6223      	str	r3, [r4, #32]
 80068e4:	4b04      	ldr	r3, [pc, #16]	; (80068f8 <__sinit+0x2c>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d1f5      	bne.n	80068d8 <__sinit+0xc>
 80068ec:	f7ff ffc4 	bl	8006878 <global_stdio_init.part.0>
 80068f0:	e7f2      	b.n	80068d8 <__sinit+0xc>
 80068f2:	bf00      	nop
 80068f4:	08006839 	.word	0x08006839
 80068f8:	20000f24 	.word	0x20000f24

080068fc <_fwalk_sglue>:
 80068fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006900:	4607      	mov	r7, r0
 8006902:	4688      	mov	r8, r1
 8006904:	4614      	mov	r4, r2
 8006906:	2600      	movs	r6, #0
 8006908:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800690c:	f1b9 0901 	subs.w	r9, r9, #1
 8006910:	d505      	bpl.n	800691e <_fwalk_sglue+0x22>
 8006912:	6824      	ldr	r4, [r4, #0]
 8006914:	2c00      	cmp	r4, #0
 8006916:	d1f7      	bne.n	8006908 <_fwalk_sglue+0xc>
 8006918:	4630      	mov	r0, r6
 800691a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800691e:	89ab      	ldrh	r3, [r5, #12]
 8006920:	2b01      	cmp	r3, #1
 8006922:	d907      	bls.n	8006934 <_fwalk_sglue+0x38>
 8006924:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006928:	3301      	adds	r3, #1
 800692a:	d003      	beq.n	8006934 <_fwalk_sglue+0x38>
 800692c:	4629      	mov	r1, r5
 800692e:	4638      	mov	r0, r7
 8006930:	47c0      	blx	r8
 8006932:	4306      	orrs	r6, r0
 8006934:	3568      	adds	r5, #104	; 0x68
 8006936:	e7e9      	b.n	800690c <_fwalk_sglue+0x10>

08006938 <__sread>:
 8006938:	b510      	push	{r4, lr}
 800693a:	460c      	mov	r4, r1
 800693c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006940:	f000 f918 	bl	8006b74 <_read_r>
 8006944:	2800      	cmp	r0, #0
 8006946:	bfab      	itete	ge
 8006948:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800694a:	89a3      	ldrhlt	r3, [r4, #12]
 800694c:	181b      	addge	r3, r3, r0
 800694e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006952:	bfac      	ite	ge
 8006954:	6563      	strge	r3, [r4, #84]	; 0x54
 8006956:	81a3      	strhlt	r3, [r4, #12]
 8006958:	bd10      	pop	{r4, pc}

0800695a <__swrite>:
 800695a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800695e:	461f      	mov	r7, r3
 8006960:	898b      	ldrh	r3, [r1, #12]
 8006962:	4605      	mov	r5, r0
 8006964:	05db      	lsls	r3, r3, #23
 8006966:	460c      	mov	r4, r1
 8006968:	4616      	mov	r6, r2
 800696a:	d505      	bpl.n	8006978 <__swrite+0x1e>
 800696c:	2302      	movs	r3, #2
 800696e:	2200      	movs	r2, #0
 8006970:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006974:	f000 f8ec 	bl	8006b50 <_lseek_r>
 8006978:	89a3      	ldrh	r3, [r4, #12]
 800697a:	4632      	mov	r2, r6
 800697c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006980:	81a3      	strh	r3, [r4, #12]
 8006982:	4628      	mov	r0, r5
 8006984:	463b      	mov	r3, r7
 8006986:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800698a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800698e:	f000 b913 	b.w	8006bb8 <_write_r>

08006992 <__sseek>:
 8006992:	b510      	push	{r4, lr}
 8006994:	460c      	mov	r4, r1
 8006996:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800699a:	f000 f8d9 	bl	8006b50 <_lseek_r>
 800699e:	1c43      	adds	r3, r0, #1
 80069a0:	89a3      	ldrh	r3, [r4, #12]
 80069a2:	bf15      	itete	ne
 80069a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80069a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80069aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80069ae:	81a3      	strheq	r3, [r4, #12]
 80069b0:	bf18      	it	ne
 80069b2:	81a3      	strhne	r3, [r4, #12]
 80069b4:	bd10      	pop	{r4, pc}

080069b6 <__sclose>:
 80069b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069ba:	f000 b8b9 	b.w	8006b30 <_close_r>

080069be <_vsniprintf_r>:
 80069be:	b530      	push	{r4, r5, lr}
 80069c0:	4614      	mov	r4, r2
 80069c2:	2c00      	cmp	r4, #0
 80069c4:	4605      	mov	r5, r0
 80069c6:	461a      	mov	r2, r3
 80069c8:	b09b      	sub	sp, #108	; 0x6c
 80069ca:	da05      	bge.n	80069d8 <_vsniprintf_r+0x1a>
 80069cc:	238b      	movs	r3, #139	; 0x8b
 80069ce:	6003      	str	r3, [r0, #0]
 80069d0:	f04f 30ff 	mov.w	r0, #4294967295
 80069d4:	b01b      	add	sp, #108	; 0x6c
 80069d6:	bd30      	pop	{r4, r5, pc}
 80069d8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80069dc:	f8ad 300c 	strh.w	r3, [sp, #12]
 80069e0:	bf0c      	ite	eq
 80069e2:	4623      	moveq	r3, r4
 80069e4:	f104 33ff 	addne.w	r3, r4, #4294967295
 80069e8:	9302      	str	r3, [sp, #8]
 80069ea:	9305      	str	r3, [sp, #20]
 80069ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80069f0:	9100      	str	r1, [sp, #0]
 80069f2:	9104      	str	r1, [sp, #16]
 80069f4:	f8ad 300e 	strh.w	r3, [sp, #14]
 80069f8:	4669      	mov	r1, sp
 80069fa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80069fc:	f000 f9e8 	bl	8006dd0 <_svfiprintf_r>
 8006a00:	1c43      	adds	r3, r0, #1
 8006a02:	bfbc      	itt	lt
 8006a04:	238b      	movlt	r3, #139	; 0x8b
 8006a06:	602b      	strlt	r3, [r5, #0]
 8006a08:	2c00      	cmp	r4, #0
 8006a0a:	d0e3      	beq.n	80069d4 <_vsniprintf_r+0x16>
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	9b00      	ldr	r3, [sp, #0]
 8006a10:	701a      	strb	r2, [r3, #0]
 8006a12:	e7df      	b.n	80069d4 <_vsniprintf_r+0x16>

08006a14 <vsniprintf>:
 8006a14:	b507      	push	{r0, r1, r2, lr}
 8006a16:	9300      	str	r3, [sp, #0]
 8006a18:	4613      	mov	r3, r2
 8006a1a:	460a      	mov	r2, r1
 8006a1c:	4601      	mov	r1, r0
 8006a1e:	4803      	ldr	r0, [pc, #12]	; (8006a2c <vsniprintf+0x18>)
 8006a20:	6800      	ldr	r0, [r0, #0]
 8006a22:	f7ff ffcc 	bl	80069be <_vsniprintf_r>
 8006a26:	b003      	add	sp, #12
 8006a28:	f85d fb04 	ldr.w	pc, [sp], #4
 8006a2c:	200001d8 	.word	0x200001d8

08006a30 <memset>:
 8006a30:	4603      	mov	r3, r0
 8006a32:	4402      	add	r2, r0
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d100      	bne.n	8006a3a <memset+0xa>
 8006a38:	4770      	bx	lr
 8006a3a:	f803 1b01 	strb.w	r1, [r3], #1
 8006a3e:	e7f9      	b.n	8006a34 <memset+0x4>

08006a40 <strdup>:
 8006a40:	4b02      	ldr	r3, [pc, #8]	; (8006a4c <strdup+0xc>)
 8006a42:	4601      	mov	r1, r0
 8006a44:	6818      	ldr	r0, [r3, #0]
 8006a46:	f000 b803 	b.w	8006a50 <_strdup_r>
 8006a4a:	bf00      	nop
 8006a4c:	200001d8 	.word	0x200001d8

08006a50 <_strdup_r>:
 8006a50:	b570      	push	{r4, r5, r6, lr}
 8006a52:	4604      	mov	r4, r0
 8006a54:	4608      	mov	r0, r1
 8006a56:	460d      	mov	r5, r1
 8006a58:	f7f9 fb84 	bl	8000164 <strlen>
 8006a5c:	1c46      	adds	r6, r0, #1
 8006a5e:	4631      	mov	r1, r6
 8006a60:	4620      	mov	r0, r4
 8006a62:	f7ff fe2d 	bl	80066c0 <_malloc_r>
 8006a66:	4604      	mov	r4, r0
 8006a68:	b118      	cbz	r0, 8006a72 <_strdup_r+0x22>
 8006a6a:	4632      	mov	r2, r6
 8006a6c:	4629      	mov	r1, r5
 8006a6e:	f000 f8e1 	bl	8006c34 <memcpy>
 8006a72:	4620      	mov	r0, r4
 8006a74:	bd70      	pop	{r4, r5, r6, pc}
	...

08006a78 <strtok>:
 8006a78:	4b16      	ldr	r3, [pc, #88]	; (8006ad4 <strtok+0x5c>)
 8006a7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a7e:	681f      	ldr	r7, [r3, #0]
 8006a80:	4605      	mov	r5, r0
 8006a82:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8006a84:	460e      	mov	r6, r1
 8006a86:	b9ec      	cbnz	r4, 8006ac4 <strtok+0x4c>
 8006a88:	2050      	movs	r0, #80	; 0x50
 8006a8a:	f7ff fde9 	bl	8006660 <malloc>
 8006a8e:	4602      	mov	r2, r0
 8006a90:	6478      	str	r0, [r7, #68]	; 0x44
 8006a92:	b920      	cbnz	r0, 8006a9e <strtok+0x26>
 8006a94:	215b      	movs	r1, #91	; 0x5b
 8006a96:	4b10      	ldr	r3, [pc, #64]	; (8006ad8 <strtok+0x60>)
 8006a98:	4810      	ldr	r0, [pc, #64]	; (8006adc <strtok+0x64>)
 8006a9a:	f000 f8d9 	bl	8006c50 <__assert_func>
 8006a9e:	e9c0 4400 	strd	r4, r4, [r0]
 8006aa2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8006aa6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8006aaa:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8006aae:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8006ab2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8006ab6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8006aba:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8006abe:	6184      	str	r4, [r0, #24]
 8006ac0:	7704      	strb	r4, [r0, #28]
 8006ac2:	6244      	str	r4, [r0, #36]	; 0x24
 8006ac4:	4631      	mov	r1, r6
 8006ac6:	4628      	mov	r0, r5
 8006ac8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006aca:	2301      	movs	r3, #1
 8006acc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ad0:	f000 b806 	b.w	8006ae0 <__strtok_r>
 8006ad4:	200001d8 	.word	0x200001d8
 8006ad8:	08007ceb 	.word	0x08007ceb
 8006adc:	08007d02 	.word	0x08007d02

08006ae0 <__strtok_r>:
 8006ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ae2:	b908      	cbnz	r0, 8006ae8 <__strtok_r+0x8>
 8006ae4:	6810      	ldr	r0, [r2, #0]
 8006ae6:	b188      	cbz	r0, 8006b0c <__strtok_r+0x2c>
 8006ae8:	4604      	mov	r4, r0
 8006aea:	460f      	mov	r7, r1
 8006aec:	4620      	mov	r0, r4
 8006aee:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006af2:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006af6:	b91e      	cbnz	r6, 8006b00 <__strtok_r+0x20>
 8006af8:	b965      	cbnz	r5, 8006b14 <__strtok_r+0x34>
 8006afa:	4628      	mov	r0, r5
 8006afc:	6015      	str	r5, [r2, #0]
 8006afe:	e005      	b.n	8006b0c <__strtok_r+0x2c>
 8006b00:	42b5      	cmp	r5, r6
 8006b02:	d1f6      	bne.n	8006af2 <__strtok_r+0x12>
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d1f0      	bne.n	8006aea <__strtok_r+0xa>
 8006b08:	6014      	str	r4, [r2, #0]
 8006b0a:	7003      	strb	r3, [r0, #0]
 8006b0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b0e:	461c      	mov	r4, r3
 8006b10:	e00c      	b.n	8006b2c <__strtok_r+0x4c>
 8006b12:	b915      	cbnz	r5, 8006b1a <__strtok_r+0x3a>
 8006b14:	460e      	mov	r6, r1
 8006b16:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006b1a:	f816 5b01 	ldrb.w	r5, [r6], #1
 8006b1e:	42ab      	cmp	r3, r5
 8006b20:	d1f7      	bne.n	8006b12 <__strtok_r+0x32>
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d0f3      	beq.n	8006b0e <__strtok_r+0x2e>
 8006b26:	2300      	movs	r3, #0
 8006b28:	f804 3c01 	strb.w	r3, [r4, #-1]
 8006b2c:	6014      	str	r4, [r2, #0]
 8006b2e:	e7ed      	b.n	8006b0c <__strtok_r+0x2c>

08006b30 <_close_r>:
 8006b30:	b538      	push	{r3, r4, r5, lr}
 8006b32:	2300      	movs	r3, #0
 8006b34:	4d05      	ldr	r5, [pc, #20]	; (8006b4c <_close_r+0x1c>)
 8006b36:	4604      	mov	r4, r0
 8006b38:	4608      	mov	r0, r1
 8006b3a:	602b      	str	r3, [r5, #0]
 8006b3c:	f7fb f9c6 	bl	8001ecc <_close>
 8006b40:	1c43      	adds	r3, r0, #1
 8006b42:	d102      	bne.n	8006b4a <_close_r+0x1a>
 8006b44:	682b      	ldr	r3, [r5, #0]
 8006b46:	b103      	cbz	r3, 8006b4a <_close_r+0x1a>
 8006b48:	6023      	str	r3, [r4, #0]
 8006b4a:	bd38      	pop	{r3, r4, r5, pc}
 8006b4c:	20000f28 	.word	0x20000f28

08006b50 <_lseek_r>:
 8006b50:	b538      	push	{r3, r4, r5, lr}
 8006b52:	4604      	mov	r4, r0
 8006b54:	4608      	mov	r0, r1
 8006b56:	4611      	mov	r1, r2
 8006b58:	2200      	movs	r2, #0
 8006b5a:	4d05      	ldr	r5, [pc, #20]	; (8006b70 <_lseek_r+0x20>)
 8006b5c:	602a      	str	r2, [r5, #0]
 8006b5e:	461a      	mov	r2, r3
 8006b60:	f7fb f9be 	bl	8001ee0 <_lseek>
 8006b64:	1c43      	adds	r3, r0, #1
 8006b66:	d102      	bne.n	8006b6e <_lseek_r+0x1e>
 8006b68:	682b      	ldr	r3, [r5, #0]
 8006b6a:	b103      	cbz	r3, 8006b6e <_lseek_r+0x1e>
 8006b6c:	6023      	str	r3, [r4, #0]
 8006b6e:	bd38      	pop	{r3, r4, r5, pc}
 8006b70:	20000f28 	.word	0x20000f28

08006b74 <_read_r>:
 8006b74:	b538      	push	{r3, r4, r5, lr}
 8006b76:	4604      	mov	r4, r0
 8006b78:	4608      	mov	r0, r1
 8006b7a:	4611      	mov	r1, r2
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	4d05      	ldr	r5, [pc, #20]	; (8006b94 <_read_r+0x20>)
 8006b80:	602a      	str	r2, [r5, #0]
 8006b82:	461a      	mov	r2, r3
 8006b84:	f7fb f986 	bl	8001e94 <_read>
 8006b88:	1c43      	adds	r3, r0, #1
 8006b8a:	d102      	bne.n	8006b92 <_read_r+0x1e>
 8006b8c:	682b      	ldr	r3, [r5, #0]
 8006b8e:	b103      	cbz	r3, 8006b92 <_read_r+0x1e>
 8006b90:	6023      	str	r3, [r4, #0]
 8006b92:	bd38      	pop	{r3, r4, r5, pc}
 8006b94:	20000f28 	.word	0x20000f28

08006b98 <_sbrk_r>:
 8006b98:	b538      	push	{r3, r4, r5, lr}
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	4d05      	ldr	r5, [pc, #20]	; (8006bb4 <_sbrk_r+0x1c>)
 8006b9e:	4604      	mov	r4, r0
 8006ba0:	4608      	mov	r0, r1
 8006ba2:	602b      	str	r3, [r5, #0]
 8006ba4:	f7fb f99e 	bl	8001ee4 <_sbrk>
 8006ba8:	1c43      	adds	r3, r0, #1
 8006baa:	d102      	bne.n	8006bb2 <_sbrk_r+0x1a>
 8006bac:	682b      	ldr	r3, [r5, #0]
 8006bae:	b103      	cbz	r3, 8006bb2 <_sbrk_r+0x1a>
 8006bb0:	6023      	str	r3, [r4, #0]
 8006bb2:	bd38      	pop	{r3, r4, r5, pc}
 8006bb4:	20000f28 	.word	0x20000f28

08006bb8 <_write_r>:
 8006bb8:	b538      	push	{r3, r4, r5, lr}
 8006bba:	4604      	mov	r4, r0
 8006bbc:	4608      	mov	r0, r1
 8006bbe:	4611      	mov	r1, r2
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	4d05      	ldr	r5, [pc, #20]	; (8006bd8 <_write_r+0x20>)
 8006bc4:	602a      	str	r2, [r5, #0]
 8006bc6:	461a      	mov	r2, r3
 8006bc8:	f7fb f972 	bl	8001eb0 <_write>
 8006bcc:	1c43      	adds	r3, r0, #1
 8006bce:	d102      	bne.n	8006bd6 <_write_r+0x1e>
 8006bd0:	682b      	ldr	r3, [r5, #0]
 8006bd2:	b103      	cbz	r3, 8006bd6 <_write_r+0x1e>
 8006bd4:	6023      	str	r3, [r4, #0]
 8006bd6:	bd38      	pop	{r3, r4, r5, pc}
 8006bd8:	20000f28 	.word	0x20000f28

08006bdc <__errno>:
 8006bdc:	4b01      	ldr	r3, [pc, #4]	; (8006be4 <__errno+0x8>)
 8006bde:	6818      	ldr	r0, [r3, #0]
 8006be0:	4770      	bx	lr
 8006be2:	bf00      	nop
 8006be4:	200001d8 	.word	0x200001d8

08006be8 <__libc_init_array>:
 8006be8:	b570      	push	{r4, r5, r6, lr}
 8006bea:	2600      	movs	r6, #0
 8006bec:	4d0c      	ldr	r5, [pc, #48]	; (8006c20 <__libc_init_array+0x38>)
 8006bee:	4c0d      	ldr	r4, [pc, #52]	; (8006c24 <__libc_init_array+0x3c>)
 8006bf0:	1b64      	subs	r4, r4, r5
 8006bf2:	10a4      	asrs	r4, r4, #2
 8006bf4:	42a6      	cmp	r6, r4
 8006bf6:	d109      	bne.n	8006c0c <__libc_init_array+0x24>
 8006bf8:	f000 ff3e 	bl	8007a78 <_init>
 8006bfc:	2600      	movs	r6, #0
 8006bfe:	4d0a      	ldr	r5, [pc, #40]	; (8006c28 <__libc_init_array+0x40>)
 8006c00:	4c0a      	ldr	r4, [pc, #40]	; (8006c2c <__libc_init_array+0x44>)
 8006c02:	1b64      	subs	r4, r4, r5
 8006c04:	10a4      	asrs	r4, r4, #2
 8006c06:	42a6      	cmp	r6, r4
 8006c08:	d105      	bne.n	8006c16 <__libc_init_array+0x2e>
 8006c0a:	bd70      	pop	{r4, r5, r6, pc}
 8006c0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c10:	4798      	blx	r3
 8006c12:	3601      	adds	r6, #1
 8006c14:	e7ee      	b.n	8006bf4 <__libc_init_array+0xc>
 8006c16:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c1a:	4798      	blx	r3
 8006c1c:	3601      	adds	r6, #1
 8006c1e:	e7f2      	b.n	8006c06 <__libc_init_array+0x1e>
 8006c20:	08007dcc 	.word	0x08007dcc
 8006c24:	08007dcc 	.word	0x08007dcc
 8006c28:	08007dcc 	.word	0x08007dcc
 8006c2c:	08007dd0 	.word	0x08007dd0

08006c30 <__retarget_lock_acquire_recursive>:
 8006c30:	4770      	bx	lr

08006c32 <__retarget_lock_release_recursive>:
 8006c32:	4770      	bx	lr

08006c34 <memcpy>:
 8006c34:	440a      	add	r2, r1
 8006c36:	4291      	cmp	r1, r2
 8006c38:	f100 33ff 	add.w	r3, r0, #4294967295
 8006c3c:	d100      	bne.n	8006c40 <memcpy+0xc>
 8006c3e:	4770      	bx	lr
 8006c40:	b510      	push	{r4, lr}
 8006c42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c46:	4291      	cmp	r1, r2
 8006c48:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c4c:	d1f9      	bne.n	8006c42 <memcpy+0xe>
 8006c4e:	bd10      	pop	{r4, pc}

08006c50 <__assert_func>:
 8006c50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006c52:	4614      	mov	r4, r2
 8006c54:	461a      	mov	r2, r3
 8006c56:	4b09      	ldr	r3, [pc, #36]	; (8006c7c <__assert_func+0x2c>)
 8006c58:	4605      	mov	r5, r0
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	68d8      	ldr	r0, [r3, #12]
 8006c5e:	b14c      	cbz	r4, 8006c74 <__assert_func+0x24>
 8006c60:	4b07      	ldr	r3, [pc, #28]	; (8006c80 <__assert_func+0x30>)
 8006c62:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006c66:	9100      	str	r1, [sp, #0]
 8006c68:	462b      	mov	r3, r5
 8006c6a:	4906      	ldr	r1, [pc, #24]	; (8006c84 <__assert_func+0x34>)
 8006c6c:	f000 fbec 	bl	8007448 <fiprintf>
 8006c70:	f000 fc24 	bl	80074bc <abort>
 8006c74:	4b04      	ldr	r3, [pc, #16]	; (8006c88 <__assert_func+0x38>)
 8006c76:	461c      	mov	r4, r3
 8006c78:	e7f3      	b.n	8006c62 <__assert_func+0x12>
 8006c7a:	bf00      	nop
 8006c7c:	200001d8 	.word	0x200001d8
 8006c80:	08007d5c 	.word	0x08007d5c
 8006c84:	08007d69 	.word	0x08007d69
 8006c88:	08007d97 	.word	0x08007d97

08006c8c <_free_r>:
 8006c8c:	b538      	push	{r3, r4, r5, lr}
 8006c8e:	4605      	mov	r5, r0
 8006c90:	2900      	cmp	r1, #0
 8006c92:	d040      	beq.n	8006d16 <_free_r+0x8a>
 8006c94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c98:	1f0c      	subs	r4, r1, #4
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	bfb8      	it	lt
 8006c9e:	18e4      	addlt	r4, r4, r3
 8006ca0:	f7ff fd8e 	bl	80067c0 <__malloc_lock>
 8006ca4:	4a1c      	ldr	r2, [pc, #112]	; (8006d18 <_free_r+0x8c>)
 8006ca6:	6813      	ldr	r3, [r2, #0]
 8006ca8:	b933      	cbnz	r3, 8006cb8 <_free_r+0x2c>
 8006caa:	6063      	str	r3, [r4, #4]
 8006cac:	6014      	str	r4, [r2, #0]
 8006cae:	4628      	mov	r0, r5
 8006cb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006cb4:	f7ff bd8a 	b.w	80067cc <__malloc_unlock>
 8006cb8:	42a3      	cmp	r3, r4
 8006cba:	d908      	bls.n	8006cce <_free_r+0x42>
 8006cbc:	6820      	ldr	r0, [r4, #0]
 8006cbe:	1821      	adds	r1, r4, r0
 8006cc0:	428b      	cmp	r3, r1
 8006cc2:	bf01      	itttt	eq
 8006cc4:	6819      	ldreq	r1, [r3, #0]
 8006cc6:	685b      	ldreq	r3, [r3, #4]
 8006cc8:	1809      	addeq	r1, r1, r0
 8006cca:	6021      	streq	r1, [r4, #0]
 8006ccc:	e7ed      	b.n	8006caa <_free_r+0x1e>
 8006cce:	461a      	mov	r2, r3
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	b10b      	cbz	r3, 8006cd8 <_free_r+0x4c>
 8006cd4:	42a3      	cmp	r3, r4
 8006cd6:	d9fa      	bls.n	8006cce <_free_r+0x42>
 8006cd8:	6811      	ldr	r1, [r2, #0]
 8006cda:	1850      	adds	r0, r2, r1
 8006cdc:	42a0      	cmp	r0, r4
 8006cde:	d10b      	bne.n	8006cf8 <_free_r+0x6c>
 8006ce0:	6820      	ldr	r0, [r4, #0]
 8006ce2:	4401      	add	r1, r0
 8006ce4:	1850      	adds	r0, r2, r1
 8006ce6:	4283      	cmp	r3, r0
 8006ce8:	6011      	str	r1, [r2, #0]
 8006cea:	d1e0      	bne.n	8006cae <_free_r+0x22>
 8006cec:	6818      	ldr	r0, [r3, #0]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	4408      	add	r0, r1
 8006cf2:	6010      	str	r0, [r2, #0]
 8006cf4:	6053      	str	r3, [r2, #4]
 8006cf6:	e7da      	b.n	8006cae <_free_r+0x22>
 8006cf8:	d902      	bls.n	8006d00 <_free_r+0x74>
 8006cfa:	230c      	movs	r3, #12
 8006cfc:	602b      	str	r3, [r5, #0]
 8006cfe:	e7d6      	b.n	8006cae <_free_r+0x22>
 8006d00:	6820      	ldr	r0, [r4, #0]
 8006d02:	1821      	adds	r1, r4, r0
 8006d04:	428b      	cmp	r3, r1
 8006d06:	bf01      	itttt	eq
 8006d08:	6819      	ldreq	r1, [r3, #0]
 8006d0a:	685b      	ldreq	r3, [r3, #4]
 8006d0c:	1809      	addeq	r1, r1, r0
 8006d0e:	6021      	streq	r1, [r4, #0]
 8006d10:	6063      	str	r3, [r4, #4]
 8006d12:	6054      	str	r4, [r2, #4]
 8006d14:	e7cb      	b.n	8006cae <_free_r+0x22>
 8006d16:	bd38      	pop	{r3, r4, r5, pc}
 8006d18:	20000de4 	.word	0x20000de4

08006d1c <__ssputs_r>:
 8006d1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d20:	461f      	mov	r7, r3
 8006d22:	688e      	ldr	r6, [r1, #8]
 8006d24:	4682      	mov	sl, r0
 8006d26:	42be      	cmp	r6, r7
 8006d28:	460c      	mov	r4, r1
 8006d2a:	4690      	mov	r8, r2
 8006d2c:	680b      	ldr	r3, [r1, #0]
 8006d2e:	d82c      	bhi.n	8006d8a <__ssputs_r+0x6e>
 8006d30:	898a      	ldrh	r2, [r1, #12]
 8006d32:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006d36:	d026      	beq.n	8006d86 <__ssputs_r+0x6a>
 8006d38:	6965      	ldr	r5, [r4, #20]
 8006d3a:	6909      	ldr	r1, [r1, #16]
 8006d3c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006d40:	eba3 0901 	sub.w	r9, r3, r1
 8006d44:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006d48:	1c7b      	adds	r3, r7, #1
 8006d4a:	444b      	add	r3, r9
 8006d4c:	106d      	asrs	r5, r5, #1
 8006d4e:	429d      	cmp	r5, r3
 8006d50:	bf38      	it	cc
 8006d52:	461d      	movcc	r5, r3
 8006d54:	0553      	lsls	r3, r2, #21
 8006d56:	d527      	bpl.n	8006da8 <__ssputs_r+0x8c>
 8006d58:	4629      	mov	r1, r5
 8006d5a:	f7ff fcb1 	bl	80066c0 <_malloc_r>
 8006d5e:	4606      	mov	r6, r0
 8006d60:	b360      	cbz	r0, 8006dbc <__ssputs_r+0xa0>
 8006d62:	464a      	mov	r2, r9
 8006d64:	6921      	ldr	r1, [r4, #16]
 8006d66:	f7ff ff65 	bl	8006c34 <memcpy>
 8006d6a:	89a3      	ldrh	r3, [r4, #12]
 8006d6c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006d70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d74:	81a3      	strh	r3, [r4, #12]
 8006d76:	6126      	str	r6, [r4, #16]
 8006d78:	444e      	add	r6, r9
 8006d7a:	6026      	str	r6, [r4, #0]
 8006d7c:	463e      	mov	r6, r7
 8006d7e:	6165      	str	r5, [r4, #20]
 8006d80:	eba5 0509 	sub.w	r5, r5, r9
 8006d84:	60a5      	str	r5, [r4, #8]
 8006d86:	42be      	cmp	r6, r7
 8006d88:	d900      	bls.n	8006d8c <__ssputs_r+0x70>
 8006d8a:	463e      	mov	r6, r7
 8006d8c:	4632      	mov	r2, r6
 8006d8e:	4641      	mov	r1, r8
 8006d90:	6820      	ldr	r0, [r4, #0]
 8006d92:	f000 fb6b 	bl	800746c <memmove>
 8006d96:	2000      	movs	r0, #0
 8006d98:	68a3      	ldr	r3, [r4, #8]
 8006d9a:	1b9b      	subs	r3, r3, r6
 8006d9c:	60a3      	str	r3, [r4, #8]
 8006d9e:	6823      	ldr	r3, [r4, #0]
 8006da0:	4433      	add	r3, r6
 8006da2:	6023      	str	r3, [r4, #0]
 8006da4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006da8:	462a      	mov	r2, r5
 8006daa:	f000 fb8e 	bl	80074ca <_realloc_r>
 8006dae:	4606      	mov	r6, r0
 8006db0:	2800      	cmp	r0, #0
 8006db2:	d1e0      	bne.n	8006d76 <__ssputs_r+0x5a>
 8006db4:	4650      	mov	r0, sl
 8006db6:	6921      	ldr	r1, [r4, #16]
 8006db8:	f7ff ff68 	bl	8006c8c <_free_r>
 8006dbc:	230c      	movs	r3, #12
 8006dbe:	f8ca 3000 	str.w	r3, [sl]
 8006dc2:	89a3      	ldrh	r3, [r4, #12]
 8006dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8006dc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006dcc:	81a3      	strh	r3, [r4, #12]
 8006dce:	e7e9      	b.n	8006da4 <__ssputs_r+0x88>

08006dd0 <_svfiprintf_r>:
 8006dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dd4:	4698      	mov	r8, r3
 8006dd6:	898b      	ldrh	r3, [r1, #12]
 8006dd8:	4607      	mov	r7, r0
 8006dda:	061b      	lsls	r3, r3, #24
 8006ddc:	460d      	mov	r5, r1
 8006dde:	4614      	mov	r4, r2
 8006de0:	b09d      	sub	sp, #116	; 0x74
 8006de2:	d50e      	bpl.n	8006e02 <_svfiprintf_r+0x32>
 8006de4:	690b      	ldr	r3, [r1, #16]
 8006de6:	b963      	cbnz	r3, 8006e02 <_svfiprintf_r+0x32>
 8006de8:	2140      	movs	r1, #64	; 0x40
 8006dea:	f7ff fc69 	bl	80066c0 <_malloc_r>
 8006dee:	6028      	str	r0, [r5, #0]
 8006df0:	6128      	str	r0, [r5, #16]
 8006df2:	b920      	cbnz	r0, 8006dfe <_svfiprintf_r+0x2e>
 8006df4:	230c      	movs	r3, #12
 8006df6:	603b      	str	r3, [r7, #0]
 8006df8:	f04f 30ff 	mov.w	r0, #4294967295
 8006dfc:	e0d0      	b.n	8006fa0 <_svfiprintf_r+0x1d0>
 8006dfe:	2340      	movs	r3, #64	; 0x40
 8006e00:	616b      	str	r3, [r5, #20]
 8006e02:	2300      	movs	r3, #0
 8006e04:	9309      	str	r3, [sp, #36]	; 0x24
 8006e06:	2320      	movs	r3, #32
 8006e08:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006e0c:	2330      	movs	r3, #48	; 0x30
 8006e0e:	f04f 0901 	mov.w	r9, #1
 8006e12:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e16:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8006fb8 <_svfiprintf_r+0x1e8>
 8006e1a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006e1e:	4623      	mov	r3, r4
 8006e20:	469a      	mov	sl, r3
 8006e22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e26:	b10a      	cbz	r2, 8006e2c <_svfiprintf_r+0x5c>
 8006e28:	2a25      	cmp	r2, #37	; 0x25
 8006e2a:	d1f9      	bne.n	8006e20 <_svfiprintf_r+0x50>
 8006e2c:	ebba 0b04 	subs.w	fp, sl, r4
 8006e30:	d00b      	beq.n	8006e4a <_svfiprintf_r+0x7a>
 8006e32:	465b      	mov	r3, fp
 8006e34:	4622      	mov	r2, r4
 8006e36:	4629      	mov	r1, r5
 8006e38:	4638      	mov	r0, r7
 8006e3a:	f7ff ff6f 	bl	8006d1c <__ssputs_r>
 8006e3e:	3001      	adds	r0, #1
 8006e40:	f000 80a9 	beq.w	8006f96 <_svfiprintf_r+0x1c6>
 8006e44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e46:	445a      	add	r2, fp
 8006e48:	9209      	str	r2, [sp, #36]	; 0x24
 8006e4a:	f89a 3000 	ldrb.w	r3, [sl]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	f000 80a1 	beq.w	8006f96 <_svfiprintf_r+0x1c6>
 8006e54:	2300      	movs	r3, #0
 8006e56:	f04f 32ff 	mov.w	r2, #4294967295
 8006e5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006e5e:	f10a 0a01 	add.w	sl, sl, #1
 8006e62:	9304      	str	r3, [sp, #16]
 8006e64:	9307      	str	r3, [sp, #28]
 8006e66:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006e6a:	931a      	str	r3, [sp, #104]	; 0x68
 8006e6c:	4654      	mov	r4, sl
 8006e6e:	2205      	movs	r2, #5
 8006e70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e74:	4850      	ldr	r0, [pc, #320]	; (8006fb8 <_svfiprintf_r+0x1e8>)
 8006e76:	f000 fb13 	bl	80074a0 <memchr>
 8006e7a:	9a04      	ldr	r2, [sp, #16]
 8006e7c:	b9d8      	cbnz	r0, 8006eb6 <_svfiprintf_r+0xe6>
 8006e7e:	06d0      	lsls	r0, r2, #27
 8006e80:	bf44      	itt	mi
 8006e82:	2320      	movmi	r3, #32
 8006e84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e88:	0711      	lsls	r1, r2, #28
 8006e8a:	bf44      	itt	mi
 8006e8c:	232b      	movmi	r3, #43	; 0x2b
 8006e8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e92:	f89a 3000 	ldrb.w	r3, [sl]
 8006e96:	2b2a      	cmp	r3, #42	; 0x2a
 8006e98:	d015      	beq.n	8006ec6 <_svfiprintf_r+0xf6>
 8006e9a:	4654      	mov	r4, sl
 8006e9c:	2000      	movs	r0, #0
 8006e9e:	f04f 0c0a 	mov.w	ip, #10
 8006ea2:	9a07      	ldr	r2, [sp, #28]
 8006ea4:	4621      	mov	r1, r4
 8006ea6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006eaa:	3b30      	subs	r3, #48	; 0x30
 8006eac:	2b09      	cmp	r3, #9
 8006eae:	d94d      	bls.n	8006f4c <_svfiprintf_r+0x17c>
 8006eb0:	b1b0      	cbz	r0, 8006ee0 <_svfiprintf_r+0x110>
 8006eb2:	9207      	str	r2, [sp, #28]
 8006eb4:	e014      	b.n	8006ee0 <_svfiprintf_r+0x110>
 8006eb6:	eba0 0308 	sub.w	r3, r0, r8
 8006eba:	fa09 f303 	lsl.w	r3, r9, r3
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	46a2      	mov	sl, r4
 8006ec2:	9304      	str	r3, [sp, #16]
 8006ec4:	e7d2      	b.n	8006e6c <_svfiprintf_r+0x9c>
 8006ec6:	9b03      	ldr	r3, [sp, #12]
 8006ec8:	1d19      	adds	r1, r3, #4
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	9103      	str	r1, [sp, #12]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	bfbb      	ittet	lt
 8006ed2:	425b      	neglt	r3, r3
 8006ed4:	f042 0202 	orrlt.w	r2, r2, #2
 8006ed8:	9307      	strge	r3, [sp, #28]
 8006eda:	9307      	strlt	r3, [sp, #28]
 8006edc:	bfb8      	it	lt
 8006ede:	9204      	strlt	r2, [sp, #16]
 8006ee0:	7823      	ldrb	r3, [r4, #0]
 8006ee2:	2b2e      	cmp	r3, #46	; 0x2e
 8006ee4:	d10c      	bne.n	8006f00 <_svfiprintf_r+0x130>
 8006ee6:	7863      	ldrb	r3, [r4, #1]
 8006ee8:	2b2a      	cmp	r3, #42	; 0x2a
 8006eea:	d134      	bne.n	8006f56 <_svfiprintf_r+0x186>
 8006eec:	9b03      	ldr	r3, [sp, #12]
 8006eee:	3402      	adds	r4, #2
 8006ef0:	1d1a      	adds	r2, r3, #4
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	9203      	str	r2, [sp, #12]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	bfb8      	it	lt
 8006efa:	f04f 33ff 	movlt.w	r3, #4294967295
 8006efe:	9305      	str	r3, [sp, #20]
 8006f00:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8006fbc <_svfiprintf_r+0x1ec>
 8006f04:	2203      	movs	r2, #3
 8006f06:	4650      	mov	r0, sl
 8006f08:	7821      	ldrb	r1, [r4, #0]
 8006f0a:	f000 fac9 	bl	80074a0 <memchr>
 8006f0e:	b138      	cbz	r0, 8006f20 <_svfiprintf_r+0x150>
 8006f10:	2240      	movs	r2, #64	; 0x40
 8006f12:	9b04      	ldr	r3, [sp, #16]
 8006f14:	eba0 000a 	sub.w	r0, r0, sl
 8006f18:	4082      	lsls	r2, r0
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	3401      	adds	r4, #1
 8006f1e:	9304      	str	r3, [sp, #16]
 8006f20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f24:	2206      	movs	r2, #6
 8006f26:	4826      	ldr	r0, [pc, #152]	; (8006fc0 <_svfiprintf_r+0x1f0>)
 8006f28:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006f2c:	f000 fab8 	bl	80074a0 <memchr>
 8006f30:	2800      	cmp	r0, #0
 8006f32:	d038      	beq.n	8006fa6 <_svfiprintf_r+0x1d6>
 8006f34:	4b23      	ldr	r3, [pc, #140]	; (8006fc4 <_svfiprintf_r+0x1f4>)
 8006f36:	bb1b      	cbnz	r3, 8006f80 <_svfiprintf_r+0x1b0>
 8006f38:	9b03      	ldr	r3, [sp, #12]
 8006f3a:	3307      	adds	r3, #7
 8006f3c:	f023 0307 	bic.w	r3, r3, #7
 8006f40:	3308      	adds	r3, #8
 8006f42:	9303      	str	r3, [sp, #12]
 8006f44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f46:	4433      	add	r3, r6
 8006f48:	9309      	str	r3, [sp, #36]	; 0x24
 8006f4a:	e768      	b.n	8006e1e <_svfiprintf_r+0x4e>
 8006f4c:	460c      	mov	r4, r1
 8006f4e:	2001      	movs	r0, #1
 8006f50:	fb0c 3202 	mla	r2, ip, r2, r3
 8006f54:	e7a6      	b.n	8006ea4 <_svfiprintf_r+0xd4>
 8006f56:	2300      	movs	r3, #0
 8006f58:	f04f 0c0a 	mov.w	ip, #10
 8006f5c:	4619      	mov	r1, r3
 8006f5e:	3401      	adds	r4, #1
 8006f60:	9305      	str	r3, [sp, #20]
 8006f62:	4620      	mov	r0, r4
 8006f64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f68:	3a30      	subs	r2, #48	; 0x30
 8006f6a:	2a09      	cmp	r2, #9
 8006f6c:	d903      	bls.n	8006f76 <_svfiprintf_r+0x1a6>
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d0c6      	beq.n	8006f00 <_svfiprintf_r+0x130>
 8006f72:	9105      	str	r1, [sp, #20]
 8006f74:	e7c4      	b.n	8006f00 <_svfiprintf_r+0x130>
 8006f76:	4604      	mov	r4, r0
 8006f78:	2301      	movs	r3, #1
 8006f7a:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f7e:	e7f0      	b.n	8006f62 <_svfiprintf_r+0x192>
 8006f80:	ab03      	add	r3, sp, #12
 8006f82:	9300      	str	r3, [sp, #0]
 8006f84:	462a      	mov	r2, r5
 8006f86:	4638      	mov	r0, r7
 8006f88:	4b0f      	ldr	r3, [pc, #60]	; (8006fc8 <_svfiprintf_r+0x1f8>)
 8006f8a:	a904      	add	r1, sp, #16
 8006f8c:	f3af 8000 	nop.w
 8006f90:	1c42      	adds	r2, r0, #1
 8006f92:	4606      	mov	r6, r0
 8006f94:	d1d6      	bne.n	8006f44 <_svfiprintf_r+0x174>
 8006f96:	89ab      	ldrh	r3, [r5, #12]
 8006f98:	065b      	lsls	r3, r3, #25
 8006f9a:	f53f af2d 	bmi.w	8006df8 <_svfiprintf_r+0x28>
 8006f9e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006fa0:	b01d      	add	sp, #116	; 0x74
 8006fa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fa6:	ab03      	add	r3, sp, #12
 8006fa8:	9300      	str	r3, [sp, #0]
 8006faa:	462a      	mov	r2, r5
 8006fac:	4638      	mov	r0, r7
 8006fae:	4b06      	ldr	r3, [pc, #24]	; (8006fc8 <_svfiprintf_r+0x1f8>)
 8006fb0:	a904      	add	r1, sp, #16
 8006fb2:	f000 f87d 	bl	80070b0 <_printf_i>
 8006fb6:	e7eb      	b.n	8006f90 <_svfiprintf_r+0x1c0>
 8006fb8:	08007d98 	.word	0x08007d98
 8006fbc:	08007d9e 	.word	0x08007d9e
 8006fc0:	08007da2 	.word	0x08007da2
 8006fc4:	00000000 	.word	0x00000000
 8006fc8:	08006d1d 	.word	0x08006d1d

08006fcc <_printf_common>:
 8006fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fd0:	4616      	mov	r6, r2
 8006fd2:	4699      	mov	r9, r3
 8006fd4:	688a      	ldr	r2, [r1, #8]
 8006fd6:	690b      	ldr	r3, [r1, #16]
 8006fd8:	4607      	mov	r7, r0
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	bfb8      	it	lt
 8006fde:	4613      	movlt	r3, r2
 8006fe0:	6033      	str	r3, [r6, #0]
 8006fe2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006fe6:	460c      	mov	r4, r1
 8006fe8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006fec:	b10a      	cbz	r2, 8006ff2 <_printf_common+0x26>
 8006fee:	3301      	adds	r3, #1
 8006ff0:	6033      	str	r3, [r6, #0]
 8006ff2:	6823      	ldr	r3, [r4, #0]
 8006ff4:	0699      	lsls	r1, r3, #26
 8006ff6:	bf42      	ittt	mi
 8006ff8:	6833      	ldrmi	r3, [r6, #0]
 8006ffa:	3302      	addmi	r3, #2
 8006ffc:	6033      	strmi	r3, [r6, #0]
 8006ffe:	6825      	ldr	r5, [r4, #0]
 8007000:	f015 0506 	ands.w	r5, r5, #6
 8007004:	d106      	bne.n	8007014 <_printf_common+0x48>
 8007006:	f104 0a19 	add.w	sl, r4, #25
 800700a:	68e3      	ldr	r3, [r4, #12]
 800700c:	6832      	ldr	r2, [r6, #0]
 800700e:	1a9b      	subs	r3, r3, r2
 8007010:	42ab      	cmp	r3, r5
 8007012:	dc2b      	bgt.n	800706c <_printf_common+0xa0>
 8007014:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007018:	1e13      	subs	r3, r2, #0
 800701a:	6822      	ldr	r2, [r4, #0]
 800701c:	bf18      	it	ne
 800701e:	2301      	movne	r3, #1
 8007020:	0692      	lsls	r2, r2, #26
 8007022:	d430      	bmi.n	8007086 <_printf_common+0xba>
 8007024:	4649      	mov	r1, r9
 8007026:	4638      	mov	r0, r7
 8007028:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800702c:	47c0      	blx	r8
 800702e:	3001      	adds	r0, #1
 8007030:	d023      	beq.n	800707a <_printf_common+0xae>
 8007032:	6823      	ldr	r3, [r4, #0]
 8007034:	6922      	ldr	r2, [r4, #16]
 8007036:	f003 0306 	and.w	r3, r3, #6
 800703a:	2b04      	cmp	r3, #4
 800703c:	bf14      	ite	ne
 800703e:	2500      	movne	r5, #0
 8007040:	6833      	ldreq	r3, [r6, #0]
 8007042:	f04f 0600 	mov.w	r6, #0
 8007046:	bf08      	it	eq
 8007048:	68e5      	ldreq	r5, [r4, #12]
 800704a:	f104 041a 	add.w	r4, r4, #26
 800704e:	bf08      	it	eq
 8007050:	1aed      	subeq	r5, r5, r3
 8007052:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007056:	bf08      	it	eq
 8007058:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800705c:	4293      	cmp	r3, r2
 800705e:	bfc4      	itt	gt
 8007060:	1a9b      	subgt	r3, r3, r2
 8007062:	18ed      	addgt	r5, r5, r3
 8007064:	42b5      	cmp	r5, r6
 8007066:	d11a      	bne.n	800709e <_printf_common+0xd2>
 8007068:	2000      	movs	r0, #0
 800706a:	e008      	b.n	800707e <_printf_common+0xb2>
 800706c:	2301      	movs	r3, #1
 800706e:	4652      	mov	r2, sl
 8007070:	4649      	mov	r1, r9
 8007072:	4638      	mov	r0, r7
 8007074:	47c0      	blx	r8
 8007076:	3001      	adds	r0, #1
 8007078:	d103      	bne.n	8007082 <_printf_common+0xb6>
 800707a:	f04f 30ff 	mov.w	r0, #4294967295
 800707e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007082:	3501      	adds	r5, #1
 8007084:	e7c1      	b.n	800700a <_printf_common+0x3e>
 8007086:	2030      	movs	r0, #48	; 0x30
 8007088:	18e1      	adds	r1, r4, r3
 800708a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800708e:	1c5a      	adds	r2, r3, #1
 8007090:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007094:	4422      	add	r2, r4
 8007096:	3302      	adds	r3, #2
 8007098:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800709c:	e7c2      	b.n	8007024 <_printf_common+0x58>
 800709e:	2301      	movs	r3, #1
 80070a0:	4622      	mov	r2, r4
 80070a2:	4649      	mov	r1, r9
 80070a4:	4638      	mov	r0, r7
 80070a6:	47c0      	blx	r8
 80070a8:	3001      	adds	r0, #1
 80070aa:	d0e6      	beq.n	800707a <_printf_common+0xae>
 80070ac:	3601      	adds	r6, #1
 80070ae:	e7d9      	b.n	8007064 <_printf_common+0x98>

080070b0 <_printf_i>:
 80070b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80070b4:	7e0f      	ldrb	r7, [r1, #24]
 80070b6:	4691      	mov	r9, r2
 80070b8:	2f78      	cmp	r7, #120	; 0x78
 80070ba:	4680      	mov	r8, r0
 80070bc:	460c      	mov	r4, r1
 80070be:	469a      	mov	sl, r3
 80070c0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80070c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80070c6:	d807      	bhi.n	80070d8 <_printf_i+0x28>
 80070c8:	2f62      	cmp	r7, #98	; 0x62
 80070ca:	d80a      	bhi.n	80070e2 <_printf_i+0x32>
 80070cc:	2f00      	cmp	r7, #0
 80070ce:	f000 80d5 	beq.w	800727c <_printf_i+0x1cc>
 80070d2:	2f58      	cmp	r7, #88	; 0x58
 80070d4:	f000 80c1 	beq.w	800725a <_printf_i+0x1aa>
 80070d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80070dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80070e0:	e03a      	b.n	8007158 <_printf_i+0xa8>
 80070e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80070e6:	2b15      	cmp	r3, #21
 80070e8:	d8f6      	bhi.n	80070d8 <_printf_i+0x28>
 80070ea:	a101      	add	r1, pc, #4	; (adr r1, 80070f0 <_printf_i+0x40>)
 80070ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80070f0:	08007149 	.word	0x08007149
 80070f4:	0800715d 	.word	0x0800715d
 80070f8:	080070d9 	.word	0x080070d9
 80070fc:	080070d9 	.word	0x080070d9
 8007100:	080070d9 	.word	0x080070d9
 8007104:	080070d9 	.word	0x080070d9
 8007108:	0800715d 	.word	0x0800715d
 800710c:	080070d9 	.word	0x080070d9
 8007110:	080070d9 	.word	0x080070d9
 8007114:	080070d9 	.word	0x080070d9
 8007118:	080070d9 	.word	0x080070d9
 800711c:	08007263 	.word	0x08007263
 8007120:	08007189 	.word	0x08007189
 8007124:	0800721d 	.word	0x0800721d
 8007128:	080070d9 	.word	0x080070d9
 800712c:	080070d9 	.word	0x080070d9
 8007130:	08007285 	.word	0x08007285
 8007134:	080070d9 	.word	0x080070d9
 8007138:	08007189 	.word	0x08007189
 800713c:	080070d9 	.word	0x080070d9
 8007140:	080070d9 	.word	0x080070d9
 8007144:	08007225 	.word	0x08007225
 8007148:	682b      	ldr	r3, [r5, #0]
 800714a:	1d1a      	adds	r2, r3, #4
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	602a      	str	r2, [r5, #0]
 8007150:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007154:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007158:	2301      	movs	r3, #1
 800715a:	e0a0      	b.n	800729e <_printf_i+0x1ee>
 800715c:	6820      	ldr	r0, [r4, #0]
 800715e:	682b      	ldr	r3, [r5, #0]
 8007160:	0607      	lsls	r7, r0, #24
 8007162:	f103 0104 	add.w	r1, r3, #4
 8007166:	6029      	str	r1, [r5, #0]
 8007168:	d501      	bpl.n	800716e <_printf_i+0xbe>
 800716a:	681e      	ldr	r6, [r3, #0]
 800716c:	e003      	b.n	8007176 <_printf_i+0xc6>
 800716e:	0646      	lsls	r6, r0, #25
 8007170:	d5fb      	bpl.n	800716a <_printf_i+0xba>
 8007172:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007176:	2e00      	cmp	r6, #0
 8007178:	da03      	bge.n	8007182 <_printf_i+0xd2>
 800717a:	232d      	movs	r3, #45	; 0x2d
 800717c:	4276      	negs	r6, r6
 800717e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007182:	230a      	movs	r3, #10
 8007184:	4859      	ldr	r0, [pc, #356]	; (80072ec <_printf_i+0x23c>)
 8007186:	e012      	b.n	80071ae <_printf_i+0xfe>
 8007188:	682b      	ldr	r3, [r5, #0]
 800718a:	6820      	ldr	r0, [r4, #0]
 800718c:	1d19      	adds	r1, r3, #4
 800718e:	6029      	str	r1, [r5, #0]
 8007190:	0605      	lsls	r5, r0, #24
 8007192:	d501      	bpl.n	8007198 <_printf_i+0xe8>
 8007194:	681e      	ldr	r6, [r3, #0]
 8007196:	e002      	b.n	800719e <_printf_i+0xee>
 8007198:	0641      	lsls	r1, r0, #25
 800719a:	d5fb      	bpl.n	8007194 <_printf_i+0xe4>
 800719c:	881e      	ldrh	r6, [r3, #0]
 800719e:	2f6f      	cmp	r7, #111	; 0x6f
 80071a0:	bf0c      	ite	eq
 80071a2:	2308      	moveq	r3, #8
 80071a4:	230a      	movne	r3, #10
 80071a6:	4851      	ldr	r0, [pc, #324]	; (80072ec <_printf_i+0x23c>)
 80071a8:	2100      	movs	r1, #0
 80071aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80071ae:	6865      	ldr	r5, [r4, #4]
 80071b0:	2d00      	cmp	r5, #0
 80071b2:	bfa8      	it	ge
 80071b4:	6821      	ldrge	r1, [r4, #0]
 80071b6:	60a5      	str	r5, [r4, #8]
 80071b8:	bfa4      	itt	ge
 80071ba:	f021 0104 	bicge.w	r1, r1, #4
 80071be:	6021      	strge	r1, [r4, #0]
 80071c0:	b90e      	cbnz	r6, 80071c6 <_printf_i+0x116>
 80071c2:	2d00      	cmp	r5, #0
 80071c4:	d04b      	beq.n	800725e <_printf_i+0x1ae>
 80071c6:	4615      	mov	r5, r2
 80071c8:	fbb6 f1f3 	udiv	r1, r6, r3
 80071cc:	fb03 6711 	mls	r7, r3, r1, r6
 80071d0:	5dc7      	ldrb	r7, [r0, r7]
 80071d2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80071d6:	4637      	mov	r7, r6
 80071d8:	42bb      	cmp	r3, r7
 80071da:	460e      	mov	r6, r1
 80071dc:	d9f4      	bls.n	80071c8 <_printf_i+0x118>
 80071de:	2b08      	cmp	r3, #8
 80071e0:	d10b      	bne.n	80071fa <_printf_i+0x14a>
 80071e2:	6823      	ldr	r3, [r4, #0]
 80071e4:	07de      	lsls	r6, r3, #31
 80071e6:	d508      	bpl.n	80071fa <_printf_i+0x14a>
 80071e8:	6923      	ldr	r3, [r4, #16]
 80071ea:	6861      	ldr	r1, [r4, #4]
 80071ec:	4299      	cmp	r1, r3
 80071ee:	bfde      	ittt	le
 80071f0:	2330      	movle	r3, #48	; 0x30
 80071f2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80071f6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80071fa:	1b52      	subs	r2, r2, r5
 80071fc:	6122      	str	r2, [r4, #16]
 80071fe:	464b      	mov	r3, r9
 8007200:	4621      	mov	r1, r4
 8007202:	4640      	mov	r0, r8
 8007204:	f8cd a000 	str.w	sl, [sp]
 8007208:	aa03      	add	r2, sp, #12
 800720a:	f7ff fedf 	bl	8006fcc <_printf_common>
 800720e:	3001      	adds	r0, #1
 8007210:	d14a      	bne.n	80072a8 <_printf_i+0x1f8>
 8007212:	f04f 30ff 	mov.w	r0, #4294967295
 8007216:	b004      	add	sp, #16
 8007218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800721c:	6823      	ldr	r3, [r4, #0]
 800721e:	f043 0320 	orr.w	r3, r3, #32
 8007222:	6023      	str	r3, [r4, #0]
 8007224:	2778      	movs	r7, #120	; 0x78
 8007226:	4832      	ldr	r0, [pc, #200]	; (80072f0 <_printf_i+0x240>)
 8007228:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800722c:	6823      	ldr	r3, [r4, #0]
 800722e:	6829      	ldr	r1, [r5, #0]
 8007230:	061f      	lsls	r7, r3, #24
 8007232:	f851 6b04 	ldr.w	r6, [r1], #4
 8007236:	d402      	bmi.n	800723e <_printf_i+0x18e>
 8007238:	065f      	lsls	r7, r3, #25
 800723a:	bf48      	it	mi
 800723c:	b2b6      	uxthmi	r6, r6
 800723e:	07df      	lsls	r7, r3, #31
 8007240:	bf48      	it	mi
 8007242:	f043 0320 	orrmi.w	r3, r3, #32
 8007246:	6029      	str	r1, [r5, #0]
 8007248:	bf48      	it	mi
 800724a:	6023      	strmi	r3, [r4, #0]
 800724c:	b91e      	cbnz	r6, 8007256 <_printf_i+0x1a6>
 800724e:	6823      	ldr	r3, [r4, #0]
 8007250:	f023 0320 	bic.w	r3, r3, #32
 8007254:	6023      	str	r3, [r4, #0]
 8007256:	2310      	movs	r3, #16
 8007258:	e7a6      	b.n	80071a8 <_printf_i+0xf8>
 800725a:	4824      	ldr	r0, [pc, #144]	; (80072ec <_printf_i+0x23c>)
 800725c:	e7e4      	b.n	8007228 <_printf_i+0x178>
 800725e:	4615      	mov	r5, r2
 8007260:	e7bd      	b.n	80071de <_printf_i+0x12e>
 8007262:	682b      	ldr	r3, [r5, #0]
 8007264:	6826      	ldr	r6, [r4, #0]
 8007266:	1d18      	adds	r0, r3, #4
 8007268:	6961      	ldr	r1, [r4, #20]
 800726a:	6028      	str	r0, [r5, #0]
 800726c:	0635      	lsls	r5, r6, #24
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	d501      	bpl.n	8007276 <_printf_i+0x1c6>
 8007272:	6019      	str	r1, [r3, #0]
 8007274:	e002      	b.n	800727c <_printf_i+0x1cc>
 8007276:	0670      	lsls	r0, r6, #25
 8007278:	d5fb      	bpl.n	8007272 <_printf_i+0x1c2>
 800727a:	8019      	strh	r1, [r3, #0]
 800727c:	2300      	movs	r3, #0
 800727e:	4615      	mov	r5, r2
 8007280:	6123      	str	r3, [r4, #16]
 8007282:	e7bc      	b.n	80071fe <_printf_i+0x14e>
 8007284:	682b      	ldr	r3, [r5, #0]
 8007286:	2100      	movs	r1, #0
 8007288:	1d1a      	adds	r2, r3, #4
 800728a:	602a      	str	r2, [r5, #0]
 800728c:	681d      	ldr	r5, [r3, #0]
 800728e:	6862      	ldr	r2, [r4, #4]
 8007290:	4628      	mov	r0, r5
 8007292:	f000 f905 	bl	80074a0 <memchr>
 8007296:	b108      	cbz	r0, 800729c <_printf_i+0x1ec>
 8007298:	1b40      	subs	r0, r0, r5
 800729a:	6060      	str	r0, [r4, #4]
 800729c:	6863      	ldr	r3, [r4, #4]
 800729e:	6123      	str	r3, [r4, #16]
 80072a0:	2300      	movs	r3, #0
 80072a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072a6:	e7aa      	b.n	80071fe <_printf_i+0x14e>
 80072a8:	462a      	mov	r2, r5
 80072aa:	4649      	mov	r1, r9
 80072ac:	4640      	mov	r0, r8
 80072ae:	6923      	ldr	r3, [r4, #16]
 80072b0:	47d0      	blx	sl
 80072b2:	3001      	adds	r0, #1
 80072b4:	d0ad      	beq.n	8007212 <_printf_i+0x162>
 80072b6:	6823      	ldr	r3, [r4, #0]
 80072b8:	079b      	lsls	r3, r3, #30
 80072ba:	d413      	bmi.n	80072e4 <_printf_i+0x234>
 80072bc:	68e0      	ldr	r0, [r4, #12]
 80072be:	9b03      	ldr	r3, [sp, #12]
 80072c0:	4298      	cmp	r0, r3
 80072c2:	bfb8      	it	lt
 80072c4:	4618      	movlt	r0, r3
 80072c6:	e7a6      	b.n	8007216 <_printf_i+0x166>
 80072c8:	2301      	movs	r3, #1
 80072ca:	4632      	mov	r2, r6
 80072cc:	4649      	mov	r1, r9
 80072ce:	4640      	mov	r0, r8
 80072d0:	47d0      	blx	sl
 80072d2:	3001      	adds	r0, #1
 80072d4:	d09d      	beq.n	8007212 <_printf_i+0x162>
 80072d6:	3501      	adds	r5, #1
 80072d8:	68e3      	ldr	r3, [r4, #12]
 80072da:	9903      	ldr	r1, [sp, #12]
 80072dc:	1a5b      	subs	r3, r3, r1
 80072de:	42ab      	cmp	r3, r5
 80072e0:	dcf2      	bgt.n	80072c8 <_printf_i+0x218>
 80072e2:	e7eb      	b.n	80072bc <_printf_i+0x20c>
 80072e4:	2500      	movs	r5, #0
 80072e6:	f104 0619 	add.w	r6, r4, #25
 80072ea:	e7f5      	b.n	80072d8 <_printf_i+0x228>
 80072ec:	08007da9 	.word	0x08007da9
 80072f0:	08007dba 	.word	0x08007dba

080072f4 <__sflush_r>:
 80072f4:	898a      	ldrh	r2, [r1, #12]
 80072f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072f8:	4605      	mov	r5, r0
 80072fa:	0710      	lsls	r0, r2, #28
 80072fc:	460c      	mov	r4, r1
 80072fe:	d457      	bmi.n	80073b0 <__sflush_r+0xbc>
 8007300:	684b      	ldr	r3, [r1, #4]
 8007302:	2b00      	cmp	r3, #0
 8007304:	dc04      	bgt.n	8007310 <__sflush_r+0x1c>
 8007306:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007308:	2b00      	cmp	r3, #0
 800730a:	dc01      	bgt.n	8007310 <__sflush_r+0x1c>
 800730c:	2000      	movs	r0, #0
 800730e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007310:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007312:	2e00      	cmp	r6, #0
 8007314:	d0fa      	beq.n	800730c <__sflush_r+0x18>
 8007316:	2300      	movs	r3, #0
 8007318:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800731c:	682f      	ldr	r7, [r5, #0]
 800731e:	6a21      	ldr	r1, [r4, #32]
 8007320:	602b      	str	r3, [r5, #0]
 8007322:	d032      	beq.n	800738a <__sflush_r+0x96>
 8007324:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007326:	89a3      	ldrh	r3, [r4, #12]
 8007328:	075a      	lsls	r2, r3, #29
 800732a:	d505      	bpl.n	8007338 <__sflush_r+0x44>
 800732c:	6863      	ldr	r3, [r4, #4]
 800732e:	1ac0      	subs	r0, r0, r3
 8007330:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007332:	b10b      	cbz	r3, 8007338 <__sflush_r+0x44>
 8007334:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007336:	1ac0      	subs	r0, r0, r3
 8007338:	2300      	movs	r3, #0
 800733a:	4602      	mov	r2, r0
 800733c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800733e:	4628      	mov	r0, r5
 8007340:	6a21      	ldr	r1, [r4, #32]
 8007342:	47b0      	blx	r6
 8007344:	1c43      	adds	r3, r0, #1
 8007346:	89a3      	ldrh	r3, [r4, #12]
 8007348:	d106      	bne.n	8007358 <__sflush_r+0x64>
 800734a:	6829      	ldr	r1, [r5, #0]
 800734c:	291d      	cmp	r1, #29
 800734e:	d82b      	bhi.n	80073a8 <__sflush_r+0xb4>
 8007350:	4a28      	ldr	r2, [pc, #160]	; (80073f4 <__sflush_r+0x100>)
 8007352:	410a      	asrs	r2, r1
 8007354:	07d6      	lsls	r6, r2, #31
 8007356:	d427      	bmi.n	80073a8 <__sflush_r+0xb4>
 8007358:	2200      	movs	r2, #0
 800735a:	6062      	str	r2, [r4, #4]
 800735c:	6922      	ldr	r2, [r4, #16]
 800735e:	04d9      	lsls	r1, r3, #19
 8007360:	6022      	str	r2, [r4, #0]
 8007362:	d504      	bpl.n	800736e <__sflush_r+0x7a>
 8007364:	1c42      	adds	r2, r0, #1
 8007366:	d101      	bne.n	800736c <__sflush_r+0x78>
 8007368:	682b      	ldr	r3, [r5, #0]
 800736a:	b903      	cbnz	r3, 800736e <__sflush_r+0x7a>
 800736c:	6560      	str	r0, [r4, #84]	; 0x54
 800736e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007370:	602f      	str	r7, [r5, #0]
 8007372:	2900      	cmp	r1, #0
 8007374:	d0ca      	beq.n	800730c <__sflush_r+0x18>
 8007376:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800737a:	4299      	cmp	r1, r3
 800737c:	d002      	beq.n	8007384 <__sflush_r+0x90>
 800737e:	4628      	mov	r0, r5
 8007380:	f7ff fc84 	bl	8006c8c <_free_r>
 8007384:	2000      	movs	r0, #0
 8007386:	6360      	str	r0, [r4, #52]	; 0x34
 8007388:	e7c1      	b.n	800730e <__sflush_r+0x1a>
 800738a:	2301      	movs	r3, #1
 800738c:	4628      	mov	r0, r5
 800738e:	47b0      	blx	r6
 8007390:	1c41      	adds	r1, r0, #1
 8007392:	d1c8      	bne.n	8007326 <__sflush_r+0x32>
 8007394:	682b      	ldr	r3, [r5, #0]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d0c5      	beq.n	8007326 <__sflush_r+0x32>
 800739a:	2b1d      	cmp	r3, #29
 800739c:	d001      	beq.n	80073a2 <__sflush_r+0xae>
 800739e:	2b16      	cmp	r3, #22
 80073a0:	d101      	bne.n	80073a6 <__sflush_r+0xb2>
 80073a2:	602f      	str	r7, [r5, #0]
 80073a4:	e7b2      	b.n	800730c <__sflush_r+0x18>
 80073a6:	89a3      	ldrh	r3, [r4, #12]
 80073a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073ac:	81a3      	strh	r3, [r4, #12]
 80073ae:	e7ae      	b.n	800730e <__sflush_r+0x1a>
 80073b0:	690f      	ldr	r7, [r1, #16]
 80073b2:	2f00      	cmp	r7, #0
 80073b4:	d0aa      	beq.n	800730c <__sflush_r+0x18>
 80073b6:	0793      	lsls	r3, r2, #30
 80073b8:	bf18      	it	ne
 80073ba:	2300      	movne	r3, #0
 80073bc:	680e      	ldr	r6, [r1, #0]
 80073be:	bf08      	it	eq
 80073c0:	694b      	ldreq	r3, [r1, #20]
 80073c2:	1bf6      	subs	r6, r6, r7
 80073c4:	600f      	str	r7, [r1, #0]
 80073c6:	608b      	str	r3, [r1, #8]
 80073c8:	2e00      	cmp	r6, #0
 80073ca:	dd9f      	ble.n	800730c <__sflush_r+0x18>
 80073cc:	4633      	mov	r3, r6
 80073ce:	463a      	mov	r2, r7
 80073d0:	4628      	mov	r0, r5
 80073d2:	6a21      	ldr	r1, [r4, #32]
 80073d4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80073d8:	47e0      	blx	ip
 80073da:	2800      	cmp	r0, #0
 80073dc:	dc06      	bgt.n	80073ec <__sflush_r+0xf8>
 80073de:	89a3      	ldrh	r3, [r4, #12]
 80073e0:	f04f 30ff 	mov.w	r0, #4294967295
 80073e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073e8:	81a3      	strh	r3, [r4, #12]
 80073ea:	e790      	b.n	800730e <__sflush_r+0x1a>
 80073ec:	4407      	add	r7, r0
 80073ee:	1a36      	subs	r6, r6, r0
 80073f0:	e7ea      	b.n	80073c8 <__sflush_r+0xd4>
 80073f2:	bf00      	nop
 80073f4:	dfbffffe 	.word	0xdfbffffe

080073f8 <_fflush_r>:
 80073f8:	b538      	push	{r3, r4, r5, lr}
 80073fa:	690b      	ldr	r3, [r1, #16]
 80073fc:	4605      	mov	r5, r0
 80073fe:	460c      	mov	r4, r1
 8007400:	b913      	cbnz	r3, 8007408 <_fflush_r+0x10>
 8007402:	2500      	movs	r5, #0
 8007404:	4628      	mov	r0, r5
 8007406:	bd38      	pop	{r3, r4, r5, pc}
 8007408:	b118      	cbz	r0, 8007412 <_fflush_r+0x1a>
 800740a:	6a03      	ldr	r3, [r0, #32]
 800740c:	b90b      	cbnz	r3, 8007412 <_fflush_r+0x1a>
 800740e:	f7ff fa5d 	bl	80068cc <__sinit>
 8007412:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d0f3      	beq.n	8007402 <_fflush_r+0xa>
 800741a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800741c:	07d0      	lsls	r0, r2, #31
 800741e:	d404      	bmi.n	800742a <_fflush_r+0x32>
 8007420:	0599      	lsls	r1, r3, #22
 8007422:	d402      	bmi.n	800742a <_fflush_r+0x32>
 8007424:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007426:	f7ff fc03 	bl	8006c30 <__retarget_lock_acquire_recursive>
 800742a:	4628      	mov	r0, r5
 800742c:	4621      	mov	r1, r4
 800742e:	f7ff ff61 	bl	80072f4 <__sflush_r>
 8007432:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007434:	4605      	mov	r5, r0
 8007436:	07da      	lsls	r2, r3, #31
 8007438:	d4e4      	bmi.n	8007404 <_fflush_r+0xc>
 800743a:	89a3      	ldrh	r3, [r4, #12]
 800743c:	059b      	lsls	r3, r3, #22
 800743e:	d4e1      	bmi.n	8007404 <_fflush_r+0xc>
 8007440:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007442:	f7ff fbf6 	bl	8006c32 <__retarget_lock_release_recursive>
 8007446:	e7dd      	b.n	8007404 <_fflush_r+0xc>

08007448 <fiprintf>:
 8007448:	b40e      	push	{r1, r2, r3}
 800744a:	b503      	push	{r0, r1, lr}
 800744c:	4601      	mov	r1, r0
 800744e:	ab03      	add	r3, sp, #12
 8007450:	4805      	ldr	r0, [pc, #20]	; (8007468 <fiprintf+0x20>)
 8007452:	f853 2b04 	ldr.w	r2, [r3], #4
 8007456:	6800      	ldr	r0, [r0, #0]
 8007458:	9301      	str	r3, [sp, #4]
 800745a:	f000 f88d 	bl	8007578 <_vfiprintf_r>
 800745e:	b002      	add	sp, #8
 8007460:	f85d eb04 	ldr.w	lr, [sp], #4
 8007464:	b003      	add	sp, #12
 8007466:	4770      	bx	lr
 8007468:	200001d8 	.word	0x200001d8

0800746c <memmove>:
 800746c:	4288      	cmp	r0, r1
 800746e:	b510      	push	{r4, lr}
 8007470:	eb01 0402 	add.w	r4, r1, r2
 8007474:	d902      	bls.n	800747c <memmove+0x10>
 8007476:	4284      	cmp	r4, r0
 8007478:	4623      	mov	r3, r4
 800747a:	d807      	bhi.n	800748c <memmove+0x20>
 800747c:	1e43      	subs	r3, r0, #1
 800747e:	42a1      	cmp	r1, r4
 8007480:	d008      	beq.n	8007494 <memmove+0x28>
 8007482:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007486:	f803 2f01 	strb.w	r2, [r3, #1]!
 800748a:	e7f8      	b.n	800747e <memmove+0x12>
 800748c:	4601      	mov	r1, r0
 800748e:	4402      	add	r2, r0
 8007490:	428a      	cmp	r2, r1
 8007492:	d100      	bne.n	8007496 <memmove+0x2a>
 8007494:	bd10      	pop	{r4, pc}
 8007496:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800749a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800749e:	e7f7      	b.n	8007490 <memmove+0x24>

080074a0 <memchr>:
 80074a0:	4603      	mov	r3, r0
 80074a2:	b510      	push	{r4, lr}
 80074a4:	b2c9      	uxtb	r1, r1
 80074a6:	4402      	add	r2, r0
 80074a8:	4293      	cmp	r3, r2
 80074aa:	4618      	mov	r0, r3
 80074ac:	d101      	bne.n	80074b2 <memchr+0x12>
 80074ae:	2000      	movs	r0, #0
 80074b0:	e003      	b.n	80074ba <memchr+0x1a>
 80074b2:	7804      	ldrb	r4, [r0, #0]
 80074b4:	3301      	adds	r3, #1
 80074b6:	428c      	cmp	r4, r1
 80074b8:	d1f6      	bne.n	80074a8 <memchr+0x8>
 80074ba:	bd10      	pop	{r4, pc}

080074bc <abort>:
 80074bc:	2006      	movs	r0, #6
 80074be:	b508      	push	{r3, lr}
 80074c0:	f000 fa32 	bl	8007928 <raise>
 80074c4:	2001      	movs	r0, #1
 80074c6:	f7fa fcdf 	bl	8001e88 <_exit>

080074ca <_realloc_r>:
 80074ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074ce:	4680      	mov	r8, r0
 80074d0:	4614      	mov	r4, r2
 80074d2:	460e      	mov	r6, r1
 80074d4:	b921      	cbnz	r1, 80074e0 <_realloc_r+0x16>
 80074d6:	4611      	mov	r1, r2
 80074d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80074dc:	f7ff b8f0 	b.w	80066c0 <_malloc_r>
 80074e0:	b92a      	cbnz	r2, 80074ee <_realloc_r+0x24>
 80074e2:	f7ff fbd3 	bl	8006c8c <_free_r>
 80074e6:	4625      	mov	r5, r4
 80074e8:	4628      	mov	r0, r5
 80074ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074ee:	f000 fa37 	bl	8007960 <_malloc_usable_size_r>
 80074f2:	4284      	cmp	r4, r0
 80074f4:	4607      	mov	r7, r0
 80074f6:	d802      	bhi.n	80074fe <_realloc_r+0x34>
 80074f8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80074fc:	d812      	bhi.n	8007524 <_realloc_r+0x5a>
 80074fe:	4621      	mov	r1, r4
 8007500:	4640      	mov	r0, r8
 8007502:	f7ff f8dd 	bl	80066c0 <_malloc_r>
 8007506:	4605      	mov	r5, r0
 8007508:	2800      	cmp	r0, #0
 800750a:	d0ed      	beq.n	80074e8 <_realloc_r+0x1e>
 800750c:	42bc      	cmp	r4, r7
 800750e:	4622      	mov	r2, r4
 8007510:	4631      	mov	r1, r6
 8007512:	bf28      	it	cs
 8007514:	463a      	movcs	r2, r7
 8007516:	f7ff fb8d 	bl	8006c34 <memcpy>
 800751a:	4631      	mov	r1, r6
 800751c:	4640      	mov	r0, r8
 800751e:	f7ff fbb5 	bl	8006c8c <_free_r>
 8007522:	e7e1      	b.n	80074e8 <_realloc_r+0x1e>
 8007524:	4635      	mov	r5, r6
 8007526:	e7df      	b.n	80074e8 <_realloc_r+0x1e>

08007528 <__sfputc_r>:
 8007528:	6893      	ldr	r3, [r2, #8]
 800752a:	b410      	push	{r4}
 800752c:	3b01      	subs	r3, #1
 800752e:	2b00      	cmp	r3, #0
 8007530:	6093      	str	r3, [r2, #8]
 8007532:	da07      	bge.n	8007544 <__sfputc_r+0x1c>
 8007534:	6994      	ldr	r4, [r2, #24]
 8007536:	42a3      	cmp	r3, r4
 8007538:	db01      	blt.n	800753e <__sfputc_r+0x16>
 800753a:	290a      	cmp	r1, #10
 800753c:	d102      	bne.n	8007544 <__sfputc_r+0x1c>
 800753e:	bc10      	pop	{r4}
 8007540:	f000 b934 	b.w	80077ac <__swbuf_r>
 8007544:	6813      	ldr	r3, [r2, #0]
 8007546:	1c58      	adds	r0, r3, #1
 8007548:	6010      	str	r0, [r2, #0]
 800754a:	7019      	strb	r1, [r3, #0]
 800754c:	4608      	mov	r0, r1
 800754e:	bc10      	pop	{r4}
 8007550:	4770      	bx	lr

08007552 <__sfputs_r>:
 8007552:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007554:	4606      	mov	r6, r0
 8007556:	460f      	mov	r7, r1
 8007558:	4614      	mov	r4, r2
 800755a:	18d5      	adds	r5, r2, r3
 800755c:	42ac      	cmp	r4, r5
 800755e:	d101      	bne.n	8007564 <__sfputs_r+0x12>
 8007560:	2000      	movs	r0, #0
 8007562:	e007      	b.n	8007574 <__sfputs_r+0x22>
 8007564:	463a      	mov	r2, r7
 8007566:	4630      	mov	r0, r6
 8007568:	f814 1b01 	ldrb.w	r1, [r4], #1
 800756c:	f7ff ffdc 	bl	8007528 <__sfputc_r>
 8007570:	1c43      	adds	r3, r0, #1
 8007572:	d1f3      	bne.n	800755c <__sfputs_r+0xa>
 8007574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007578 <_vfiprintf_r>:
 8007578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800757c:	460d      	mov	r5, r1
 800757e:	4614      	mov	r4, r2
 8007580:	4698      	mov	r8, r3
 8007582:	4606      	mov	r6, r0
 8007584:	b09d      	sub	sp, #116	; 0x74
 8007586:	b118      	cbz	r0, 8007590 <_vfiprintf_r+0x18>
 8007588:	6a03      	ldr	r3, [r0, #32]
 800758a:	b90b      	cbnz	r3, 8007590 <_vfiprintf_r+0x18>
 800758c:	f7ff f99e 	bl	80068cc <__sinit>
 8007590:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007592:	07d9      	lsls	r1, r3, #31
 8007594:	d405      	bmi.n	80075a2 <_vfiprintf_r+0x2a>
 8007596:	89ab      	ldrh	r3, [r5, #12]
 8007598:	059a      	lsls	r2, r3, #22
 800759a:	d402      	bmi.n	80075a2 <_vfiprintf_r+0x2a>
 800759c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800759e:	f7ff fb47 	bl	8006c30 <__retarget_lock_acquire_recursive>
 80075a2:	89ab      	ldrh	r3, [r5, #12]
 80075a4:	071b      	lsls	r3, r3, #28
 80075a6:	d501      	bpl.n	80075ac <_vfiprintf_r+0x34>
 80075a8:	692b      	ldr	r3, [r5, #16]
 80075aa:	b99b      	cbnz	r3, 80075d4 <_vfiprintf_r+0x5c>
 80075ac:	4629      	mov	r1, r5
 80075ae:	4630      	mov	r0, r6
 80075b0:	f000 f93a 	bl	8007828 <__swsetup_r>
 80075b4:	b170      	cbz	r0, 80075d4 <_vfiprintf_r+0x5c>
 80075b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80075b8:	07dc      	lsls	r4, r3, #31
 80075ba:	d504      	bpl.n	80075c6 <_vfiprintf_r+0x4e>
 80075bc:	f04f 30ff 	mov.w	r0, #4294967295
 80075c0:	b01d      	add	sp, #116	; 0x74
 80075c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075c6:	89ab      	ldrh	r3, [r5, #12]
 80075c8:	0598      	lsls	r0, r3, #22
 80075ca:	d4f7      	bmi.n	80075bc <_vfiprintf_r+0x44>
 80075cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80075ce:	f7ff fb30 	bl	8006c32 <__retarget_lock_release_recursive>
 80075d2:	e7f3      	b.n	80075bc <_vfiprintf_r+0x44>
 80075d4:	2300      	movs	r3, #0
 80075d6:	9309      	str	r3, [sp, #36]	; 0x24
 80075d8:	2320      	movs	r3, #32
 80075da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80075de:	2330      	movs	r3, #48	; 0x30
 80075e0:	f04f 0901 	mov.w	r9, #1
 80075e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80075e8:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8007798 <_vfiprintf_r+0x220>
 80075ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80075f0:	4623      	mov	r3, r4
 80075f2:	469a      	mov	sl, r3
 80075f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80075f8:	b10a      	cbz	r2, 80075fe <_vfiprintf_r+0x86>
 80075fa:	2a25      	cmp	r2, #37	; 0x25
 80075fc:	d1f9      	bne.n	80075f2 <_vfiprintf_r+0x7a>
 80075fe:	ebba 0b04 	subs.w	fp, sl, r4
 8007602:	d00b      	beq.n	800761c <_vfiprintf_r+0xa4>
 8007604:	465b      	mov	r3, fp
 8007606:	4622      	mov	r2, r4
 8007608:	4629      	mov	r1, r5
 800760a:	4630      	mov	r0, r6
 800760c:	f7ff ffa1 	bl	8007552 <__sfputs_r>
 8007610:	3001      	adds	r0, #1
 8007612:	f000 80a9 	beq.w	8007768 <_vfiprintf_r+0x1f0>
 8007616:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007618:	445a      	add	r2, fp
 800761a:	9209      	str	r2, [sp, #36]	; 0x24
 800761c:	f89a 3000 	ldrb.w	r3, [sl]
 8007620:	2b00      	cmp	r3, #0
 8007622:	f000 80a1 	beq.w	8007768 <_vfiprintf_r+0x1f0>
 8007626:	2300      	movs	r3, #0
 8007628:	f04f 32ff 	mov.w	r2, #4294967295
 800762c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007630:	f10a 0a01 	add.w	sl, sl, #1
 8007634:	9304      	str	r3, [sp, #16]
 8007636:	9307      	str	r3, [sp, #28]
 8007638:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800763c:	931a      	str	r3, [sp, #104]	; 0x68
 800763e:	4654      	mov	r4, sl
 8007640:	2205      	movs	r2, #5
 8007642:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007646:	4854      	ldr	r0, [pc, #336]	; (8007798 <_vfiprintf_r+0x220>)
 8007648:	f7ff ff2a 	bl	80074a0 <memchr>
 800764c:	9a04      	ldr	r2, [sp, #16]
 800764e:	b9d8      	cbnz	r0, 8007688 <_vfiprintf_r+0x110>
 8007650:	06d1      	lsls	r1, r2, #27
 8007652:	bf44      	itt	mi
 8007654:	2320      	movmi	r3, #32
 8007656:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800765a:	0713      	lsls	r3, r2, #28
 800765c:	bf44      	itt	mi
 800765e:	232b      	movmi	r3, #43	; 0x2b
 8007660:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007664:	f89a 3000 	ldrb.w	r3, [sl]
 8007668:	2b2a      	cmp	r3, #42	; 0x2a
 800766a:	d015      	beq.n	8007698 <_vfiprintf_r+0x120>
 800766c:	4654      	mov	r4, sl
 800766e:	2000      	movs	r0, #0
 8007670:	f04f 0c0a 	mov.w	ip, #10
 8007674:	9a07      	ldr	r2, [sp, #28]
 8007676:	4621      	mov	r1, r4
 8007678:	f811 3b01 	ldrb.w	r3, [r1], #1
 800767c:	3b30      	subs	r3, #48	; 0x30
 800767e:	2b09      	cmp	r3, #9
 8007680:	d94d      	bls.n	800771e <_vfiprintf_r+0x1a6>
 8007682:	b1b0      	cbz	r0, 80076b2 <_vfiprintf_r+0x13a>
 8007684:	9207      	str	r2, [sp, #28]
 8007686:	e014      	b.n	80076b2 <_vfiprintf_r+0x13a>
 8007688:	eba0 0308 	sub.w	r3, r0, r8
 800768c:	fa09 f303 	lsl.w	r3, r9, r3
 8007690:	4313      	orrs	r3, r2
 8007692:	46a2      	mov	sl, r4
 8007694:	9304      	str	r3, [sp, #16]
 8007696:	e7d2      	b.n	800763e <_vfiprintf_r+0xc6>
 8007698:	9b03      	ldr	r3, [sp, #12]
 800769a:	1d19      	adds	r1, r3, #4
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	9103      	str	r1, [sp, #12]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	bfbb      	ittet	lt
 80076a4:	425b      	neglt	r3, r3
 80076a6:	f042 0202 	orrlt.w	r2, r2, #2
 80076aa:	9307      	strge	r3, [sp, #28]
 80076ac:	9307      	strlt	r3, [sp, #28]
 80076ae:	bfb8      	it	lt
 80076b0:	9204      	strlt	r2, [sp, #16]
 80076b2:	7823      	ldrb	r3, [r4, #0]
 80076b4:	2b2e      	cmp	r3, #46	; 0x2e
 80076b6:	d10c      	bne.n	80076d2 <_vfiprintf_r+0x15a>
 80076b8:	7863      	ldrb	r3, [r4, #1]
 80076ba:	2b2a      	cmp	r3, #42	; 0x2a
 80076bc:	d134      	bne.n	8007728 <_vfiprintf_r+0x1b0>
 80076be:	9b03      	ldr	r3, [sp, #12]
 80076c0:	3402      	adds	r4, #2
 80076c2:	1d1a      	adds	r2, r3, #4
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	9203      	str	r2, [sp, #12]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	bfb8      	it	lt
 80076cc:	f04f 33ff 	movlt.w	r3, #4294967295
 80076d0:	9305      	str	r3, [sp, #20]
 80076d2:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800779c <_vfiprintf_r+0x224>
 80076d6:	2203      	movs	r2, #3
 80076d8:	4650      	mov	r0, sl
 80076da:	7821      	ldrb	r1, [r4, #0]
 80076dc:	f7ff fee0 	bl	80074a0 <memchr>
 80076e0:	b138      	cbz	r0, 80076f2 <_vfiprintf_r+0x17a>
 80076e2:	2240      	movs	r2, #64	; 0x40
 80076e4:	9b04      	ldr	r3, [sp, #16]
 80076e6:	eba0 000a 	sub.w	r0, r0, sl
 80076ea:	4082      	lsls	r2, r0
 80076ec:	4313      	orrs	r3, r2
 80076ee:	3401      	adds	r4, #1
 80076f0:	9304      	str	r3, [sp, #16]
 80076f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076f6:	2206      	movs	r2, #6
 80076f8:	4829      	ldr	r0, [pc, #164]	; (80077a0 <_vfiprintf_r+0x228>)
 80076fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80076fe:	f7ff fecf 	bl	80074a0 <memchr>
 8007702:	2800      	cmp	r0, #0
 8007704:	d03f      	beq.n	8007786 <_vfiprintf_r+0x20e>
 8007706:	4b27      	ldr	r3, [pc, #156]	; (80077a4 <_vfiprintf_r+0x22c>)
 8007708:	bb1b      	cbnz	r3, 8007752 <_vfiprintf_r+0x1da>
 800770a:	9b03      	ldr	r3, [sp, #12]
 800770c:	3307      	adds	r3, #7
 800770e:	f023 0307 	bic.w	r3, r3, #7
 8007712:	3308      	adds	r3, #8
 8007714:	9303      	str	r3, [sp, #12]
 8007716:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007718:	443b      	add	r3, r7
 800771a:	9309      	str	r3, [sp, #36]	; 0x24
 800771c:	e768      	b.n	80075f0 <_vfiprintf_r+0x78>
 800771e:	460c      	mov	r4, r1
 8007720:	2001      	movs	r0, #1
 8007722:	fb0c 3202 	mla	r2, ip, r2, r3
 8007726:	e7a6      	b.n	8007676 <_vfiprintf_r+0xfe>
 8007728:	2300      	movs	r3, #0
 800772a:	f04f 0c0a 	mov.w	ip, #10
 800772e:	4619      	mov	r1, r3
 8007730:	3401      	adds	r4, #1
 8007732:	9305      	str	r3, [sp, #20]
 8007734:	4620      	mov	r0, r4
 8007736:	f810 2b01 	ldrb.w	r2, [r0], #1
 800773a:	3a30      	subs	r2, #48	; 0x30
 800773c:	2a09      	cmp	r2, #9
 800773e:	d903      	bls.n	8007748 <_vfiprintf_r+0x1d0>
 8007740:	2b00      	cmp	r3, #0
 8007742:	d0c6      	beq.n	80076d2 <_vfiprintf_r+0x15a>
 8007744:	9105      	str	r1, [sp, #20]
 8007746:	e7c4      	b.n	80076d2 <_vfiprintf_r+0x15a>
 8007748:	4604      	mov	r4, r0
 800774a:	2301      	movs	r3, #1
 800774c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007750:	e7f0      	b.n	8007734 <_vfiprintf_r+0x1bc>
 8007752:	ab03      	add	r3, sp, #12
 8007754:	9300      	str	r3, [sp, #0]
 8007756:	462a      	mov	r2, r5
 8007758:	4630      	mov	r0, r6
 800775a:	4b13      	ldr	r3, [pc, #76]	; (80077a8 <_vfiprintf_r+0x230>)
 800775c:	a904      	add	r1, sp, #16
 800775e:	f3af 8000 	nop.w
 8007762:	4607      	mov	r7, r0
 8007764:	1c78      	adds	r0, r7, #1
 8007766:	d1d6      	bne.n	8007716 <_vfiprintf_r+0x19e>
 8007768:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800776a:	07d9      	lsls	r1, r3, #31
 800776c:	d405      	bmi.n	800777a <_vfiprintf_r+0x202>
 800776e:	89ab      	ldrh	r3, [r5, #12]
 8007770:	059a      	lsls	r2, r3, #22
 8007772:	d402      	bmi.n	800777a <_vfiprintf_r+0x202>
 8007774:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007776:	f7ff fa5c 	bl	8006c32 <__retarget_lock_release_recursive>
 800777a:	89ab      	ldrh	r3, [r5, #12]
 800777c:	065b      	lsls	r3, r3, #25
 800777e:	f53f af1d 	bmi.w	80075bc <_vfiprintf_r+0x44>
 8007782:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007784:	e71c      	b.n	80075c0 <_vfiprintf_r+0x48>
 8007786:	ab03      	add	r3, sp, #12
 8007788:	9300      	str	r3, [sp, #0]
 800778a:	462a      	mov	r2, r5
 800778c:	4630      	mov	r0, r6
 800778e:	4b06      	ldr	r3, [pc, #24]	; (80077a8 <_vfiprintf_r+0x230>)
 8007790:	a904      	add	r1, sp, #16
 8007792:	f7ff fc8d 	bl	80070b0 <_printf_i>
 8007796:	e7e4      	b.n	8007762 <_vfiprintf_r+0x1ea>
 8007798:	08007d98 	.word	0x08007d98
 800779c:	08007d9e 	.word	0x08007d9e
 80077a0:	08007da2 	.word	0x08007da2
 80077a4:	00000000 	.word	0x00000000
 80077a8:	08007553 	.word	0x08007553

080077ac <__swbuf_r>:
 80077ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077ae:	460e      	mov	r6, r1
 80077b0:	4614      	mov	r4, r2
 80077b2:	4605      	mov	r5, r0
 80077b4:	b118      	cbz	r0, 80077be <__swbuf_r+0x12>
 80077b6:	6a03      	ldr	r3, [r0, #32]
 80077b8:	b90b      	cbnz	r3, 80077be <__swbuf_r+0x12>
 80077ba:	f7ff f887 	bl	80068cc <__sinit>
 80077be:	69a3      	ldr	r3, [r4, #24]
 80077c0:	60a3      	str	r3, [r4, #8]
 80077c2:	89a3      	ldrh	r3, [r4, #12]
 80077c4:	071a      	lsls	r2, r3, #28
 80077c6:	d525      	bpl.n	8007814 <__swbuf_r+0x68>
 80077c8:	6923      	ldr	r3, [r4, #16]
 80077ca:	b31b      	cbz	r3, 8007814 <__swbuf_r+0x68>
 80077cc:	6823      	ldr	r3, [r4, #0]
 80077ce:	6922      	ldr	r2, [r4, #16]
 80077d0:	b2f6      	uxtb	r6, r6
 80077d2:	1a98      	subs	r0, r3, r2
 80077d4:	6963      	ldr	r3, [r4, #20]
 80077d6:	4637      	mov	r7, r6
 80077d8:	4283      	cmp	r3, r0
 80077da:	dc04      	bgt.n	80077e6 <__swbuf_r+0x3a>
 80077dc:	4621      	mov	r1, r4
 80077de:	4628      	mov	r0, r5
 80077e0:	f7ff fe0a 	bl	80073f8 <_fflush_r>
 80077e4:	b9e0      	cbnz	r0, 8007820 <__swbuf_r+0x74>
 80077e6:	68a3      	ldr	r3, [r4, #8]
 80077e8:	3b01      	subs	r3, #1
 80077ea:	60a3      	str	r3, [r4, #8]
 80077ec:	6823      	ldr	r3, [r4, #0]
 80077ee:	1c5a      	adds	r2, r3, #1
 80077f0:	6022      	str	r2, [r4, #0]
 80077f2:	701e      	strb	r6, [r3, #0]
 80077f4:	6962      	ldr	r2, [r4, #20]
 80077f6:	1c43      	adds	r3, r0, #1
 80077f8:	429a      	cmp	r2, r3
 80077fa:	d004      	beq.n	8007806 <__swbuf_r+0x5a>
 80077fc:	89a3      	ldrh	r3, [r4, #12]
 80077fe:	07db      	lsls	r3, r3, #31
 8007800:	d506      	bpl.n	8007810 <__swbuf_r+0x64>
 8007802:	2e0a      	cmp	r6, #10
 8007804:	d104      	bne.n	8007810 <__swbuf_r+0x64>
 8007806:	4621      	mov	r1, r4
 8007808:	4628      	mov	r0, r5
 800780a:	f7ff fdf5 	bl	80073f8 <_fflush_r>
 800780e:	b938      	cbnz	r0, 8007820 <__swbuf_r+0x74>
 8007810:	4638      	mov	r0, r7
 8007812:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007814:	4621      	mov	r1, r4
 8007816:	4628      	mov	r0, r5
 8007818:	f000 f806 	bl	8007828 <__swsetup_r>
 800781c:	2800      	cmp	r0, #0
 800781e:	d0d5      	beq.n	80077cc <__swbuf_r+0x20>
 8007820:	f04f 37ff 	mov.w	r7, #4294967295
 8007824:	e7f4      	b.n	8007810 <__swbuf_r+0x64>
	...

08007828 <__swsetup_r>:
 8007828:	b538      	push	{r3, r4, r5, lr}
 800782a:	4b2a      	ldr	r3, [pc, #168]	; (80078d4 <__swsetup_r+0xac>)
 800782c:	4605      	mov	r5, r0
 800782e:	6818      	ldr	r0, [r3, #0]
 8007830:	460c      	mov	r4, r1
 8007832:	b118      	cbz	r0, 800783c <__swsetup_r+0x14>
 8007834:	6a03      	ldr	r3, [r0, #32]
 8007836:	b90b      	cbnz	r3, 800783c <__swsetup_r+0x14>
 8007838:	f7ff f848 	bl	80068cc <__sinit>
 800783c:	89a3      	ldrh	r3, [r4, #12]
 800783e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007842:	0718      	lsls	r0, r3, #28
 8007844:	d422      	bmi.n	800788c <__swsetup_r+0x64>
 8007846:	06d9      	lsls	r1, r3, #27
 8007848:	d407      	bmi.n	800785a <__swsetup_r+0x32>
 800784a:	2309      	movs	r3, #9
 800784c:	602b      	str	r3, [r5, #0]
 800784e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007852:	f04f 30ff 	mov.w	r0, #4294967295
 8007856:	81a3      	strh	r3, [r4, #12]
 8007858:	e034      	b.n	80078c4 <__swsetup_r+0x9c>
 800785a:	0758      	lsls	r0, r3, #29
 800785c:	d512      	bpl.n	8007884 <__swsetup_r+0x5c>
 800785e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007860:	b141      	cbz	r1, 8007874 <__swsetup_r+0x4c>
 8007862:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007866:	4299      	cmp	r1, r3
 8007868:	d002      	beq.n	8007870 <__swsetup_r+0x48>
 800786a:	4628      	mov	r0, r5
 800786c:	f7ff fa0e 	bl	8006c8c <_free_r>
 8007870:	2300      	movs	r3, #0
 8007872:	6363      	str	r3, [r4, #52]	; 0x34
 8007874:	89a3      	ldrh	r3, [r4, #12]
 8007876:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800787a:	81a3      	strh	r3, [r4, #12]
 800787c:	2300      	movs	r3, #0
 800787e:	6063      	str	r3, [r4, #4]
 8007880:	6923      	ldr	r3, [r4, #16]
 8007882:	6023      	str	r3, [r4, #0]
 8007884:	89a3      	ldrh	r3, [r4, #12]
 8007886:	f043 0308 	orr.w	r3, r3, #8
 800788a:	81a3      	strh	r3, [r4, #12]
 800788c:	6923      	ldr	r3, [r4, #16]
 800788e:	b94b      	cbnz	r3, 80078a4 <__swsetup_r+0x7c>
 8007890:	89a3      	ldrh	r3, [r4, #12]
 8007892:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007896:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800789a:	d003      	beq.n	80078a4 <__swsetup_r+0x7c>
 800789c:	4621      	mov	r1, r4
 800789e:	4628      	mov	r0, r5
 80078a0:	f000 f88b 	bl	80079ba <__smakebuf_r>
 80078a4:	89a0      	ldrh	r0, [r4, #12]
 80078a6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80078aa:	f010 0301 	ands.w	r3, r0, #1
 80078ae:	d00a      	beq.n	80078c6 <__swsetup_r+0x9e>
 80078b0:	2300      	movs	r3, #0
 80078b2:	60a3      	str	r3, [r4, #8]
 80078b4:	6963      	ldr	r3, [r4, #20]
 80078b6:	425b      	negs	r3, r3
 80078b8:	61a3      	str	r3, [r4, #24]
 80078ba:	6923      	ldr	r3, [r4, #16]
 80078bc:	b943      	cbnz	r3, 80078d0 <__swsetup_r+0xa8>
 80078be:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80078c2:	d1c4      	bne.n	800784e <__swsetup_r+0x26>
 80078c4:	bd38      	pop	{r3, r4, r5, pc}
 80078c6:	0781      	lsls	r1, r0, #30
 80078c8:	bf58      	it	pl
 80078ca:	6963      	ldrpl	r3, [r4, #20]
 80078cc:	60a3      	str	r3, [r4, #8]
 80078ce:	e7f4      	b.n	80078ba <__swsetup_r+0x92>
 80078d0:	2000      	movs	r0, #0
 80078d2:	e7f7      	b.n	80078c4 <__swsetup_r+0x9c>
 80078d4:	200001d8 	.word	0x200001d8

080078d8 <_raise_r>:
 80078d8:	291f      	cmp	r1, #31
 80078da:	b538      	push	{r3, r4, r5, lr}
 80078dc:	4604      	mov	r4, r0
 80078de:	460d      	mov	r5, r1
 80078e0:	d904      	bls.n	80078ec <_raise_r+0x14>
 80078e2:	2316      	movs	r3, #22
 80078e4:	6003      	str	r3, [r0, #0]
 80078e6:	f04f 30ff 	mov.w	r0, #4294967295
 80078ea:	bd38      	pop	{r3, r4, r5, pc}
 80078ec:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80078ee:	b112      	cbz	r2, 80078f6 <_raise_r+0x1e>
 80078f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80078f4:	b94b      	cbnz	r3, 800790a <_raise_r+0x32>
 80078f6:	4620      	mov	r0, r4
 80078f8:	f000 f830 	bl	800795c <_getpid_r>
 80078fc:	462a      	mov	r2, r5
 80078fe:	4601      	mov	r1, r0
 8007900:	4620      	mov	r0, r4
 8007902:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007906:	f000 b817 	b.w	8007938 <_kill_r>
 800790a:	2b01      	cmp	r3, #1
 800790c:	d00a      	beq.n	8007924 <_raise_r+0x4c>
 800790e:	1c59      	adds	r1, r3, #1
 8007910:	d103      	bne.n	800791a <_raise_r+0x42>
 8007912:	2316      	movs	r3, #22
 8007914:	6003      	str	r3, [r0, #0]
 8007916:	2001      	movs	r0, #1
 8007918:	e7e7      	b.n	80078ea <_raise_r+0x12>
 800791a:	2400      	movs	r4, #0
 800791c:	4628      	mov	r0, r5
 800791e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007922:	4798      	blx	r3
 8007924:	2000      	movs	r0, #0
 8007926:	e7e0      	b.n	80078ea <_raise_r+0x12>

08007928 <raise>:
 8007928:	4b02      	ldr	r3, [pc, #8]	; (8007934 <raise+0xc>)
 800792a:	4601      	mov	r1, r0
 800792c:	6818      	ldr	r0, [r3, #0]
 800792e:	f7ff bfd3 	b.w	80078d8 <_raise_r>
 8007932:	bf00      	nop
 8007934:	200001d8 	.word	0x200001d8

08007938 <_kill_r>:
 8007938:	b538      	push	{r3, r4, r5, lr}
 800793a:	2300      	movs	r3, #0
 800793c:	4d06      	ldr	r5, [pc, #24]	; (8007958 <_kill_r+0x20>)
 800793e:	4604      	mov	r4, r0
 8007940:	4608      	mov	r0, r1
 8007942:	4611      	mov	r1, r2
 8007944:	602b      	str	r3, [r5, #0]
 8007946:	f7fa fa97 	bl	8001e78 <_kill>
 800794a:	1c43      	adds	r3, r0, #1
 800794c:	d102      	bne.n	8007954 <_kill_r+0x1c>
 800794e:	682b      	ldr	r3, [r5, #0]
 8007950:	b103      	cbz	r3, 8007954 <_kill_r+0x1c>
 8007952:	6023      	str	r3, [r4, #0]
 8007954:	bd38      	pop	{r3, r4, r5, pc}
 8007956:	bf00      	nop
 8007958:	20000f28 	.word	0x20000f28

0800795c <_getpid_r>:
 800795c:	f7fa ba8a 	b.w	8001e74 <_getpid>

08007960 <_malloc_usable_size_r>:
 8007960:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007964:	1f18      	subs	r0, r3, #4
 8007966:	2b00      	cmp	r3, #0
 8007968:	bfbc      	itt	lt
 800796a:	580b      	ldrlt	r3, [r1, r0]
 800796c:	18c0      	addlt	r0, r0, r3
 800796e:	4770      	bx	lr

08007970 <__swhatbuf_r>:
 8007970:	b570      	push	{r4, r5, r6, lr}
 8007972:	460c      	mov	r4, r1
 8007974:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007978:	4615      	mov	r5, r2
 800797a:	2900      	cmp	r1, #0
 800797c:	461e      	mov	r6, r3
 800797e:	b096      	sub	sp, #88	; 0x58
 8007980:	da0c      	bge.n	800799c <__swhatbuf_r+0x2c>
 8007982:	89a3      	ldrh	r3, [r4, #12]
 8007984:	2100      	movs	r1, #0
 8007986:	f013 0f80 	tst.w	r3, #128	; 0x80
 800798a:	bf0c      	ite	eq
 800798c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007990:	2340      	movne	r3, #64	; 0x40
 8007992:	2000      	movs	r0, #0
 8007994:	6031      	str	r1, [r6, #0]
 8007996:	602b      	str	r3, [r5, #0]
 8007998:	b016      	add	sp, #88	; 0x58
 800799a:	bd70      	pop	{r4, r5, r6, pc}
 800799c:	466a      	mov	r2, sp
 800799e:	f000 f849 	bl	8007a34 <_fstat_r>
 80079a2:	2800      	cmp	r0, #0
 80079a4:	dbed      	blt.n	8007982 <__swhatbuf_r+0x12>
 80079a6:	9901      	ldr	r1, [sp, #4]
 80079a8:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80079ac:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80079b0:	4259      	negs	r1, r3
 80079b2:	4159      	adcs	r1, r3
 80079b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80079b8:	e7eb      	b.n	8007992 <__swhatbuf_r+0x22>

080079ba <__smakebuf_r>:
 80079ba:	898b      	ldrh	r3, [r1, #12]
 80079bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80079be:	079d      	lsls	r5, r3, #30
 80079c0:	4606      	mov	r6, r0
 80079c2:	460c      	mov	r4, r1
 80079c4:	d507      	bpl.n	80079d6 <__smakebuf_r+0x1c>
 80079c6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80079ca:	6023      	str	r3, [r4, #0]
 80079cc:	6123      	str	r3, [r4, #16]
 80079ce:	2301      	movs	r3, #1
 80079d0:	6163      	str	r3, [r4, #20]
 80079d2:	b002      	add	sp, #8
 80079d4:	bd70      	pop	{r4, r5, r6, pc}
 80079d6:	466a      	mov	r2, sp
 80079d8:	ab01      	add	r3, sp, #4
 80079da:	f7ff ffc9 	bl	8007970 <__swhatbuf_r>
 80079de:	9900      	ldr	r1, [sp, #0]
 80079e0:	4605      	mov	r5, r0
 80079e2:	4630      	mov	r0, r6
 80079e4:	f7fe fe6c 	bl	80066c0 <_malloc_r>
 80079e8:	b948      	cbnz	r0, 80079fe <__smakebuf_r+0x44>
 80079ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079ee:	059a      	lsls	r2, r3, #22
 80079f0:	d4ef      	bmi.n	80079d2 <__smakebuf_r+0x18>
 80079f2:	f023 0303 	bic.w	r3, r3, #3
 80079f6:	f043 0302 	orr.w	r3, r3, #2
 80079fa:	81a3      	strh	r3, [r4, #12]
 80079fc:	e7e3      	b.n	80079c6 <__smakebuf_r+0xc>
 80079fe:	89a3      	ldrh	r3, [r4, #12]
 8007a00:	6020      	str	r0, [r4, #0]
 8007a02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a06:	81a3      	strh	r3, [r4, #12]
 8007a08:	9b00      	ldr	r3, [sp, #0]
 8007a0a:	6120      	str	r0, [r4, #16]
 8007a0c:	6163      	str	r3, [r4, #20]
 8007a0e:	9b01      	ldr	r3, [sp, #4]
 8007a10:	b15b      	cbz	r3, 8007a2a <__smakebuf_r+0x70>
 8007a12:	4630      	mov	r0, r6
 8007a14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a18:	f000 f81e 	bl	8007a58 <_isatty_r>
 8007a1c:	b128      	cbz	r0, 8007a2a <__smakebuf_r+0x70>
 8007a1e:	89a3      	ldrh	r3, [r4, #12]
 8007a20:	f023 0303 	bic.w	r3, r3, #3
 8007a24:	f043 0301 	orr.w	r3, r3, #1
 8007a28:	81a3      	strh	r3, [r4, #12]
 8007a2a:	89a3      	ldrh	r3, [r4, #12]
 8007a2c:	431d      	orrs	r5, r3
 8007a2e:	81a5      	strh	r5, [r4, #12]
 8007a30:	e7cf      	b.n	80079d2 <__smakebuf_r+0x18>
	...

08007a34 <_fstat_r>:
 8007a34:	b538      	push	{r3, r4, r5, lr}
 8007a36:	2300      	movs	r3, #0
 8007a38:	4d06      	ldr	r5, [pc, #24]	; (8007a54 <_fstat_r+0x20>)
 8007a3a:	4604      	mov	r4, r0
 8007a3c:	4608      	mov	r0, r1
 8007a3e:	4611      	mov	r1, r2
 8007a40:	602b      	str	r3, [r5, #0]
 8007a42:	f7fa fa46 	bl	8001ed2 <_fstat>
 8007a46:	1c43      	adds	r3, r0, #1
 8007a48:	d102      	bne.n	8007a50 <_fstat_r+0x1c>
 8007a4a:	682b      	ldr	r3, [r5, #0]
 8007a4c:	b103      	cbz	r3, 8007a50 <_fstat_r+0x1c>
 8007a4e:	6023      	str	r3, [r4, #0]
 8007a50:	bd38      	pop	{r3, r4, r5, pc}
 8007a52:	bf00      	nop
 8007a54:	20000f28 	.word	0x20000f28

08007a58 <_isatty_r>:
 8007a58:	b538      	push	{r3, r4, r5, lr}
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	4d05      	ldr	r5, [pc, #20]	; (8007a74 <_isatty_r+0x1c>)
 8007a5e:	4604      	mov	r4, r0
 8007a60:	4608      	mov	r0, r1
 8007a62:	602b      	str	r3, [r5, #0]
 8007a64:	f7fa fa3a 	bl	8001edc <_isatty>
 8007a68:	1c43      	adds	r3, r0, #1
 8007a6a:	d102      	bne.n	8007a72 <_isatty_r+0x1a>
 8007a6c:	682b      	ldr	r3, [r5, #0]
 8007a6e:	b103      	cbz	r3, 8007a72 <_isatty_r+0x1a>
 8007a70:	6023      	str	r3, [r4, #0]
 8007a72:	bd38      	pop	{r3, r4, r5, pc}
 8007a74:	20000f28 	.word	0x20000f28

08007a78 <_init>:
 8007a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a7a:	bf00      	nop
 8007a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a7e:	bc08      	pop	{r3}
 8007a80:	469e      	mov	lr, r3
 8007a82:	4770      	bx	lr

08007a84 <_fini>:
 8007a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a86:	bf00      	nop
 8007a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a8a:	bc08      	pop	{r3}
 8007a8c:	469e      	mov	lr, r3
 8007a8e:	4770      	bx	lr
